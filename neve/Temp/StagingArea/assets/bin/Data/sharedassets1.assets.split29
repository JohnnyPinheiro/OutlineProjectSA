creenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 34785
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34786
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 34787
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 34788
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34789
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 34790
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 34791
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 34792
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34793
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 34794
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 34795
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 34796
    //IF
    if(tb19){
        //Instruction 34797
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 34798
        //IF
        if(tb19){
            //Instruction 34799
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34800
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 34801
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 34802
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 34803
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 34804
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34805
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34806
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34807
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34808
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34809
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34810
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34811
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 34812
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34813
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 34814
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 34815
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 34816
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34817
            //FRC
            t0 = fract(t0);
            //Instruction 34818
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34819
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 34820
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34821
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34822
            //ADD
            t0 = t0 + t0;
            //Instruction 34823
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 34824
            //LT
            tb20 = t4.w<0.0;
            //Instruction 34825
            //MOV
            t4.y = (-t4.w);
            //Instruction 34826
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 34827
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 34828
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 34829
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 34830
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 34831
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 34832
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 34833
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34834
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34835
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 34836
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 34837
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34838
            //MUL
            t20 = t20 * t21;
            //Instruction 34839
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 34840
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34841
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34842
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34843
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34844
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 34845
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 34846
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34847
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 34848
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34849
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 34850
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 34851
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 34852
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 34853
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34854
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 34855
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 34856
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 34857
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34858
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 34859
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 34860
        //ELSE
        } else {
            //Instruction 34861
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34862
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 34863
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34864
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 34865
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 34866
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 34867
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 34868
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34869
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 34870
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 34871
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34872
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34873
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34874
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 34875
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34876
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34877
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 34878
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 34879
            //LT
            tb19 = t0.w<0.0;
            //Instruction 34880
            //MOV
            t0.y = (-t0.w);
            //Instruction 34881
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 34882
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 34883
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 34884
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 34885
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 34886
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 34887
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 34888
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34889
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34890
            //MUL
            t21 = t21 * t4.x;
            //Instruction 34891
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 34892
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 34893
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34894
        //ENDIF
        }
        //Instruction 34895
    //ELSE
    } else {
        //Instruction 34896
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 34897
    //ENDIF
    }
    //Instruction 34898
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 34899
    //SQRT
    t19 = sqrt(t19);
    //Instruction 34900
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34901
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 34902
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 34903
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 34904
    //NE
    tb3 = t20!=0.0;
    //Instruction 34905
    //LOG
    t9 = log2(t20);
    //Instruction 34906
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 34907
    //EXP
    t9 = exp2(t9);
    //Instruction 34908
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 34909
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34910
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34911
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 34912
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 34913
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34914
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 34915
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34916
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 34917
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 34918
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 34919
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34920
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 34921
    //MUL
    t20 = t20 * t3.x;
    //Instruction 34922
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 34923
    //MOV
    t3.y = t2.y;
    //Instruction 34924
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 34925
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 34926
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 34927
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 34928
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 34929
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34930
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 34931
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 34932
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 34933
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 34934
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 34935
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 34936
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 34937
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 34938
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 34939
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 34940
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 34941
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 34942
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 34943
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 34944
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 34945
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 34946
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 34947
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 34948
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 34949
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 34950
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 34951
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 34952
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 34953
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 34954
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 34955
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 34956
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 34957
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 34958
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 34959
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34960
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34961
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34962
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 34963
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34964
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 34965
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 34966
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 34967
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 34968
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 34969
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 34970
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 34758
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34759
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 34760
    //MOV
    t1.x = t16_0.x;
    //Instruction 34761
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 34762
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34763
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34764
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34765
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34766
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34767
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34768
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34769
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34770
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 34771
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34772
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 34773
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 34774
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 34775
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 34776
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 34777
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 34778
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34779
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 34780
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 34781
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 34782
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34783
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34784
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 34322
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34323
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34324
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 34325
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34326
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 34327
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 34328
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 34329
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 34330
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34331
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34332
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 34333
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34334
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34335
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34336
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 34337
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34338
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 34339
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 34340
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 34341
    //IF
    if(tb22){
        //Instruction 34342
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 34343
        //IF
        if(tb22){
            //Instruction 34344
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34345
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34346
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34347
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 34348
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 34349
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34350
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34351
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34352
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34353
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34354
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 34355
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 34356
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34357
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34358
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 34359
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34360
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34361
            //FRC
            t2 = fract(t2);
            //Instruction 34362
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34363
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34364
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34365
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34366
            //ADD
            t2 = t2 + t2;
            //Instruction 34367
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34368
            //LT
            tb24 = t5.w<0.0;
            //Instruction 34369
            //MOV
            t5.y = (-t5.w);
            //Instruction 34370
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34371
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 34372
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 34373
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 34374
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 34375
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 34376
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 34377
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34378
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34379
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34380
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 34381
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34382
            //MUL
            t24 = t24 * t25;
            //Instruction 34383
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 34384
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34385
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34386
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34387
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34388
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34389
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34390
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34391
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34392
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34393
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34394
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34395
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34396
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 34397
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34398
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 34399
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 34400
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34401
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34402
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34403
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34404
        //ELSE
        } else {
            //Instruction 34405
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34406
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34407
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34408
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34409
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34410
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34411
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34412
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34413
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34414
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34415
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34416
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34417
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34418
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34419
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34420
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34421
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34422
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34423
            //MOV
            t2.y = (-t2.w);
            //Instruction 34424
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34425
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34426
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34427
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34428
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 34429
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 34430
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34431
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34432
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34433
            //MUL
            t24 = t24 * t5.x;
            //Instruction 34434
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 34435
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34436
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34437
        //ENDIF
        }
        //Instruction 34438
    //ELSE
    } else {
        //Instruction 34439
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34440
    //ENDIF
    }
    //Instruction 34441
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34442
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34443
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34444
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 34445
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 34446
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 34447
    //NE
    tb24 = t22!=0.0;
    //Instruction 34448
    //LOG
    t4.x = log2(t22);
    //Instruction 34449
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34450
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34451
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 34452
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34453
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34454
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34455
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34456
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34457
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34458
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34459
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34460
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34461
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 34462
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34463
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 34464
    //MUL
    t22 = t22 * t24;
    //Instruction 34465
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 34466
    //MOV
    t4.y = t3.y;
    //Instruction 34467
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 34468
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34469
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 34470
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34471
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 34472
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34473
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34474
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34475
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34476
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34477
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 34478
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 34479
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34480
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34481
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34482
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34483
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34484
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34485
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34486
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34487
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34488
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34489
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34490
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 34491
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 34492
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 34493
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 34494
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 34495
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 34496
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34497
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34498
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 34499
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 34500
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 34501
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34502
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 34503
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 34504
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 34505
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 34506
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34507
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34508
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 34509
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 34510
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 34511
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 34512
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 34513
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 34281
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34282
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 34283
    //MOV
    t1.x = t16_0.x;
    //Instruction 34284
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 34285
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34286
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34287
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34288
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34289
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34290
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34291
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34292
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34293
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 34294
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 34295
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 34296
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34297
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34298
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34299
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34300
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 34301
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 34302
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34303
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34304
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 34305
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 34306
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 34307
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 34308
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 34309
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 34310
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 34311
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34312
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34313
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 34314
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 34315
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 34316
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 34317
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 34318
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 34319
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34320
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34321
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 34389
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34390
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34391
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 34392
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34393
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 34394
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 34395
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 34396
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 34397
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34398
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34399
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 34400
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34401
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34402
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34403
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 34404
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34405
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 34406
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 34407
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 34408
    //IF
    if(tb22){
        //Instruction 34409
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 34410
        //IF
        if(tb22){
            //Instruction 34411
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34412
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34413
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34414
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 34415
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 34416
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34417
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34418
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34419
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34420
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34421
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 34422
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 34423
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34424
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34425
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 34426
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34427
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34428
            //FRC
            t2 = fract(t2);
            //Instruction 34429
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34430
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34431
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34432
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34433
            //ADD
            t2 = t2 + t2;
            //Instruction 34434
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34435
            //LT
            tb24 = t5.w<0.0;
            //Instruction 34436
            //MOV
            t5.y = (-t5.w);
            //Instruction 34437
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34438
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 34439
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 34440
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 34441
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 34442
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 34443
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 34444
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34445
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34446
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34447
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 34448
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34449
            //MUL
            t24 = t24 * t25;
            //Instruction 34450
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 34451
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34452
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34453
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34454
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34455
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34456
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34457
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34458
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34459
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34460
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34461
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34462
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34463
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 34464
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34465
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 34466
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 34467
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34468
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34469
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34470
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34471
        //ELSE
        } else {
            //Instruction 34472
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34473
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34474
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34475
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34476
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34477
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34478
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34479
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34480
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34481
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34482
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34483
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34484
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34485
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34486
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34487
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34488
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34489
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34490
            //MOV
            t2.y = (-t2.w);
            //Instruction 34491
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34492
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34493
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34494
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34495
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 34496
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 34497
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34498
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34499
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34500
            //MUL
            t24 = t24 * t5.x;
            //Instruction 34501
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 34502
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34503
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34504
        //ENDIF
        }
        //Instruction 34505
    //ELSE
    } else {
        //Instruction 34506
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34507
    //ENDIF
    }
    //Instruction 34508
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34509
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34510
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34511
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 34512
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 34513
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 34514
    //NE
    tb24 = t22!=0.0;
    //Instruction 34515
    //LOG
    t4.x = log2(t22);
    //Instruction 34516
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34517
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34518
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 34519
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34520
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34521
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34522
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34523
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34524
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34525
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34526
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34527
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34528
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 34529
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34530
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 34531
    //MUL
    t22 = t22 * t24;
    //Instruction 34532
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 34533
    //MOV
    t4.y = t3.y;
    //Instruction 34534
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 34535
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34536
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 34537
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34538
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 34539
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34540
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34541
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34542
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34543
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34544
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 34545
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 34546
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34547
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34548
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34549
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34550
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34551
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34552
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34553
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34554
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34555
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34556
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34557
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 34558
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 34559
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 34560
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 34561
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 34562
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 34563
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34564
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34565
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 34566
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 34567
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 34568
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34569
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 34570
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 34571
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 34572
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 34573
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34574
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34575
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 34576
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 34577
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 34578
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 34579
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 34580
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 34359
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34360
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 34361
    //MOV
    t1.x = t16_0.x;
    //Instruction 34362
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 34363
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34364
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34365
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34366
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34367
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34368
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34369
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34370
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34371
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 34372
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 34373
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 34374
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34375
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34376
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34377
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34378
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 34379
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 34380
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34381
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34382
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 34383
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 34384
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 34385
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 34386
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34387
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34388
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 blendColor_13;
  mediump vec4 diffuseColor_14;
  mediump vec2 projUV_15;
  mediump vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_15.x = tmpvar_16.x;
  projUV_15.y = ((fract(tmpvar_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_15).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_14 = tmpvar_18;
  tmpvar_11 = (diffuseColor_14.w * _Color.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_13 = tmpvar_19;
  diffuseColor_14.xyz = mix (blendColor_13.xyz, diffuseColor_14.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_14.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_14.x, max (diffuseColor_14.y, diffuseColor_14.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_14.xyz = clamp ((tmpvar_20 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_14.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_5 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_5.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_4 = tmpvar_28;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_3.xyz = c_29.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 35019
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35020
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35021
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35022
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35023
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35024
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35025
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35026
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35027
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35028
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35029
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35030
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35031
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35032
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35033
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35034
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35035
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35036
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35037
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 35038
    //IF
    if(tb22){
        //Instruction 35039
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 35040
        //IF
        if(tb22){
            //Instruction 35041
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35042
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35043
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35044
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 35045
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35046
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 35047
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35048
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35049
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35050
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35051
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35052
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35053
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35054
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35055
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35056
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35057
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35058
            //FRC
            t2 = fract(t2);
            //Instruction 35059
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35060
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 35061
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35062
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35063
            //ADD
            t2 = t2 + t2;
            //Instruction 35064
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 35065
            //LT
            tb24 = t5.w<0.0;
            //Instruction 35066
            //MOV
            t5.y = (-t5.w);
            //Instruction 35067
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35068
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 35069
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 35070
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 35071
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 35072
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 35073
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35074
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35075
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35076
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 35077
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 35078
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35079
            //MUL
            t24 = t24 * t25;
            //Instruction 35080
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 35081
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35082
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35083
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35084
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35085
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35086
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35087
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35088
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35089
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35090
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35091
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35092
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35093
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 35094
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35095
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35096
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35097
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35098
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35099
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 35100
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35101
        //ELSE
        } else {
            //Instruction 35102
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35103
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35104
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35105
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35106
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35107
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35108
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35109
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35110
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35111
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35112
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35113
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35114
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35115
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35116
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35117
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35118
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35119
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35120
            //MOV
            t2.y = (-t2.w);
            //Instruction 35121
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35122
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35123
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35124
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35125
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35126
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35127
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35128
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35129
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35130
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35131
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35132
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35133
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35134
        //ENDIF
        }
        //Instruction 35135
    //ELSE
    } else {
        //Instruction 35136
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 35137
    //ENDIF
    }
    //Instruction 35138
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35139
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35140
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35141
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35142
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35143
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35144
    //NE
    tb24 = t22!=0.0;
    //Instruction 35145
    //LOG
    t4.x = log2(t22);
    //Instruction 35146
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35147
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35148
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35149
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35150
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35151
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35152
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35153
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35154
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35155
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35156
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35157
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35158
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35159
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35160
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35161
    //MUL
    t22 = t22 * t24;
    //Instruction 35162
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35163
    //MOV
    t4.y = t3.y;
    //Instruction 35164
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35165
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35166
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35167
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35168
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35169
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35170
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35171
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35172
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35173
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35174
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35175
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35176
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35177
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35178
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35179
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35180
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35181
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35182
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35183
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35184
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35185
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35186
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35187
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35188
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35189
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35190
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35191
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35192
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35193
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35194
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35195
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35196
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35197
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35198
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35199
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35200
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35201
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35202
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35203
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35204
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35205
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35206
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35207
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35208
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 35209
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 35210
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
highp vec3 t2;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp float t10_4;
mediump vec3 t16_5;
bool tb7;
mediump float t16_12;
lowp float t10_12;
mediump float t16_15;
highp float t17;
void main()
{
    //Instruction 34971
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34972
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 34973
    //MOV
    t1.x = t16_0.x;
    //Instruction 34974
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 34975
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34976
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 34977
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 34978
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34979
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34980
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34981
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34982
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34983
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 34984
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 34985
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 34986
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34987
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34988
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34989
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34990
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 34991
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 34992
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34993
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34994
    //MUL
    t16_1 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 34995
    //MAD
    t16_1 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_1;
    //Instruction 34996
    //MAD
    t16_1 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_1;
    //Instruction 34997
    //ADD
    t16_1 = t16_1 + _LightMatrix0[3];
    //Instruction 34998
    //DIV
    t16_3.xy = t16_1.xy / t16_1.ww;
    //Instruction 34999
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 35000
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 35001
    //LT
    tb7 = 0.0<t16_1.z;
    //Instruction 35002
    //DP3
    t16_12 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 35003
    //SAMPLE
    t10_12 = texture(_LightTextureB0, vec2(t16_12)).w;
    //Instruction 35004
    //MOVC
    t10_4 = (tb7) ? 1.0 : 0.0;
    //Instruction 35005
    //MUL
    t10_4 = t10_2.x * t10_4;
    //Instruction 35006
    //MUL
    t10_4 = t10_12 * t10_4;
    //Instruction 35007
    //MUL
    t16_3.xyz = vec3(t10_4) * _LightColor0.xyz;
    //Instruction 35008
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 35009
    //ADD
    t2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35010
    //DP3
    t17 = dot(t2.xyz, t2.xyz);
    //Instruction 35011
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 35012
    //MUL
    t2.xyz = vec3(t17) * t2.xyz;
    //Instruction 35013
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, t2.xyz);
    //Instruction 35014
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 35015
    //MUL
    t16_0.xyz = vec3(t16_15) * t16_0.xyz;
    //Instruction 35016
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 35017
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35018
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, tmpvar_20).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 35254
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35255
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35256
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35257
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35258
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35259
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35260
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35261
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35262
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35263
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35264
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35265
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35266
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35267
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35268
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35269
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35270
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35271
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35272
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 35273
    //IF
    if(tb22){
        //Instruction 35274
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 35275
        //IF
        if(tb22){
            //Instruction 35276
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35277
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35278
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35279
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 35280
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35281
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 35282
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35283
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35284
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35285
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35286
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35287
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35288
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35289
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35290
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35291
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35292
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35293
            //FRC
            t2 = fract(t2);
            //Instruction 35294
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35295
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 35296
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35297
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35298
            //ADD
            t2 = t2 + t2;
            //Instruction 35299
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 35300
            //LT
            tb24 = t5.w<0.0;
            //Instruction 35301
            //MOV
            t5.y = (-t5.w);
            //Instruction 35302
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35303
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 35304
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 35305
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 35306
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 35307
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 35308
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35309
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35310
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35311
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 35312
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 35313
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35314
            //MUL
            t24 = t24 * t25;
            //Instruction 35315
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 35316
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35317
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35318
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35319
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35320
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35321
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35322
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35323
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35324
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35325
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35326
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35327
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35328
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 35329
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35330
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35331
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35332
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35333
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35334
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 35335
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35336
        //ELSE
        } else {
            //Instruction 35337
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35338
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35339
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35340
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35341
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35342
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35343
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35344
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35345
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35346
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35347
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35348
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35349
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35350
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35351
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35352
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35353
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35354
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35355
            //MOV
            t2.y = (-t2.w);
            //Instruction 35356
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35357
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35358
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35359
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35360
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35361
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35362
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35363
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35364
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35365
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35366
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35367
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35368
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35369
        //ENDIF
        }
        //Instruction 35370
    //ELSE
    } else {
        //Instruction 35371
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 35372
    //ENDIF
    }
    //Instruction 35373
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35374
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35375
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35376
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35377
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35378
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35379
    //NE
    tb24 = t22!=0.0;
    //Instruction 35380
    //LOG
    t4.x = log2(t22);
    //Instruction 35381
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35382
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35383
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35384
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35385
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35386
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35387
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35388
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35389
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35390
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35391
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35392
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35393
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35394
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35395
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35396
    //MUL
    t22 = t22 * t24;
    //Instruction 35397
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35398
    //MOV
    t4.y = t3.y;
    //Instruction 35399
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35400
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35401
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35402
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35403
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35404
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35405
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35406
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35407
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35408
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35409
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35410
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35411
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35412
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35413
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35414
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35415
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35416
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35417
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35418
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35419
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35420
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35421
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35422
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35423
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35424
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35425
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35426
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35427
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35428
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35429
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35430
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35431
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35432
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35433
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35434
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35435
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35436
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35437
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35438
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35439
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35440
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35441
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35442
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35443
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 35444
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 35445
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp float t10_5;
mediump float t16_12;
highp float t13;
void main()
{
    //Instruction 35211
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 35212
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 35213
    //MOV
    t1.x = t16_0.x;
    //Instruction 35214
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 35215
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35216
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 35217
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35218
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35219
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 35220
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 35221
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 35222
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 35223
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 35224
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 35225
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 35226
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 35227
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 35228
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 35229
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 35230
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 35231
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 35232
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 35233
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35234
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 35235
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 35236
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 35237
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 35238
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 35239
    //SAMPLE
    t10_5 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 35240
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 35241
    //MUL
    t16_1 = t10_5 * t10_1.x;
    //Instruction 35242
    //MUL
    t16_3.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 35243
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 35244
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35245
    //DP3
    t13 = dot(t1.xyz, t1.xyz);
    //Instruction 35246
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35247
    //MUL
    t1.xyz = vec3(t13) * t1.xyz;
    //Instruction 35248
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35249
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 35250
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 35251
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 35252
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35253
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, tmpvar_20).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 34617
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34618
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34619
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 34620
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34621
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 34622
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 34623
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 34624
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 34625
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34626
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34627
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 34628
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34629
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34630
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34631
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 34632
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34633
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 34634
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 34635
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 34636
    //IF
    if(tb22){
        //Instruction 34637
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 34638
        //IF
        if(tb22){
            //Instruction 34639
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34640
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34641
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34642
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 34643
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 34644
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34645
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34646
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34647
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34648
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34649
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 34650
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 34651
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34652
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34653
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 34654
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34655
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34656
            //FRC
            t2 = fract(t2);
            //Instruction 34657
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34658
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34659
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34660
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34661
            //ADD
            t2 = t2 + t2;
            //Instruction 34662
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34663
            //LT
            tb24 = t5.w<0.0;
            //Instruction 34664
            //MOV
            t5.y = (-t5.w);
            //Instruction 34665
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34666
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 34667
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 34668
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 34669
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 34670
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 34671
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 34672
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34673
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34674
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34675
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 34676
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34677
            //MUL
            t24 = t24 * t25;
            //Instruction 34678
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 34679
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34680
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34681
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34682
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34683
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34684
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34685
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34686
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34687
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34688
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34689
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34690
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34691
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 34692
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34693
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 34694
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 34695
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34696
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34697
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 34698
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34699
        //ELSE
        } else {
            //Instruction 34700
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34701
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34702
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34703
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34704
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34705
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34706
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34707
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34708
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34709
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34710
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34711
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34712
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34713
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34714
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34715
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34716
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34717
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34718
            //MOV
            t2.y = (-t2.w);
            //Instruction 34719
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34720
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34721
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34722
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34723
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 34724
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 34725
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34726
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34727
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34728
            //MUL
            t24 = t24 * t5.x;
            //Instruction 34729
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 34730
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34731
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34732
        //ENDIF
        }
        //Instruction 34733
    //ELSE
    } else {
        //Instruction 34734
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34735
    //ENDIF
    }
    //Instruction 34736
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34737
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34738
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34739
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 34740
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 34741
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 34742
    //NE
    tb24 = t22!=0.0;
    //Instruction 34743
    //LOG
    t4.x = log2(t22);
    //Instruction 34744
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34745
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34746
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 34747
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34748
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34749
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34750
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34751
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34752
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34753
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34754
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34755
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34756
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 34757
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34758
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 34759
    //MUL
    t22 = t22 * t24;
    //Instruction 34760
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 34761
    //MOV
    t4.y = t3.y;
    //Instruction 34762
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 34763
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 34764
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 34765
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34766
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 34767
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34768
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34769
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34770
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34771
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34772
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 34773
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 34774
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34775
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34776
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34777
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34778
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34779
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34780
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34781
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34782
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34783
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34784
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34785
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 34786
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 34787
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 34788
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 34789
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 34790
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 34791
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34792
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34793
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 34794
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 34795
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 34796
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34797
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 34798
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 34799
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 34800
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 34801
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 34802
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34803
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 34804
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 34805
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 34806
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 34807
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 34808
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 34581
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 34582
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 34583
    //MOV
    t1.x = t16_0.x;
    //Instruction 34584
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 34585
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34586
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34587
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34588
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34589
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34590
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 34591
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 34592
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34593
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 34594
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 34595
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 34596
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34597
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34598
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34599
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34600
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 34601
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 34602
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34603
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 34604
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 34605
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 34606
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 34607
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 34608
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 34609
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 34610
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34611
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 34612
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 34613
    //MUL
    t16_0.xyz = vec3(t16_12) * t16_0.xyz;
    //Instruction 34614
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34615
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34616
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  lowp vec3 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  lowp vec3 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD7.xy / xlv_TEXCOORD7.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20).xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, tmpvar_21);
  lowp float tmpvar_23;
  tmpvar_23 = texture2D (_LightTexture0, vec2(tmpvar_22)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 34560
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34561
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34562
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 34563
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34564
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 34565
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 34566
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 34567
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 34568
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34569
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34570
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 34571
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34572
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34573
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34574
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 34575
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34576
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 34577
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 34578
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 34579
    //IF
    if(tb25){
        //Instruction 34580
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 34581
        //IF
        if(tb25){
            //Instruction 34582
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34583
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34584
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34585
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 34586
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 34587
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34588
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34589
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34590
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34591
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34592
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 34593
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 34594
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34595
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34596
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 34597
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34598
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34599
            //FRC
            t2 = fract(t2);
            //Instruction 34600
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34601
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34602
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34603
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34604
            //ADD
            t2 = t2 + t2;
            //Instruction 34605
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34606
            //LT
            tb27 = t5.w<0.0;
            //Instruction 34607
            //MOV
            t5.y = (-t5.w);
            //Instruction 34608
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34609
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 34610
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 34611
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 34612
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 34613
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 34614
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 34615
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34616
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34617
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34618
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 34619
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34620
            //MUL
            t27 = t27 * t28;
            //Instruction 34621
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 34622
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34623
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34624
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34625
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34626
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34627
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34628
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34629
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34630
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34631
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34632
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34633
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34634
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 34635
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34636
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 34637
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 34638
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34639
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34640
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34641
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34642
        //ELSE
        } else {
            //Instruction 34643
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34644
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34645
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34646
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34647
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34648
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34649
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34650
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34651
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34652
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34653
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34654
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34655
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34656
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34657
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34658
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34659
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34660
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34661
            //MOV
            t2.y = (-t2.w);
            //Instruction 34662
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34663
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34664
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34665
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34666
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 34667
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 34668
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34669
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34670
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34671
            //MUL
            t27 = t27 * t5.x;
            //Instruction 34672
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 34673
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34674
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34675
        //ENDIF
        }
        //Instruction 34676
    //ELSE
    } else {
        //Instruction 34677
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34678
    //ENDIF
    }
    //Instruction 34679
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34680
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34681
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34682
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 34683
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 34684
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 34685
    //NE
    tb27 = t25!=0.0;
    //Instruction 34686
    //LOG
    t4.x = log2(t25);
    //Instruction 34687
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34688
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34689
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 34690
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34691
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34692
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34693
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34694
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34695
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34696
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34697
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34698
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34699
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 34700
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34701
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 34702
    //MUL
    t25 = t25 * t27;
    //Instruction 34703
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 34704
    //MOV
    t4.y = t3.y;
    //Instruction 34705
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 34706
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34707
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 34708
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34709
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 34710
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34711
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34712
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34713
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34714
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34715
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 34716
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 34717
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34718
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34719
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34720
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34721
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34722
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34723
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34724
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34725
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34726
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34727
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34728
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 34729
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 34730
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 34731
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 34732
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 34733
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 34734
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34735
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34736
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 34737
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 34738
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 34739
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34740
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 34741
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34742
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 34743
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 34744
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 34745
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 34746
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 34747
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 34748
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 34749
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 34750
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 34751
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 34752
    //MOV
    t6.x = t4.z;
    //Instruction 34753
    //MOV
    t6.y = t5.x;
    //Instruction 34754
    //MOV
    t6.z = t0.x;
    //Instruction 34755
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 34756
    //MOV
    t6.x = t4.x;
    //Instruction 34757
    //MOV
    t6.y = t5.y;
    //Instruction 34758
    //MOV
    t6.z = t0.y;
    //Instruction 34759
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 34760
    //MOV
    t0.x = t4.y;
    //Instruction 34761
    //MOV
    t0.y = t5.z;
    //Instruction 34762
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 34763
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 34764
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 34765
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 34766
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 34767
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 34768
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 34769
    //MOV
    vs_TEXCOORD7.xyz = t3.xyz;
    //Instruction 34770
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 34514
    //DIV
    t16_0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.zz;
    //Instruction 34515
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 34516
    //MOV
    t1.x = t16_0.x;
    //Instruction 34517
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 34518
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34519
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34520
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34521
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34522
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34523
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 34524
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 34525
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34526
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 34527
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 34528
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 34529
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34530
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34531
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34532
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34533
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 34534
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 34535
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34536
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 34537
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 34538
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 34539
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 34540
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 34541
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 34542
    //SAMPLE
    t10_1.x = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 34543
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 34544
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34545
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34546
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34547
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34548
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34549
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 34550
    //MAD
    t10_4.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 34551
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 34552
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 34553
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 34554
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 34555
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 34556
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 34557
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34558
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34559
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  lowp vec3 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  lowp vec3 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD7.xy / xlv_TEXCOORD7.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 35481
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35482
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35483
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 35484
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35485
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 35486
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 35487
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 35488
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 35489
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35490
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35491
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 35492
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35493
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35494
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35495
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 35496
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 35497
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 35498
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 35499
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 35500
    //IF
    if(tb25){
        //Instruction 35501
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 35502
        //IF
        if(tb25){
            //Instruction 35503
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35504
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35505
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35506
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 35507
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 35508
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 35509
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35510
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35511
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35512
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35513
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 35514
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 35515
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35516
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35517
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 35518
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35519
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35520
            //FRC
            t2 = fract(t2);
            //Instruction 35521
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35522
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 35523
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35524
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35525
            //ADD
            t2 = t2 + t2;
            //Instruction 35526
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 35527
            //LT
            tb27 = t5.w<0.0;
            //Instruction 35528
            //MOV
            t5.y = (-t5.w);
            //Instruction 35529
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35530
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 35531
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 35532
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 35533
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 35534
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 35535
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 35536
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35537
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35538
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 35539
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 35540
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35541
            //MUL
            t27 = t27 * t28;
            //Instruction 35542
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 35543
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35544
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35545
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35546
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35547
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35548
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35549
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35550
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35551
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35552
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35553
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35554
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35555
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 35556
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35557
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 35558
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 35559
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35560
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35561
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 35562
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35563
        //ELSE
        } else {
            //Instruction 35564
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35565
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35566
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35567
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35568
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35569
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35570
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35571
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35572
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35573
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35574
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35575
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35576
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35577
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35578
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35579
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35580
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35581
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35582
            //MOV
            t2.y = (-t2.w);
            //Instruction 35583
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35584
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35585
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35586
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35587
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 35588
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 35589
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35590
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35591
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35592
            //MUL
            t27 = t27 * t5.x;
            //Instruction 35593
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 35594
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35595
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35596
        //ENDIF
        }
        //Instruction 35597
    //ELSE
    } else {
        //Instruction 35598
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 35599
    //ENDIF
    }
    //Instruction 35600
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35601
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35602
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35603
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 35604
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 35605
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 35606
    //NE
    tb27 = t25!=0.0;
    //Instruction 35607
    //LOG
    t4.x = log2(t25);
    //Instruction 35608
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35609
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35610
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 35611
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35612
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35613
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35614
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35615
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35616
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35617
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35618
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35619
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35620
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 35621
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35622
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 35623
    //MUL
    t25 = t25 * t27;
    //Instruction 35624
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 35625
    //MOV
    t4.y = t3.y;
    //Instruction 35626
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 35627
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 35628
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 35629
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35630
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 35631
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35632
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35633
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35634
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35635
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35636
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 35637
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 35638
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35639
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35640
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35641
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35642
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35643
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35644
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35645
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35646
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35647
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35648
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35649
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 35650
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 35651
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 35652
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 35653
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 35654
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 35655
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35656
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35657
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 35658
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 35659
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 35660
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35661
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 35662
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35663
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 35664
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 35665
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 35666
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 35667
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 35668
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35669
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 35670
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 35671
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 35672
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 35673
    //MOV
    t6.x = t4.z;
    //Instruction 35674
    //MOV
    t6.y = t5.x;
    //Instruction 35675
    //MOV
    t6.z = t0.x;
    //Instruction 35676
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 35677
    //MOV
    t6.x = t4.x;
    //Instruction 35678
    //MOV
    t6.y = t5.y;
    //Instruction 35679
    //MOV
    t6.z = t0.y;
    //Instruction 35680
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 35681
    //MOV
    t0.x = t4.y;
    //Instruction 35682
    //MOV
    t0.y = t5.z;
    //Instruction 35683
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 35684
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 35685
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35686
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 35687
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35688
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35689
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 35690
    //MOV
    vs_TEXCOORD7.xyz = t3.xyz;
    //Instruction 35691
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 35446
    //DIV
    t16_0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.zz;
    //Instruction 35447
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 35448
    //MOV
    t1.x = t16_0.x;
    //Instruction 35449
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 35450
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35451
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 35452
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35453
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35454
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 35455
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 35456
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 35457
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 35458
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 35459
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 35460
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 35461
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 35462
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 35463
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 35464
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 35465
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 35466
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 35467
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 35468
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 35469
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 35470
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 35471
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 35472
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 35473
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 35474
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 35475
    //DP3
    t16_18 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35476
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35477
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 35478
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 35479
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35480
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  lowp vec3 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  lowp vec3 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 blendColor_13;
  mediump vec4 diffuseColor_14;
  mediump vec2 projUV_15;
  mediump vec2 tmpvar_16;
  tmpvar_16 = (xlv_TEXCOORD7.xy / xlv_TEXCOORD7.z);
  projUV_15.x = tmpvar_16.x;
  projUV_15.y = ((fract(tmpvar_16.y) * 0.0625) + unity_LODFade.y);
  lowp float x_17;
  x_17 = (texture2D (_DitherMaskLOD2D, projUV_15).w - 0.5);
  if ((x_17 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_14 = tmpvar_18;
  tmpvar_11 = (diffuseColor_14.w * _Color.w);
  lowp vec4 tmpvar_19;
  tmpvar_19 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_13 = tmpvar_19;
  diffuseColor_14.xyz = mix (blendColor_13.xyz, diffuseColor_14.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_20;
  tmpvar_20 = mix (diffuseColor_14.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_14.x, max (diffuseColor_14.y, diffuseColor_14.z)) / max (tmpvar_20.x, max (tmpvar_20.y, tmpvar_20.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_14.xyz = clamp ((tmpvar_20 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_14.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_21;
  tmpvar_21 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_23;
  tmpvar_23 = (_LightMatrix0 * tmpvar_22);
  lightCoord_6 = tmpvar_23;
  lowp vec4 tmpvar_24;
  mediump vec2 P_25;
  P_25 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_24 = texture2D (_LightTexture0, P_25);
  highp vec3 LightCoord_26;
  LightCoord_26 = lightCoord_6.xyz;
  highp float tmpvar_27;
  tmpvar_27 = dot (LightCoord_26, LightCoord_26);
  lowp vec4 tmpvar_28;
  tmpvar_28 = texture2D (_LightTextureB0, vec2(tmpvar_27));
  mediump float tmpvar_29;
  tmpvar_29 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_24.w) * tmpvar_28.w);
  atten_5 = tmpvar_29;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_21);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_21);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_21);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_10 * tmpvar_1) * diff_32);
  c_31.w = tmpvar_11;
  c_30.w = c_31.w;
  c_30.xyz = c_31.xyz;
  c_4.xyz = c_30.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 34862
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34863
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34864
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 34865
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34866
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 34867
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 34868
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 34869
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 34870
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34871
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34872
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 34873
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34874
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34875
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34876
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 34877
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34878
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 34879
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 34880
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 34881
    //IF
    if(tb25){
        //Instruction 34882
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 34883
        //IF
        if(tb25){
            //Instruction 34884
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34885
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34886
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34887
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 34888
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 34889
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34890
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34891
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34892
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34893
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34894
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 34895
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 34896
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34897
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34898
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 34899
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34900
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34901
            //FRC
            t2 = fract(t2);
            //Instruction 34902
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34903
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34904
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34905
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34906
            //ADD
            t2 = t2 + t2;
            //Instruction 34907
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34908
            //LT
            tb27 = t5.w<0.0;
            //Instruction 34909
            //MOV
            t5.y = (-t5.w);
            //Instruction 34910
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34911
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 34912
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 34913
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 34914
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 34915
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 34916
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 34917
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34918
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34919
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34920
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 34921
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34922
            //MUL
            t27 = t27 * t28;
            //Instruction 34923
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 34924
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34925
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34926
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34927
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34928
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34929
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34930
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34931
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34932
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34933
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34934
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34935
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34936
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 34937
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34938
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 34939
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 34940
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34941
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34942
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34943
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34944
        //ELSE
        } else {
            //Instruction 34945
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34946
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34947
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34948
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34949
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34950
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34951
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34952
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34953
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34954
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34955
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34956
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34957
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34958
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34959
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34960
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34961
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34962
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34963
            //MOV
            t2.y = (-t2.w);
            //Instruction 34964
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34965
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34966
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34967
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34968
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 34969
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 34970
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34971
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34972
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34973
            //MUL
            t27 = t27 * t5.x;
            //Instruction 34974
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 34975
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34976
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34977
        //ENDIF
        }
        //Instruction 34978
    //ELSE
    } else {
        //Instruction 34979
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34980
    //ENDIF
    }
    //Instruction 34981
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34982
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34983
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34984
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 34985
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 34986
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 34987
    //NE
    tb27 = t25!=0.0;
    //Instruction 34988
    //LOG
    t4.x = log2(t25);
    //Instruction 34989
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34990
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34991
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 34992
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34993
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34994
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34995
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34996
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34997
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34998
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34999
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35000
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35001
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 35002
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35003
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 35004
    //MUL
    t25 = t25 * t27;
    //Instruction 35005
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 35006
    //MOV
    t4.y = t3.y;
    //Instruction 35007
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 35008
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 35009
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 35010
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35011
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 35012
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35013
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35014
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35015
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35016
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35017
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 35018
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 35019
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35020
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35021
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35022
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35023
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35024
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35025
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35026
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35027
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35028
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35029
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35030
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 35031
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 35032
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 35033
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 35034
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 35035
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 35036
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35037
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35038
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 35039
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 35040
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 35041
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35042
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 35043
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35044
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 35045
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 35046
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 35047
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 35048
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 35049
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35050
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 35051
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 35052
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 35053
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 35054
    //MOV
    t6.x = t4.z;
    //Instruction 35055
    //MOV
    t6.y = t5.x;
    //Instruction 35056
    //MOV
    t6.z = t0.x;
    //Instruction 35057
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 35058
    //MOV
    t6.x = t4.x;
    //Instruction 35059
    //MOV
    t6.y = t5.y;
    //Instruction 35060
    //MOV
    t6.z = t0.y;
    //Instruction 35061
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 35062
    //MOV
    t0.x = t4.y;
    //Instruction 35063
    //MOV
    t0.y = t5.z;
    //Instruction 35064
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 35065
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 35066
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35067
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 35068
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35069
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35070
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 35071
    //MOV
    vs_TEXCOORD7.xyz = t3.xyz;
    //Instruction 35072
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
highp vec3 t2;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
bool tb9;
mediump float t16_16;
lowp float t10_16;
mediump float t16_21;
highp float t23;
void main()
{
    //Instruction 34809
    //DIV
    t16_0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.zz;
    //Instruction 34810
    //FRC
    t16_7.x = fract(t16_0.y);
    //Instruction 34811
    //MOV
    t1.x = t16_0.x;
    //Instruction 34812
    //MAD
    t1.y = t16_7.x * 0.062500 + unity_LODFade.y;
    //Instruction 34813
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34814
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 34815
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 34816
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34817
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34818
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 34819
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 34820
    //ADD
    t16_7.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34821
    //MAD
    t16_0.xyz = t16_0.xxx * t16_7.xyz + t10_2.xyz;
    //Instruction 34822
    //MAX
    t16_21 = max(t16_0.z, t16_0.y);
    //Instruction 34823
    //MAX
    t16_21 = max(t16_21, t16_0.x);
    //Instruction 34824
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34825
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34826
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34827
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34828
    //DIV
    t16_21 = t16_21 / t16_3.x;
    //Instruction 34829
    //MAD
    t16_1.x = t16_21 * 0.500000 + 0.500000;
    //Instruction 34830
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34831
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 34832
    //MUL
    t16_1 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 34833
    //MAD
    t16_1 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_1;
    //Instruction 34834
    //MAD
    t16_1 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_1;
    //Instruction 34835
    //ADD
    t16_1 = t16_1 + _LightMatrix0[3];
    //Instruction 34836
    //DIV
    t16_3.xy = t16_1.xy / t16_1.ww;
    //Instruction 34837
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 34838
    //SAMPLE
    t10_2.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 34839
    //LT
    tb9 = 0.0<t16_1.z;
    //Instruction 34840
    //DP3
    t16_16 = dot(t16_1.xyz, t16_1.xyz);
    //Instruction 34841
    //SAMPLE
    t10_16 = texture(_LightTextureB0, vec2(t16_16)).w;
    //Instruction 34842
    //MOVC
    t10_4.x = (tb9) ? 1.0 : 0.0;
    //Instruction 34843
    //MUL
    t10_4.x = t10_2.x * t10_4.x;
    //Instruction 34844
    //MUL
    t10_4.x = t10_16 * t10_4.x;
    //Instruction 34845
    //MUL
    t16_3.xyz = t10_4.xxx * _LightColor0.xyz;
    //Instruction 34846
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34847
    //ADD
    t2.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34848
    //DP3
    t23 = dot(t2.xyz, t2.xyz);
    //Instruction 34849
    //RSQ
    t23 = inversesqrt(t23);
    //Instruction 34850
    //MUL
    t2.xyz = vec3(t23) * t2.xyz;
    //Instruction 34851
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 34852
    //MAD
    t10_4.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 34853
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 34854
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 34855
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 34856
    //DP3
    t16_21 = dot(t10_6.xyz, t2.xyz);
    //Instruction 34857
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 34858
    //MUL
    t16_0.xyz = vec3(t16_21) * t16_0.xyz;
    //Instruction 34859
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34860
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34861
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  lowp vec3 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  lowp vec3 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD7.xy / xlv_TEXCOORD7.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20).xyz;
  highp float tmpvar_22;
  tmpvar_22 = dot (tmpvar_21, tmpvar_21);
  lowp float tmpvar_23;
  tmpvar_23 = (texture2D (_LightTextureB0, vec2(tmpvar_22)).w * textureCube (_LightTexture0, tmpvar_21).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_23);
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_8 * tmpvar_1) * diff_26);
  c_25.w = tmpvar_9;
  c_24.w = c_25.w;
  c_24.xyz = c_25.xyz;
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 34819
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 34820
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 34821
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 34822
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 34823
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 34824
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 34825
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 34826
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 34827
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 34828
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 34829
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 34830
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 34831
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 34832
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 34833
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 34834
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34835
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 34836
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 34837
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 34838
    //IF
    if(tb25){
        //Instruction 34839
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 34840
        //IF
        if(tb25){
            //Instruction 34841
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 34842
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 34843
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 34844
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 34845
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 34846
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34847
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34848
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34849
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34850
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34851
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 34852
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 34853
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34854
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 34855
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 34856
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 34857
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 34858
            //FRC
            t2 = fract(t2);
            //Instruction 34859
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 34860
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 34861
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 34862
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 34863
            //ADD
            t2 = t2 + t2;
            //Instruction 34864
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 34865
            //LT
            tb27 = t5.w<0.0;
            //Instruction 34866
            //MOV
            t5.y = (-t5.w);
            //Instruction 34867
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 34868
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 34869
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 34870
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 34871
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 34872
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 34873
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 34874
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34875
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34876
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 34877
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 34878
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 34879
            //MUL
            t27 = t27 * t28;
            //Instruction 34880
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 34881
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34882
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34883
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 34884
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 34885
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 34886
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 34887
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 34888
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 34889
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 34890
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 34891
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 34892
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 34893
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 34894
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 34895
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 34896
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 34897
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 34898
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 34899
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 34900
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 34901
        //ELSE
        } else {
            //Instruction 34902
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 34903
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 34904
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34905
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 34906
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 34907
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 34908
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 34909
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 34910
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 34911
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 34912
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 34913
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 34914
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 34915
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 34916
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 34917
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 34918
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 34919
            //LT
            tb0 = t2.w<0.0;
            //Instruction 34920
            //MOV
            t2.y = (-t2.w);
            //Instruction 34921
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 34922
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 34923
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 34924
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 34925
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 34926
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 34927
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 34928
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 34929
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 34930
            //MUL
            t27 = t27 * t5.x;
            //Instruction 34931
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 34932
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 34933
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 34934
        //ENDIF
        }
        //Instruction 34935
    //ELSE
    } else {
        //Instruction 34936
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 34937
    //ENDIF
    }
    //Instruction 34938
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 34939
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 34940
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 34941
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 34942
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 34943
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 34944
    //NE
    tb27 = t25!=0.0;
    //Instruction 34945
    //LOG
    t4.x = log2(t25);
    //Instruction 34946
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 34947
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 34948
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 34949
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 34950
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 34951
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 34952
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 34953
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 34954
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 34955
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 34956
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 34957
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 34958
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 34959
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 34960
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 34961
    //MUL
    t25 = t25 * t27;
    //Instruction 34962
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 34963
    //MOV
    t4.y = t3.y;
    //Instruction 34964
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 34965
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 34966
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 34967
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 34968
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 34969
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 34970
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 34971
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 34972
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 34973
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 34974
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 34975
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 34976
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 34977
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 34978
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 34979
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 34980
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 34981
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 34982
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 34983
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 34984
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 34985
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 34986
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 34987
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 34988
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 34989
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 34990
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 34991
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 34992
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 34993
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 34994
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 34995
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 34996
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 34997
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 34998
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 34999
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 35000
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35001
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 35002
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 35003
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 35004
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 35005
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 35006
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35007
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 35008
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 35009
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 35010
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 35011
    //MOV
    t6.x = t4.z;
    //Instruction 35012
    //MOV
    t6.y = t5.x;
    //Instruction 35013
    //MOV
    t6.z = t0.x;
    //Instruction 35014
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 35015
    //MOV
    t6.x = t4.x;
    //Instruction 35016
    //MOV
    t6.y = t5.y;
    //Instruction 35017
    //MOV
    t6.z = t0.y;
    //Instruction 35018
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 35019
    //MOV
    t0.x = t4.y;
    //Instruction 35020
    //MOV
    t0.y = t5.z;
    //Instruction 35021
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 35022
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 35023
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35024
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 35025
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35026
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35027
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 35028
    //MOV
    vs_TEXCOORD7.xyz = t3.xyz;
    //Instruction 35029
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec3 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
lowp float t10_7;
mediump float t16_18;
highp float t19;
void main()
{
    //Instruction 34771
    //DIV
    t16_0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.zz;
    //Instruction 34772
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 34773
    //MOV
    t1.x = t16_0.x;
    //Instruction 34774
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 34775
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 34776
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 34777
    //LT
    tb1 = t16_1<0.0;
    //Instruction 34778
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 34779
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 34780
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 34781
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 34782
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 34783
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 34784
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 34785
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 34786
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 34787
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 34788
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 34789
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 34790
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 34791
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 34792
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 34793
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 34794
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 34795
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 34796
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 34797
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 34798
    //DP3
    t16_1 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 34799
    //SAMPLE
    t10_7 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 34800
    //SAMPLE
    t10_1.x = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 34801
    //MUL
    t16_1 = t10_7 * t10_1.x;
    //Instruction 34802
    //MUL
    t16_3.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 34803
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 34804
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 34805
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 34806
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 34807
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 34808
    //SAMPLE
    t10_2.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 34809
    //MAD
    t10_4.xyz = t10_2.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 34810
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 34811
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 34812
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 34813
    //DP3
    t16_18 = dot(t10_5.xyz, t1.xyz);
    //Instruction 34814
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 34815
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 34816
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 34817
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 34818
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  lowp vec3 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  lowp vec3 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD4 = tmpvar_6;
  xlv_TEXCOORD5 = tmpvar_8;
  xlv_TEXCOORD6 = tmpvar_9;
  xlv_TEXCOORD7 = screenPos_56;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD7.xy / xlv_TEXCOORD7.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD6.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD6.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20).xy;
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, tmpvar_21).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_19);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_19);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_19);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 35733
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35734
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35735
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 35736
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35737
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 35738
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 35739
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 35740
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 35741
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35742
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35743
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 35744
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35745
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35746
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35747
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 35748
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 35749
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 35750
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 35751
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 35752
    //IF
    if(tb25){
        //Instruction 35753
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 35754
        //IF
        if(tb25){
            //Instruction 35755
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35756
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35757
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35758
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 35759
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 35760
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 35761
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35762
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35763
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35764
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35765
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 35766
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 35767
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35768
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35769
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 35770
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35771
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35772
            //FRC
            t2 = fract(t2);
            //Instruction 35773
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35774
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 35775
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35776
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35777
            //ADD
            t2 = t2 + t2;
            //Instruction 35778
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 35779
            //LT
            tb27 = t5.w<0.0;
            //Instruction 35780
            //MOV
            t5.y = (-t5.w);
            //Instruction 35781
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35782
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 35783
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 35784
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 35785
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 35786
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 35787
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 35788
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35789
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35790
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 35791
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 35792
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35793
            //MUL
            t27 = t27 * t28;
            //Instruction 35794
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 35795
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35796
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35797
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35798
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35799
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35800
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35801
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35802
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35803
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35804
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35805
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35806
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35807
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 35808
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35809
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 35810
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 35811
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35812
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35813
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 35814
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35815
        //ELSE
        } else {
            //Instruction 35816
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35817
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35818
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35819
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35820
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35821
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35822
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35823
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35824
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35825
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35826
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35827
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35828
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35829
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35830
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35831
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35832
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35833
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35834
            //MOV
            t2.y = (-t2.w);
            //Instruction 35835
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35836
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35837
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35838
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35839
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 35840
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 35841
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35842
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35843
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35844
            //MUL
            t27 = t27 * t5.x;
            //Instruction 35845
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 35846
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35847
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 35848
        //ENDIF
        }
        //Instruction 35849
    //ELSE
    } else {
        //Instruction 35850
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 35851
    //ENDIF
    }
    //Instruction 35852
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35853
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35854
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35855
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 35856
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 35857
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 35858
    //NE
    tb27 = t25!=0.0;
    //Instruction 35859
    //LOG
    t4.x = log2(t25);
    //Instruction 35860
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35861
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35862
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 35863
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35864
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35865
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35866
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35867
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35868
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35869
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35870
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35871
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35872
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 35873
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35874
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 35875
    //MUL
    t25 = t25 * t27;
    //Instruction 35876
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 35877
    //MOV
    t4.y = t3.y;
    //Instruction 35878
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 35879
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 35880
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 35881
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35882
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 35883
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35884
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35885
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35886
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35887
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35888
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 35889
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 35890
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35891
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35892
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35893
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35894
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35895
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35896
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35897
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35898
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35899
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35900
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35901
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 35902
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 35903
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 35904
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 35905
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 35906
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 35907
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35908
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35909
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 35910
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 35911
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 35912
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35913
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 35914
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35915
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 35916
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 35917
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 35918
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 35919
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 35920
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 35921
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 35922
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 35923
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 35924
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 35925
    //MOV
    t6.x = t4.z;
    //Instruction 35926
    //MOV
    t6.y = t5.x;
    //Instruction 35927
    //MOV
    t6.z = t0.x;
    //Instruction 35928
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 35929
    //MOV
    t6.x = t4.x;
    //Instruction 35930
    //MOV
    t6.y = t5.y;
    //Instruction 35931
    //MOV
    t6.z = t0.y;
    //Instruction 35932
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 35933
    //MOV
    t0.x = t4.y;
    //Instruction 35934
    //MOV
    t0.y = t5.z;
    //Instruction 35935
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 35936
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 35937
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35938
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 35939
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 35940
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 35941
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 35942
    //MOV
    vs_TEXCOORD7.xyz = t3.xyz;
    //Instruction 35943
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 35692
    //DIV
    t16_0.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.zz;
    //Instruction 35693
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 35694
    //MOV
    t1.x = t16_0.x;
    //Instruction 35695
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 35696
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35697
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 35698
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35699
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35700
    //MOV
    t16_0.x = vs_TEXCOORD6.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 35701
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 35702
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD6.xy).xyz;
    //Instruction 35703
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 35704
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 35705
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 35706
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 35707
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 35708
    //MAD
    t16_0.xyz = vs_TEXCOORD5.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 35709
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 35710
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 35711
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 35712
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 35713
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 35714
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 35715
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 35716
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 35717
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 35718
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 35719
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 35720
    //MUL
    t16_3.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 35721
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 35722
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 35723
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 35724
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 35725
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 35726
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 35727
    //DP3
    t16_18 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35728
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35729
    //MUL
    t16_0.xyz = vec3(t16_18) * t16_0.xyz;
    //Instruction 35730
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 35731
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35732
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 35104
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35105
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 35106
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 35107
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35108
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 35109
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 35110
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 35111
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35112
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 35113
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 35114
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 35115
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 35116
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 35117
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35118
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 35119
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 35120
    //FRC
    t2.x = fract(t2.x);
    //Instruction 35121
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 35122
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 35123
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 35124
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 35125
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 35126
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 35127
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35128
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 35129
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 35130
    //IF
    if(tb20){
        //Instruction 35131
        //IF
        if(tb19){
            //Instruction 35132
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35133
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35134
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35135
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 35136
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 35137
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35138
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35139
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35140
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35141
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35142
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35143
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35144
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 35145
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35146
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 35147
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 35148
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 35149
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35150
            //FRC
            t0 = fract(t0);
            //Instruction 35151
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35152
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 35153
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35154
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35155
            //ADD
            t0 = t0 + t0;
            //Instruction 35156
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 35157
            //LT
            tb20 = t5.w<0.0;
            //Instruction 35158
            //MOV
            t5.y = (-t5.w);
            //Instruction 35159
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35160
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 35161
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 35162
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 35163
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 35164
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 35165
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 35166
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35167
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35168
            //MUL
            t22 = t0.x * t22;
            //Instruction 35169
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 35170
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35171
            //MUL
            t20 = t20 * t21;
            //Instruction 35172
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 35173
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35174
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35175
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35176
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35177
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35178
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35179
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35180
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35181
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35182
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35183
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35184
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35185
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 35186
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35187
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 35188
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 35189
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35190
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35191
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35192
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35193
        //ELSE
        } else {
            //Instruction 35194
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35195
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 35196
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35197
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 35198
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35199
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35200
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 35201
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35202
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 35203
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 35204
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35205
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35206
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35207
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 35208
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35209
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35210
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 35211
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 35212
            //LT
            tb19 = t0.w<0.0;
            //Instruction 35213
            //MOV
            t0.y = (-t0.w);
            //Instruction 35214
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 35215
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 35216
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 35217
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 35218
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 35219
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 35220
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 35221
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35222
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35223
            //MUL
            t21 = t21 * t4.x;
            //Instruction 35224
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 35225
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35226
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35227
        //ENDIF
        }
        //Instruction 35228
    //ENDIF
    }
    //Instruction 35229
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 35230
    //SQRT
    t19 = sqrt(t19);
    //Instruction 35231
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35232
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 35233
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 35234
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 35235
    //NE
    tb3 = t20!=0.0;
    //Instruction 35236
    //LOG
    t9 = log2(t20);
    //Instruction 35237
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 35238
    //EXP
    t9 = exp2(t9);
    //Instruction 35239
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 35240
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35241
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35242
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 35243
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 35244
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35245
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 35246
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35247
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 35248
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 35249
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 35250
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35251
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 35252
    //MUL
    t20 = t20 * t3.x;
    //Instruction 35253
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 35254
    //MOV
    t3.y = t2.y;
    //Instruction 35255
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 35256
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 35257
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 35258
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 35259
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 35260
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35261
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 35262
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 35263
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 35264
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 35265
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 35266
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 35267
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 35268
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 35269
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 35270
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 35271
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 35272
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 35273
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 35274
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 35275
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 35276
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 35277
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 35278
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 35279
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 35280
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 35281
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 35282
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 35283
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 35284
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 35285
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 35286
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 35287
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 35288
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 35289
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 35290
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 35291
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 35292
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 35293
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 35294
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35295
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 35296
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 35297
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 35298
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 35073
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35074
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35075
    //MOV
    t1.x = t16_0.x;
    //Instruction 35076
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35077
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35078
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35079
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35080
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35081
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35082
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35083
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35084
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35085
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35086
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 35087
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 35088
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 35089
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 35090
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 35091
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 35092
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 35093
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35094
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35095
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 35096
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 35097
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 35098
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35099
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35100
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35101
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35102
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35103
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 35050
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35051
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 35052
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 35053
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35054
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 35055
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 35056
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 35057
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35058
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 35059
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 35060
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 35061
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 35062
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 35063
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35064
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 35065
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 35066
    //FRC
    t2.x = fract(t2.x);
    //Instruction 35067
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 35068
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 35069
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 35070
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 35071
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 35072
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 35073
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35074
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 35075
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 35076
    //IF
    if(tb20){
        //Instruction 35077
        //IF
        if(tb19){
            //Instruction 35078
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35079
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35080
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35081
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 35082
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 35083
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35084
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35085
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35086
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35087
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35088
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35089
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35090
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 35091
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35092
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 35093
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 35094
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 35095
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35096
            //FRC
            t0 = fract(t0);
            //Instruction 35097
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35098
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 35099
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35100
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35101
            //ADD
            t0 = t0 + t0;
            //Instruction 35102
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 35103
            //LT
            tb20 = t5.w<0.0;
            //Instruction 35104
            //MOV
            t5.y = (-t5.w);
            //Instruction 35105
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35106
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 35107
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 35108
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 35109
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 35110
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 35111
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 35112
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35113
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35114
            //MUL
            t22 = t0.x * t22;
            //Instruction 35115
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 35116
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35117
            //MUL
            t20 = t20 * t21;
            //Instruction 35118
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 35119
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35120
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35121
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35122
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35123
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35124
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35125
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35126
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35127
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35128
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35129
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35130
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35131
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 35132
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35133
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 35134
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 35135
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35136
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35137
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35138
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35139
        //ELSE
        } else {
            //Instruction 35140
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35141
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 35142
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35143
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 35144
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35145
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35146
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 35147
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35148
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 35149
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 35150
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35151
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35152
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35153
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 35154
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35155
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35156
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 35157
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 35158
            //LT
            tb19 = t0.w<0.0;
            //Instruction 35159
            //MOV
            t0.y = (-t0.w);
            //Instruction 35160
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 35161
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 35162
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 35163
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 35164
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 35165
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 35166
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 35167
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35168
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35169
            //MUL
            t21 = t21 * t4.x;
            //Instruction 35170
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 35171
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35172
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35173
        //ENDIF
        }
        //Instruction 35174
    //ENDIF
    }
    //Instruction 35175
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 35176
    //SQRT
    t19 = sqrt(t19);
    //Instruction 35177
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35178
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 35179
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 35180
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 35181
    //NE
    tb3 = t20!=0.0;
    //Instruction 35182
    //LOG
    t9 = log2(t20);
    //Instruction 35183
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 35184
    //EXP
    t9 = exp2(t9);
    //Instruction 35185
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 35186
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35187
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35188
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 35189
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 35190
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35191
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 35192
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35193
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 35194
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 35195
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 35196
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35197
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 35198
    //MUL
    t20 = t20 * t3.x;
    //Instruction 35199
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 35200
    //MOV
    t3.y = t2.y;
    //Instruction 35201
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 35202
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 35203
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 35204
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 35205
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 35206
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35207
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 35208
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 35209
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 35210
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 35211
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 35212
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 35213
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 35214
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 35215
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 35216
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 35217
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 35218
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 35219
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 35220
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 35221
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 35222
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 35223
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 35224
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 35225
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 35226
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 35227
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 35228
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 35229
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 35230
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 35231
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 35232
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 35233
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 35234
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 35235
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 35236
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 35237
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 35238
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 35239
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 35240
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35241
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 35242
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 35243
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 35244
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_15;
void main()
{
    //Instruction 35030
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35031
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 35032
    //MOV
    t1.x = t16_0.x;
    //Instruction 35033
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 35034
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35035
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35036
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35037
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35038
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35039
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35040
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35041
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 35042
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35043
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35044
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35045
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 35046
    //MUL
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    //Instruction 35047
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35048
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35049
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 35283
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35284
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 35285
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 35286
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35287
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 35288
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 35289
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 35290
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35291
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 35292
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 35293
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 35294
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 35295
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 35296
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35297
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 35298
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 35299
    //FRC
    t2.x = fract(t2.x);
    //Instruction 35300
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 35301
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 35302
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 35303
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 35304
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 35305
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 35306
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35307
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 35308
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 35309
    //IF
    if(tb20){
        //Instruction 35310
        //IF
        if(tb19){
            //Instruction 35311
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35312
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35313
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35314
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 35315
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 35316
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35317
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35318
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35319
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35320
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35321
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35322
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35323
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 35324
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35325
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 35326
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 35327
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 35328
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35329
            //FRC
            t0 = fract(t0);
            //Instruction 35330
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35331
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 35332
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35333
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35334
            //ADD
            t0 = t0 + t0;
            //Instruction 35335
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 35336
            //LT
            tb20 = t5.w<0.0;
            //Instruction 35337
            //MOV
            t5.y = (-t5.w);
            //Instruction 35338
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35339
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 35340
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 35341
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 35342
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 35343
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 35344
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 35345
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35346
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35347
            //MUL
            t22 = t0.x * t22;
            //Instruction 35348
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 35349
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35350
            //MUL
            t20 = t20 * t21;
            //Instruction 35351
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 35352
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35353
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35354
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35355
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35356
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35357
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35358
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35359
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35360
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35361
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35362
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35363
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35364
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 35365
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35366
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 35367
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 35368
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35369
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35370
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35371
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35372
        //ELSE
        } else {
            //Instruction 35373
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35374
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 35375
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35376
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 35377
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35378
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35379
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 35380
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35381
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 35382
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 35383
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35384
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35385
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35386
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 35387
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35388
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35389
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 35390
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 35391
            //LT
            tb19 = t0.w<0.0;
            //Instruction 35392
            //MOV
            t0.y = (-t0.w);
            //Instruction 35393
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 35394
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 35395
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 35396
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 35397
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 35398
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 35399
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 35400
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35401
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35402
            //MUL
            t21 = t21 * t4.x;
            //Instruction 35403
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 35404
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35405
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35406
        //ENDIF
        }
        //Instruction 35407
    //ENDIF
    }
    //Instruction 35408
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 35409
    //SQRT
    t19 = sqrt(t19);
    //Instruction 35410
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35411
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 35412
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 35413
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 35414
    //NE
    tb3 = t20!=0.0;
    //Instruction 35415
    //LOG
    t9 = log2(t20);
    //Instruction 35416
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 35417
    //EXP
    t9 = exp2(t9);
    //Instruction 35418
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 35419
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35420
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35421
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 35422
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 35423
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35424
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 35425
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35426
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 35427
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 35428
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 35429
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35430
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 35431
    //MUL
    t20 = t20 * t3.x;
    //Instruction 35432
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 35433
    //MOV
    t3.y = t2.y;
    //Instruction 35434
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 35435
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 35436
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 35437
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 35438
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 35439
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35440
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 35441
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 35442
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 35443
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 35444
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 35445
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 35446
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 35447
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 35448
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 35449
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 35450
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 35451
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 35452
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 35453
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 35454
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 35455
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 35456
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 35457
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 35458
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 35459
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 35460
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 35461
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 35462
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 35463
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 35464
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 35465
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 35466
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 35467
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 35468
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 35469
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 35470
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 35471
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 35472
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 35473
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35474
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 35475
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 35476
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 35477
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 35245
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35246
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35247
    //MOV
    t1.x = t16_0.x;
    //Instruction 35248
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35249
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35250
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35251
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35252
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35253
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35254
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35255
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35256
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35257
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35258
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 35259
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 35260
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 35261
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 35262
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 35263
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 35264
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 35265
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 35266
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 35267
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 35268
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 35269
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 35270
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 35271
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 35272
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35273
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35274
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 35275
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 35276
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 35277
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35278
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35279
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35280
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35281
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35282
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 35332
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35333
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 35334
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 35335
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35336
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 35337
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 35338
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 35339
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35340
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 35341
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 35342
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 35343
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 35344
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 35345
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35346
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 35347
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 35348
    //FRC
    t2.x = fract(t2.x);
    //Instruction 35349
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 35350
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 35351
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 35352
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 35353
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 35354
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 35355
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35356
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 35357
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 35358
    //IF
    if(tb20){
        //Instruction 35359
        //IF
        if(tb19){
            //Instruction 35360
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35361
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 35362
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 35363
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 35364
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 35365
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35366
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35367
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35368
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35369
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35370
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35371
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35372
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 35373
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35374
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 35375
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 35376
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 35377
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35378
            //FRC
            t0 = fract(t0);
            //Instruction 35379
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35380
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 35381
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35382
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35383
            //ADD
            t0 = t0 + t0;
            //Instruction 35384
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 35385
            //LT
            tb20 = t5.w<0.0;
            //Instruction 35386
            //MOV
            t5.y = (-t5.w);
            //Instruction 35387
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 35388
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 35389
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 35390
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 35391
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 35392
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 35393
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 35394
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35395
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35396
            //MUL
            t22 = t0.x * t22;
            //Instruction 35397
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 35398
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35399
            //MUL
            t20 = t20 * t21;
            //Instruction 35400
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 35401
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35402
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35403
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35404
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35405
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 35406
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 35407
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35408
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 35409
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35410
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 35411
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 35412
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 35413
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 35414
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35415
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 35416
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 35417
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 35418
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35419
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35420
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 35421
        //ELSE
        } else {
            //Instruction 35422
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35423
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 35424
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35425
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 35426
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 35427
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 35428
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 35429
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35430
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 35431
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 35432
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35433
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35434
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35435
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 35436
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35437
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35438
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 35439
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 35440
            //LT
            tb19 = t0.w<0.0;
            //Instruction 35441
            //MOV
            t0.y = (-t0.w);
            //Instruction 35442
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 35443
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 35444
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 35445
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 35446
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 35447
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 35448
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 35449
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35450
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35451
            //MUL
            t21 = t21 * t4.x;
            //Instruction 35452
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 35453
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 35454
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 35455
        //ENDIF
        }
        //Instruction 35456
    //ENDIF
    }
    //Instruction 35457
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 35458
    //SQRT
    t19 = sqrt(t19);
    //Instruction 35459
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35460
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 35461
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 35462
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 35463
    //NE
    tb3 = t20!=0.0;
    //Instruction 35464
    //LOG
    t9 = log2(t20);
    //Instruction 35465
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 35466
    //EXP
    t9 = exp2(t9);
    //Instruction 35467
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 35468
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35469
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35470
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 35471
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 35472
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35473
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 35474
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35475
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 35476
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 35477
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 35478
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35479
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 35480
    //MUL
    t20 = t20 * t3.x;
    //Instruction 35481
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 35482
    //MOV
    t3.y = t2.y;
    //Instruction 35483
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 35484
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 35485
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 35486
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 35487
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 35488
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35489
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 35490
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 35491
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 35492
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 35493
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 35494
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 35495
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 35496
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 35497
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 35498
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 35499
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 35500
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 35501
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 35502
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 35503
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 35504
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 35505
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 35506
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 35507
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 35508
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 35509
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 35510
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 35511
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 35512
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 35513
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 35514
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 35515
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 35516
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 35517
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 35518
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 35519
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 35520
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 35521
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 35522
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35523
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 35524
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 35525
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 35526
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 35299
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35300
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35301
    //MOV
    t1.x = t16_0.x;
    //Instruction 35302
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35303
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35304
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35305
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35306
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35307
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35308
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35309
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35310
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35311
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35312
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 35313
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 35314
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 35315
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 35316
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 35317
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 35318
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 35319
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 35320
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 35321
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35322
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35323
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 35324
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 35325
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 35326
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35327
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35328
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35329
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35330
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35331
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 35970
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35971
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 35972
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 35973
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35974
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 35975
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 35976
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 35977
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 35978
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 35979
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 35980
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 35981
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 35982
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 35983
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35984
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 35985
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 35986
    //FRC
    t2.x = fract(t2.x);
    //Instruction 35987
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 35988
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 35989
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 35990
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 35991
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 35992
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 35993
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35994
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 35995
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 35996
    //IF
    if(tb20){
        //Instruction 35997
        //IF
        if(tb19){
            //Instruction 35998
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35999
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 36000
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 36001
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 36002
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 36003
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 36004
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36005
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36006
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36007
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36008
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36009
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 36010
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 36011
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36012
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 36013
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 36014
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 36015
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36016
            //FRC
            t0 = fract(t0);
            //Instruction 36017
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36018
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 36019
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36020
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36021
            //ADD
            t0 = t0 + t0;
            //Instruction 36022
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 36023
            //LT
            tb20 = t5.w<0.0;
            //Instruction 36024
            //MOV
            t5.y = (-t5.w);
            //Instruction 36025
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 36026
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 36027
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 36028
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 36029
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 36030
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 36031
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 36032
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36033
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36034
            //MUL
            t22 = t0.x * t22;
            //Instruction 36035
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 36036
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36037
            //MUL
            t20 = t20 * t21;
            //Instruction 36038
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 36039
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 36040
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36041
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36042
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36043
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 36044
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 36045
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36046
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 36047
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36048
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 36049
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 36050
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 36051
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 36052
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36053
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 36054
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 36055
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 36056
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36057
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 36058
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 36059
        //ELSE
        } else {
            //Instruction 36060
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36061
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 36062
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36063
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 36064
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36065
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 36066
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 36067
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36068
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 36069
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 36070
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36071
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36072
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36073
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 36074
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36075
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36076
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 36077
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 36078
            //LT
            tb19 = t0.w<0.0;
            //Instruction 36079
            //MOV
            t0.y = (-t0.w);
            //Instruction 36080
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 36081
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 36082
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 36083
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 36084
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 36085
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 36086
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 36087
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36088
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36089
            //MUL
            t21 = t21 * t4.x;
            //Instruction 36090
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 36091
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 36092
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 36093
        //ENDIF
        }
        //Instruction 36094
    //ENDIF
    }
    //Instruction 36095
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 36096
    //SQRT
    t19 = sqrt(t19);
    //Instruction 36097
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36098
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 36099
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 36100
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 36101
    //NE
    tb3 = t20!=0.0;
    //Instruction 36102
    //LOG
    t9 = log2(t20);
    //Instruction 36103
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 36104
    //EXP
    t9 = exp2(t9);
    //Instruction 36105
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 36106
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36107
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36108
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 36109
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 36110
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36111
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 36112
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36113
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 36114
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 36115
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 36116
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36117
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 36118
    //MUL
    t20 = t20 * t3.x;
    //Instruction 36119
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 36120
    //MOV
    t3.y = t2.y;
    //Instruction 36121
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 36122
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 36123
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 36124
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 36125
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 36126
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36127
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 36128
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 36129
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 36130
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 36131
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 36132
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 36133
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 36134
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 36135
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 36136
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 36137
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 36138
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 36139
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 36140
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 36141
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 36142
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 36143
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 36144
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 36145
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 36146
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 36147
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 36148
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 36149
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 36150
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 36151
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 36152
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 36153
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 36154
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 36155
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 36156
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 36157
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 36158
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 36159
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 36160
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 36161
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 36162
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 36163
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 36164
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 35944
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35945
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35946
    //MOV
    t1.x = t16_0.x;
    //Instruction 35947
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35948
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35949
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35950
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35951
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35952
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35953
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35954
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35955
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35956
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35957
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 35958
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 35959
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 35960
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 35961
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 35962
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 35963
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35964
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35965
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35966
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35967
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35968
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35969
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 35518
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35519
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35520
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35521
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35522
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35523
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35524
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35525
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35526
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35527
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35528
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35529
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35530
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35531
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35532
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35533
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35534
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35535
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35536
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 35537
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 35538
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 35539
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35540
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 35541
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 35542
    //FRC
    t3.x = fract(t3.x);
    //Instruction 35543
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 35544
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 35545
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 35546
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 35547
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 35548
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 35549
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35550
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 35551
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 35552
    //IF
    if(tb24){
        //Instruction 35553
        //IF
        if(tb22){
            //Instruction 35554
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35555
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 35556
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 35557
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 35558
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35559
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35560
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35561
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35562
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35563
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 35564
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35565
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35566
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35567
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35568
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35569
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35570
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35571
            //FRC
            t2 = fract(t2);
            //Instruction 35572
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35573
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 35574
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35575
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35576
            //ADD
            t2 = t2 + t2;
            //Instruction 35577
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 35578
            //LT
            tb24 = t6.w<0.0;
            //Instruction 35579
            //MOV
            t6.y = (-t6.w);
            //Instruction 35580
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 35581
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 35582
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 35583
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 35584
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 35585
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 35586
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35587
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35588
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35589
            //MUL
            t26 = t2.x * t26;
            //Instruction 35590
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 35591
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35592
            //MUL
            t24 = t24 * t25;
            //Instruction 35593
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 35594
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35595
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35596
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35597
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35598
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 35599
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 35600
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35601
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 35602
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35603
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 35604
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 35605
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 35606
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 35607
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35608
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35609
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35610
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 35611
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35612
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35613
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 35614
        //ELSE
        } else {
            //Instruction 35615
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35616
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35617
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35618
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35619
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35620
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35621
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35622
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35623
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35624
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35625
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35626
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35627
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35628
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35629
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35630
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35631
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35632
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35633
            //MOV
            t2.y = (-t2.w);
            //Instruction 35634
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35635
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35636
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35637
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35638
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35639
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35640
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35641
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35642
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35643
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35644
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35645
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35646
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35647
        //ENDIF
        }
        //Instruction 35648
    //ENDIF
    }
    //Instruction 35649
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35650
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35651
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35652
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35653
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35654
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35655
    //NE
    tb24 = t22!=0.0;
    //Instruction 35656
    //LOG
    t4.x = log2(t22);
    //Instruction 35657
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35658
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35659
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35660
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35661
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35662
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35663
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35664
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35665
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35666
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35667
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35668
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35669
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35670
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35671
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35672
    //MUL
    t22 = t22 * t24;
    //Instruction 35673
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35674
    //MOV
    t4.y = t3.y;
    //Instruction 35675
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35676
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35677
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35678
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35679
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35680
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35681
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35682
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35683
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35684
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35685
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35686
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35687
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35688
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35689
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35690
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35691
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35692
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35693
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35694
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35695
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35696
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35697
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35698
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35699
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35700
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35701
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35702
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35703
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35704
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35705
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35706
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35707
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35708
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35709
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35710
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35711
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35712
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35713
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35714
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35715
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35716
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35717
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 35718
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 35478
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35479
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35480
    //MOV
    t1.x = t16_0.x;
    //Instruction 35481
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35482
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35483
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35484
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35485
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35486
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35487
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35488
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35489
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35490
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 35491
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 35492
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 35493
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 35494
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 35495
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 35496
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 35497
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 35498
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 35499
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35500
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 35501
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 35502
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 35503
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 35504
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 35505
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 35506
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 35507
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35508
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35509
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 35510
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 35511
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 35512
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35513
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35514
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35515
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35516
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35517
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 35556
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35557
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35558
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35559
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35560
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35561
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35562
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35563
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35564
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35565
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35566
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35567
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35568
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35569
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35570
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35571
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35572
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35573
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35574
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 35575
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 35576
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 35577
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35578
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 35579
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 35580
    //FRC
    t3.x = fract(t3.x);
    //Instruction 35581
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 35582
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 35583
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 35584
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 35585
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 35586
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 35587
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35588
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 35589
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 35590
    //IF
    if(tb24){
        //Instruction 35591
        //IF
        if(tb22){
            //Instruction 35592
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35593
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 35594
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 35595
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 35596
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35597
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35598
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35599
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35600
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35601
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 35602
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35603
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35604
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35605
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35606
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35607
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35608
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35609
            //FRC
            t2 = fract(t2);
            //Instruction 35610
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35611
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 35612
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35613
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35614
            //ADD
            t2 = t2 + t2;
            //Instruction 35615
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 35616
            //LT
            tb24 = t6.w<0.0;
            //Instruction 35617
            //MOV
            t6.y = (-t6.w);
            //Instruction 35618
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 35619
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 35620
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 35621
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 35622
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 35623
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 35624
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35625
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35626
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35627
            //MUL
            t26 = t2.x * t26;
            //Instruction 35628
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 35629
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35630
            //MUL
            t24 = t24 * t25;
            //Instruction 35631
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 35632
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35633
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35634
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35635
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35636
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 35637
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 35638
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35639
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 35640
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35641
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 35642
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 35643
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 35644
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 35645
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35646
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35647
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35648
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 35649
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35650
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35651
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 35652
        //ELSE
        } else {
            //Instruction 35653
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35654
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35655
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35656
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35657
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35658
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35659
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35660
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35661
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35662
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35663
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35664
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35665
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35666
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35667
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35668
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35669
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35670
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35671
            //MOV
            t2.y = (-t2.w);
            //Instruction 35672
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35673
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35674
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35675
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35676
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35677
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35678
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35679
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35680
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35681
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35682
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35683
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35684
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35685
        //ENDIF
        }
        //Instruction 35686
    //ENDIF
    }
    //Instruction 35687
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35688
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35689
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35690
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35691
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35692
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35693
    //NE
    tb24 = t22!=0.0;
    //Instruction 35694
    //LOG
    t4.x = log2(t22);
    //Instruction 35695
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35696
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35697
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35698
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35699
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35700
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35701
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35702
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35703
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35704
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35705
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35706
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35707
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35708
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35709
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35710
    //MUL
    t22 = t22 * t24;
    //Instruction 35711
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35712
    //MOV
    t4.y = t3.y;
    //Instruction 35713
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35714
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35715
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35716
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35717
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35718
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35719
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35720
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35721
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35722
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35723
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35724
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35725
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35726
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35727
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35728
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35729
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35730
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35731
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35732
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35733
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35734
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35735
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35736
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35737
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35738
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35739
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35740
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35741
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35742
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35743
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35744
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35745
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35746
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35747
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35748
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35749
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35750
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35751
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35752
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35753
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35754
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35755
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 35756
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 35527
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35528
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35529
    //MOV
    t1.x = t16_0.x;
    //Instruction 35530
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35531
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35532
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35533
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35534
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35535
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35536
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35537
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35538
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35539
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 35540
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 35541
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 35542
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 35543
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 35544
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 35545
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 35546
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 35547
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 35548
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35549
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 35550
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35551
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35552
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35553
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35554
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35555
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_5 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_5.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 36212
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36213
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36214
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 36215
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36216
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 36217
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 36218
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 36219
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 36220
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36221
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36222
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 36223
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36224
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36225
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36226
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 36227
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 36228
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 36229
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 36230
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 36231
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36232
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36233
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36234
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36235
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36236
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36237
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36238
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 36239
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36240
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 36241
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36242
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36243
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36244
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36245
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 36246
    //IF
    if(tb24){
        //Instruction 36247
        //IF
        if(tb22){
            //Instruction 36248
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36249
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36250
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36251
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 36252
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 36253
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 36254
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36255
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36256
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36257
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36258
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 36259
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 36260
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36261
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36262
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 36263
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36264
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36265
            //FRC
            t2 = fract(t2);
            //Instruction 36266
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36267
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36268
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36269
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36270
            //ADD
            t2 = t2 + t2;
            //Instruction 36271
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36272
            //LT
            tb24 = t6.w<0.0;
            //Instruction 36273
            //MOV
            t6.y = (-t6.w);
            //Instruction 36274
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36275
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 36276
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 36277
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 36278
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 36279
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 36280
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 36281
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36282
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36283
            //MUL
            t26 = t2.x * t26;
            //Instruction 36284
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 36285
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36286
            //MUL
            t24 = t24 * t25;
            //Instruction 36287
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 36288
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36289
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36290
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36291
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36292
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36293
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36294
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36295
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36296
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36297
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36298
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36299
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36300
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 36301
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36302
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 36303
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 36304
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36305
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36306
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 36307
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36308
        //ELSE
        } else {
            //Instruction 36309
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36310
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36311
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36312
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36313
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36314
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36315
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36316
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36317
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36318
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36319
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36320
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36321
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36322
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36323
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36324
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36325
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36326
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36327
            //MOV
            t2.y = (-t2.w);
            //Instruction 36328
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36329
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36330
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36331
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36332
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 36333
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 36334
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36335
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36336
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36337
            //MUL
            t24 = t24 * t5.x;
            //Instruction 36338
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 36339
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36340
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36341
        //ENDIF
        }
        //Instruction 36342
    //ENDIF
    }
    //Instruction 36343
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36344
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36345
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36346
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 36347
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 36348
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 36349
    //NE
    tb24 = t22!=0.0;
    //Instruction 36350
    //LOG
    t4.x = log2(t22);
    //Instruction 36351
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36352
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36353
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 36354
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36355
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36356
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36357
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36358
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36359
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36360
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36361
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36362
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36363
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 36364
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36365
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 36366
    //MUL
    t22 = t22 * t24;
    //Instruction 36367
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 36368
    //MOV
    t4.y = t3.y;
    //Instruction 36369
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 36370
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 36371
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 36372
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36373
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 36374
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36375
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36376
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36377
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36378
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36379
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 36380
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 36381
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36382
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36383
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36384
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36385
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36386
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36387
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36388
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36389
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36390
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36391
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36392
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 36393
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 36394
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 36395
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 36396
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 36397
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 36398
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36399
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36400
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 36401
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 36402
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 36403
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36404
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 36405
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 36406
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 36407
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 36408
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 36409
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36410
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 36411
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 36412
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump vec3 t16_8;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 36165
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36166
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36167
    //MOV
    t1.x = t16_0.x;
    //Instruction 36168
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36169
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36170
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36171
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36172
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36173
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36174
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36175
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36176
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36177
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36178
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36179
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36180
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 36181
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 36182
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 36183
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36184
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36185
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36186
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36187
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 36188
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 36189
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 36190
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 36191
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 36192
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 36193
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 36194
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 36195
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 36196
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 36197
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 36198
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 36199
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 36200
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 36201
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36202
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36203
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 36204
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 36205
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 36206
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 36207
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36208
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36209
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36210
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36211
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 35761
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35762
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35763
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35764
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35765
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35766
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35767
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35768
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35769
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35770
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35771
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35772
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35773
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35774
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35775
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35776
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35777
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35778
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35779
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 35780
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 35781
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 35782
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35783
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 35784
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 35785
    //FRC
    t3.x = fract(t3.x);
    //Instruction 35786
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 35787
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 35788
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 35789
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 35790
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 35791
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 35792
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35793
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 35794
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 35795
    //IF
    if(tb24){
        //Instruction 35796
        //IF
        if(tb22){
            //Instruction 35797
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35798
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 35799
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 35800
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 35801
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35802
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35803
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35804
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35805
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35806
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 35807
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35808
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35809
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35810
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35811
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35812
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35813
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35814
            //FRC
            t2 = fract(t2);
            //Instruction 35815
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35816
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 35817
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35818
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35819
            //ADD
            t2 = t2 + t2;
            //Instruction 35820
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 35821
            //LT
            tb24 = t6.w<0.0;
            //Instruction 35822
            //MOV
            t6.y = (-t6.w);
            //Instruction 35823
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 35824
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 35825
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 35826
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 35827
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 35828
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 35829
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35830
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35831
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35832
            //MUL
            t26 = t2.x * t26;
            //Instruction 35833
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 35834
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35835
            //MUL
            t24 = t24 * t25;
            //Instruction 35836
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 35837
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35838
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35839
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35840
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35841
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 35842
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 35843
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35844
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 35845
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35846
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 35847
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 35848
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 35849
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 35850
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35851
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35852
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35853
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 35854
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35855
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35856
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 35857
        //ELSE
        } else {
            //Instruction 35858
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35859
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35860
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35861
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35862
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35863
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35864
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35865
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35866
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35867
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35868
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35869
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35870
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35871
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35872
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35873
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35874
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35875
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35876
            //MOV
            t2.y = (-t2.w);
            //Instruction 35877
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35878
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35879
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35880
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35881
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35882
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35883
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35884
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35885
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35886
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35887
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35888
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35889
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35890
        //ENDIF
        }
        //Instruction 35891
    //ENDIF
    }
    //Instruction 35892
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35893
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35894
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35895
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35896
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35897
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35898
    //NE
    tb24 = t22!=0.0;
    //Instruction 35899
    //LOG
    t4.x = log2(t22);
    //Instruction 35900
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35901
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35902
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35903
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35904
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35905
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35906
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35907
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35908
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35909
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35910
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35911
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35912
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35913
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35914
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35915
    //MUL
    t22 = t22 * t24;
    //Instruction 35916
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35917
    //MOV
    t4.y = t3.y;
    //Instruction 35918
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35919
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35920
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35921
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35922
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35923
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35924
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35925
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35926
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35927
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35928
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35929
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35930
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35931
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35932
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35933
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35934
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35935
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35936
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35937
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35938
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35939
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35940
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35941
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35942
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35943
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35944
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35945
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35946
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35947
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35948
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35949
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35950
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35951
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35952
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35953
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35954
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35955
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35956
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35957
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35958
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35959
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35960
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 35961
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 35719
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35720
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35721
    //MOV
    t1.x = t16_0.x;
    //Instruction 35722
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35723
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35724
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35725
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35726
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35727
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35728
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35729
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35730
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35731
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 35732
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 35733
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 35734
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 35735
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 35736
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 35737
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 35738
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 35739
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 35740
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35741
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 35742
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 35743
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 35744
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 35745
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 35746
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 35747
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 35748
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 35749
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 35750
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35751
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 35752
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 35753
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 35754
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 35755
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 35756
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35757
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35758
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35759
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35760
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 35792
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35793
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35794
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 35795
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 35796
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 35797
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 35798
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 35799
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 35800
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 35801
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 35802
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 35803
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 35804
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 35805
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 35806
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 35807
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35808
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 35809
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 35810
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 35811
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 35812
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 35813
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 35814
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 35815
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 35816
    //FRC
    t3.x = fract(t3.x);
    //Instruction 35817
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 35818
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 35819
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 35820
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 35821
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 35822
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 35823
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 35824
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 35825
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 35826
    //IF
    if(tb24){
        //Instruction 35827
        //IF
        if(tb22){
            //Instruction 35828
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 35829
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 35830
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 35831
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 35832
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 35833
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35834
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35835
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35836
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35837
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 35838
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 35839
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 35840
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35841
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 35842
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 35843
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 35844
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 35845
            //FRC
            t2 = fract(t2);
            //Instruction 35846
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 35847
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 35848
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 35849
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 35850
            //ADD
            t2 = t2 + t2;
            //Instruction 35851
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 35852
            //LT
            tb24 = t6.w<0.0;
            //Instruction 35853
            //MOV
            t6.y = (-t6.w);
            //Instruction 35854
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 35855
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 35856
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 35857
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 35858
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 35859
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 35860
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 35861
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35862
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35863
            //MUL
            t26 = t2.x * t26;
            //Instruction 35864
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 35865
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 35866
            //MUL
            t24 = t24 * t25;
            //Instruction 35867
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 35868
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35869
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35870
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 35871
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 35872
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 35873
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 35874
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 35875
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 35876
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 35877
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 35878
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 35879
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 35880
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 35881
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 35882
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 35883
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 35884
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 35885
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 35886
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 35887
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 35888
        //ELSE
        } else {
            //Instruction 35889
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 35890
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 35891
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35892
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 35893
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 35894
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 35895
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 35896
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 35897
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 35898
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 35899
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 35900
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 35901
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 35902
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 35903
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 35904
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 35905
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 35906
            //LT
            tb0 = t2.w<0.0;
            //Instruction 35907
            //MOV
            t2.y = (-t2.w);
            //Instruction 35908
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 35909
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 35910
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 35911
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 35912
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 35913
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 35914
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 35915
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 35916
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 35917
            //MUL
            t24 = t24 * t5.x;
            //Instruction 35918
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 35919
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 35920
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 35921
        //ENDIF
        }
        //Instruction 35922
    //ENDIF
    }
    //Instruction 35923
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 35924
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 35925
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 35926
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 35927
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 35928
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 35929
    //NE
    tb24 = t22!=0.0;
    //Instruction 35930
    //LOG
    t4.x = log2(t22);
    //Instruction 35931
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 35932
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 35933
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 35934
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 35935
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 35936
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 35937
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 35938
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 35939
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 35940
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 35941
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 35942
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 35943
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 35944
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 35945
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 35946
    //MUL
    t22 = t22 * t24;
    //Instruction 35947
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 35948
    //MOV
    t4.y = t3.y;
    //Instruction 35949
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 35950
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 35951
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 35952
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 35953
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 35954
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 35955
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 35956
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 35957
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 35958
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 35959
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 35960
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 35961
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 35962
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 35963
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 35964
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 35965
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 35966
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 35967
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 35968
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 35969
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 35970
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 35971
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 35972
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 35973
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 35974
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 35975
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 35976
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 35977
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 35978
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 35979
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 35980
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 35981
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 35982
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 35983
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 35984
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 35985
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 35986
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 35987
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 35988
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 35989
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 35990
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 35991
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 35992
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 35757
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 35758
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 35759
    //MOV
    t1.x = t16_0.x;
    //Instruction 35760
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 35761
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35762
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35763
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35764
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35765
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 35766
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35767
    //LT
    tb1 = t10_2<0.0;
    //Instruction 35768
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35769
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 35770
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 35771
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 35772
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 35773
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 35774
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 35775
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 35776
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 35777
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 35778
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 35779
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 35780
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 35781
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 35782
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 35783
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 35784
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 35785
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 35786
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35787
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 35788
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 35789
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35790
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35791
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_68;
  highp mat3 tmpvar_69;
  tmpvar_69[0] = _Object2World[0].xyz;
  tmpvar_69[1] = _Object2World[1].xyz;
  tmpvar_69[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_70;
  lowp vec3 tmpvar_71;
  tmpvar_71 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73.x = worldTangent_5.x;
  tmpvar_73.y = worldBinormal_4.x;
  tmpvar_73.z = worldNormal_6.x;
  lowp vec3 tmpvar_74;
  tmpvar_74.x = worldTangent_5.y;
  tmpvar_74.y = worldBinormal_4.y;
  tmpvar_74.z = worldNormal_6.y;
  lowp vec3 tmpvar_75;
  tmpvar_75.x = worldTangent_5.z;
  tmpvar_75.y = worldBinormal_4.z;
  tmpvar_75.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_73;
  xlv_TEXCOORD1 = tmpvar_74;
  xlv_TEXCOORD2 = tmpvar_75;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 36458
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36459
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36460
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 36461
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36462
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 36463
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 36464
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 36465
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 36466
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36467
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36468
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 36469
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36470
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36471
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36472
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36473
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36474
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 36475
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 36476
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 36477
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36478
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36479
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36480
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36481
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36482
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36483
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36484
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 36485
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36486
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 36487
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36488
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36489
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36490
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36491
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 36492
    //IF
    if(tb27){
        //Instruction 36493
        //IF
        if(tb25){
            //Instruction 36494
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36495
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36496
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36497
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 36498
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 36499
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36500
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36501
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36502
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36503
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36504
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 36505
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 36506
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36507
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36508
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 36509
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36510
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36511
            //FRC
            t2 = fract(t2);
            //Instruction 36512
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36513
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36514
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36515
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36516
            //ADD
            t2 = t2 + t2;
            //Instruction 36517
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36518
            //LT
            tb27 = t6.w<0.0;
            //Instruction 36519
            //MOV
            t6.y = (-t6.w);
            //Instruction 36520
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36521
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 36522
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 36523
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 36524
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 36525
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 36526
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 36527
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36528
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36529
            //MUL
            t29 = t2.x * t29;
            //Instruction 36530
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 36531
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36532
            //MUL
            t27 = t27 * t28;
            //Instruction 36533
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 36534
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36535
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36536
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36537
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36538
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36539
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36540
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36541
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36542
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36543
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36544
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36545
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36546
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 36547
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36548
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 36549
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 36550
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36551
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36552
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36553
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36554
        //ELSE
        } else {
            //Instruction 36555
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36556
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36557
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36558
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36559
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36560
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36561
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36562
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36563
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36564
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36565
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36566
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36567
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36568
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36569
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36570
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36571
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36572
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36573
            //MOV
            t2.y = (-t2.w);
            //Instruction 36574
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36575
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36576
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36577
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36578
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 36579
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 36580
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36581
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36582
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36583
            //MUL
            t27 = t27 * t5.x;
            //Instruction 36584
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 36585
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36586
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36587
        //ENDIF
        }
        //Instruction 36588
    //ENDIF
    }
    //Instruction 36589
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36590
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36591
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36592
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 36593
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 36594
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 36595
    //NE
    tb27 = t25!=0.0;
    //Instruction 36596
    //LOG
    t4.x = log2(t25);
    //Instruction 36597
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36598
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36599
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 36600
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36601
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36602
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36603
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36604
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36605
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36606
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36607
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36608
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36609
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 36610
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36611
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 36612
    //MUL
    t25 = t25 * t27;
    //Instruction 36613
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 36614
    //MOV
    t4.y = t3.y;
    //Instruction 36615
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 36616
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36617
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 36618
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36619
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 36620
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36621
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36622
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36623
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36624
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36625
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 36626
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 36627
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36628
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36629
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36630
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36631
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36632
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36633
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36634
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36635
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36636
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36637
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36638
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 36639
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 36640
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 36641
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 36642
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 36643
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 36644
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36645
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36646
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 36647
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 36648
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 36649
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36650
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 36651
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36652
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 36653
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 36654
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 36655
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 36656
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 36657
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36658
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 36659
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 36660
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 36661
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 36662
    //MOV
    t6.x = t4.z;
    //Instruction 36663
    //MOV
    t6.y = t5.x;
    //Instruction 36664
    //MOV
    t6.z = t0.x;
    //Instruction 36665
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 36666
    //MOV
    t6.x = t4.x;
    //Instruction 36667
    //MOV
    t6.y = t5.y;
    //Instruction 36668
    //MOV
    t6.z = t0.y;
    //Instruction 36669
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 36670
    //MOV
    t0.x = t4.y;
    //Instruction 36671
    //MOV
    t0.y = t5.z;
    //Instruction 36672
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 36673
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 36674
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36675
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 36676
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 36677
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 36413
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 36414
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 36415
    //MOV
    t1.x = t16_0.x;
    //Instruction 36416
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 36417
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36418
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36419
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36420
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36421
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 36422
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36423
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 36424
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36425
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36426
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36427
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36428
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 36429
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 36430
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 36431
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36432
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36433
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36434
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 36435
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 36436
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 36437
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 36438
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 36439
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 36440
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 36441
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 36442
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36443
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36444
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 36445
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 36446
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 36447
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 36448
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 36449
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 36450
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 36451
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 36452
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 36453
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 36454
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 36455
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36456
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36457
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_68;
  highp mat3 tmpvar_69;
  tmpvar_69[0] = _Object2World[0].xyz;
  tmpvar_69[1] = _Object2World[1].xyz;
  tmpvar_69[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_70;
  lowp vec3 tmpvar_71;
  tmpvar_71 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73.x = worldTangent_5.x;
  tmpvar_73.y = worldBinormal_4.x;
  tmpvar_73.z = worldNormal_6.x;
  lowp vec3 tmpvar_74;
  tmpvar_74.x = worldTangent_5.y;
  tmpvar_74.y = worldBinormal_4.y;
  tmpvar_74.z = worldNormal_6.y;
  lowp vec3 tmpvar_75;
  tmpvar_75.x = worldTangent_5.z;
  tmpvar_75.y = worldBinormal_4.z;
  tmpvar_75.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_73;
  xlv_TEXCOORD1 = tmpvar_74;
  xlv_TEXCOORD2 = tmpvar_75;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 35996
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 35997
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 35998
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 35999
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36000
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 36001
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 36002
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 36003
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 36004
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36005
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36006
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 36007
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36008
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36009
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36010
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36011
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36012
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 36013
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 36014
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 36015
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36016
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36017
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36018
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36019
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36020
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36021
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36022
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 36023
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36024
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 36025
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36026
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36027
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36028
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36029
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 36030
    //IF
    if(tb27){
        //Instruction 36031
        //IF
        if(tb25){
            //Instruction 36032
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36033
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36034
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36035
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 36036
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 36037
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36038
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36039
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36040
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36041
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36042
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 36043
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 36044
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36045
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36046
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 36047
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36048
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36049
            //FRC
            t2 = fract(t2);
            //Instruction 36050
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36051
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36052
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36053
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36054
            //ADD
            t2 = t2 + t2;
            //Instruction 36055
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36056
            //LT
            tb27 = t6.w<0.0;
            //Instruction 36057
            //MOV
            t6.y = (-t6.w);
            //Instruction 36058
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36059
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 36060
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 36061
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 36062
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 36063
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 36064
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 36065
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36066
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36067
            //MUL
            t29 = t2.x * t29;
            //Instruction 36068
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 36069
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36070
            //MUL
            t27 = t27 * t28;
            //Instruction 36071
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 36072
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36073
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36074
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36075
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36076
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36077
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36078
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36079
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36080
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36081
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36082
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36083
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36084
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 36085
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36086
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 36087
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 36088
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36089
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36090
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36091
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36092
        //ELSE
        } else {
            //Instruction 36093
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36094
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36095
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36096
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36097
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36098
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36099
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36100
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36101
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36102
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36103
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36104
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36105
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36106
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36107
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36108
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36109
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36110
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36111
            //MOV
            t2.y = (-t2.w);
            //Instruction 36112
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36113
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36114
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36115
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36116
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 36117
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 36118
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36119
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36120
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36121
            //MUL
            t27 = t27 * t5.x;
            //Instruction 36122
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 36123
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36124
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36125
        //ENDIF
        }
        //Instruction 36126
    //ENDIF
    }
    //Instruction 36127
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36128
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36129
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36130
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 36131
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 36132
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 36133
    //NE
    tb27 = t25!=0.0;
    //Instruction 36134
    //LOG
    t4.x = log2(t25);
    //Instruction 36135
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36136
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36137
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 36138
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36139
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36140
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36141
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36142
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36143
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36144
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36145
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36146
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36147
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 36148
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36149
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 36150
    //MUL
    t25 = t25 * t27;
    //Instruction 36151
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 36152
    //MOV
    t4.y = t3.y;
    //Instruction 36153
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 36154
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36155
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 36156
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36157
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 36158
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36159
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36160
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36161
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36162
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36163
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 36164
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 36165
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36166
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36167
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36168
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36169
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36170
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36171
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36172
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36173
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36174
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36175
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36176
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 36177
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 36178
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 36179
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 36180
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 36181
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 36182
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36183
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36184
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 36185
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 36186
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 36187
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36188
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 36189
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36190
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 36191
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 36192
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 36193
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 36194
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 36195
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36196
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 36197
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 36198
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 36199
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 36200
    //MOV
    t6.x = t4.z;
    //Instruction 36201
    //MOV
    t6.y = t5.x;
    //Instruction 36202
    //MOV
    t6.z = t0.x;
    //Instruction 36203
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 36204
    //MOV
    t6.x = t4.x;
    //Instruction 36205
    //MOV
    t6.y = t5.y;
    //Instruction 36206
    //MOV
    t6.z = t0.y;
    //Instruction 36207
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 36208
    //MOV
    t0.x = t4.y;
    //Instruction 36209
    //MOV
    t0.y = t5.z;
    //Instruction 36210
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 36211
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 36212
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36213
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 36214
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 36215
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 35962
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 35963
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 35964
    //MOV
    t1.x = t16_0.x;
    //Instruction 35965
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 35966
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35967
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 35968
    //LT
    tb1 = t16_1<0.0;
    //Instruction 35969
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35970
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 35971
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 35972
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 35973
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 35974
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 35975
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 35976
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 35977
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 35978
    //MAX
    t16_4 = max(t16_9.z, t16_9.y);
    //Instruction 35979
    //MAX
    t16_4 = max(t16_9.x, t16_4);
    //Instruction 35980
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 35981
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 35982
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 35983
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 35984
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 35985
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 35986
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 35987
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 35988
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 35989
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 35990
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 35991
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 35992
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 35993
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 35994
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 35995
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_68;
  highp mat3 tmpvar_69;
  tmpvar_69[0] = _Object2World[0].xyz;
  tmpvar_69[1] = _Object2World[1].xyz;
  tmpvar_69[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_70;
  lowp vec3 tmpvar_71;
  tmpvar_71 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73.x = worldTangent_5.x;
  tmpvar_73.y = worldBinormal_4.x;
  tmpvar_73.z = worldNormal_6.x;
  lowp vec3 tmpvar_74;
  tmpvar_74.x = worldTangent_5.y;
  tmpvar_74.y = worldBinormal_4.y;
  tmpvar_74.z = worldNormal_6.y;
  lowp vec3 tmpvar_75;
  tmpvar_75.x = worldTangent_5.z;
  tmpvar_75.y = worldBinormal_4.z;
  tmpvar_75.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_73;
  xlv_TEXCOORD1 = tmpvar_74;
  xlv_TEXCOORD2 = tmpvar_75;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_6 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_6.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_5 = tmpvar_28;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 36045
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36046
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36047
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 36048
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36049
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 36050
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 36051
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 36052
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 36053
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36054
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36055
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 36056
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36057
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36058
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36059
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36060
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36061
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 36062
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 36063
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 36064
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36065
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36066
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36067
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36068
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36069
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36070
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36071
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 36072
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36073
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 36074
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36075
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36076
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36077
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36078
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 36079
    //IF
    if(tb27){
        //Instruction 36080
        //IF
        if(tb25){
            //Instruction 36081
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36082
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36083
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36084
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 36085
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 36086
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36087
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36088
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36089
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36090
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36091
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 36092
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 36093
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36094
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36095
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 36096
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36097
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36098
            //FRC
            t2 = fract(t2);
            //Instruction 36099
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36100
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36101
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36102
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36103
            //ADD
            t2 = t2 + t2;
            //Instruction 36104
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36105
            //LT
            tb27 = t6.w<0.0;
            //Instruction 36106
            //MOV
            t6.y = (-t6.w);
            //Instruction 36107
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36108
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 36109
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 36110
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 36111
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 36112
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 36113
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 36114
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36115
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36116
            //MUL
            t29 = t2.x * t29;
            //Instruction 36117
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 36118
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36119
            //MUL
            t27 = t27 * t28;
            //Instruction 36120
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 36121
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36122
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36123
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36124
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36125
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36126
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36127
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36128
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36129
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36130
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36131
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36132
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36133
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 36134
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36135
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 36136
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 36137
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36138
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36139
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36140
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36141
        //ELSE
        } else {
            //Instruction 36142
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36143
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36144
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36145
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36146
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36147
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36148
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36149
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36150
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36151
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36152
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36153
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36154
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36155
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36156
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36157
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36158
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36159
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36160
            //MOV
            t2.y = (-t2.w);
            //Instruction 36161
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36162
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36163
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36164
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36165
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 36166
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 36167
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36168
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36169
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36170
            //MUL
            t27 = t27 * t5.x;
            //Instruction 36171
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 36172
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36173
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36174
        //ENDIF
        }
        //Instruction 36175
    //ENDIF
    }
    //Instruction 36176
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36177
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36178
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36179
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 36180
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 36181
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 36182
    //NE
    tb27 = t25!=0.0;
    //Instruction 36183
    //LOG
    t4.x = log2(t25);
    //Instruction 36184
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36185
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36186
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 36187
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36188
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36189
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36190
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36191
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36192
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36193
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36194
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36195
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36196
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 36197
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36198
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 36199
    //MUL
    t25 = t25 * t27;
    //Instruction 36200
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 36201
    //MOV
    t4.y = t3.y;
    //Instruction 36202
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 36203
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36204
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 36205
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36206
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 36207
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36208
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36209
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36210
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36211
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36212
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 36213
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 36214
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36215
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36216
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36217
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36218
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36219
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36220
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36221
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36222
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36223
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36224
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36225
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 36226
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 36227
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 36228
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 36229
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 36230
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 36231
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36232
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36233
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 36234
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 36235
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 36236
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36237
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 36238
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36239
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 36240
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 36241
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 36242
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 36243
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 36244
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36245
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 36246
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 36247
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 36248
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 36249
    //MOV
    t6.x = t4.z;
    //Instruction 36250
    //MOV
    t6.y = t5.x;
    //Instruction 36251
    //MOV
    t6.z = t0.x;
    //Instruction 36252
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 36253
    //MOV
    t6.x = t4.x;
    //Instruction 36254
    //MOV
    t6.y = t5.y;
    //Instruction 36255
    //MOV
    t6.z = t0.y;
    //Instruction 36256
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 36257
    //MOV
    t0.x = t4.y;
    //Instruction 36258
    //MOV
    t0.y = t5.z;
    //Instruction 36259
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 36260
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 36261
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36262
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 36263
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 36264
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump vec3 t16_10;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 35993
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 35994
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 35995
    //MOV
    t1.x = t16_0.x;
    //Instruction 35996
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 35997
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 35998
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 35999
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36000
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36001
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 36002
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36003
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 36004
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36005
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36006
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36007
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36008
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 36009
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 36010
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 36011
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36012
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36013
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36014
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 36015
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 36016
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 36017
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 36018
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 36019
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 36020
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 36021
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 36022
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 36023
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 36024
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 36025
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 36026
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 36027
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 36028
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 36029
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36030
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36031
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 36032
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 36033
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 36034
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 36035
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 36036
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 36037
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 36038
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 36039
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 36040
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 36041
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 36042
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36043
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36044
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_68;
  highp mat3 tmpvar_69;
  tmpvar_69[0] = _Object2World[0].xyz;
  tmpvar_69[1] = _Object2World[1].xyz;
  tmpvar_69[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_70;
  lowp vec3 tmpvar_71;
  tmpvar_71 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73.x = worldTangent_5.x;
  tmpvar_73.y = worldBinormal_4.x;
  tmpvar_73.z = worldNormal_6.x;
  lowp vec3 tmpvar_74;
  tmpvar_74.x = worldTangent_5.y;
  tmpvar_74.y = worldBinormal_4.y;
  tmpvar_74.z = worldNormal_6.y;
  lowp vec3 tmpvar_75;
  tmpvar_75.x = worldTangent_5.z;
  tmpvar_75.y = worldBinormal_4.z;
  tmpvar_75.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_73;
  xlv_TEXCOORD1 = tmpvar_74;
  xlv_TEXCOORD2 = tmpvar_75;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, tmpvar_20).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 36725
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36726
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36727
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 36728
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36729
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 36730
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 36731
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 36732
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 36733
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36734
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36735
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 36736
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36737
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36738
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36739
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36740
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36741
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 36742
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 36743
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 36744
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36745
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36746
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36747
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36748
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36749
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36750
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36751
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 36752
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36753
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 36754
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36755
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36756
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36757
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36758
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 36759
    //IF
    if(tb27){
        //Instruction 36760
        //IF
        if(tb25){
            //Instruction 36761
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36762
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36763
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36764
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 36765
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 36766
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36767
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36768
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36769
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36770
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36771
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 36772
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 36773
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36774
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36775
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 36776
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36777
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36778
            //FRC
            t2 = fract(t2);
            //Instruction 36779
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36780
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36781
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36782
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36783
            //ADD
            t2 = t2 + t2;
            //Instruction 36784
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36785
            //LT
            tb27 = t6.w<0.0;
            //Instruction 36786
            //MOV
            t6.y = (-t6.w);
            //Instruction 36787
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36788
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 36789
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 36790
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 36791
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 36792
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 36793
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 36794
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36795
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36796
            //MUL
            t29 = t2.x * t29;
            //Instruction 36797
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 36798
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36799
            //MUL
            t27 = t27 * t28;
            //Instruction 36800
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 36801
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36802
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36803
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36804
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36805
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36806
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36807
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36808
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36809
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36810
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36811
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36812
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36813
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 36814
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36815
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 36816
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 36817
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36818
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36819
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36820
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36821
        //ELSE
        } else {
            //Instruction 36822
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36823
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36824
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36825
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36826
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36827
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36828
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36829
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36830
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36831
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36832
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36833
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36834
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36835
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36836
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36837
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36838
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36839
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36840
            //MOV
            t2.y = (-t2.w);
            //Instruction 36841
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36842
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36843
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36844
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36845
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 36846
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 36847
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36848
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36849
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36850
            //MUL
            t27 = t27 * t5.x;
            //Instruction 36851
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 36852
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36853
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36854
        //ENDIF
        }
        //Instruction 36855
    //ENDIF
    }
    //Instruction 36856
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36857
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36858
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36859
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 36860
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 36861
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 36862
    //NE
    tb27 = t25!=0.0;
    //Instruction 36863
    //LOG
    t4.x = log2(t25);
    //Instruction 36864
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36865
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36866
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 36867
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36868
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36869
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36870
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36871
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36872
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36873
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36874
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36875
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36876
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 36877
    //DIV
    t4.x