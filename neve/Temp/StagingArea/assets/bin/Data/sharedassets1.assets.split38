trix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52704
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52705
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 52706
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 52707
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52708
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52709
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52710
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52711
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52712
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52713
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52714
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52715
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52716
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52717
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52718
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 52719
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 52720
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 52721
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52722
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52723
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 52724
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 52725
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 52726
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52727
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52728
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 52729
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 52730
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 52731
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 52732
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 52733
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 52734
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 52735
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 52736
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 52737
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 52738
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 52739
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 52740
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 52741
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52742
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52743
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 52744
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 52745
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 52746
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 52747
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 52748
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52749
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 52512
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52513
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 52514
    //MOV
    t1.x = t16_0.x;
    //Instruction 52515
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 52516
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52517
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 52518
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 52519
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52520
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 52521
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 52522
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 52523
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 52524
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 52525
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 52526
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 52527
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 52528
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 52529
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 52530
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 52531
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 52532
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 52533
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 52534
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52535
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52536
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52537
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52538
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52539
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 52540
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52541
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52542
    //MOV
    t16_1.w = 1.0;
    //Instruction 52543
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 52544
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 52545
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 52546
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52547
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 52548
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52549
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.x;
  tmpvar_71.y = worldBinormal_3.x;
  tmpvar_71.z = worldNormal_5.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.y;
  tmpvar_72.y = worldBinormal_3.y;
  tmpvar_72.z = worldNormal_5.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.z;
  tmpvar_73.y = worldBinormal_3.z;
  tmpvar_73.z = worldNormal_5.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_5;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = screenPos_57;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_7 = tmpvar_13;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD9 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD8;
out mediump vec3 vs_TEXCOORD9;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 51555
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51556
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 51557
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 51558
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 51559
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 51560
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 51561
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 51562
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 51563
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 51564
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 51565
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 51566
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51567
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 51568
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 51569
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 51570
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 51571
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 51572
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 51573
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 51574
    //IF
    if(tb28){
        //Instruction 51575
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 51576
        //IF
        if(tb28){
            //Instruction 51577
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51578
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 51579
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 51580
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 51581
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 51582
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 51583
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51584
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51585
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51586
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51587
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 51588
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 51589
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51590
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51591
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 51592
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51593
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51594
            //FRC
            t2 = fract(t2);
            //Instruction 51595
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51596
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 51597
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51598
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51599
            //ADD
            t2 = t2 + t2;
            //Instruction 51600
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 51601
            //LT
            tb30 = t5.w<0.0;
            //Instruction 51602
            //MOV
            t5.y = (-t5.w);
            //Instruction 51603
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 51604
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 51605
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 51606
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 51607
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 51608
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 51609
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 51610
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51611
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51612
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 51613
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 51614
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51615
            //MUL
            t30 = t30 * t31;
            //Instruction 51616
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 51617
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51618
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51619
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51620
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51621
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 51622
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 51623
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51624
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 51625
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51626
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 51627
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 51628
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 51629
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 51630
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51631
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 51632
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 51633
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 51634
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51635
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 51636
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 51637
        //ELSE
        } else {
            //Instruction 51638
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51639
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51640
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51641
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51642
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51643
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51644
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51645
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51646
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 51647
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51648
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51649
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51650
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51651
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51652
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51653
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51654
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 51655
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51656
            //MOV
            t2.y = (-t2.w);
            //Instruction 51657
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51658
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51659
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 51660
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 51661
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 51662
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 51663
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51664
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51665
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51666
            //MUL
            t30 = t30 * t5.x;
            //Instruction 51667
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 51668
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 51669
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51670
        //ENDIF
        }
        //Instruction 51671
    //ELSE
    } else {
        //Instruction 51672
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 51673
    //ENDIF
    }
    //Instruction 51674
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 51675
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51676
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51677
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 51678
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 51679
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 51680
    //NE
    tb30 = t28!=0.0;
    //Instruction 51681
    //LOG
    t4.x = log2(t28);
    //Instruction 51682
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51683
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51684
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 51685
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51686
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51687
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51688
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51689
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51690
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51691
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51692
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51693
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51694
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 51695
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51696
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 51697
    //MUL
    t28 = t28 * t30;
    //Instruction 51698
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 51699
    //MOV
    t4.y = t3.y;
    //Instruction 51700
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 51701
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 51702
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 51703
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 51704
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 51705
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51706
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 51707
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 51708
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 51709
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 51710
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 51711
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 51712
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 51713
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 51714
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 51715
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 51716
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 51717
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 51718
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51719
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 51720
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 51721
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 51722
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 51723
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 51724
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 51725
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 51726
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 51727
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 51728
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 51729
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 51730
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 51731
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 51732
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 51733
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 51734
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 51735
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 51736
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 51737
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 51738
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 51739
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 51740
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 51741
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 51742
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 51743
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 51744
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 51745
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 51746
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 51747
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 51748
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 51749
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 51750
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 51751
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 51752
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 51753
    //MAD
    vs_TEXCOORD9.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 51754
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 51755
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 51756
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 51757
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 51758
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 51759
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 51760
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 51761
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 51762
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 51763
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 51764
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 51765
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 51766
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 51767
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51768
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 51769
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 51770
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 51771
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 51772
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 51773
    //MOV
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51774
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 51512
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 51513
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 51514
    //MOV
    t1.x = t16_0.x;
    //Instruction 51515
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 51516
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51517
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 51518
    //LT
    tb1 = t16_1<0.0;
    //Instruction 51519
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51520
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 51521
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 51522
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 51523
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 51524
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 51525
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 51526
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 51527
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 51528
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 51529
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 51530
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 51531
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 51532
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 51533
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 51534
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 51535
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51536
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51537
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51538
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51539
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 51540
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 51541
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 51542
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 51543
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 51544
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51545
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 51546
    //MOV
    t1.w = 1.0;
    //Instruction 51547
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 51548
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 51549
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 51550
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD9.xyz;
    //Instruction 51551
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 51552
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 51553
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51554
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying highp vec4 xlv_TEXCOORD8;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.x;
  tmpvar_71.y = worldBinormal_3.x;
  tmpvar_71.z = worldNormal_5.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.y;
  tmpvar_72.y = worldBinormal_3.y;
  tmpvar_72.z = worldNormal_5.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.z;
  tmpvar_73.y = worldBinormal_3.z;
  tmpvar_73.z = worldNormal_5.z;
  tmpvar_73.w = tmpvar_62.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_5;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = screenPos_57;
  xlv_TEXCOORD8 = tmpvar_7;
  xlv_TEXCOORD9 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD9;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_6 = tmpvar_12;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD9 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD8;
out mediump vec3 vs_TEXCOORD9;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 52557
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52558
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52559
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 52560
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52561
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 52562
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 52563
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 52564
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 52565
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52566
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 52567
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 52568
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52569
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52570
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52571
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 52572
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52573
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 52574
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 52575
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 52576
    //IF
    if(tb28){
        //Instruction 52577
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 52578
        //IF
        if(tb28){
            //Instruction 52579
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52580
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52581
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52582
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 52583
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 52584
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 52585
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52586
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52587
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52588
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52589
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 52590
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 52591
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52592
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52593
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 52594
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52595
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52596
            //FRC
            t2 = fract(t2);
            //Instruction 52597
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52598
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 52599
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52600
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52601
            //ADD
            t2 = t2 + t2;
            //Instruction 52602
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 52603
            //LT
            tb30 = t5.w<0.0;
            //Instruction 52604
            //MOV
            t5.y = (-t5.w);
            //Instruction 52605
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52606
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 52607
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 52608
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 52609
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 52610
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 52611
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 52612
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52613
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52614
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 52615
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 52616
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52617
            //MUL
            t30 = t30 * t31;
            //Instruction 52618
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 52619
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52620
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52621
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52622
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52623
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52624
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52625
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52626
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52627
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52628
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52629
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52630
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52631
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 52632
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52633
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 52634
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 52635
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52636
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52637
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 52638
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52639
        //ELSE
        } else {
            //Instruction 52640
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52641
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52642
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52643
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52644
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52645
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52646
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52647
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52648
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52649
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52650
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52651
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52652
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52653
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52654
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52655
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52656
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52657
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52658
            //MOV
            t2.y = (-t2.w);
            //Instruction 52659
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52660
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52661
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52662
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52663
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 52664
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 52665
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52666
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52667
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52668
            //MUL
            t30 = t30 * t5.x;
            //Instruction 52669
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 52670
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52671
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52672
        //ENDIF
        }
        //Instruction 52673
    //ELSE
    } else {
        //Instruction 52674
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 52675
    //ENDIF
    }
    //Instruction 52676
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52677
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52678
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52679
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 52680
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 52681
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 52682
    //NE
    tb30 = t28!=0.0;
    //Instruction 52683
    //LOG
    t4.x = log2(t28);
    //Instruction 52684
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52685
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52686
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 52687
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52688
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52689
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52690
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52691
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52692
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52693
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52694
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52695
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52696
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 52697
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52698
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 52699
    //MUL
    t28 = t28 * t30;
    //Instruction 52700
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 52701
    //MOV
    t4.y = t3.y;
    //Instruction 52702
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 52703
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52704
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 52705
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52706
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 52707
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52708
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52709
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52710
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52711
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52712
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 52713
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 52714
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52715
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52716
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52717
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52718
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52719
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52720
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52721
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52722
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52723
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52724
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52725
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 52726
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 52727
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 52728
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52729
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52730
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 52731
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 52732
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 52733
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52734
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52735
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 52736
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 52737
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 52738
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52739
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 52740
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 52741
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 52742
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 52743
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 52744
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52745
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 52746
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 52747
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 52748
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 52749
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 52750
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 52751
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 52752
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 52753
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 52754
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 52755
    //MAD
    vs_TEXCOORD9.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 52756
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 52757
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 52758
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 52759
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 52760
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 52761
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 52762
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 52763
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 52764
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 52765
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 52766
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 52767
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 52768
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 52769
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52770
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 52771
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 52772
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 52773
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 52774
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 52775
    //MOV
    vs_TEXCOORD8 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52776
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD9;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 52515
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 52516
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 52517
    //MOV
    t1.x = t16_0.x;
    //Instruction 52518
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 52519
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52520
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 52521
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52522
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52523
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 52524
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 52525
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 52526
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 52527
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 52528
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 52529
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 52530
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 52531
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 52532
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 52533
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 52534
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 52535
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 52536
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 52537
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 52538
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52539
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52540
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52541
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52542
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 52543
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 52544
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 52545
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 52546
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 52547
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52548
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 52549
    //MOV
    t1.w = 1.0;
    //Instruction 52550
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 52551
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 52552
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 52553
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD9.xyz;
    //Instruction 52554
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 52555
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52556
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 52779
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52780
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 52781
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 52782
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52783
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 52784
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 52785
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 52786
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 52787
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 52788
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 52789
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 52790
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 52791
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 52792
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 52793
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 52794
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 52795
    //FRC
    t2.x = fract(t2.x);
    //Instruction 52796
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 52797
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 52798
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 52799
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 52800
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 52801
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 52802
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 52803
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 52804
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 52805
    //IF
    if(tb23){
        //Instruction 52806
        //IF
        if(tb22){
            //Instruction 52807
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52808
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52809
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52810
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 52811
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 52812
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 52813
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52814
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52815
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52816
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52817
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 52818
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 52819
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 52820
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52821
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 52822
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 52823
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 52824
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52825
            //FRC
            t0 = fract(t0);
            //Instruction 52826
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52827
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 52828
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52829
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52830
            //ADD
            t0 = t0 + t0;
            //Instruction 52831
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 52832
            //LT
            tb23 = t5.w<0.0;
            //Instruction 52833
            //MOV
            t5.y = (-t5.w);
            //Instruction 52834
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52835
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 52836
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 52837
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 52838
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 52839
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 52840
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 52841
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52842
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52843
            //MUL
            t25 = t0.x * t25;
            //Instruction 52844
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 52845
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52846
            //MUL
            t23 = t23 * t24;
            //Instruction 52847
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 52848
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 52849
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52850
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52851
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52852
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52853
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52854
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52855
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52856
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52857
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52858
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52859
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52860
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 52861
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52862
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 52863
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 52864
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52865
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52866
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 52867
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52868
        //ELSE
        } else {
            //Instruction 52869
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52870
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 52871
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52872
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 52873
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 52874
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 52875
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 52876
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52877
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 52878
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 52879
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52880
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52881
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52882
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 52883
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52884
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52885
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 52886
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 52887
            //LT
            tb22 = t0.w<0.0;
            //Instruction 52888
            //MOV
            t0.y = (-t0.w);
            //Instruction 52889
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 52890
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 52891
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 52892
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 52893
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 52894
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 52895
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 52896
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52897
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52898
            //MUL
            t24 = t24 * t4.x;
            //Instruction 52899
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 52900
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 52901
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 52902
        //ENDIF
        }
        //Instruction 52903
    //ENDIF
    }
    //Instruction 52904
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 52905
    //SQRT
    t22 = sqrt(t22);
    //Instruction 52906
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52907
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 52908
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 52909
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 52910
    //NE
    tb3 = t23!=0.0;
    //Instruction 52911
    //LOG
    t10 = log2(t23);
    //Instruction 52912
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 52913
    //EXP
    t10 = exp2(t10);
    //Instruction 52914
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 52915
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52916
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52917
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 52918
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 52919
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52920
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 52921
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52922
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 52923
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 52924
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 52925
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52926
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 52927
    //MUL
    t23 = t23 * t3.x;
    //Instruction 52928
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 52929
    //MOV
    t3.y = t2.y;
    //Instruction 52930
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 52931
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 52932
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 52933
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 52934
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 52935
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52936
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 52937
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 52938
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 52939
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 52940
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 52941
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 52942
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 52943
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 52944
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 52945
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 52946
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 52947
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 52948
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 52949
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 52950
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 52951
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 52952
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 52953
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 52954
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 52955
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 52956
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 52957
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 52958
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 52959
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 52960
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 52961
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 52962
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 52963
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 52964
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 52965
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 52966
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 52967
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 52968
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 52969
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 52970
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 52971
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 52972
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 52973
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 52974
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 52975
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 52976
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52977
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 52978
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 52979
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 52980
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52981
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 52750
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 52751
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52752
    //MOV
    t1.x = t16_0.x;
    //Instruction 52753
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52754
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52755
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 52756
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52757
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52758
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 52759
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52760
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52761
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52762
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52763
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52764
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52765
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52766
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52767
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52768
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52769
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52770
    //MOV
    t16_0.w = 1.0;
    //Instruction 52771
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 52772
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 52773
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 52774
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 52775
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52776
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 52777
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52778
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 51803
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51804
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 51805
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 51806
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51807
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 51808
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 51809
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 51810
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 51811
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 51812
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 51813
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 51814
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 51815
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 51816
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 51817
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 51818
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 51819
    //FRC
    t2.x = fract(t2.x);
    //Instruction 51820
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 51821
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 51822
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 51823
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 51824
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 51825
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 51826
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 51827
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 51828
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 51829
    //IF
    if(tb23){
        //Instruction 51830
        //IF
        if(tb22){
            //Instruction 51831
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51832
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 51833
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 51834
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 51835
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 51836
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51837
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51838
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51839
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51840
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51841
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51842
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51843
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 51844
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51845
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51846
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 51847
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51848
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51849
            //FRC
            t0 = fract(t0);
            //Instruction 51850
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51851
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 51852
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51853
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51854
            //ADD
            t0 = t0 + t0;
            //Instruction 51855
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 51856
            //LT
            tb23 = t5.w<0.0;
            //Instruction 51857
            //MOV
            t5.y = (-t5.w);
            //Instruction 51858
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 51859
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 51860
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 51861
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 51862
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 51863
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 51864
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 51865
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51866
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51867
            //MUL
            t25 = t0.x * t25;
            //Instruction 51868
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 51869
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51870
            //MUL
            t23 = t23 * t24;
            //Instruction 51871
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 51872
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 51873
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51874
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51875
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51876
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 51877
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 51878
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51879
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 51880
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51881
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 51882
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 51883
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 51884
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 51885
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51886
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 51887
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 51888
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 51889
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51890
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51891
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 51892
        //ELSE
        } else {
            //Instruction 51893
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51894
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51895
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51896
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51897
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51898
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51899
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 51900
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51901
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 51902
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 51903
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51904
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51905
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51906
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 51907
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51908
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51909
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 51910
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 51911
            //LT
            tb22 = t0.w<0.0;
            //Instruction 51912
            //MOV
            t0.y = (-t0.w);
            //Instruction 51913
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51914
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 51915
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 51916
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 51917
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 51918
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 51919
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 51920
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51921
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51922
            //MUL
            t24 = t24 * t4.x;
            //Instruction 51923
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 51924
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51925
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 51926
        //ENDIF
        }
        //Instruction 51927
    //ENDIF
    }
    //Instruction 51928
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 51929
    //SQRT
    t22 = sqrt(t22);
    //Instruction 51930
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51931
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 51932
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 51933
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 51934
    //NE
    tb3 = t23!=0.0;
    //Instruction 51935
    //LOG
    t10 = log2(t23);
    //Instruction 51936
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 51937
    //EXP
    t10 = exp2(t10);
    //Instruction 51938
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 51939
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51940
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51941
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 51942
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 51943
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51944
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 51945
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51946
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 51947
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 51948
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 51949
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51950
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 51951
    //MUL
    t23 = t23 * t3.x;
    //Instruction 51952
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 51953
    //MOV
    t3.y = t2.y;
    //Instruction 51954
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 51955
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 51956
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 51957
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 51958
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 51959
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51960
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 51961
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 51962
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 51963
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 51964
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 51965
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 51966
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 51967
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 51968
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 51969
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 51970
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 51971
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 51972
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 51973
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 51974
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 51975
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 51976
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 51977
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 51978
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 51979
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 51980
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51981
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51982
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51983
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 51984
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 51985
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 51986
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 51987
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 51988
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 51989
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 51990
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 51991
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 51992
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 51993
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 51994
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 51995
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 51996
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 51997
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 51998
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 51999
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 52000
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52001
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 52002
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 52003
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 52004
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52005
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 51775
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 51776
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 51777
    //MOV
    t1.x = t16_0.x;
    //Instruction 51778
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 51779
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51780
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 51781
    //LT
    tb1 = t16_1<0.0;
    //Instruction 51782
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51783
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 51784
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 51785
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51786
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 51787
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51788
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 51789
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51790
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51791
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51792
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 51793
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51794
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51795
    //MOV
    t16_0.w = 1.0;
    //Instruction 51796
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 51797
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 51798
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 51799
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 51800
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 51801
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51802
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_60;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 52815
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52816
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52817
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 52818
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52819
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 52820
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 52821
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 52822
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 52823
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52824
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52825
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 52826
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52827
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52828
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52829
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 52830
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52831
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 52832
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 52833
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 52834
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 52835
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 52836
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 52837
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 52838
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 52839
    //FRC
    t3.x = fract(t3.x);
    //Instruction 52840
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 52841
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 52842
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 52843
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 52844
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 52845
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 52846
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 52847
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 52848
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 52849
    //IF
    if(tb27){
        //Instruction 52850
        //IF
        if(tb25){
            //Instruction 52851
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52852
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 52853
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 52854
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 52855
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 52856
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 52857
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52858
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52859
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52860
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 52861
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 52862
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 52863
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52864
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52865
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 52866
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52867
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52868
            //FRC
            t2 = fract(t2);
            //Instruction 52869
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52870
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 52871
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52872
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52873
            //ADD
            t2 = t2 + t2;
            //Instruction 52874
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 52875
            //LT
            tb27 = t6.w<0.0;
            //Instruction 52876
            //MOV
            t6.y = (-t6.w);
            //Instruction 52877
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 52878
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 52879
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 52880
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 52881
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 52882
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 52883
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 52884
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52885
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52886
            //MUL
            t29 = t2.x * t29;
            //Instruction 52887
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 52888
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52889
            //MUL
            t27 = t27 * t28;
            //Instruction 52890
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 52891
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52892
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52893
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52894
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52895
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 52896
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 52897
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52898
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 52899
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52900
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 52901
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 52902
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 52903
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 52904
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52905
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 52906
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 52907
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 52908
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52909
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 52910
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 52911
        //ELSE
        } else {
            //Instruction 52912
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52913
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52914
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52915
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52916
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52917
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52918
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52919
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52920
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52921
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52922
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52923
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52924
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52925
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52926
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52927
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52928
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52929
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52930
            //MOV
            t2.y = (-t2.w);
            //Instruction 52931
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52932
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52933
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52934
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52935
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 52936
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 52937
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52938
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52939
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52940
            //MUL
            t27 = t27 * t5.x;
            //Instruction 52941
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 52942
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52943
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52944
        //ENDIF
        }
        //Instruction 52945
    //ENDIF
    }
    //Instruction 52946
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52947
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52948
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52949
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 52950
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 52951
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 52952
    //NE
    tb27 = t25!=0.0;
    //Instruction 52953
    //LOG
    t4.x = log2(t25);
    //Instruction 52954
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52955
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52956
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 52957
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52958
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52959
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52960
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52961
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52962
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52963
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52964
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52965
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52966
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 52967
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52968
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 52969
    //MUL
    t25 = t25 * t27;
    //Instruction 52970
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 52971
    //MOV
    t4.y = t3.y;
    //Instruction 52972
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 52973
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52974
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 52975
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52976
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 52977
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52978
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52979
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52980
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52981
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52982
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 52983
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 52984
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52985
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52986
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52987
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52988
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52989
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52990
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52991
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52992
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52993
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52994
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52995
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 52996
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 52997
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 52998
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52999
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53000
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53001
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 53002
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 53003
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 53004
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 53005
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 53006
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 53007
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 53008
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 53009
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 53010
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 53011
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 53012
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 53013
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 53014
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 53015
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 53016
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 53017
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 53018
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 53019
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 53020
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 53021
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 53022
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53023
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52777
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 52778
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52779
    //MOV
    t1.x = t16_0.x;
    //Instruction 52780
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52781
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52782
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 52783
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52784
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52785
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 52786
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52787
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52788
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52789
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52790
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52791
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52792
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52793
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52794
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 52795
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 52796
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 52797
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 52798
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52799
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52800
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52801
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52802
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52803
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52804
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52805
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52806
    //MOV
    t16_0.w = 1.0;
    //Instruction 52807
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 52808
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 52809
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 52810
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 52811
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52812
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 52813
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52814
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_60;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 53019
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 53020
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 53021
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 53022
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 53023
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 53024
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 53025
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 53026
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 53027
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 53028
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 53029
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 53030
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53031
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 53032
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 53033
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 53034
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 53035
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 53036
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 53037
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 53038
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 53039
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 53040
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 53041
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 53042
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 53043
    //FRC
    t3.x = fract(t3.x);
    //Instruction 53044
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 53045
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 53046
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 53047
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 53048
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 53049
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 53050
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 53051
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 53052
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 53053
    //IF
    if(tb27){
        //Instruction 53054
        //IF
        if(tb25){
            //Instruction 53055
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53056
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 53057
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 53058
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 53059
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 53060
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 53061
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53062
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53063
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53064
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53065
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 53066
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 53067
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53068
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 53069
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 53070
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 53071
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53072
            //FRC
            t2 = fract(t2);
            //Instruction 53073
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53074
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 53075
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53076
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53077
            //ADD
            t2 = t2 + t2;
            //Instruction 53078
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 53079
            //LT
            tb27 = t6.w<0.0;
            //Instruction 53080
            //MOV
            t6.y = (-t6.w);
            //Instruction 53081
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 53082
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 53083
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 53084
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 53085
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 53086
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 53087
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 53088
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53089
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53090
            //MUL
            t29 = t2.x * t29;
            //Instruction 53091
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 53092
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53093
            //MUL
            t27 = t27 * t28;
            //Instruction 53094
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 53095
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53096
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53097
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53098
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53099
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53100
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 53101
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53102
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 53103
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53104
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 53105
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 53106
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 53107
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 53108
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53109
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 53110
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 53111
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 53112
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53113
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 53114
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 53115
        //ELSE
        } else {
            //Instruction 53116
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53117
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53118
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53119
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53120
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 53121
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 53122
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53123
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 53124
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 53125
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53126
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53127
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53128
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 53129
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53130
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53131
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 53132
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 53133
            //LT
            tb0 = t2.w<0.0;
            //Instruction 53134
            //MOV
            t2.y = (-t2.w);
            //Instruction 53135
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 53136
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 53137
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 53138
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 53139
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 53140
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 53141
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 53142
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53143
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53144
            //MUL
            t27 = t27 * t5.x;
            //Instruction 53145
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 53146
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 53147
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53148
        //ENDIF
        }
        //Instruction 53149
    //ENDIF
    }
    //Instruction 53150
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 53151
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53152
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53153
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 53154
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 53155
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 53156
    //NE
    tb27 = t25!=0.0;
    //Instruction 53157
    //LOG
    t4.x = log2(t25);
    //Instruction 53158
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 53159
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 53160
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 53161
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53162
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53163
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 53164
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 53165
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53166
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 53167
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53168
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 53169
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 53170
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 53171
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53172
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 53173
    //MUL
    t25 = t25 * t27;
    //Instruction 53174
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 53175
    //MOV
    t4.y = t3.y;
    //Instruction 53176
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 53177
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 53178
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 53179
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 53180
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 53181
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 53182
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 53183
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 53184
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 53185
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 53186
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 53187
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 53188
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 53189
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 53190
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 53191
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 53192
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 53193
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 53194
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 53195
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 53196
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 53197
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 53198
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 53199
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 53200
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 53201
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 53202
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 53203
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53204
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53205
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 53206
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 53207
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 53208
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 53209
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 53210
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 53211
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 53212
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 53213
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 53214
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 53215
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 53216
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 53217
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 53218
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 53219
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 53220
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 53221
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 53222
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 53223
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 53224
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 53225
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 53226
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53227
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52982
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 52983
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52984
    //MOV
    t1.x = t16_0.x;
    //Instruction 52985
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52986
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52987
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 52988
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52989
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52990
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 52991
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52992
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52993
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52994
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52995
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52996
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52997
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52998
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52999
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 53000
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 53001
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 53002
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 53003
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 53004
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 53005
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 53006
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53007
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 53008
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 53009
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 53010
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 53011
    //MOV
    t16_0.w = 1.0;
    //Instruction 53012
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 53013
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 53014
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 53015
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 53016
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 53017
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 53018
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.x;
  tmpvar_75.y = worldBinormal_4.x;
  tmpvar_75.z = worldNormal_6.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.y;
  tmpvar_76.y = worldBinormal_4.y;
  tmpvar_76.z = worldNormal_6.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.z;
  tmpvar_77.y = worldBinormal_4.z;
  tmpvar_77.z = worldNormal_6.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_6;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_61;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 52048
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52049
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52050
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 52051
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52052
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 52053
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 52054
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 52055
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 52056
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52057
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 52058
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 52059
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52060
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52061
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52062
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 52063
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52064
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 52065
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 52066
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 52067
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 52068
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 52069
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 52070
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 52071
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 52072
    //FRC
    t3.x = fract(t3.x);
    //Instruction 52073
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 52074
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 52075
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 52076
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 52077
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 52078
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 52079
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 52080
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 52081
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 52082
    //IF
    if(tb30){
        //Instruction 52083
        //IF
        if(tb28){
            //Instruction 52084
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52085
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 52086
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 52087
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 52088
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 52089
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 52090
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52091
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52092
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52093
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 52094
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 52095
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 52096
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52097
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52098
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 52099
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52100
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52101
            //FRC
            t2 = fract(t2);
            //Instruction 52102
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52103
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 52104
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52105
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52106
            //ADD
            t2 = t2 + t2;
            //Instruction 52107
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 52108
            //LT
            tb30 = t6.w<0.0;
            //Instruction 52109
            //MOV
            t6.y = (-t6.w);
            //Instruction 52110
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 52111
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 52112
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 52113
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 52114
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 52115
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 52116
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 52117
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52118
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52119
            //MUL
            t32 = t2.x * t32;
            //Instruction 52120
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 52121
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52122
            //MUL
            t30 = t30 * t31;
            //Instruction 52123
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 52124
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52125
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52126
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52127
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52128
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 52129
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 52130
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52131
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 52132
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52133
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 52134
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 52135
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 52136
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 52137
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52138
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 52139
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 52140
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 52141
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52142
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 52143
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 52144
        //ELSE
        } else {
            //Instruction 52145
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52146
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52147
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52148
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52149
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52150
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52151
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52152
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52153
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52154
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52155
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52156
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52157
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52158
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52159
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52160
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52161
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52162
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52163
            //MOV
            t2.y = (-t2.w);
            //Instruction 52164
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52165
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52166
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52167
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52168
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 52169
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 52170
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52171
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52172
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52173
            //MUL
            t30 = t30 * t5.x;
            //Instruction 52174
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 52175
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52176
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52177
        //ENDIF
        }
        //Instruction 52178
    //ENDIF
    }
    //Instruction 52179
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52180
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52181
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52182
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 52183
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 52184
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 52185
    //NE
    tb30 = t28!=0.0;
    //Instruction 52186
    //LOG
    t4.x = log2(t28);
    //Instruction 52187
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52188
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52189
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 52190
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52191
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52192
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52193
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52194
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52195
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52196
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52197
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52198
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52199
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 52200
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52201
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 52202
    //MUL
    t28 = t28 * t30;
    //Instruction 52203
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 52204
    //MOV
    t4.y = t3.y;
    //Instruction 52205
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 52206
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52207
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 52208
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52209
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 52210
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52211
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52212
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52213
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52214
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52215
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 52216
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 52217
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52218
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52219
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52220
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52221
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52222
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52223
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52224
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52225
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52226
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52227
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52228
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 52229
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 52230
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 52231
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52232
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52233
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 52234
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 52235
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 52236
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52237
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52238
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 52239
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 52240
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 52241
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52242
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 52243
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 52244
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 52245
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 52246
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 52247
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52248
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 52249
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 52250
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 52251
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 52252
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 52253
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 52254
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 52255
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 52256
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 52257
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 52258
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 52259
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 52260
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 52261
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 52262
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 52263
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 52264
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 52265
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 52266
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 52267
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 52268
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 52269
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 52270
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 52271
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 52272
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52273
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 52274
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 52275
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52276
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52006
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52007
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52008
    //MOV
    t1.x = t16_0.x;
    //Instruction 52009
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52010
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52011
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 52012
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52013
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52014
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 52015
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52016
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52017
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52018
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52019
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52020
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52021
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52022
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52023
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 52024
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 52025
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 52026
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 52027
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 52028
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52029
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52030
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52031
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52032
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 52033
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 52034
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 52035
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 52036
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 52037
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52038
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52039
    //MOV
    t0.w = 1.0;
    //Instruction 52040
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 52041
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 52042
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 52043
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52044
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52045
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 52046
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52047
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_60;
  hPos_60 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_61;
  highp vec4 o_62;
  highp vec4 tmpvar_63;
  tmpvar_63 = (hPos_60 * 0.5);
  highp vec2 tmpvar_64;
  tmpvar_64.x = tmpvar_63.x;
  tmpvar_64.y = (tmpvar_63.y * _ProjectionParams.x);
  o_62.xy = (tmpvar_64 + tmpvar_63.w);
  o_62.zw = hPos_60.zw;
  highp vec3 tmpvar_65;
  tmpvar_65 = o_62.xyw;
  screenPos_61 = tmpvar_65;
  screenPos_61.xy = (screenPos_61.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_66;
  tmpvar_66 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_67;
  v_67.x = _World2Object[0].x;
  v_67.y = _World2Object[1].x;
  v_67.z = _World2Object[2].x;
  v_67.w = _World2Object[3].x;
  highp vec4 v_68;
  v_68.x = _World2Object[0].y;
  v_68.y = _World2Object[1].y;
  v_68.z = _World2Object[2].y;
  v_68.w = _World2Object[3].y;
  highp vec4 v_69;
  v_69.x = _World2Object[0].z;
  v_69.y = _World2Object[1].z;
  v_69.z = _World2Object[2].z;
  v_69.w = _World2Object[3].z;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize(((
    (v_67.xyz * tmpvar_15.x)
   + 
    (v_68.xyz * tmpvar_15.y)
  ) + (v_69.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_70;
  highp mat3 tmpvar_71;
  tmpvar_71[0] = _Object2World[0].xyz;
  tmpvar_71[1] = _Object2World[1].xyz;
  tmpvar_71[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_72;
  tmpvar_72 = normalize((tmpvar_71 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_74;
  tmpvar_74 = (tmpvar_73 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_74;
  highp vec4 tmpvar_75;
  tmpvar_75.x = worldTangent_5.x;
  tmpvar_75.y = worldBinormal_4.x;
  tmpvar_75.z = worldNormal_6.x;
  tmpvar_75.w = tmpvar_66.x;
  highp vec4 tmpvar_76;
  tmpvar_76.x = worldTangent_5.y;
  tmpvar_76.y = worldBinormal_4.y;
  tmpvar_76.z = worldNormal_6.y;
  tmpvar_76.w = tmpvar_66.y;
  highp vec4 tmpvar_77;
  tmpvar_77.x = worldTangent_5.z;
  tmpvar_77.y = worldBinormal_4.z;
  tmpvar_77.z = worldNormal_6.z;
  tmpvar_77.w = tmpvar_66.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_78;
  tmpvar_78.w = 1.0;
  tmpvar_78.xyz = worldNormal_6;
  mediump vec4 normal_79;
  normal_79 = tmpvar_78;
  mediump vec3 x2_80;
  mediump vec4 tmpvar_81;
  tmpvar_81 = (normal_79.xyzz * normal_79.yzzx);
  x2_80.x = dot (unity_SHBr, tmpvar_81);
  x2_80.y = dot (unity_SHBg, tmpvar_81);
  x2_80.z = dot (unity_SHBb, tmpvar_81);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_75;
  xlv_TEXCOORD1 = tmpvar_76;
  xlv_TEXCOORD2 = tmpvar_77;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_61;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_80 + (unity_SHC.xyz * (
    (normal_79.x * normal_79.x)
   - 
    (normal_79.y * normal_79.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 52318
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52319
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52320
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 52321
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52322
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 52323
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 52324
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 52325
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 52326
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52327
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 52328
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 52329
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52330
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52331
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52332
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 52333
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52334
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 52335
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 52336
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 52337
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 52338
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 52339
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 52340
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 52341
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 52342
    //FRC
    t3.x = fract(t3.x);
    //Instruction 52343
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 52344
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 52345
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 52346
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 52347
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 52348
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 52349
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 52350
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 52351
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 52352
    //IF
    if(tb30){
        //Instruction 52353
        //IF
        if(tb28){
            //Instruction 52354
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52355
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 52356
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 52357
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 52358
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 52359
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 52360
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52361
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52362
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52363
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 52364
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 52365
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 52366
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52367
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52368
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 52369
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52370
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52371
            //FRC
            t2 = fract(t2);
            //Instruction 52372
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52373
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 52374
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52375
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52376
            //ADD
            t2 = t2 + t2;
            //Instruction 52377
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 52378
            //LT
            tb30 = t6.w<0.0;
            //Instruction 52379
            //MOV
            t6.y = (-t6.w);
            //Instruction 52380
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 52381
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 52382
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 52383
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 52384
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 52385
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 52386
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 52387
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52388
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52389
            //MUL
            t32 = t2.x * t32;
            //Instruction 52390
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 52391
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52392
            //MUL
            t30 = t30 * t31;
            //Instruction 52393
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 52394
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52395
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52396
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52397
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52398
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 52399
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 52400
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52401
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 52402
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52403
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 52404
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 52405
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 52406
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 52407
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52408
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 52409
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 52410
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 52411
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52412
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 52413
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 52414
        //ELSE
        } else {
            //Instruction 52415
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52416
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52417
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52418
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52419
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52420
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52421
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52422
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52423
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52424
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52425
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52426
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52427
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52428
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52429
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52430
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52431
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52432
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52433
            //MOV
            t2.y = (-t2.w);
            //Instruction 52434
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52435
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52436
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52437
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52438
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 52439
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 52440
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52441
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52442
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52443
            //MUL
            t30 = t30 * t5.x;
            //Instruction 52444
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 52445
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52446
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 52447
        //ENDIF
        }
        //Instruction 52448
    //ENDIF
    }
    //Instruction 52449
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52450
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52451
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52452
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 52453
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 52454
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 52455
    //NE
    tb30 = t28!=0.0;
    //Instruction 52456
    //LOG
    t4.x = log2(t28);
    //Instruction 52457
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52458
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52459
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 52460
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52461
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52462
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52463
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52464
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52465
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52466
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52467
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52468
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52469
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 52470
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52471
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 52472
    //MUL
    t28 = t28 * t30;
    //Instruction 52473
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 52474
    //MOV
    t4.y = t3.y;
    //Instruction 52475
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 52476
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52477
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 52478
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52479
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 52480
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52481
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52482
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52483
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52484
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52485
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 52486
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 52487
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52488
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52489
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52490
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52491
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52492
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52493
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52494
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52495
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52496
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52497
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52498
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 52499
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 52500
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 52501
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52502
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52503
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 52504
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 52505
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 52506
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52507
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52508
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 52509
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 52510
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 52511
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52512
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 52513
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 52514
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 52515
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 52516
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 52517
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52518
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 52519
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 52520
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 52521
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 52522
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 52523
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 52524
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 52525
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 52526
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 52527
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 52528
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 52529
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 52530
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 52531
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 52532
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 52533
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 52534
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 52535
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 52536
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 52537
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 52538
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 52539
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 52540
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 52541
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 52542
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52543
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 52544
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 52545
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52546
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52277
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52278
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52279
    //MOV
    t1.x = t16_0.x;
    //Instruction 52280
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52281
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52282
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 52283
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52284
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52285
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 52286
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52287
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52288
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52289
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52290
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52291
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52292
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52293
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52294
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 52295
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 52296
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 52297
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 52298
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 52299
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52300
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52301
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52302
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52303
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 52304
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 52305
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 52306
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 52307
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 52308
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52309
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52310
    //MOV
    t0.w = 1.0;
    //Instruction 52311
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 52312
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 52313
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 52314
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52315
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52316
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52317
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_11.x)
   + 
    (v_103.xyz * tmpvar_11.y)
  ) + (v_104.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_105;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_4;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_97;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 53257
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 53258
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 53259
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 53260
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53261
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 53262
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 53263
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 53264
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 53265
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 53266
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 53267
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 53268
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 53269
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 53270
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 53271
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 53272
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 53273
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 53274
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 53275
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 53276
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 53277
        //FRC
        t16.x = fract(t16.x);
        //Instruction 53278
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 53279
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 53280
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 53281
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 53282
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 53283
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 53284
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 53285
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 53286
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 53287
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 53288
        //IF
        if(tb31){
            //Instruction 53289
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 53290
            //FRC
            t4 = fract(t4);
            //Instruction 53291
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53292
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53293
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53294
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 53295
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 53296
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 53297
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53298
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 53299
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53300
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 53301
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53302
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 53303
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 53304
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 53305
            //SQRT
            t47 = sqrt(t47);
            //Instruction 53306
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 53307
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 53308
            //MUL
            t48 = t48 * t5.x;
            //Instruction 53309
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 53310
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 53311
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 53312
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 53313
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 53314
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 53315
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 53316
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 53317
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 53318
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 53319
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 53320
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 53321
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 53322
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 53323
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 53324
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 53325
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 53326
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 53327
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 53328
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 53329
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 53330
            //SQRT
            t48 = sqrt(t48);
            //Instruction 53331
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 53332
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 53333
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 53334
            //MUL
            t35 = t48 * t5.x;
            //Instruction 53335
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 53336
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 53337
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 53338
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 53339
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 53340
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 53341
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 53342
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53343
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 53344
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53345
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 53346
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53347
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 53348
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 53349
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 53350
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 53351
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 53352
            //LOG
            t46 = log2(t46);
            //Instruction 53353
            //MUL
            t31 = t46 * t16.y;
            //Instruction 53354
            //EXP
            t31 = exp2(t31);
            //Instruction 53355
            //MUL
            t46 = t5.y * t48;
            //Instruction 53356
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 53357
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 53358
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 53359
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 53360
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 53361
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 53362
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 53363
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 53364
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 53365
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 53366
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 53367
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 53368
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 53369
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 53370
            //MOV
            t10.z = t11.x;
            //Instruction 53371
            //MOV
            t10.w = t9.x;
            //Instruction 53372
            //MOV
            t12.z = t8.y;
            //Instruction 53373
            //MOV
            t12.w = t13.y;
            //Instruction 53374
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 53375
            //MOV
            t13.w = t12.y;
            //Instruction 53376
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 53377
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 53378
            //MOV
            t9.w = t10.y;
            //Instruction 53379
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 53380
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 53381
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 53382
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 53383
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 53384
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 53385
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 53386
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 53387
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 53388
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 53389
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 53390
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 53391
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 53392
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 53393
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53394
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 53395
        //ELSE
        } else {
            //Instruction 53396
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 53397
        //ENDIF
        }
        //Instruction 53398
    //ELSE
    } else {
        //Instruction 53399
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 53400
    //ENDIF
    }
    //Instruction 53401
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 53402
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 53403
    //IF
    if(tb17){
        //Instruction 53404
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 53405
        //IF
        if(tb17){
            //Instruction 53406
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53407
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 53408
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 53409
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 53410
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 53411
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53412
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53413
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53414
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53415
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53416
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53417
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 53418
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 53419
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53420
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53421
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 53422
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53423
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53424
            //FRC
            t0 = fract(t0);
            //Instruction 53425
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53426
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 53427
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53428
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53429
            //ADD
            t0 = t0 + t0;
            //Instruction 53430
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 53431
            //LT
            tb47 = t6.w<0.0;
            //Instruction 53432
            //MOV
            t6.y = (-t6.w);
            //Instruction 53433
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 53434
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 53435
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 53436
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 53437
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 53438
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 53439
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 53440
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53441
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53442
            //MUL
            t49 = t0.x * t49;
            //Instruction 53443
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 53444
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53445
            //MUL
            t47 = t47 * t48;
            //Instruction 53446
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 53447
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53448
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53449
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53450
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53451
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53452
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 53453
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53454
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 53455
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53456
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 53457
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 53458
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 53459
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 53460
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53461
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 53462
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 53463
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 53464
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53465
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53466
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 53467
        //ELSE
        } else {
            //Instruction 53468
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53469
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53470
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53471
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53472
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53473
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 53474
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 53475
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53476
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 53477
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 53478
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53479
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53480
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53481
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 53482
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53483
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53484
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 53485
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 53486
            //LT
            tb17 = t0.w<0.0;
            //Instruction 53487
            //MOV
            t0.y = (-t0.w);
            //Instruction 53488
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53489
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 53490
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 53491
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 53492
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 53493
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 53494
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 53495
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53496
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53497
            //MUL
            t48 = t48 * t5.x;
            //Instruction 53498
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 53499
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53500
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53501
        //ENDIF
        }
        //Instruction 53502
    //ENDIF
    }
    //Instruction 53503
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 53504
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 53505
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53506
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 53507
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 53508
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 53509
    //NE
    tb48 = t47!=0.0;
    //Instruction 53510
    //LOG
    t4.x = log2(t47);
    //Instruction 53511
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 53512
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 53513
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 53514
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53515
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53516
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 53517
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 53518
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53519
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 53520
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53521
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 53522
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 53523
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 53524
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53525
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 53526
    //MUL
    t47 = t47 * t48;
    //Instruction 53527
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 53528
    //MOV
    t4.y = t3.y;
    //Instruction 53529
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 53530
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 53531
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 53532
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 53533
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 53534
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 53535
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 53536
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 53537
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 53538
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 53539
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 53540
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 53541
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 53542
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 53543
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 53544
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 53545
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 53546
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 53547
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 53548
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 53549
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 53550
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 53551
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 53552
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 53553
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 53554
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 53555
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 53556
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53557
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53558
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 53559
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t4.xyz;
    //Instruction 53560
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 53561
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 53562
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 53563
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 53564
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 53565
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 53566
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 53567
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 53568
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 53569
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 53570
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 53571
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 53572
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 53573
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 53574
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 53575
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 53576
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 53577
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 53578
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 53579
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53580
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 53228
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 53229
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 53230
    //MOV
    t1.x = t16_0.x;
    //Instruction 53231
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 53232
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 53233
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 53234
    //LT
    tb1 = t16_1<0.0;
    //Instruction 53235
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53236
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 53237
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 53238
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 53239
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 53240
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53241
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 53242
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 53243
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53244
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 53245
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 53246
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 53247
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 53248
    //MOV
    t16_0.w = 1.0;
    //Instruction 53249
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 53250
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 53251
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 53252
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 53253
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 53254
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 53255
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 53256
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_96;
  hPos_96 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_97;
  highp vec4 o_98;
  highp vec4 tmpvar_99;
  tmpvar_99 = (hPos_96 * 0.5);
  highp vec2 tmpvar_100;
  tmpvar_100.x = tmpvar_99.x;
  tmpvar_100.y = (tmpvar_99.y * _ProjectionParams.x);
  o_98.xy = (tmpvar_100 + tmpvar_99.w);
  o_98.zw = hPos_96.zw;
  highp vec3 tmpvar_101;
  tmpvar_101 = o_98.xyw;
  screenPos_97 = tmpvar_101;
  screenPos_97.xy = (screenPos_97.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_11.x)
   + 
    (v_103.xyz * tmpvar_11.y)
  ) + (v_104.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_105;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_4;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_97;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 53052
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 53053
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 53054
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 53055
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53056
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 53057
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 53058
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 53059
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 53060
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 53061
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 53062
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 53063
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 53064
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 53065
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 53066
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 53067
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 53068
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 53069
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 53070
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 53071
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 53072
        //FRC
        t16.x = fract(t16.x);
        //Instruction 53073
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 53074
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 53075
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 53076
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 53077
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 53078
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 53079
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 53080
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 53081
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 53082
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 53083
        //IF
        if(tb31){
            //Instruction 53084
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 53085
            //FRC
            t4 = fract(t4);
            //Instruction 53086
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53087
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53088
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53089
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 53090
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 53091
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 53092
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53093
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 53094
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53095
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 53096
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53097
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 53098
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 53099
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 53100
            //SQRT
            t47 = sqrt(t47);
            //Instruction 53101
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 53102
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 53103
            //MUL
            t48 = t48 * t5.x;
            //Instruction 53104
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 53105
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 53106
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 53107
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 53108
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 53109
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 53110
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 53111
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 53112
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 53113
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 53114
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 53115
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 53116
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 53117
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 53118
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 53119
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 53120
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 53121
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 53122
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 53123
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 53124
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 53125
            //SQRT
            t48 = sqrt(t48);
            //Instruction 53126
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 53127
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 53128
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 53129
            //MUL
            t35 = t48 * t5.x;
            //Instruction 53130
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 53131
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 53132
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 53133
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 53134
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 53135
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 53136
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 53137
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53138
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 53139
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53140
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 53141
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53142
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 53143
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 53144
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 53145
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 53146
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 53147
            //LOG
            t46 = log2(t46);
            //Instruction 53148
            //MUL
            t31 = t46 * t16.y;
            //Instruction 53149
            //EXP
            t31 = exp2(t31);
            //Instruction 53150
            //MUL
            t46 = t5.y * t48;
            //Instruction 53151
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 53152
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 53153
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 53154
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 53155
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 53156
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 53157
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 53158
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 53159
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 53160
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 53161
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 53162
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 53163
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 53164
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 53165
            //MOV
            t10.z = t11.x;
            //Instruction 53166
            //MOV
            t10.w = t9.x;
            //Instruction 53167
            //MOV
            t12.z = t8.y;
            //Instruction 53168
            //MOV
            t12.w = t13.y;
            //Instruction 53169
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 53170
            //MOV
            t13.w = t12.y;
            //Instruction 53171
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 53172
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 53173
            //MOV
            t9.w = t10.y;
            //Instruction 53174
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 53175
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 53176
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 53177
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 53178
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 53179
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 53180
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 53181
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 53182
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 53183
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 53184
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 53185
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 53186
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 53187
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 53188
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53189
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 53190
        //ELSE
        } else {
            //Instruction 53191
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 53192
        //ENDIF
        }
        //Instruction 53193
    //ELSE
    } else {
        //Instruction 53194
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 53195
    //ENDIF
    }
    //Instruction 53196
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 53197
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 53198
    //IF
    if(tb17){
        //Instruction 53199
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 53200
        //IF
        if(tb17){
            //Instruction 53201
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53202
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 53203
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 53204
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 53205
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 53206
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53207
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53208
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53209
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53210
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53211
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53212
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 53213
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 53214
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53215
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53216
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 53217
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53218
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53219
            //FRC
            t0 = fract(t0);
            //Instruction 53220
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53221
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 53222
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53223
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53224
            //ADD
            t0 = t0 + t0;
            //Instruction 53225
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 53226
            //LT
            tb47 = t6.w<0.0;
            //Instruction 53227
            //MOV
            t6.y = (-t6.w);
            //Instruction 53228
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 53229
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 53230
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 53231
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 53232
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 53233
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 53234
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 53235
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53236
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53237
            //MUL
            t49 = t0.x * t49;
            //Instruction 53238
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 53239
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53240
            //MUL
            t47 = t47 * t48;
            //Instruction 53241
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 53242
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53243
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53244
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53245
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53246
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53247
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 53248
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53249
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 53250
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53251
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 53252
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 53253
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 53254
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 53255
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53256
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 53257
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 53258
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 53259
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53260
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53261
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 53262
        //ELSE
        } else {
            //Instruction 53263
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53264
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53265
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53266
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53267
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53268
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 53269
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 53270
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53271
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 53272
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 53273
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53274
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53275
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53276
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 53277
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53278
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53279
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 53280
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 53281
            //LT
            tb17 = t0.w<0.0;
            //Instruction 53282
            //MOV
            t0.y = (-t0.w);
            //Instruction 53283
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53284
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 53285
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 53286
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 53287
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 53288
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 53289
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 53290
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53291
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53292
            //MUL
            t48 = t48 * t5.x;
            //Instruction 53293
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 53294
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 53295
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 53296
        //ENDIF
        }
        //Instruction 53297
    //ENDIF
    }
    //Instruction 53298
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 53299
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 53300
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53301
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 53302
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 53303
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 53304
    //NE
    tb48 = t47!=0.0;
    //Instruction 53305
    //LOG
    t4.x = log2(t47);
    //Instruction 53306
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 53307
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 53308
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 53309
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53310
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53311
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 53312
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 53313
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53314
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 53315
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53316
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 53317
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 53318
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 53319
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53320
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 53321
    //MUL
    t47 = t47 * t48;
    //Instruction 53322
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 53323
    //MOV
    t4.y = t3.y;
    //Instruction 53324
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 53325
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 53326
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 53327
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 53328
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 53329
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 53330
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 53331
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 53332
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 53333
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 53334
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 53335
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 53336
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 53337
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 53338
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 53339
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 53340
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 53341
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 53342
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 53343
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 53344
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 53345
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 53346
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 53347
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 53348
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 53349
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 53350
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 53351
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53352
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53353
    //MUL
    t4.xyz = t16.yyy * t4.xyz;
    //Instruction 53354
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t4.xyz;
    //Instruction 53355
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 53356
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 53357
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 53358
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 53359
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 53360
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 53361
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 53362
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 53363
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 53364
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 53365
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 53366
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 53367
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 53368
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 53369
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 53370
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 53371
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 53372
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 53373
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 53374
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53375
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 53024
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 53025
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 53026
    //MOV
    t1.x = t16_0.x;
    //Instruction 53027
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 53028
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 53029
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 53030
    //LT
    tb1 = t16_1<0.0;
    //Instruction 53031
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53032
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 53033
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 53034
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 53035
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 53036
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53037
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 53038
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 53039
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53040
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 53041
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 53042
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 53043
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 53044
    //MOV
    t16_0.w = 1.0;
    //Instruction 53045
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 53046
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 53047
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 53048
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 53049
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 53050
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 53051
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_110 + (unity_SHC.xyz * (
    (normal_109.x * normal_109.x)
   - 
    (normal_109.y * normal_109.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 52585
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52586
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52587
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 52588
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52589
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 52590
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 52591
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 52592
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 52593
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52594
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52595
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 52596
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52597
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52598
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52599
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 52600
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 52601
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 52602
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 52603
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 52604
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 52605
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 52606
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 52607
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 52608
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 52609
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 52610
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 52611
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 52612
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 52613
        //FRC
        t32.x = fract(t32.x);
        //Instruction 52614
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 52615
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 52616
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 52617
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 52618
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 52619
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 52620
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 52621
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 52622
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 52623
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 52624
        //IF
        if(tb48){
            //Instruction 52625
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 52626
            //FRC
            t5 = fract(t5);
            //Instruction 52627
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52628
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 52629
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 52630
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 52631
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 52632
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 52633
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 52634
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 52635
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52636
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 52637
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52638
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 52639
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 52640
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 52641
            //SQRT
            t49 = sqrt(t49);
            //Instruction 52642
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 52643
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 52644
            //MUL
            t51 = t51 * t52;
            //Instruction 52645
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 52646
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 52647
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 52648
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 52649
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 52650
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 52651
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 52652
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 52653
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 52654
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 52655
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 52656
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 52657
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 52658
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 52659
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 52660
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 52661
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 52662
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 52663
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 52664
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 52665
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 52666
            //SQRT
            t51 = sqrt(t51);
            //Instruction 52667
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 52668
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 52669
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 52670
            //MUL
            t6.x = t51 * t52;
            //Instruction 52671
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 52672
            //LT
            tb19 = t19<(-t19);
            //Instruction 52673
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 52674
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 52675
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 52676
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 52677
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 52678
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 52679
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 52680
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52681
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 52682
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52683
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 52684
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 52685
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 52686
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 52687
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 52688
            //LOG
            t48 = log2(t48);
            //Instruction 52689
            //MUL
            t48 = t48 * t7.y;
            //Instruction 52690
            //EXP
            t48 = exp2(t48);
            //Instruction 52691
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 52692
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 52693
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 52694
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 52695
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 52696
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 52697
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 52698
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 52699
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 52700
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 52701
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 52702
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 52703
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 52704
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 52705
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 52706
            //MOV
            t11.z = t12.x;
            //Instruction 52707
            //MOV
            t11.w = t10.x;
            //Instruction 52708
            //MOV
            t13.z = t9.y;
            //Instruction 52709
            //MOV
            t13.w = t14.y;
            //Instruction 52710
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 52711
            //MOV
            t14.w = t13.y;
            //Instruction 52712
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 52713
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 52714
            //MOV
            t10.w = t11.y;
            //Instruction 52715
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 52716
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 52717
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 52718
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 52719
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 52720
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 52721
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 52722
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 52723
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 52724
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 52725
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 52726
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 52727
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 52728
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 52729
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 52730
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 52731
        //ELSE
        } else {
            //Instruction 52732
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 52733
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 52734
        //ENDIF
        }
        //Instruction 52735
    //ELSE
    } else {
        //Instruction 52736
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 52737
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 52738
    //ENDIF
    }
    //Instruction 52739
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 52740
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 52741
    //IF
    if(tb49){
        //Instruction 52742
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 52743
        //IF
        if(tb49){
            //Instruction 52744
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52745
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 52746
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 52747
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 52748
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 52749
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 52750
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52751
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 52752
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52753
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 52754
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 52755
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 52756
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52757
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52758
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 52759
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52760
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52761
            //FRC
            t2 = fract(t2);
            //Instruction 52762
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52763
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 52764
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52765
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52766
            //ADD
            t2 = t2 + t2;
            //Instruction 52767
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 52768
            //LT
            tb51 = t7.w<0.0;
            //Instruction 52769
            //MOV
            t7.y = (-t7.w);
            //Instruction 52770
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 52771
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 52772
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 52773
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 52774
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 52775
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 52776
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 52777
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52778
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52779
            //MUL
            t53 = t2.x * t53;
            //Instruction 52780
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 52781
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52782
            //MUL
            t51 = t51 * t52;
            //Instruction 52783
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 52784
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 52785
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52786
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52787
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52788
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 52789
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 52790
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52791
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 52792
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52793
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 52794
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 52795
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 52796
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 52797
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52798
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 52799
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 52800
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 52801
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52802
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 52803
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 52804
        //ELSE
        } else {
            //Instruction 52805
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52806
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52807
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52808
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 52809
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52810
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52811
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52812
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 52813
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 52814
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52815
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 52816
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52817
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 52818
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52819
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52820
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 52821
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 52822
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52823
            //MOV
            t2.y = (-t2.w);
            //Instruction 52824
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52825
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52826
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 52827
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 52828
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 52829
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 52830
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52831
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52832
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52833
            //MUL
            t51 = t51 * t6.x;
            //Instruction 52834
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 52835
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 52836
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 52837
        //ENDIF
        }
        //Instruction 52838
    //ENDIF
    }
    //Instruction 52839
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 52840
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52841
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52842
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 52843
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 52844
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 52845
    //NE
    tb51 = t49!=0.0;
    //Instruction 52846
    //LOG
    t52 = log2(t49);
    //Instruction 52847
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 52848
    //EXP
    t52 = exp2(t52);
    //Instruction 52849
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 52850
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52851
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52852
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 52853
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 52854
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52855
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 52856
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52857
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 52858
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 52859
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 52860
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52861
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 52862
    //MUL
    t49 = t49 * t51;
    //Instruction 52863
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 52864
    //MOV
    t5.y = t4.y;
    //Instruction 52865
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 52866
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 52867
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 52868
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 52869
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 52870
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 52871
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 52872
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 52873
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 52874
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 52875
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 52876
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 52877
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 52878
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 52879
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 52880
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 52881
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 52882
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 52883
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52884
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 52885
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 52886
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 52887
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 52888
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 52889
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 52890
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 52891
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 52892
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 52893
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 52894
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 52895
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 52896
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 52897
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 52898
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 52899
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 52900
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 52901
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 52902
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 52903
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 52904
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 52905
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 52906
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 52907
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 52908
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 52909
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 52910
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 52911
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52912
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52913
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 52914
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 52915
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52916
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52547
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 52548
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52549
    //MOV
    t1.x = t16_0.x;
    //Instruction 52550
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52551
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52552
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 52553
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52554
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52555
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 52556
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52557
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52558
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52559
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52560
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52561
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52562
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52563
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52564
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 52565
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 52566
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 52567
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 52568
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52569
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52570
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52571
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52572
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52573
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52574
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52575
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52576
    //MOV
    t16_0.w = 1.0;
    //Instruction 52577
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 52578
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 52579
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 52580
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 52581
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52582
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 52583
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52584
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_107;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_108;
  tmpvar_108.w = 1.0;
  tmpvar_108.xyz = worldNormal_4;
  mediump vec4 normal_109;
  normal_109 = tmpvar_108;
  mediump vec3 x2_110;
  mediump vec4 tmpvar_111;
  tmpvar_111 = (normal_109.xyzz * normal_109.yzzx);
  x2_110.x = dot (unity_SHBr, tmpvar_111);
  x2_110.y = dot (unity_SHBg, tmpvar_111);
  x2_110.z = dot (unity_SHBb, tmpvar_111);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_99;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_110 + (unity_SHC.xyz * (
    (normal_109.x * normal_109.x)
   - 
    (normal_109.y * normal_109.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 53618
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 53619
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 53620
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 53621
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 53622
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 53623
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 53624
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 53625
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 53626
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 53627
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 53628
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 53629
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53630
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 53631
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 53632
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 53633
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 53634
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 53635
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 53636
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 53637
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 53638
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 53639
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 53640
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 53641
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 53642
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 53643
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 53644
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 53645
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 53646
        //FRC
        t32.x = fract(t32.x);
        //Instruction 53647
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 53648
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 53649
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 53650
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 53651
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 53652
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 53653
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 53654
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 53655
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 53656
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 53657
        //IF
        if(tb48){
            //Instruction 53658
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 53659
            //FRC
            t5 = fract(t5);
            //Instruction 53660
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53661
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53662
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53663
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 53664
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 53665
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 53666
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53667
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 53668
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53669
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 53670
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53671
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 53672
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 53673
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 53674
            //SQRT
            t49 = sqrt(t49);
            //Instruction 53675
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 53676
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 53677
            //MUL
            t51 = t51 * t52;
            //Instruction 53678
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 53679
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 53680
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 53681
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 53682
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 53683
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 53684
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 53685
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 53686
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 53687
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 53688
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 53689
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 53690
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 53691
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 53692
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 53693
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 53694
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 53695
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 53696
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 53697
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 53698
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 53699
            //SQRT
            t51 = sqrt(t51);
            //Instruction 53700
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 53701
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 53702
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 53703
            //MUL
            t6.x = t51 * t52;
            //Instruction 53704
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 53705
            //LT
            tb19 = t19<(-t19);
            //Instruction 53706
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 53707
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 53708
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 53709
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 53710
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 53711
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53712
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 53713
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53714
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 53715
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53716
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 53717
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 53718
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 53719
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 53720
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 53721
            //LOG
            t48 = log2(t48);
            //Instruction 53722
            //MUL
            t48 = t48 * t7.y;
            //Instruction 53723
            //EXP
            t48 = exp2(t48);
            //Instruction 53724
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 53725
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 53726
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 53727
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 53728
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 53729
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 53730
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 53731
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 53732
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 53733
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 53734
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 53735
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 53736
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 53737
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 53738
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 53739
            //MOV
            t11.z = t12.x;
            //Instruction 53740
            //MOV
            t11.w = t10.x;
            //Instruction 53741
            //MOV
            t13.z = t9.y;
            //Instruction 53742
            //MOV
            t13.w = t14.y;
            //Instruction 53743
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 53744
            //MOV
            t14.w = t13.y;
            //Instruction 53745
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 53746
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 53747
            //MOV
            t10.w = t11.y;
            //Instruction 53748
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 53749
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 53750
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 53751
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 53752
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 53753
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 53754
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 53755
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 53756
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 53757
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 53758
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 53759
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 53760
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 53761
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 53762
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 53763
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 53764
        //ELSE
        } else {
            //Instruction 53765
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 53766
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 53767
        //ENDIF
        }
        //Instruction 53768
    //ELSE
    } else {
        //Instruction 53769
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 53770
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 53771
    //ENDIF
    }
    //Instruction 53772
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 53773
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 53774
    //IF
    if(tb49){
        //Instruction 53775
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 53776
        //IF
        if(tb49){
            //Instruction 53777
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53778
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 53779
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 53780
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 53781
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 53782
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 53783
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53784
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53785
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53786
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 53787
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 53788
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 53789
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53790
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 53791
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 53792
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 53793
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53794
            //FRC
            t2 = fract(t2);
            //Instruction 53795
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53796
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 53797
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53798
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53799
            //ADD
            t2 = t2 + t2;
            //Instruction 53800
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 53801
            //LT
            tb51 = t7.w<0.0;
            //Instruction 53802
            //MOV
            t7.y = (-t7.w);
            //Instruction 53803
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 53804
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 53805
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 53806
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 53807
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 53808
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 53809
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 53810
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53811
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53812
            //MUL
            t53 = t2.x * t53;
            //Instruction 53813
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 53814
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53815
            //MUL
            t51 = t51 * t52;
            //Instruction 53816
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 53817
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53818
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53819
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53820
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53821
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 53822
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 53823
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53824
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 53825
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53826
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 53827
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 53828
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 53829
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 53830
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53831
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 53832
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 53833
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 53834
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53835
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 53836
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 53837
        //ELSE
        } else {
            //Instruction 53838
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53839
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53840
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53841
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53842
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 53843
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 53844
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53845
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 53846
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 53847
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53848
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53849
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53850
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 53851
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53852
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53853
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 53854
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 53855
            //LT
            tb0 = t2.w<0.0;
            //Instruction 53856
            //MOV
            t2.y = (-t2.w);
            //Instruction 53857
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 53858
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 53859
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 53860
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 53861
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 53862
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 53863
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 53864
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53865
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53866
            //MUL
            t51 = t51 * t6.x;
            //Instruction 53867
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 53868
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 53869
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53870
        //ENDIF
        }
        //Instruction 53871
    //ENDIF
    }
    //Instruction 53872
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 53873
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53874
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53875
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 53876
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 53877
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 53878
    //NE
    tb51 = t49!=0.0;
    //Instruction 53879
    //LOG
    t52 = log2(t49);
    //Instruction 53880
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 53881
    //EXP
    t52 = exp2(t52);
    //Instruction 53882
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 53883
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53884
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53885
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 53886
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 53887
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53888
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 53889
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53890
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 53891
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 53892
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 53893
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53894
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 53895
    //MUL
    t49 = t49 * t51;
    //Instruction 53896
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 53897
    //MOV
    t5.y = t4.y;
    //Instruction 53898
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 53899
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 53900
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 53901
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 53902
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 53903
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 53904
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 53905
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 53906
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 53907
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 53908
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 53909
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 53910
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 53911
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 53912
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 53913
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 53914
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 53915
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 53916
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 53917
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 53918
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 53919
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 53920
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 53921
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 53922
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 53923
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 53924
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 53925
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 53926
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 53927
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 53928
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 53929
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 53930
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 53931
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 53932
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 53933
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 53934
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 53935
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 53936
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 53937
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 53938
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 53939
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 53940
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 53941
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 53942
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 53943
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 53944
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 53945
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 53946
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 53947
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 53948
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53949
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 53581
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 53582
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 53583
    //MOV
    t1.x = t16_0.x;
    //Instruction 53584
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 53585
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 53586
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 53587
    //LT
    tb1 = t16_1<0.0;
    //Instruction 53588
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53589
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 53590
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 53591
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 53592
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53593
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 53594
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 53595
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 53596
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 53597
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 53598
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 53599
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 53600
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 53601
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 53602
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 53603
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 53604
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 53605
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53606
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 53607
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 53608
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 53609
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 53610
    //MOV
    t16_0.w = 1.0;
    //Instruction 53611
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 53612
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 53613
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 53614
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 53615
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 53616
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 53617
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_109;
  highp mat3 tmpvar_110;
  tmpvar_110[0] = _Object2World[0].xyz;
  tmpvar_110[1] = _Object2World[1].xyz;
  tmpvar_110[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize((tmpvar_110 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_112 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_113;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.x;
  tmpvar_114.y = worldBinormal_4.x;
  tmpvar_114.z = worldNormal_6.x;
  tmpvar_114.w = tmpvar_105.x;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.y;
  tmpvar_115.y = worldBinormal_4.y;
  tmpvar_115.z = worldNormal_6.y;
  tmpvar_115.w = tmpvar_105.y;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.z;
  tmpvar_116.y = worldBinormal_4.z;
  tmpvar_116.z = worldNormal_6.z;
  tmpvar_116.w = tmpvar_105.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_117;
  tmpvar_117.w = 1.0;
  tmpvar_117.xyz = worldNormal_6;
  mediump vec4 normal_118;
  normal_118 = tmpvar_117;
  mediump vec3 x2_119;
  mediump vec4 tmpvar_120;
  tmpvar_120 = (normal_118.xyzz * normal_118.yzzx);
  x2_119.x = dot (unity_SHBr, tmpvar_120);
  x2_119.y = dot (unity_SHBg, tmpvar_120);
  x2_119.z = dot (unity_SHBb, tmpvar_120);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_114;
  xlv_TEXCOORD1 = tmpvar_115;
  xlv_TEXCOORD2 = tmpvar_116;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_100;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_119 + (unity_SHC.xyz * (
    (normal_118.x * normal_118.x)
   - 
    (normal_118.y * normal_118.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 53418
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 53419
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 53420
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 53421
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 53422
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 53423
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 53424
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 53425
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 53426
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 53427
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 53428
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 53429
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53430
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 53431
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 53432
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 53433
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 53434
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 53435
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 53436
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 53437
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 53438
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 53439
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 53440
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 53441
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 53442
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 53443
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 53444
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 53445
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 53446
        //FRC
        t34.x = fract(t34.x);
        //Instruction 53447
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 53448
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 53449
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 53450
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 53451
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 53452
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 53453
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 53454
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 53455
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 53456
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 53457
        //IF
        if(tb51){
            //Instruction 53458
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 53459
            //FRC
            t5 = fract(t5);
            //Instruction 53460
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53461
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53462
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53463
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 53464
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 53465
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 53466
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53467
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 53468
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53469
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 53470
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53471
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 53472
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 53473
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 53474
            //SQRT
            t52 = sqrt(t52);
            //Instruction 53475
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 53476
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 53477
            //MUL
            t54 = t54 * t55;
            //Instruction 53478
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 53479
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 53480
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 53481
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 53482
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 53483
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 53484
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 53485
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 53486
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 53487
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 53488
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 53489
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 53490
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 53491
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 53492
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 53493
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 53494
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 53495
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 53496
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 53497
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 53498
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 53499
            //SQRT
            t54 = sqrt(t54);
            //Instruction 53500
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 53501
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 53502
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 53503
            //MUL
            t6.x = t54 * t55;
            //Instruction 53504
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 53505
            //LT
            tb20 = t20<(-t20);
            //Instruction 53506
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 53507
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 53508
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 53509
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 53510
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 53511
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53512
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 53513
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53514
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 53515
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53516
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 53517
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 53518
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 53519
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 53520
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 53521
            //LOG
            t51 = log2(t51);
            //Instruction 53522
            //MUL
            t51 = t51 * t7.y;
            //Instruction 53523
            //EXP
            t51 = exp2(t51);
            //Instruction 53524
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 53525
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 53526
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 53527
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 53528
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 53529
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 53530
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 53531
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 53532
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 53533
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 53534
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 53535
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 53536
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 53537
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 53538
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 53539
            //MOV
            t11.z = t12.x;
            //Instruction 53540
            //MOV
            t11.w = t10.x;
            //Instruction 53541
            //MOV
            t13.z = t9.y;
            //Instruction 53542
            //MOV
            t13.w = t14.y;
            //Instruction 53543
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 53544
            //MOV
            t14.w = t13.y;
            //Instruction 53545
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 53546
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 53547
            //MOV
            t10.w = t11.y;
            //Instruction 53548
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 53549
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 53550
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 53551
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 53552
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 53553
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 53554
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 53555
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 53556
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 53557
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 53558
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 53559
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 53560
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 53561
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 53562
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 53563
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 53564
        //ELSE
        } else {
            //Instruction 53565
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 53566
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 53567
        //ENDIF
        }
        //Instruction 53568
    //ELSE
    } else {
        //Instruction 53569
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 53570
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 53571
    //ENDIF
    }
    //Instruction 53572
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 53573
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 53574
    //IF
    if(tb52){
        //Instruction 53575
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 53576
        //IF
        if(tb52){
            //Instruction 53577
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53578
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 53579
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 53580
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 53581
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 53582
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 53583
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53584
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53585
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53586
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 53587
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 53588
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 53589
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53590
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 53591
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 53592
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 53593
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53594
            //FRC
            t2 = fract(t2);
            //Instruction 53595
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53596
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 53597
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53598
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53599
            //ADD
            t2 = t2 + t2;
            //Instruction 53600
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 53601
            //LT
            tb54 = t7.w<0.0;
            //Instruction 53602
            //MOV
            t7.y = (-t7.w);
            //Instruction 53603
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 53604
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 53605
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 53606
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 53607
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 53608
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 53609
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 53610
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53611
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53612
            //MUL
            t56 = t2.x * t56;
            //Instruction 53613
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 53614
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53615
            //MUL
            t54 = t54 * t55;
            //Instruction 53616
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 53617
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53618
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53619
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53620
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53621
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 53622
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 53623
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53624
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 53625
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53626
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 53627
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 53628
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 53629
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 53630
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53631
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 53632
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 53633
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 53634
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53635
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 53636
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 53637
        //ELSE
        } else {
            //Instruction 53638
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53639
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53640
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53641
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53642
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 53643
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 53644
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53645
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 53646
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 53647
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53648
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53649
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53650
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 53651
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53652
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53653
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 53654
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 53655
            //LT
            tb0 = t2.w<0.0;
            //Instruction 53656
            //MOV
            t2.y = (-t2.w);
            //Instruction 53657
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 53658
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 53659
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 53660
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 53661
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 53662
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 53663
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 53664
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53665
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53666
            //MUL
            t54 = t54 * t6.x;
            //Instruction 53667
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 53668
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 53669
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53670
        //ENDIF
        }
        //Instruction 53671
    //ENDIF
    }
    //Instruction 53672
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 53673
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53674
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53675
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 53676
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 53677
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 53678
    //NE
    tb54 = t52!=0.0;
    //Instruction 53679
    //LOG
    t55 = log2(t52);
    //Instruction 53680
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 53681
    //EXP
    t55 = exp2(t55);
    //Instruction 53682
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 53683
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53684
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53685
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 53686
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 53687
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53688
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 53689
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53690
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 53691
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 53692
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 53693
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53694
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 53695
    //MUL
    t52 = t52 * t54;
    //Instruction 53696
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 53697
    //MOV
    t5.y = t4.y;
    //Instruction 53698
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 53699
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53700
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 53701
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 53702
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 53703
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 53704
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 53705
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 53706
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 53707
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 53708
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 53709
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 53710
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 53711
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 53712
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 53713
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 53714
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 53715
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 53716
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 53717
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 53718
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 53719
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 53720
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 53721
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 53722
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 53723
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 53724
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 53725
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 53726
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 53727
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 53728
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 53729
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 53730
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 53731
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 53732
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 53733
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 53734
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53735
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 53736
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 53737
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 53738
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 53739
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 53740
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53741
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 53742
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 53743
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 53744
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 53745
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 53746
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 53747
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 53748
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 53749
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 53750
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 53751
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 53752
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 53753
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 53754
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 53755
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 53756
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 53757
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 53758
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 53759
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 53760
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 53761
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 53762
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 53763
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 53764
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 53765
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 53766
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 53767
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 53768
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53769
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 53376
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 53377
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 53378
    //MOV
    t1.x = t16_0.x;
    //Instruction 53379
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 53380
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 53381
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 53382
    //LT
    tb1 = t16_1<0.0;
    //Instruction 53383
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53384
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 53385
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 53386
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 53387
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 53388
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 53389
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 53390
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 53391
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 53392
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 53393
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 53394
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 53395
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 53396
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 53397
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 53398
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 53399
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 53400
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53401
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 53402
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 53403
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 53404
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 53405
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 53406
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 53407
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 53408
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 53409
    //MOV
    t0.w = 1.0;
    //Instruction 53410
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 53411
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 53412
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 53413
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 53414
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 53415
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 53416
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 53417
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  highp vec4 hPos_99;
  hPos_99 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_100;
  highp vec4 o_101;
  highp vec4 tmpvar_102;
  tmpvar_102 = (hPos_99 * 0.5);
  highp vec2 tmpvar_103;
  tmpvar_103.x = tmpvar_102.x;
  tmpvar_103.y = (tmpvar_102.y * _ProjectionParams.x);
  o_101.xy = (tmpvar_103 + tmpvar_102.w);
  o_101.zw = hPos_99.zw;
  highp vec3 tmpvar_104;
  tmpvar_104 = o_101.xyw;
  screenPos_100 = tmpvar_104;
  screenPos_100.xy = (screenPos_100.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_105;
  tmpvar_105 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_106;
  v_106.x = _World2Object[0].x;
  v_106.y = _World2Object[1].x;
  v_106.z = _World2Object[2].x;
  v_106.w = _World2Object[3].x;
  highp vec4 v_107;
  v_107.x = _World2Object[0].y;
  v_107.y = _World2Object[1].y;
  v_107.z = _World2Object[2].y;
  v_107.w = _World2Object[3].y;
  highp vec4 v_108;
  v_108.x = _World2Object[0].z;
  v_108.y = _World2Object[1].z;
  v_108.z = _World2Object[2].z;
  v_108.w = _World2Object[3].z;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize(((
    (v_106.xyz * tmpvar_15.x)
   + 
    (v_107.xyz * tmpvar_15.y)
  ) + (v_108.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_109;
  highp mat3 tmpvar_110;
  tmpvar_110[0] = _Object2World[0].xyz;
  tmpvar_110[1] = _Object2World[1].xyz;
  tmpvar_110[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_111;
  tmpvar_111 = normalize((tmpvar_110 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_113;
  tmpvar_113 = (tmpvar_112 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_113;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_5.x;
  tmpvar_114.y = worldBinormal_4.x;
  tmpvar_114.z = worldNormal_6.x;
  tmpvar_114.w = tmpvar_105.x;
  highp vec4 tmpvar_115;
  tmpvar_115.x = worldTangent_5.y;
  tmpvar_115.y = worldBinormal_4.y;
  tmpvar_115.z = worldNormal_6.y;
  tmpvar_115.w = tmpvar_105.y;
  highp vec4 tmpvar_116;
  tmpvar_116.x = worldTangent_5.z;
  tmpvar_116.y = worldBinormal_4.z;
  tmpvar_116.z = worldNormal_6.z;
  tmpvar_116.w = tmpvar_105.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_117;
  tmpvar_117.w = 1.0;
  tmpvar_117.xyz = worldNormal_6;
  mediump vec4 normal_118;
  normal_118 = tmpvar_117;
  mediump vec3 x2_119;
  mediump vec4 tmpvar_120;
  tmpvar_120 = (normal_118.xyzz * normal_118.yzzx);
  x2_119.x = dot (unity_SHBr, tmpvar_120);
  x2_119.y = dot (unity_SHBg, tmpvar_120);
  x2_119.z = dot (unity_SHBb, tmpvar_120);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_114;
  xlv_TEXCOORD1 = tmpvar_115;
  xlv_TEXCOORD2 = tmpvar_116;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_100;
  xlv_TEXCOORD7 = tmpvar_8;
  xlv_TEXCOORD8 = (x2_119 + (unity_SHC.xyz * (
    (normal_118.x * normal_118.x)
   - 
    (normal_118.y * normal_118.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 52958
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52959
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52960
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 52961
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52962
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 52963
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 52964
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 52965
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 52966
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52967
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52968
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 52969
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52970
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52971
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52972
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 52973
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 52974
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 52975
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 52976
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 52977
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 52978
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 52979
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 52980
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 52981
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 52982
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 52983
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 52984
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 52985
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 52986
        //FRC
        t34.x = fract(t34.x);
        //Instruction 52987
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 52988
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 52989
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 52990
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 52991
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 52992
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 52993
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 52994
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 52995
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 52996
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 52997
        //IF
        if(tb51){
            //Instruction 52998
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 52999
            //FRC
            t5 = fract(t5);
            //Instruction 53000
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53001
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53002
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53003
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 53004
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 53005
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 53006
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53007
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 53008
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53009
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 53010
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53011
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 53012
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 53013
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 53014
            //SQRT
            t52 = sqrt(t52);
            //Instruction 53015
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 53016
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 53017
            //MUL
            t54 = t54 * t55;
            //Instruction 53018
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 53019
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 53020
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 53021
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 53022
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 53023
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 53024
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 53025
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 53026
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 53027
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 53028
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 53029
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 53030
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 53031
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 53032
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 53033
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 53034
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 53035
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 53036
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 53037
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 53038
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 53039
            //SQRT
            t54 = sqrt(t54);
            //Instruction 53040
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 53041
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 53042
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 53043
            //MUL
            t6.x = t54 * t55;
            //Instruction 53044
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 53045
            //LT
            tb20 = t20<(-t20);
            //Instruction 53046
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 53047
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 53048
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 53049
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 53050
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 53051
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 53052
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 53053
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53054
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 53055
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53056
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 53057
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 53058
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 53059
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 53060
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 53061
            //LOG
            t51 = log2(t51);
            //Instruction 53062
            //MUL
            t51 = t51 * t7.y;
            //Instruction 53063
            //EXP
            t51 = exp2(t51);
            //Instruction 53064
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 53065
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 53066
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 53067
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 53068
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 53069
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 53070
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 53071
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 53072
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 53073
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 53074
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 53075
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 53076
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 53077
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 53078
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 53079
            //MOV
            t11.z = t12.x;
            //Instruction 53080
            //MOV
            t11.w = t10.x;
            //Instruction 53081
            //MOV
            t13.z = t9.y;
            //Instruction 53082
            //MOV
            t13.w = t14.y;
            //Instruction 53083
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 53084
            //MOV
            t14.w = t13.y;
            //Instruction 53085
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 53086
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 53087
            //MOV
            t10.w = t11.y;
            //Instruction 53088
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 53089
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 53090
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 53091
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 53092
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 53093
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 53094
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 53095
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 53096
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 53097
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 53098
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 53099
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 53100
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 53101
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 53102
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 53103
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 53104
        //ELSE
        } else {
            //Instruction 53105
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 53106
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 53107
        //ENDIF
        }
        //Instruction 53108
    //ELSE
    } else {
        //Instruction 53109
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 53110
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 53111
    //ENDIF
    }
    //Instruction 53112
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 53113
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 53114
    //IF
    if(tb52){
        //Instruction 53115
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 53116
        //IF
        if(tb52){
            //Instruction 53117
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53118
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 53119
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 53120
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 53121
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 53122
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 53123
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53124
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53125
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53126
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 53127
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 53128
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 53129
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53130
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 53131
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 53132
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 53133
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53134
            //FRC
            t2 = fract(t2);
            //Instruction 53135
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53136
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 53137
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53138
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53139
            //ADD
            t2 = t2 + t2;
            //Instruction 53140
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 53141
            //LT
            tb54 = t7.w<0.0;
            //Instruction 53142
            //MOV
            t7.y = (-t7.w);
            //Instruction 53143
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 53144
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 53145
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 53146
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 53147
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 53148
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 53149
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 53150
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53151
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53152
            //MUL
            t56 = t2.x * t56;
            //Instruction 53153
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 53154
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53155
            //MUL
            t54 = t54 * t55;
            //Instruction 53156
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 53157
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53158
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53159
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53160
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53161
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 53162
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 53163
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53164
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 53165
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53166
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 53167
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 53168
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 53169
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 53170
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53171
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 53172
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 53173
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 53174
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53175
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 53176
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 53177
        //ELSE
        } else {
            //Instruction 53178
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53179
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 53180
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53181
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 53182
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 53183
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 53184
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53185
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 53186
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 53187
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53188
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 53189
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53190
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 53191
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53192
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53193
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 53194
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 53195
            //LT
            tb0 = t2.w<0.0;
            //Instruction 53196
            //MOV
            t2.y = (-t2.w);
            //Instruction 53197
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 53198
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 53199
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 53200
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 53201
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 53202
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 53203
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 53204
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53205
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53206
            //MUL
            t54 = t54 * t6.x;
            //Instruction 53207
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 53208
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 53209
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 53210
        //ENDIF
        }
        //Instruction 53211
    //ENDIF
    }
    //Instruction 53212
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 53213
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53214
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53215
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 53216
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 53217
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 53218
    //NE
    tb54 = t52!=0.0;
    //Instruction 53219
    //LOG
    t55 = log2(t52);
    //Instruction 53220
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 53221
    //EXP
    t55 = exp2(t55);
    //Instruction 53222
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 53223
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53224
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53225
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 53226
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 53227
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53228
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 53229
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53230
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 53231
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 53232
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 53233
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53234
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 53235
    //MUL
    t52 = t52 * t54;
    //Instruction 53236
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 53237
    //MOV
    t5.y = t4.y;
    //Instruction 53238
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 53239
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53240
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 53241
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 53242
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 53243
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 53244
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 53245
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 53246
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 53247
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 53248
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 53249
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 53250
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 53251
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 53252
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 53253
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 53254
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 53255
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 53256
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 53257
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 53258
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 53259
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 53260
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 53261
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 53262
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 53263
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 53264
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 53265
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 53266
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 53267
    //MUL
    t5 = t34.yyyy * t5;
    //Instruction 53268
    //MAD
    t0 = t2 * t34.xxxx + t5;
    //Instruction 53269
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 53270
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 53271
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 53272
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 53273
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 53274
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53275
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 53276
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 53277
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 53278
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 53279
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 53280
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 53281
    //MUL
    t5.xyz = vec3(t52) * t5.xyz;
    //Instruction 53282
    //MUL
    t10_15.xyz = t0.wxy * t5.xyz;
    //Instruction 53283
    //MAD
    t10_15.xyz = t0.ywx * t5.yzx + (-t10_15.xyz);
    //Instruction 53284
    //MUL
    t6.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 53285
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 53286
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 53287
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 53288
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 53289
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 53290
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 53291
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 53292
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 53293
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 53294
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 53295
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 53296
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 53297
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 53298
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 53299
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 53300
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 53301
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 53302
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 53303
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 53304
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 53305
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 53306
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 53307
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 53308
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53309
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 52917
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52918
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 52919
    //MOV
    t1.x = t16_0.x;
    //Instruction 52920
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 52921
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52922
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 52923
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52924
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52925
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 52926
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 52927
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 52928
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52929
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 52930
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 52931
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 52932
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 52933
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 52934
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 52935
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 52936
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 52937
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 52938
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 52939
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 52940
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52941
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52942
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52943
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 52944
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 52945
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 52946
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 52947
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 52948
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52949
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 52950
    //MOV
    t0.w = 1.0;
    //Instruction 52951
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 52952
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 52953
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 52954
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52955
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 52956
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52957
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="SHADOWCASTER" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 340728
Program "vp" {
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 53312
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53313
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53314
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53315
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53316
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53317
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53318
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53319
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53320
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53321
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 53322
    //IF
    if(tb19){
        //Instruction 53323
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 53324
        //IF
        if(tb19){
            //Instruction 53325
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53326
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 53327
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 53328
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 53329
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53330
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 53331
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53332
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53333
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53334
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53335
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53336
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53337
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53338
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53339
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53340
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53341
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53342
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53343
            //FRC
            t0 = fract(t0);
            //Instruction 53344
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53345
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 53346
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53347
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53348
            //ADD
            t0 = t0 + t0;
            //Instruction 53349
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 53350
            //LT
            tb20 = t4.w<0.0;
            //Instruction 53351
            //MOV
            t4.y = (-t4.w);
            //Instruction 53352
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 53353
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 53354
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 53355
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 53356
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 53357
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 53358
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53359
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53360
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53361
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 53362
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 53363
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53364
            //MUL
            t20 = t20 * t21;
            //Instruction 53365
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 53366
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 53367
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53368
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53369
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53370
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 53371
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 53372
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53373
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 53374
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53375
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 53376
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 53377
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 53378
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 53379
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53380
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 53381
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 53382
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 53383
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53384
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 53385
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 53386
        //ELSE
        } else {
            //Instruction 53387
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53388
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53389
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53390
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53391
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53392
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53393
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 53394
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53395
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 53396
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 53397
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53398
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53399
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53400
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 53401
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53402
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53403
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 53404
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 53405
            //LT
            tb19 = t0.w<0.0;
            //Instruction 53406
            //MOV
            t0.y = (-t0.w);
            //Instruction 53407
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53408
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 53409
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 53410
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 53411
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 53412
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 53413
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 53414
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53415
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53416
            //MUL
            t21 = t21 * t4.x;
            //Instruction 53417
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 53418
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53419
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 53420
        //ENDIF
        }
        //Instruction 53421
    //ELSE
    } else {
        //Instruction 53422
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 53423
    //ENDIF
    }
    //Instruction 53424
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 53425
    //SQRT
    t19 = sqrt(t19);
    //Instruction 53426
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53427
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 53428
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 53429
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 53430
    //NE
    tb3 = t20!=0.0;
    //Instruction 53431
    //LOG
    t9 = log2(t20);
    //Instruction 53432
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 53433
    //EXP
    t9 = exp2(t9);
    //Instruction 53434
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 53435
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53436
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53437
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 53438
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 53439
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53440
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 53441
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53442
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 53443
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 53444
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 53445
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53446
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 53447
    //MUL
    t20 = t20 * t3.x;
    //Instruction 53448
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 53449
    //MOV
    t3.y = t2.y;
    //Instruction 53450
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 53451
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 53452
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 53453
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 53454
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 53455
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 53456
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 53457
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 53458
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 53459
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 53460
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 53461
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 53462
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 53463
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 53464
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53465
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53466
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 53467
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 53468
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 53469
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 53470
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 53471
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 53472
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 53473
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 53474
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 53475
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 53476
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 53477
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 53478
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 53479
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 53480
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 53481
    //SQRT
    t20 = sqrt(t20);
    //Instruction 53482
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 53483
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 53484
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 53485
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 53486
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 53487
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 53488
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 53489
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 53490
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 53491
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 53492
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 53493
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 53494
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 53495
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 53496
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 53497
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 53498
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 53499
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 53310
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53311
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 53508
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53509
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53510
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53511
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53512
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53513
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53514
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53515
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53516
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53517
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 53518
    //IF
    if(tb19){
        //Instruction 53519
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 53520
        //IF
        if(tb19){
            //Instruction 53521
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53522
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 53523
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 53524
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 53525
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53526
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 53527
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53528
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53529
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53530
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53531
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53532
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53533
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53534
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53535
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53536
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53537
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53538
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53539
            //FRC
            t0 = fract(t0);
            //Instruction 53540
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53541
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 53542
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53543
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53544
            //ADD
            t0 = t0 + t0;
            //Instruction 53545
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 53546
            //LT
            tb20 = t4.w<0.0;
            //Instruction 53547
            //MOV
            t4.y = (-t4.w);
            //Instruction 53548
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 53549
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 53550
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 53551
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 53552
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 53553
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 53554
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53555
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53556
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53557
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 53558
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 53559
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53560
            //MUL
            t20 = t20 * t21;
            //Instruction 53561
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 53562
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 53563
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53564
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53565
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53566
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 53567
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 53568
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53569
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 53570
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53571
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 53572
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 53573
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 53574
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 53575
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53576
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 53577
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 53578
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 53579
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53580
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 53581
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 53582
        //ELSE
        } else {
            //Instruction 53583
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53584
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53585
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53586
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53587
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53588
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53589
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 53590
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53591
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 53592
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 53593
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53594
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53595
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53596
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 53597
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53598
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53599
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 53600
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 53601
            //LT
            tb19 = t0.w<0.0;
            //Instruction 53602
            //MOV
            t0.y = (-t0.w);
            //Instruction 53603
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53604
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 53605
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 53606
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 53607
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 53608
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 53609
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 53610
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53611
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53612
            //MUL
            t21 = t21 * t4.x;
            //Instruction 53613
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 53614
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53615
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 53616
        //ENDIF
        }
        //Instruction 53617
    //ELSE
    } else {
        //Instruction 53618
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 53619
    //ENDIF
    }
    //Instruction 53620
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 53621
    //SQRT
    t19 = sqrt(t19);
    //Instruction 53622
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53623
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 53624
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 53625
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 53626
    //NE
    tb3 = t20!=0.0;
    //Instruction 53627
    //LOG
    t9 = log2(t20);
    //Instruction 53628
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 53629
    //EXP
    t9 = exp2(t9);
    //Instruction 53630
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 53631
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53632
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53633
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 53634
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 53635
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53636
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 53637
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53638
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 53639
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 53640
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 53641
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53642
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 53643
    //MUL
    t20 = t20 * t3.x;
    //Instruction 53644
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 53645
    //MOV
    t3.y = t2.y;
    //Instruction 53646
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 53647
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 53648
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 53649
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 53650
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 53651
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 53652
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 53653
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 53654
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 53655
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 53656
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 53657
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 53658
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 53659
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 53660
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 53500
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 53501
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53502
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 53503
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 53504
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 53505
    //FRC
    t0 = fract(t0);
    //Instruction 53506
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 53507
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  highp vec3 vertex_44;
  vertex_44 = tmpvar_2.xyz;
  highp vec4 clipPos_45;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_46;
    tmpvar_46.w = 1.0;
    tmpvar_46.xyz = vertex_44;
    highp vec3 tmpvar_47;
    tmpvar_47 = (_Object2World * tmpvar_46).xyz;
    highp vec4 v_48;
    v_48.x = _World2Object[0].x;
    v_48.y = _World2Object[1].x;
    v_48.z = _World2Object[2].x;
    v_48.w = _World2Object[3].x;
    highp vec4 v_49;
    v_49.x = _World2Object[0].y;
    v_49.y = _World2Object[1].y;
    v_49.z = _World2Object[2].y;
    v_49.w = _World2Object[3].y;
    highp vec4 v_50;
    v_50.x = _World2Object[0].z;
    v_50.y = _World2Object[1].z;
    v_50.z = _World2Object[2].z;
    v_50.w = _World2Object[3].z;
    highp vec3 tmpvar_51;
    tmpvar_51 = normalize(((
      (v_48.xyz * _glesNormal.x)
     + 
      (v_49.xyz * _glesNormal.y)
    ) + (v_50.xyz * _glesNormal.z)));
    highp float tmpvar_52;
    tmpvar_52 = dot (tmpvar_51, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_47 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_53;
    tmpvar_53.w = 1.0;
    tmpvar_53.xyz = (tmpvar_47 - (tmpvar_51 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_52 * tmpvar_52)))
    )));
    clipPos_45 = (unity_MatrixVP * tmpvar_53);
  } else {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_44;
    clipPos_45 = (glstate_matrix_mvp * tmpvar_54);
  };
  highp vec4 clipPos_55;
  clipPos_55.xyw = clipPos_45.xyw;
  clipPos_55.z = (clipPos_45.z + clamp ((unity_LightShadowBias.x / clipPos_45.w), 0.0, 1.0));
  clipPos_55.z = mix (clipPos_55.z, max (clipPos_55.z, -(clipPos_45.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_55;
}


#endif
#ifdef FRAGMENT
void main ()
{
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 53952
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53953
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53954
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53955
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53956
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53957
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53958
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53959
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53960
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53961
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 53962
    //IF
    if(tb19){
        //Instruction 53963
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 53964
        //IF
        if(tb19){
            //Instruction 53965
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53966
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 53967
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 53968
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 53969
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53970
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 53971
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53972
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53973
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53974
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53975
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53976
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53977
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53978
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53979
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53980
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53981
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53982
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53983
            //FRC
            t0 = fract(t0);
            //Instruction 53984
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53985
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 53986
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53987
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53988
            //ADD
            t0 = t0 + t0;
            //Instruction 53989
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 53990
            //LT
            tb20 = t4.w<0.0;
            //Instruction 53991
            //MOV
            t4.y = (-t4.w);
            //Instruction 53992
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 53993
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 53994
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 53995
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 53996
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 53997
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 53998
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53999
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54000
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54001
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 54002
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 54003
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54004
            //MUL
            t20 = t20 * t21;
            //Instruction 54005
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 54006
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54007
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54008
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54009
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54010
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 54011
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 54012
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54013
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 54014
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54015
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 54016
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 54017
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 54018
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 54019
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54020
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54021
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54022
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 54023
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54024
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54025
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 54026
        //ELSE
        } else {
            //Instruction 54027
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54028
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54029
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54030
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54031
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54032
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54033
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54034
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54035
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54036
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54037
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54038
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54039
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54040
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54041
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54042
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54043
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54044
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54045
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54046
            //MOV
            t0.y = (-t0.w);
            //Instruction 54047
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54048
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54049
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54050
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54051
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54052
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54053
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54054
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54055
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54056
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54057
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54058
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54059
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54060
        //ENDIF
        }
        //Instruction 54061
    //ELSE
    } else {
        //Instruction 54062
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 54063
    //ENDIF
    }
    //Instruction 54064
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54065
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54066
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54067
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54068
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54069
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54070
    //NE
    tb3 = t20!=0.0;
    //Instruction 54071
    //LOG
    t9 = log2(t20);
    //Instruction 54072
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54073
    //EXP
    t9 = exp2(t9);
    //Instruction 54074
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54075
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54076
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54077
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54078
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54079
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54080
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54081
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54082
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54083
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54084
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54085
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54086
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54087
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54088
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54089
    //MOV
    t3.y = t2.y;
    //Instruction 54090
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54091
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54092
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54093
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54094
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54095
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 54096
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54097
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54098
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54099
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 54100
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 54101
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 54102
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 54103
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 54104
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 54105
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 54106
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 54107
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 54108
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 54109
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 54110
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 54111
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 54112
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 54113
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54114
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 54115
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54116
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 54117
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 54118
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 54119
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 54120
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 54121
    //SQRT
    t20 = sqrt(t20);
    //Instruction 54122
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 54123
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 54124
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 54125
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 54126
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 54127
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54128
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54129
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 54130
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 54131
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54132
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 54133
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 54134
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 54135
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 54136
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 54137
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 54138
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54139
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
layout(location = 0) out highp vec4 SV_Target0;
void main()
{
    //Instruction 53950
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53951
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_3;
  highp vec3 vRotatedWindVector_4;
  highp vec3 FinalPosition_5;
  highp vec3 tmpvar_6;
  tmpvar_6 = tmpvar_1.xyz;
  FinalPosition_5 = tmpvar_6;
  highp vec3 tmpvar_7;
  tmpvar_7.x = _Object2World[3].x;
  tmpvar_7.y = _Object2World[3].y;
  tmpvar_7.z = _Object2World[3].z;
  mediump float tmpvar_8;
  tmpvar_8 = (_WindQuality * _WindEnabled);
  if ((tmpvar_8 > 0.0)) {
    highp mat3 tmpvar_9;
    tmpvar_9[0] = _World2Object[0].xyz;
    tmpvar_9[1] = _World2Object[1].xyz;
    tmpvar_9[2] = _World2Object[2].xyz;
    vRotatedWindVector_4 = normalize((tmpvar_9 * _ST_WindVector.xyz));
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_3 = (normalize((tmpvar_10 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_4 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_3 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_8 >= 3.0)) {
    highp vec3 vPos_11;
    vPos_11 = tmpvar_6;
    if ((tmpvar_8 == 5.0)) {
      highp vec3 vPos_12;
      vPos_12 = tmpvar_6;
      highp float fTime_13;
      highp float fAdherenceScale_14;
      highp vec3 vWindVector_15;
      vWindVector_15 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_13 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_16;
      highp float fOscillation_17;
      fOscillation_17 = 1.0;
      highp float fAmount_18;
      highp float fTarget_19;
      highp vec4 tmpvar_20;
      tmpvar_20.x = (fTime_13 + _glesMultiTexCoord0.w);
      tmpvar_20.y = ((fTime_13 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_20.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_13 + _glesMultiTexCoord0.w));
      tmpvar_20.w = ((fTime_13 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_21;
      tmpvar_21 = abs(((
        fract((tmpvar_20 + 0.5))
       * 2.0) - 1.0));
      vOscillations_16 = (((
        (tmpvar_21 * tmpvar_21)
       * 
        (3.0 - (2.0 * tmpvar_21))
      ) - 0.5) * 2.0);
      highp float tmpvar_22;
      tmpvar_22 = (vOscillations_16.y * vOscillations_16.z);
      fTarget_19 = 1.0;
      fAmount_18 = tmpvar_22;
      if ((tmpvar_22 < 0.0)) {
        fTarget_19 = -1.0;
        fAmount_18 = -(tmpvar_22);
      };
      fOscillation_17 = (((
        mix (mix (tmpvar_22, fTarget_19, fAmount_18), fTarget_19, fAmount_18)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_16.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_17 = (fOscillation_17 * (1.0 + (vOscillations_16.w * _ST_WindBranchWhip.x)));
      vPos_12 = (_glesVertex.xyz + ((vWindVector_15 * fOscillation_17) * _ST_WindBranch.y));
      highp vec4 tmpvar_23;
      tmpvar_23.zw = vec2(0.0, 0.0);
      tmpvar_23.x = ((fTime_13 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_23.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_24;
      highp vec4 tmpvar_25;
      tmpvar_25 = abs(((
        fract((tmpvar_23 + 0.5))
       * 2.0) - 1.0));
      tmpvar_24 = (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0);
      fAdherenceScale_14 = (1.0 - ((tmpvar_24.x * tmpvar_24.y) * (
        (tmpvar_24.x * tmpvar_24.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_14 = (fAdherenceScale_14 + ((vOscillations_16.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_12 = (vPos_12 + ((
        ((vRotatedBranchAnchor_3 - vPos_12) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_14) * _glesMultiTexCoord0.z));
      vPos_11 = vPos_12;
    } else {
      highp vec3 vPos_26;
      vPos_26 = vPos_11;
      highp float fTime_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_7.x + tmpvar_7.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.w = 0.0;
      tmpvar_33.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_26 = (vPos_11 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      vPos_11 = vPos_26;
    };
    FinalPosition_5 = vPos_11;
  };
  if ((tmpvar_8 > 0.0)) {
    highp vec3 vPos_36;
    vPos_36 = FinalPosition_5;
    highp float fMoveAmount_37;
    highp float fAdjust_38;
    highp float fLength_39;
    fLength_39 = sqrt(dot (FinalPosition_5, FinalPosition_5));
    highp float tmpvar_40;
    tmpvar_40 = (max ((FinalPosition_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_38 = tmpvar_40;
    if ((tmpvar_40 != 0.0)) {
      fAdjust_38 = pow (tmpvar_40, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_41;
    tmpvar_41.zw = vec2(0.0, 0.0);
    tmpvar_41.x = (tmpvar_7.x + _ST_WindGlobal.x);
    tmpvar_41.y = (tmpvar_7.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_42;
    highp vec4 tmpvar_43;
    tmpvar_43 = abs(((
      fract((tmpvar_41 + 0.5))
     * 2.0) - 1.0));
    tmpvar_42 = (((
      (tmpvar_43 * tmpvar_43)
     * 
      (3.0 - (2.0 * tmpvar_43))
    ) - 0.5) * 2.0);
    fMoveAmount_37 = ((_ST_WindGlobal.y * (tmpvar_42.x + 
      (tmpvar_42.y * tmpvar_42.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_37 = (fMoveAmount_37 * fAdjust_38);
    vPos_36.xz = (FinalPosition_5.xz + (vRotatedWindVector_4.xz * fMoveAmount_37));
    vPos_36 = (normalize(vPos_36) * fLength_39);
    FinalPosition_5 = vPos_36;
  };
  tmpvar_2.xyz = FinalPosition_5;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_2).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_2);
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
varying highp vec3 xlv_TEXCOORD0;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_2;
  tmpvar_2 = (tmpvar_1 - (tmpvar_1.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec3 vs_TEXCOORD0;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 54148
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54149
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 54150
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54151
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 54152
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 54153
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 54154
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 54155
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 54156
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 54157
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 54158
    //IF
    if(tb19){
        //Instruction 54159
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 54160
        //IF
        if(tb19){
            //Instruction 54161
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54162
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 54163
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 54164
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 54165
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 54166
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54167
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54168
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54169
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54170
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54171
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54172
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54173
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 54174
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54175
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54176
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 54177
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54178
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54179
            //FRC
            t0 = fract(t0);
            //Instruction 54180
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54181
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 54182
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54183
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54184
            //ADD
            t0 = t0 + t0;
            //Instruction 54185
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 54186
            //LT
            tb20 = t4.w<0.0;
            //Instruction 54187
            //MOV
            t4.y = (-t4.w);
            //Instruction 54188
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 54189
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 54190
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 54191
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 54192
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 54193
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 54194
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 54195
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54196
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54197
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 54198
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 54199
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54200
            //MUL
            t20 = t20 * t21;
            //Instruction 54201
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 54202
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54203
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54204
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54205
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54206
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 54207
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 54208
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54209
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 54210
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54211
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 54212
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 54213
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 54214
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 54215
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54216
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 54217
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 54218
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 54219
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54220
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 54221
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 54222
        //ELSE
        } else {
            //Instruction 54223
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54224
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 54225
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54226
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 54227
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54228
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 54229
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 54230
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54231
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 54232
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 54233
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54234
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54235
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54236
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 54237
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54238
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54239
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 54240
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 54241
            //LT
            tb19 = t0.w<0.0;
            //Instruction 54242
            //MOV
            t0.y = (-t0.w);
            //Instruction 54243
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54244
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 54245
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 54246
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 54247
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 54248
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 54249
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 54250
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54251
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54252
            //MUL
            t21 = t21 * t4.x;
            //Instruction 54253
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 54254
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 54255
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 54256
        //ENDIF
        }
        //Instruction 54257
    //ELSE
    } else {
        //Instruction 54258
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 54259
    //ENDIF
    }
    //Instruction 54260
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 54261
    //SQRT
    t19 = sqrt(t19);
    //Instruction 54262
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54263
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 54264
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 54265
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 54266
    //NE
    tb3 = t20!=0.0;
    //Instruction 54267
    //LOG
    t9 = log2(t20);
    //Instruction 54268
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 54269
    //EXP
    t9 = exp2(t9);
    //Instruction 54270
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 54271
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54272
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54273
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 54274
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 54275
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54276
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 54277
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54278
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 54279
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 54280
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 54281
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54282
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 54283
    //MUL
    t20 = t20 * t3.x;
    //Instruction 54284
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 54285
    //MOV
    t3.y = t2.y;
    //Instruction 54286
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 54287
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 54288
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 54289
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 54290
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 54291
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 54292
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 54293
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 54294
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 54295
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 54296
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 54297
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 54298
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 54299
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 54300
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec3 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
void main()
{
    //Instruction 54140
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 54141
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 54142
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 54143
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 54144
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 54145
    //FRC
    t0 = fract(t0);
    //Instruction 54146
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 54147
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  highp vec3 tmpvar_10;
  tmpvar_10 = tmpvar_1.xyz;
  FinalPosition_9 = tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_11.x = _Object2World[3].x;
  tmpvar_11.y = _Object2World[3].y;
  tmpvar_11.z = _Object2World[3].z;
  mediump float tmpvar_12;
  tmpvar_12 = (_WindQuality * _WindEnabled);
  if ((tmpvar_12 > 0.0)) {
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_13 * _ST_WindVector.xyz));
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_14 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_12 == 5.0)) {
    highp vec3 vPos_15;
    vPos_15 = tmpvar_10;
    highp float fOffset_16;
    fOffset_16 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_16 = 0.75;
    };
    highp vec4 tmpvar_17;
    tmpvar_17.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_17.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_16);
    highp vec4 tmpvar_18;
    tmpvar_18 = abs(((
      fract((tmpvar_17 + 0.5))
     * 2.0) - 1.0));
    vPos_15 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_18 * tmpvar_18)
       * 
        (3.0 - (2.0 * tmpvar_18))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_6 = tmpvar_2;
    FinalPosition_9 = vPos_15;
  };
  if ((tmpvar_12 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = FinalPosition_9;
    if ((tmpvar_12 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = FinalPosition_9;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (FinalPosition_9 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_7 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_11.x + tmpvar_11.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_9 = vPos_19;
  };
  if ((tmpvar_12 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_9;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_11.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_11.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_9 = vPos_44;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_52;
  vertex_52 = tmpvar_5.xyz;
  highp vec4 clipPos_53;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_54;
    tmpvar_54.w = 1.0;
    tmpvar_54.xyz = vertex_52;
    highp vec3 tmpvar_55;
    tmpvar_55 = (_Object2World * tmpvar_54).xyz;
    highp vec4 v_56;
    v_56.x = _World2Object[0].x;
    v_56.y = _World2Object[1].x;
    v_56.z = _World2Object[2].x;
    v_56.w = _World2Object[3].x;
    highp vec4 v_57;
    v_57.x = _World2Object[0].y;
    v_57.y = _World2Object[1].y;
    v_57.z = _World2Object[2].y;
    v_57.w = _World2Object[3].y;
    highp vec4 v_58;
    v_58.x = _World2Object[0].z;
    v_58.y = _World2Object[1].z;
    v_58.z = _World2Object[2].z;
    v_58.w = _World2Object[3].z;
    highp vec3 tmpvar_59;
    tmpvar_59 = normalize(((
      (v_56.xyz * tmpvar_6.x)
     + 
      (v_57.xyz * tmpvar_6.y)
    ) + (v_58.xyz * tmpvar_6.z)));
    highp float tmpvar_60;
    tmpvar_60 = dot (tmpvar_59, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_55 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_61;
    tmpvar_61.w = 1.0;
    tmpvar_61.xyz = (tmpvar_55 - (tmpvar_59 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_60 * tmpvar_60)))
    )));
    clipPos_53 = (unity_MatrixVP * tmpvar_61);
  } else {
    highp vec4 tmpvar_62;
    tmpvar_62.w = 1.0;
    tmpvar_62.xyz = vertex_52;
    clipPos_53 = (glstate_matrix_mvp * tmpvar_62);
  };
  highp vec4 clipPos_63;
  clipPos_63.xyw = clipPos_53.xyw;
  clipPos_63.z = (clipPos_53.z + clamp ((unity_LightShadowBias.x / clipPos_53.w), 0.0, 1.0));
  clipPos_63.z = mix (clipPos_63.z, max (clipPos_63.z, -(clipPos_53.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_63;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 53667
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53668
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53669
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53670
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53671
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53672
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53673
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53674
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53675
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53676
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 53677
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 53678
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 53679
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 53680
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 53681
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 53682
    //FRC
    t2.x = fract(t2.x);
    //Instruction 53683
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 53684
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 53685
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 53686
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 53687
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 53688
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 53689
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 53690
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 53691
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 53692
    //IF
    if(tb20){
        //Instruction 53693
        //IF
        if(tb19){
            //Instruction 53694
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53695
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 53696
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 53697
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 53698
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53699
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53700
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53701
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53702
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53703
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53704
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53705
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53706
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53707
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53708
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53709
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53710
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53711
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53712
            //FRC
            t0 = fract(t0);
            //Instruction 53713
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53714
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 53715
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53716
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53717
            //ADD
            t0 = t0 + t0;
            //Instruction 53718
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 53719
            //LT
            tb20 = t5.w<0.0;
            //Instruction 53720
            //MOV
            t5.y = (-t5.w);
            //Instruction 53721
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 53722
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 53723
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 53724
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 53725
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 53726
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 53727
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53728
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53729
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53730
            //MUL
            t22 = t0.x * t22;
            //Instruction 53731
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 53732
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53733
            //MUL
            t20 = t20 * t21;
            //Instruction 53734
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 53735
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 53736
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53737
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53738
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53739
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 53740
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 53741
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53742
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 53743
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53744
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 53745
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 53746
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 53747
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 53748
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53749
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 53750
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 53751
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 53752
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53753
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53754
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 53755
        //ELSE
        } else {
            //Instruction 53756
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53757
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53758
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53759
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53760
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53761
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53762
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 53763
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53764
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 53765
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 53766
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53767
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53768
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53769
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 53770
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53771
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53772
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 53773
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 53774
            //LT
            tb19 = t0.w<0.0;
            //Instruction 53775
            //MOV
            t0.y = (-t0.w);
            //Instruction 53776
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53777
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 53778
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 53779
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 53780
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 53781
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 53782
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 53783
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53784
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53785
            //MUL
            t21 = t21 * t4.x;
            //Instruction 53786
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 53787
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53788
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 53789
        //ENDIF
        }
        //Instruction 53790
    //ENDIF
    }
    //Instruction 53791
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 53792
    //SQRT
    t19 = sqrt(t19);
    //Instruction 53793
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53794
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 53795
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 53796
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 53797
    //NE
    tb3 = t20!=0.0;
    //Instruction 53798
    //LOG
    t9 = log2(t20);
    //Instruction 53799
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 53800
    //EXP
    t9 = exp2(t9);
    //Instruction 53801
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 53802
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53803
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53804
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 53805
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 53806
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53807
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 53808
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53809
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 53810
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 53811
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 53812
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53813
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 53814
    //MUL
    t20 = t20 * t3.x;
    //Instruction 53815
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 53816
    //MOV
    t3.y = t2.y;
    //Instruction 53817
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 53818
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 53819
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 53820
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 53821
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 53822
    //NE
    tb19 = unity_LightShadowBias.z!=0.0;
    //Instruction 53823
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 53824
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 53825
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 53826
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 53827
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 53828
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 53829
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 53830
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 53831
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 53832
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 53833
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 53834
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 53835
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 53836
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 53837
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 53838
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 53839
    //DP3
    t20 = dot(t3.xyz, t3.xyz);
    //Instruction 53840
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 53841
    //MUL
    t3.xyz = vec3(t20) * t3.xyz;
    //Instruction 53842
    //MAD
    t4.xyz = (-t2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 53843
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 53844
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 53845
    //MUL
    t4.xyz = vec3(t20) * t4.xyz;
    //Instruction 53846
    //DP3
    t20 = dot(t3.xyz, t4.xyz);
    //Instruction 53847
    //MAD
    t20 = (-t20) * t20 + 1.0;
    //Instruction 53848
    //SQRT
    t20 = sqrt(t20);
    //Instruction 53849
    //MUL
    t20 = t20 * unity_LightShadowBias.z;
    //Instruction 53850
    //MAD
    t2.xyz = (-t3.xyz) * vec3(t20) + t2.xyz;
    //Instruction 53851
    //MUL
    t0 = t2.yyyy * unity_MatrixVP[1];
    //Instruction 53852
    //MAD
    t0 = unity_MatrixVP[0] * t2.xxxx + t0;
    //Instruction 53853
    //MAD
    t0 = unity_MatrixVP[2] * t2.zzzz + t0;
    //Instruction 53854
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 53855
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 53856
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 53857
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 53858
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 53859
    //MOVC
    t0 = (bool(tb19)) ? t0 : t2;
    //Instruction 53860
    //DIV
    t1.x = unity_LightShadowBias.x / t0.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 53861
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 53862
    //MAX
    t7.x = max((-t0.w), t1.x);
    //Instruction 53863
    //ADD
    t7.x = (-t1.x) + t7.x;
    //Instruction 53864
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t7.x + t1.x;
    //Instruction 53865
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 53866
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 53867
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 53661
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 53662
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 53663
    //LT
    tb0 = t16_0<0.0;
    //Instruction 53664
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 53665
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 53666
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  highp vec3 tmpvar_8;
  tmpvar_8 = tmpvar_1.xyz;
  FinalPosition_7 = tmpvar_8;
  highp vec3 tmpvar_9;
  tmpvar_9.x = _Object2World[3].x;
  tmpvar_9.y = _Object2World[3].y;
  tmpvar_9.z = _Object2World[3].z;
  mediump float tmpvar_10;
  tmpvar_10 = (_WindQuality * _WindEnabled);
  if ((tmpvar_10 > 0.0)) {
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_11 * _ST_WindVector.xyz));
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_12 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_10 == 5.0)) {
    highp vec3 vPos_13;
    vPos_13 = tmpvar_8;
    highp float fOffset_14;
    fOffset_14 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_14 = 0.75;
    };
    highp vec4 tmpvar_15;
    tmpvar_15.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_15.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_14);
    highp vec4 tmpvar_16;
    tmpvar_16 = abs(((
      fract((tmpvar_15 + 0.5))
     * 2.0) - 1.0));
    vPos_13 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_16 * tmpvar_16)
       * 
        (3.0 - (2.0 * tmpvar_16))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    FinalPosition_7 = vPos_13;
  };
  if ((tmpvar_10 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_7;
    if ((tmpvar_10 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = FinalPosition_7;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (FinalPosition_7 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_5 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_9.x + tmpvar_9.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_7 = vPos_17;
  };
  if ((tmpvar_10 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_7;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_9.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_9.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_7 = vPos_42;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 53782
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53783
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 53784
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53785
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 53786
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 53787
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 53788
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 53789
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 53790
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 53791
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 53792
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 53793
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 53794
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 53795
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 53796
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 53797
    //FRC
    t2.x = fract(t2.x);
    //Instruction 53798
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 53799
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 53800
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 53801
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 53802
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 53803
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 53804
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 53805
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 53806
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 53807
    //IF
    if(tb20){
        //Instruction 53808
        //IF
        if(tb19){
            //Instruction 53809
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 53810
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 53811
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 53812
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 53813
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 53814
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53815
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53816
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53817
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53818
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 53819
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53820
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53821
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 53822
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53823
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 53824
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 53825
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 53826
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 53827
            //FRC
            t0 = fract(t0);
            //Instruction 53828
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 53829
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 53830
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 53831
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 53832
            //ADD
            t0 = t0 + t0;
            //Instruction 53833
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 53834
            //LT
            tb20 = t5.w<0.0;
            //Instruction 53835
            //MOV
            t5.y = (-t5.w);
            //Instruction 53836
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 53837
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 53838
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 53839
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 53840
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 53841
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 53842
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 53843
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53844
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53845
            //MUL
            t22 = t0.x * t22;
            //Instruction 53846
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 53847
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 53848
            //MUL
            t20 = t20 * t21;
            //Instruction 53849
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 53850
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 53851
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53852
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 53853
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 53854
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 53855
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 53856
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53857
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 53858
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53859
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 53860
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 53861
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 53862
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 53863
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 53864
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 53865
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 53866
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 53867
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 53868
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53869
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 53870
        //ELSE
        } else {
            //Instruction 53871
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 53872
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 53873
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53874
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 53875
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 53876
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 53877
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 53878
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 53879
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 53880
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 53881
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 53882
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 53883
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53884
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 53885
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 53886
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 53887
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 53888
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 53889
            //LT
            tb19 = t0.w<0.0;
            //Instruction 53890
            //MOV
            t0.y = (-t0.w);
            //Instruction 53891
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 53892
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 53893
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 53894
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 53895
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 53896
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 53897
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 53898
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 53899
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 53900
            //MUL
            t21 = t21 * t4.x;
            //Instruction 53901
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 53902
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 53903
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 53904
        //ENDIF
        }
        //Instruction 53905
    //ENDIF
    }
    //Instruction 53906
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 53907
    //SQRT
    t19 = sqrt(t19);
    //Instruction 53908
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 53909
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 53910
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 53911
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 53912
    //NE
    tb3 = t20!=0.0;
    //Instruction 53913
    //LOG
    t9 = log2(t20);
    //Instruction 53914
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 53915
    //EXP
    t9 = exp2(t9);
    //Instruction 53916
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 53917
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 53918
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 53919
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 53920
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 53921
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 53922
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 53923
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 53924
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 53925
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 53926
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 53927
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 53928
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 53929
    //MUL
    t20 = t20 * t3.x;
    //Instruction 53930
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 53931
    //MOV
    t3.y = t2.y;
    //Instruction 53932
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 53933
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 53934
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 53935
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 53936
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 53937
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 53938
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 53939
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 53940
    //MAD
    t2.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 53941
    //ADD
    vs_TEXCOORD0.xyz = t2.xyz + (-_LightPositionRange.xyz);
    //Instruction 53942
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 53943
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 53944
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 53945
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 53946
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 53947
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in highp vec3 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
highp vec4 t0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 53770
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 53771
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 53772
    //LT
    tb0 = t16_0<0.0;
    //Instruction 53773
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 53774
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);
    //Instruction 53775
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 53776
    //MUL
    t0.x = t0.x * _LightPositionRange.w;
    //Instruction 53777
    //MIN
    t0.x = min(t0.x, 0.999000);
    //Instruction 53778
    //MUL
    t0 = t0.xxxx * vec4(1.0, 255.000000, 65025.000000, 16581375.000000);
    //Instruction 53779
    //FRC
    t0 = fract(t0);
    //Instruction 53780
    //MAD
    SV_Target0 = (-t0.yzww) * vec4(0.003922, 0.003922, 0.003922, 0.003922) + t0;
    //Instruction 53781
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LightShadowBias;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp mat4 unity_MatrixVP;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_4;
  tmpvar_4 = tmpvar_3.xy;
  highp vec4 tmpvar_5;
  highp vec3 tmpvar_6;
  tmpvar_5 = tmpvar_1;
  tmpvar_6 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_7;
  highp vec3 vRotatedWindVector_8;
  highp vec3 FinalPosition_9;
  FinalPosition_9 = tmpvar_1.xyz;
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  mediump float tmpvar_11;
  tmpvar_11 = (_WindQuality * _WindEnabled);
  if ((tmpvar_11 > 0.0)) {
    highp mat3 tmpvar_12;
    tmpvar_12[0] = _World2Object[0].xyz;
    tmpvar_12[1] = _World2Object[1].xyz;
    tmpvar_12[2] = _World2Object[2].xyz;
    vRotatedWindVector_8 = normalize((tmpvar_12 * _ST_WindVector.xyz));
    highp mat3 tmpvar_13;
    tmpvar_13[0] = _World2Object[0].xyz;
    tmpvar_13[1] = _World2Object[1].xyz;
    tmpvar_13[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_7 = (normalize((tmpvar_13 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_8 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_7 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_9 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_11 > 1.0) && (tmpvar_11 < 5.0))) {
    highp float tmpvar_14;
    tmpvar_14 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_15;
    isBestWind_15 = (tmpvar_11 == 4.0);
    bool bLeaf2_16;
    bLeaf2_16 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_17;
    vPos_17 = FinalPosition_9;
    highp vec3 vDirection_18;
    vDirection_18 = tmpvar_2;
    highp float tmpvar_19;
    if (bLeaf2_16) {
      tmpvar_19 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_19 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_20;
    if (bLeaf2_16) {
      tmpvar_20 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_20 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_21;
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (tmpvar_19 + tmpvar_14);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (FinalPosition_9 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_20 * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_18 = tmpvar_2;
    vPos_17 = vPos_21;
    if (isBestWind_15) {
      highp vec3 tmpvar_24;
      tmpvar_24 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_25;
      if (bLeaf2_16) {
        tmpvar_25 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_26;
      if (bLeaf2_16) {
        tmpvar_26 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_26 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_27;
      if (bLeaf2_16) {
        tmpvar_27 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_27 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_28;
      if (bLeaf2_16) {
        tmpvar_28 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_28 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_29;
      if (bLeaf2_16) {
        tmpvar_29 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_29 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_30;
      if (bLeaf2_16) {
        tmpvar_30 = bool(1);
      } else {
        tmpvar_30 = bool(1);
      };
      highp float fTwitch_31;
      highp vec3 vAxis_32;
      highp float fOsc_33;
      highp vec3 vOriginPos_34;
      highp vec3 tmpvar_35;
      tmpvar_35 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_36;
      tmpvar_36 = ((tmpvar_35.x + tmpvar_35.y) + tmpvar_35.z);
      highp vec4 tmpvar_37;
      tmpvar_37.x = (tmpvar_25 + tmpvar_36);
      tmpvar_37.y = ((tmpvar_25 * 0.75) - tmpvar_36);
      tmpvar_37.z = ((tmpvar_25 * 0.01) + tmpvar_36);
      tmpvar_37.w = (tmpvar_25 + tmpvar_36);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      vOriginPos_34 = vPos_21;
      highp float tmpvar_40;
      tmpvar_40 = sqrt(dot (vPos_21, vPos_21));
      highp float fAngle_41;
      fAngle_41 = ((_glesMultiTexCoord2.x * tmpvar_27) * (tmpvar_38.x + (tmpvar_38.y * tmpvar_38.y)));
      highp vec2 vSinCos_42;
      vSinCos_42.x = sin(fAngle_41);
      vSinCos_42.y = cos(fAngle_41);
      highp float tmpvar_43;
      tmpvar_43 = (1.0 - vSinCos_42.y);
      highp mat3 tmpvar_44;
      tmpvar_44[0].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.x) + vSinCos_42.y);
      tmpvar_44[0].y = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.y) + (vSinCos_42.x * tmpvar_24.z));
      tmpvar_44[0].z = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.z) - (vSinCos_42.x * tmpvar_24.y));
      tmpvar_44[1].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.y) - (vSinCos_42.x * tmpvar_24.z));
      tmpvar_44[1].y = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.y) + vSinCos_42.y);
      tmpvar_44[1].z = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.z) + (vSinCos_42.x * tmpvar_24.x));
      tmpvar_44[2].x = (((tmpvar_43 * tmpvar_24.x) * tmpvar_24.z) + (vSinCos_42.x * tmpvar_24.y));
      tmpvar_44[2].y = (((tmpvar_43 * tmpvar_24.y) * tmpvar_24.z) - (vSinCos_42.x * tmpvar_24.x));
      tmpvar_44[2].z = (((tmpvar_43 * tmpvar_24.z) * tmpvar_24.z) + vSinCos_42.y);
      highp vec3 tmpvar_45;
      tmpvar_45 = ((tmpvar_24.yzx * vRotatedWindVector_8.zxy) - (tmpvar_24.zxy * vRotatedWindVector_8.yzx));
      vAxis_32.xz = tmpvar_45.xz;
      highp float tmpvar_46;
      tmpvar_46 = clamp (dot (vRotatedWindVector_8, tmpvar_24), -1.0, 1.0);
      vAxis_32.y = (tmpvar_45.y + tmpvar_46);
      highp vec3 tmpvar_47;
      tmpvar_47 = normalize(vAxis_32);
      vAxis_32 = tmpvar_47;
      highp float tmpvar_48;
      tmpvar_48 = (1.570796 - (sign(tmpvar_46) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_46))) * (1.570796 + (abs(tmpvar_46) * (-0.2146018 + 
          (abs(tmpvar_46) * (0.08656672 + (abs(tmpvar_46) * -0.03102955)))
        ))))
      )));
      fOsc_33 = (tmpvar_38.y - (tmpvar_38.x * tmpvar_38.x));
      fTwitch_31 = 0.0;
      if (tmpvar_30) {
        highp float fTime_49;
        fTime_49 = (tmpvar_29.z + tmpvar_36);
        highp vec4 tmpvar_50;
        tmpvar_50.zw = vec2(0.0, 0.0);
        tmpvar_50.x = fTime_49;
        tmpvar_50.y = (0.87 * fTime_49);
        highp vec4 tmpvar_51;
        highp vec4 tmpvar_52;
        tmpvar_52 = abs(((
          fract((tmpvar_50 + 0.5))
         * 2.0) - 1.0));
        tmpvar_51 = (((
          (tmpvar_52 * tmpvar_52)
         * 
          (3.0 - (2.0 * tmpvar_52))
        ) - 0.5) * 2.0);
        fTwitch_31 = (tmpvar_29.x * pow (clamp (
          ((((tmpvar_51.x * tmpvar_51.y) * tmpvar_51.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_29.y));
      };
      highp float fAngle_53;
      fAngle_53 = (_glesMultiTexCoord2.x * ((
        (tmpvar_48 * tmpvar_28)
       + 
        (fOsc_33 * tmpvar_26)
      ) + fTwitch_31));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.y) + (vSinCos_54.x * tmpvar_47.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.z) - (vSinCos_54.x * tmpvar_47.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.y) - (vSinCos_54.x * tmpvar_47.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.z) + (vSinCos_54.x * tmpvar_47.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_47.x) * tmpvar_47.z) + (vSinCos_54.x * tmpvar_47.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_47.y) * tmpvar_47.z) - (vSinCos_54.x * tmpvar_47.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_47.z) * tmpvar_47.z) + vSinCos_54.y);
      highp mat3 tmpvar_57;
      tmpvar_57 = (tmpvar_44 * tmpvar_56);
      vOriginPos_34 = (normalize((tmpvar_57 * vPos_21)) * tmpvar_40);
      vDirection_18 = (tmpvar_57 * _glesNormal);
      vPos_17 = vOriginPos_34;
    };
    tmpvar_6 = vDirection_18;
    FinalPosition_9 = vPos_17;
  };
  FinalPosition_9 = (FinalPosition_9 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_11 >= 3.0)) {
    highp vec3 vPos_58;
    vPos_58 = FinalPosition_9;
    if ((tmpvar_11 == 5.0)) {
      highp vec3 vPos_59;
      vPos_59 = FinalPosition_9;
      highp float fTime_60;
      highp float fAdherenceScale_61;
      highp vec3 vWindVector_62;
      vWindVector_62 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_60 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_63;
      highp float fOscillation_64;
      fOscillation_64 = 1.0;
      highp float fAmount_65;
      highp float fTarget_66;
      highp vec4 tmpvar_67;
      tmpvar_67.x = (fTime_60 + _glesMultiTexCoord0.w);
      tmpvar_67.y = ((fTime_60 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_67.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_60 + _glesMultiTexCoord0.w));
      tmpvar_67.w = ((fTime_60 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_67 + 0.5))
       * 2.0) - 1.0));
      vOscillations_63 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      highp float tmpvar_69;
      tmpvar_69 = (vOscillations_63.y * vOscillations_63.z);
      fTarget_66 = 1.0;
      fAmount_65 = tmpvar_69;
      if ((tmpvar_69 < 0.0)) {
        fTarget_66 = -1.0;
        fAmount_65 = -(tmpvar_69);
      };
      fOscillation_64 = (((
        mix (mix (tmpvar_69, fTarget_66, fAmount_65), fTarget_66, fAmount_65)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_63.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_64 = (fOscillation_64 * (1.0 + (vOscillations_63.w * _ST_WindBranchWhip.x)));
      vPos_59 = (FinalPosition_9 + ((vWindVector_62 * fOscillation_64) * _ST_WindBranch.y));
      highp vec4 tmpvar_70;
      tmpvar_70.zw = vec2(0.0, 0.0);
      tmpvar_70.x = ((fTime_60 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_70.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_71;
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_70 + 0.5))
       * 2.0) - 1.0));
      tmpvar_71 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      fAdherenceScale_61 = (1.0 - ((tmpvar_71.x * tmpvar_71.y) * (
        (tmpvar_71.x * tmpvar_71.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_61 = (fAdherenceScale_61 + ((vOscillations_63.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_59 = (vPos_59 + ((
        ((vRotatedBranchAnchor_7 - vPos_59) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_61) * _glesMultiTexCoord0.z));
      vPos_58 = vPos_59;
    } else {
      highp vec3 vPos_73;
      vPos_73 = vPos_58;
      highp float fTime_74;
      highp vec3 vWindVector_75;
      vWindVector_75 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_74 = (_ST_WindBranch.x + (tmpvar_10.x + tmpvar_10.y));
      highp vec4 vOscillations_76;
      highp float fOscillation_77;
      fOscillation_77 = 1.0;
      highp float fAmount_78;
      highp float fTarget_79;
      highp vec4 tmpvar_80;
      tmpvar_80.w = 0.0;
      tmpvar_80.x = (fTime_74 + _glesMultiTexCoord0.w);
      tmpvar_80.y = ((fTime_74 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_80.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_74 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      vOscillations_76 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      highp float tmpvar_82;
      tmpvar_82 = (vOscillations_76.y * vOscillations_76.z);
      fTarget_79 = 1.0;
      fAmount_78 = tmpvar_82;
      if ((tmpvar_82 < 0.0)) {
        fTarget_79 = -1.0;
        fAmount_78 = -(tmpvar_82);
      };
      fOscillation_77 = (((
        mix (mix (tmpvar_82, fTarget_79, fAmount_78), fTarget_79, fAmount_78)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_76.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_73 = (vPos_58 + ((vWindVector_75 * fOscillation_77) * _ST_WindBranch.y));
      vPos_58 = vPos_73;
    };
    FinalPosition_9 = vPos_58;
  };
  if ((tmpvar_11 > 0.0)) {
    highp vec3 vPos_83;
    vPos_83 = FinalPosition_9;
    highp float fMoveAmount_84;
    highp float fAdjust_85;
    highp float fLength_86;
    fLength_86 = sqrt(dot (FinalPosition_9, FinalPosition_9));
    highp float tmpvar_87;
    tmpvar_87 = (max ((FinalPosition_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_85 = tmpvar_87;
    if ((tmpvar_87 != 0.0)) {
      fAdjust_85 = pow (tmpvar_87, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_88;
    tmpvar_88.zw = vec2(0.0, 0.0);
    tmpvar_88.x = (tmpvar_10.x + _ST_WindGlobal.x);
    tmpvar_88.y = (tmpvar_10.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_89;
    highp vec4 tmpvar_90;
    tmpvar_90 = abs(((
      fract((tmpvar_88 + 0.5))
     * 2.0) - 1.0));
    tmpvar_89 = (((
      (tmpvar_90 * tmpvar_90)
     * 
      (3.0 - (2.0 * tmpvar_90))
    ) - 0.5) * 2.0);
    fMoveAmount_84 = ((_ST_WindGlobal.y * (tmpvar_89.x + 
      (tmpvar_89.y * tmpvar_89.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_84 = (fMoveAmount_84 * fAdjust_85);
    vPos_83.xz = (FinalPosition_9.xz + (vRotatedWindVector_8.xz * fMoveAmount_84));
    vPos_83 = (normalize(vPos_83) * fLength_86);
    FinalPosition_9 = vPos_83;
  };
  tmpvar_5.xyz = FinalPosition_9;
  highp vec3 vertex_91;
  vertex_91 = tmpvar_5.xyz;
  highp vec4 clipPos_92;
  if ((unity_LightShadowBias.z != 0.0)) {
    highp vec4 tmpvar_93;
    tmpvar_93.w = 1.0;
    tmpvar_93.xyz = vertex_91;
    highp vec3 tmpvar_94;
    tmpvar_94 = (_Object2World * tmpvar_93).xyz;
    highp vec4 v_95;
    v_95.x = _World2Object[0].x;
    v_95.y = _World2Object[1].x;
    v_95.z = _World2Object[2].x;
    v_95.w = _World2Object[3].x;
    highp vec4 v_96;
    v_96.x = _World2Object[0].y;
    v_96.y = _World2Object[1].y;
    v_96.z = _World2Object[2].y;
    v_96.w = _World2Object[3].y;
    highp vec4 v_97;
    v_97.x = _World2Object[0].z;
    v_97.y = _World2Object[1].z;
    v_97.z = _World2Object[2].z;
    v_97.w = _World2Object[3].z;
    highp vec3 tmpvar_98;
    tmpvar_98 = normalize(((
      (v_95.xyz * tmpvar_6.x)
     + 
      (v_96.xyz * tmpvar_6.y)
    ) + (v_97.xyz * tmpvar_6.z)));
    highp float tmpvar_99;
    tmpvar_99 = dot (tmpvar_98, normalize((_WorldSpaceLightPos0.xyz - 
      (tmpvar_94 * _WorldSpaceLightPos0.w)
    )));
    highp vec4 tmpvar_100;
    tmpvar_100.w = 1.0;
    tmpvar_100.xyz = (tmpvar_94 - (tmpvar_98 * (unity_LightShadowBias.z * 
      sqrt((1.0 - (tmpvar_99 * tmpvar_99)))
    )));
    clipPos_92 = (unity_MatrixVP * tmpvar_100);
  } else {
    highp vec4 tmpvar_101;
    tmpvar_101.w = 1.0;
    tmpvar_101.xyz = vertex_91;
    clipPos_92 = (glstate_matrix_mvp * tmpvar_101);
  };
  highp vec4 clipPos_102;
  clipPos_102.xyw = clipPos_92.xyw;
  clipPos_102.z = (clipPos_92.z + clamp ((unity_LightShadowBias.x / clipPos_92.w), 0.0, 1.0));
  clipPos_102.z = mix (clipPos_102.z, max (clipPos_102.z, -(clipPos_92.w)), unity_LightShadowBias.y);
  gl_Position = clipPos_102;
  xlv_TEXCOORD1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  gl_FragData[0] = vec4(0.0, 0.0, 0.0, 0.0);
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_DEPTH" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp float t1;
bvec2 tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 54307
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 54308
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 54309
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 54310
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 54311
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 54312
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 54313
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 54314
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 54315
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 54316
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 54317
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 54318
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 54319
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 54320
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 54321
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 54322
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 54323
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 54324
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 54325
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 54326
        //FRC
        t15.x = fract(t15.x);
        //Instruction 54327
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 54328
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 54329
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 54330
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 54331
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 54332
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 54333
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 54334
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 54335
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 54336
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 54337
        //IF
        if(tb29){
            //Instruction 54338
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 54339
            //FRC
            t4 = fract(t4);
            //Instruction 54340
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54341
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 54342
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 54343
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 54344
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 54345
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 54346
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54347
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 54348
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54349
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 54350
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54351
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 54352
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 54353
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 54354
            //SQRT
            t44 = sqrt(t44);
            //Instruction 54355
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 54356
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 54357
            //MUL
            t45 = t45 * t5.x;
            //Instruction 54358
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 54359
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 54360
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 54361
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 54362
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 54363
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 54364
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 54365
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 54366
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 54367
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 54368
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 54369
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 54370
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 54371
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 54372
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 54373
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 54374
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 54375
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 54376
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 54377
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 54378
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 54379
            //SQRT
            t45 = sqrt(t45);
            //Instruction 54380
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 54381
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 54382
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 54383
            //MUL
            t33 = t45 * t5.x;
            //Instruction 54384
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 54385
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 54386
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 54387
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 54388
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 54389
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 54390
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 54391
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54392
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 54393
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54394
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 54395
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54396
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 54397
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 54398
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 54399
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 54400
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 54401
            //LOG
            t43 = log2(t43);
            //Instruction 54402
            //MUL
            t29 = t43 * t15.y;
            //Instruction 54403
            //EXP
            t29 = exp2(t29);
            //Instruction 54404
            //MUL
            t43 = t5.y * t45;
            //Instruction 54405
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 54406
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 54407
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 54408
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 54409
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 54410
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 54411
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 54412
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 54413
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 54414
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 54415
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 54416
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 54417
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 54418
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 54419
            //MOV
            t10.z = t11.x;
            //Instruction 54420
            //MOV
            t10.w = t9.x;
            //Instruction 54421
            //MOV
            t12.z = t8.y;
            //Instruction 54422
            //MOV
            t12.w = t13.y;
            //Instruction 54423
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 54424
            //MOV
            t13.w = t12.y;
            //Instruction 54425
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 54426
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 54427
            //MOV
            t9.w = t10.y;
            //Instruction 54428
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 54429
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 54430
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 54431
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 54432
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 54433
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 54434
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 54435
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 54436
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 54437
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 54438
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 54439
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 54440
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 54441
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54442
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54443
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 54444
        //ELSE
        } else {
            //Instruction 54445
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 54446
        //ENDIF
        }
        //Instruction 54447
    //ELSE
    } else {
        //Instruction 54448
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 54449
    //ENDIF
    }
    //Instruction 54450
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 54451
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 54452
    //IF
    if(tb16){
        //Instruction 54453
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 54454
        //IF
        if(tb16){
            //Instruction 54455
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 54456
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 54457
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 54458
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 54459
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 54460
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54461
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54462
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 54463
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54464
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 54465
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54466
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54467
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54468
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54469
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 54470
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 54471
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 54472
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 54473
            //FRC
            t0 = fract(t0);
            //Instruction 54474
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 54475
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 54476
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 54477
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 54478
            //ADD
            t0 = t0 + t0;
            //Instruction 54479
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 54480
            //LT
            tb44 = t6.w<0.0;
            //Instruction 54481
            //MOV
            t6.y = (-t6.w);
            //Instruction 54482
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 54483
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 54484
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 54485
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 54486
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 54487
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 54488
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 54489
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54490
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54491
            //MUL
            t46 = t0.x * t46;
            //Instruction 54492
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 54493
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 54494
            //MUL
            t44 = t44 * t45;
            //Instruction 54495
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 54496
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 54497
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54498
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 54499
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 54500
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 54501
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 54502
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 54503
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 54504
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 54505
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 54506
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 54507
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 54508
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 54509
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 54510
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 54511
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 54512
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 54513
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 54514
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54515
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 54516
        //ELSE
        } else {
            //Instruction 54517
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 54518
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 54519
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54520
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 54521
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 54522
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 54523
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 54524
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 54525
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 54526
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 54527
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 54528
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 54529
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 54530
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 54531
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 54532
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 54533
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 54534
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 54535
            //LT
            tb16 = t0.w<0.0;
            //Instruction 54536
            //MOV
            t0.y = (-t0.w);
            //Instruction 54537
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 54538
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 54539
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 54540
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 54541
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 54542
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 54543
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 54544
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 54545
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 54546
            //MUL
            t45 = t45 * t5.x;
            //Instruction 54547
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 54548
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 54549
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 54550
        //ENDIF
        }
        //Instruction 54551
    //ENDIF
    }
    //Instruction 54552
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 54553
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 54554
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 54555
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 54556
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 54557
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 54558
    //NE
    tb45 = t44!=0.0;
    //Instruction 54559
    //LOG
    t4.x = log2(t44);
    //Instruction 54560
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 54561
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 54562
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 54563
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 54564
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 54565
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 54566
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 54567
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 54568
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 54569
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 54570
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 54571
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 54572
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 54573
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 54574
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 54575
    //MUL
    t44 = t44 * t45;
    //Instruction 54576
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 54577
    //MOV
    t4.y = t3.y;
    //Instruction 54578
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 54579
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 54580
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 54581
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 54582
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 54583
    //NE
    tb1.x = unity_LightShadowBias.z!=0.0;
    //Instruction 54584
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 54585
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 54586
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.zzz + t3.xyz;
    //Instruction 54587
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 54588
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 54589
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 54590
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 54591
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 54592
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 54593
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 54594
    //MUL
    t5.xyz = t15.yyy * t5.xyz;
    //Instruction 54595
    //MAD
    t4.xyz = t4.xyz * t15.xxx + t5.xyz;
    //Instruction 54596
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 54597
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 54598
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 54599
    //MAD
    t15.xyz = t5.xyz * t15.zzz + t4.xyz;
    //Instruction 54600
    //DP3
    t44 = dot(t15.xyz, t15.xyz);
    //Instruction 54601
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 54602
    //MUL
    t15.xyz = t15.xyz * vec3(t44);
    //Instruction 54603
    //MAD
    t4.xyz = (-t3.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    //Instruction 54604
    //DP3
    t44 = dot(t4.xyz, t4.xyz);
    //Instruction 54605
    //RSQ
    t44 = inversesqrt(t44);
    //Instruction 54606
    //MUL
    t4.xyz = vec3(t44) * t4.xyz;
    //Instruction 54607
    //DP3
    t44 = dot(t15.xyz, t4.xyz);
    //Instruction 54608
    //MAD
    t44 = (-t44) * t44 + 1.0;
    //Instruction 54609
    //SQRT
    t44 = sqrt(t44);
    //Instruction 54610
    //MUL
    t44 = t44 * unity_LightShadowBias.z;
    //Instruction 54611
    //MAD
    t15.xyz = (-t15.xyz) * vec3(t44) + t3.xyz;
    //Instruction 54612
    //MUL
    t0 = t15.yyyy * unity_MatrixVP[1];
    //Instruction 54613
    //MAD
    t0 = unity_MatrixVP[0] * t15.xxxx + t0;
    //Instruction 54614
    //MAD
    t0 = unity_MatrixVP[2] * t15.zzzz + t0;
    //Instruction 54615
    //ADD
    t0 = t0 + unity_MatrixVP[3];
    //Instruction 54616
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 54617
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 54618
    //MAD
    t2 = glstate_matrix_mvp[2] * t2.zzzz + t3;
    //Instruction 54619
    //ADD
    t2 = t2 + glstate_matrix_mvp[3];
    //Instruction 54620
    //MOVC
    t0 = (tb1.x) ? t0 : t2;
    //Instruction 54621
    //DIV
    t1 = unity_LightShadowBias.x / t0.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 54622
    //ADD
    t1 = t0.z + t1;
    //Instruction 54623
    //MAX
    t15.x = max((-t0.w), t1);
    //Instruction 54624
    //ADD
    t15.x = (-t1) + t15.x;
    //Instruction 54625
    //MAD
    gl_Position.z = unity_LightShadowBias.y * t15.x + t1;
    //Instruction 54626
    //MOV
    gl_Position.xyw = t0.xyw;
    //Instruction 54627
    //MOV
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy;
    //Instruction 54628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump float t16_0;
lowp float t10_0;
bool tb0;
void main()
{
    //Instruction 54301
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD1.xy).w;
    //Instruction 54302
    //MAD
    t16_0 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 54303
    //LT
    tb0 = t16_0<0.0;
    //Instruction 54304
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 54305
    //MOV
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 54306
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _LightPositionRange;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  mediump vec2 tmpvar_3;
  tmpvar_3 = tmpvar_2.xy;
  highp vec4 tmpvar_4;
  tmpvar_4 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_5;
  highp vec3 vRotatedWindVector_6;
  highp vec3 FinalPosition_7;
  FinalPosition_7 = tmpvar_1.xyz;
  highp vec3 tmpvar_8;
  tmpvar_8.x = _Object2World[3].x;
  tmpvar_8.y = _Object2World[3].y;
  tmpvar_8.z = _Object2World[3].z;
  mediump float tmpvar_9;
  tmpvar_9 = (_WindQuality * _WindEnabled);
  if ((tmpvar_9 > 0.0)) {
    highp mat3 tmpvar_10;
    tmpvar_10[0] = _World2Object[0].xyz;
    tmpvar_10[1] = _World2Object[1].xyz;
    tmpvar_10[2] = _World2Object[2].xyz;
    vRotatedWindVector_6 = normalize((tmpvar_10 * _ST_WindVector.xyz));
    highp mat3 tmpvar_11;
    tmpvar_11[0] = _World2Object[0].xyz;
    tmpvar_11[1] = _World2Object[1].xyz;
    tmpvar_11[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_5 = (normalize((tmpvar_11 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_6 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_5 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_7 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_9 > 1.0) && (tmpvar_9 < 5.0))) {
    highp float tmpvar_12;
    tmpvar_12 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_13;
    isBestWind_13 = (tmpvar_9 == 4.0);
    bool bLeaf2_14;
    bLeaf2_14 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_15;
    vPos_15 = FinalPosition_7;
    highp float tmpvar_16;
    if (bLeaf2_14) {
      tmpvar_16 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_16 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_17;
    if (bLeaf2_14) {
      tmpvar_17 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_17 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_18;
    highp vec4 tmpvar_19;
    tmpvar_19.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_19.x = (tmpvar_16 + tmpvar_12);
    highp vec4 tmpvar_20;
    tmpvar_20 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    vPos_18 = (FinalPosition_7 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_17 * (((
        (tmpvar_20 * tmpvar_20)
       * 
        (3.0 - (2.0 * tmpvar_20))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vPos_15 = vPos_18;
    if (isBestWind_13) {
      highp vec3 tmpvar_21;
      tmpvar_21 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_22;
      if (bLeaf2_14) {
        tmpvar_22 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_22 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_23;
      if (bLeaf2_14) {
        tmpvar_23 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_23 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_24;
      if (bLeaf2_14) {
        tmpvar_24 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_24 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_25;
      if (bLeaf2_14) {
        tmpvar_25 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_25 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_26;
      if (bLeaf2_14) {
        tmpvar_26 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_26 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_27;
      if (bLeaf2_14) {
        tmpvar_27 = bool(1);
      } else {
        tmpvar_27 = bool(1);
      };
      highp float fTwitch_28;
      highp vec3 vAxis_29;
      highp float fOsc_30;
      highp vec3 vOriginPos_31;
      highp vec3 tmpvar_32;
      tmpvar_32 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_33;
      tmpvar_33 = ((tmpvar_32.x + tmpvar_32.y) + tmpvar_32.z);
      highp vec4 tmpvar_34;
      tmpvar_34.x = (tmpvar_22 + tmpvar_33);
      tmpvar_34.y = ((tmpvar_22 * 0.75) - tmpvar_33);
      tmpvar_34.z = ((tmpvar_22 * 0.01) + tmpvar_33);
      tmpvar_34.w = (tmpvar_22 + tmpvar_33);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      vOriginPos_31 = vPos_18;
      highp float tmpvar_37;
      tmpvar_37 = sqrt(dot (vPos_18, vPos_18));
      highp float fAngle_38;
      fAngle_38 = ((_glesMultiTexCoord2.x * tmpvar_24) * (tmpvar_35.x + (tmpvar_35.y * tmpvar_35.y)));
      highp vec2 vSinCos_39;
      vSinCos_39.x = sin(fAngle_38);
      vSinCos_39.y = cos(fAngle_38);
      highp float tmpvar_40;
      tmpvar_40 = (1.0 - vSinCos_39.y);
      highp mat3 tmpvar_41;
      tmpvar_41[0].x = (((tmpvar_40 * tmpvar_21.x) * tmpvar_21.x) + vSinCos_39.y);
      tmpvar_41[0].y = (((tmpvar_40 * tmpvar_21.x) * tmpvar_21.y) + (vSinCos_39.x * tmpvar_21.z));
      tmpvar_41[0].z = (((tmpvar_40 * tmpvar_21.x) * tmpvar_21.z) - (vSinCos_39.x * tmpvar_21.y));
      tmpvar_41[1].x = (((tmpvar_40 * tmpvar_21.x) * tmpvar_21.y) - (vSinCos_39.x * tmpvar_21.z));
      tmpvar_41[1].y = (((tmpvar_40 * tmpvar_21.y) * tmpvar_21.y) + vSinCos_39.y);
      tmpvar_41[1].z = (((tmpvar_40 * tmpvar_21.y) * tmpvar_21.z) + (vSinCos_39.x * tmpvar_21.x));
      tmpvar_41[2].x = (((tmpvar_40 * tmpvar_21.x) * tmpvar_21.z) + (vSinCos_39.x * tmpvar_21.y));
      tmpvar_41[2].y = (((tmpvar_40 * tmpvar_21.y) * tmpvar_21.z) - (vSinCos_39.x * tmpvar_21.x));
      tmpvar_41[2].z = (((tmpvar_40 * tmpvar_21.z) * tmpvar_21.z) + vSinCos_39.y);
      highp vec3 tmpvar_42;
      tmpvar_42 = ((tmpvar_21.yzx * vRotatedWindVector_6.zxy) - (tmpvar_21.zxy * vRotatedWindVector_6.yzx));
      vAxis_29.xz = tmpvar_42.xz;
      highp float tmpvar_43;
      tmpvar_43 = clamp (dot (vRotatedWindVector_6, tmpvar_21), -1.0, 1.0);
      vAxis_29.y = (tmpvar_42.y + tmpvar_43);
      highp vec3 tmpvar_44;
      tmpvar_44 = normalize(vAxis_29);
      vAxis_29 = tmpvar_44;
      highp float tmpvar_45;
      tmpvar_45 = (1.570796 - (sign(tmpvar_43) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_43))) * (1.570796 + (abs(tmpvar_43) * (-0.2146018 + 
          (abs(tmpvar_43) * (0.08656672 + (abs(tmpvar_43) * -0.03102955)))
        ))))
      )));
      fOsc_30 = (tmpvar_35.y - (tmpvar_35.x * tmpvar_35.x));
      fTwitch_28 = 0.0;
      if (tmpvar_27) {
        highp float fTime_46;
        fTime_46 = (tmpvar_26.z + tmpvar_33);
        highp vec4 tmpvar_47;
        tmpvar_47.zw = vec2(0.0, 0.0);
        tmpvar_47.x = fTime_46;
        tmpvar_47.y = (0.87 * fTime_46);
        highp vec4 tmpvar_48;
        highp vec4 tmpvar_49;
        tmpvar_49 = abs(((
          fract((tmpvar_47 + 0.5))
         * 2.0) - 1.0));
        tmpvar_48 = (((
          (tmpvar_49 * tmpvar_49)
         * 
          (3.0 - (2.0 * tmpvar_49))
        ) - 0.5) * 2.0);
        fTwitch_28 = (tmpvar_26.x * pow (clamp (
          ((((tmpvar_48.x * tmpvar_48.y) * tmpvar_48.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_26.y));
      };
      highp float fAngle_50;
      fAngle_50 = (_glesMultiTexCoord2.x * ((
        (tmpvar_45 * tmpvar_25)
       + 
        (fOsc_30 * tmpvar_23)
      ) + fTwitch_28));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_44.x) * tmpvar_44.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_44.x) * tmpvar_44.y) + (vSinCos_51.x * tmpvar_44.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_44.x) * tmpvar_44.z) - (vSinCos_51.x * tmpvar_44.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_44.x) * tmpvar_44.y) - (vSinCos_51.x * tmpvar_44.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_44.y) * tmpvar_44.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_44.y) * tmpvar_44.z) + (vSinCos_51.x * tmpvar_44.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_44.x) * tmpvar_44.z) + (vSinCos_51.x * tmpvar_44.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_44.y) * tmpvar_44.z) - (vSinCos_51.x * tmpvar_44.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_44.z) * tmpvar_44.z) + vSinCos_51.y);
      vOriginPos_31 = (normalize((
        (tmpvar_41 * tmpvar_53)
       * vPos_18)) * tmpvar_37);
      vPos_15 = vOriginPos_31;
    };
    FinalPosition_7 = vPos_15;
  };
  FinalPosition_7 = (FinalPosition_7 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_9 >= 3.0)) {
    highp vec3 vPos_54;
    vPos_54 = FinalPosition_7;
    if ((tmpvar_9 == 5.0)) {
      highp vec3 vPos_55;
      vPos_55 = FinalPosition_7;
      highp float fTime_56;
      highp float fAdherenceScale_57;
      highp vec3 vWindVector_58;
      vWindVector_58 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_56 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_59;
      highp float fOscillation_60;
      fOscillation_60 = 1.0;
      highp float fAmount_61;
      highp float fTarget_62;
      highp vec4 tmpvar_63;
      tmpvar_63.x = (fTime_56 + _glesMultiTexCoord0.w);
      tmpvar_63.y = ((fTime_56 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_63.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_56 + _glesMultiTexCoord0.w));
      tmpvar_63.w = ((fTime_56 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_64;
      tmpvar_64 = abs(((
        fract((tmpvar_63 + 0.5))
       * 2.0) - 1.0));
      vOscillations_59 = (((
        (tmpvar_64 * tmpvar_64)
       * 
        (3.0 - (2.0 * tmpvar_64))
      ) - 0.5) * 2.0);
      highp float tmpvar_65;
      tmpvar_65 = (vOscillations_59.y * vOscillations_59.z);
      fTarget_62 = 1.0;
      fAmount_61 = tmpvar_65;
      if ((tmpvar_65 < 0.0)) {
        fTarget_62 = -1.0;
        fAmount_61 = -(tmpvar_65);
      };
      fOscillation_60 = (((
        mix (mix (tmpvar_65, fTarget_62, fAmount_61), fTarget_62, fAmount_61)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_59.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_60 = (fOscillation_60 * (1.0 + (vOscillations_59.w * _ST_WindBranchWhip.x)));
      vPos_55 = (FinalPosition_7 + ((vWindVector_58 * fOscillation_60) * _ST_WindBranch.y));
      highp vec4 tmpvar_66;
      tmpvar_66.zw = vec2(0.0, 0.0);
      tmpvar_66.x = ((fTime_56 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_66.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_67;
      highp vec4 tmpvar_68;
      tmpvar_68 = abs(((
        fract((tmpvar_66 + 0.5))
       * 2.0) - 1.0));
      tmpvar_67 = (((
        (tmpvar_68 * tmpvar_68)
       * 
        (3.0 - (2.0 * tmpvar_68))
      ) - 0.5) * 2.0);
      fAdherenceScale_57 = (1.0 - ((tmpvar_67.x * tmpvar_67.y) * (
        (tmpvar_67.x * tmpvar_67.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_57 = (fAdherenceScale_57 + ((vOscillations_59.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_55 = (vPos_55 + ((
        ((vRotatedBranchAnchor_5 - vPos_55) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_57) * _glesMultiTexCoord0.z));
      vPos_54 = vPos_55;
    } else {
      highp vec3 vPos_69;
      vPos_69 = vPos_54;
      highp float fTime_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_8.x + tmpvar_8.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.w = 0.0;
      tmpvar_76.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_69 = (vPos_54 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      vPos_54 = vPos_69;
    };
    FinalPosition_7 = vPos_54;
  };
  if ((tmpvar_9 > 0.0)) {
    highp vec3 vPos_79;
    vPos_79 = FinalPosition_7;
    highp float fMoveAmount_80;
    highp float fAdjust_81;
    highp float fLength_82;
    fLength_82 = sqrt(dot (FinalPosition_7, FinalPosition_7));
    highp float tmpvar_83;
    tmpvar_83 = (max ((FinalPosition_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_81 = tmpvar_83;
    if ((tmpvar_83 != 0.0)) {
      fAdjust_81 = pow (tmpvar_83, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_84;
    tmpvar_84.zw = vec2(0.0, 0.0);
    tmpvar_84.x = (tmpvar_8.x + _ST_WindGlobal.x);
    tmpvar_84.y = (tmpvar_8.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_85;
    highp vec4 tmpvar_86;
    tmpvar_86 = abs(((
      fract((tmpvar_84 + 0.5))
     * 2.0) - 1.0));
    tmpvar_85 = (((
      (tmpvar_86 * tmpvar_86)
     * 
      (3.0 - (2.0 * tmpvar_86))
    ) - 0.5) * 2.0);
    fMoveAmount_80 = ((_ST_WindGlobal.y * (tmpvar_85.x + 
      (tmpvar_85.y * tmpvar_85.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_80 = (fMoveAmount_80 * fAdjust_81);
    vPos_79.xz = (FinalPosition_7.xz + (vRotatedWindVector_6.xz * fMoveAmount_80));
    vPos_79 = (normalize(vPos_79) * fLength_82);
    FinalPosition_7 = vPos_79;
  };
  tmpvar_4.xyz = FinalPosition_7;
  xlv_TEXCOORD0 = ((_Object2World * tmpvar_4).xyz - _LightPositionRange.xyz);
  gl_Position = (glstate_matrix_mvp * tmpvar_4);
  xlv_TEXCOORD1 = tmpvar_3;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _LightPositionRange;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying highp vec3 xlv_TEXCOORD0;
varying mediump vec2 xlv_TEXCOORD1;
void main ()
{
  lowp float x_1;
  x_1 = ((texture2D (_MainTex, xlv_TEXCOORD1).w * _Color.w) - _Cutoff);
  if ((x_1 < 0.0)) {
    discard;
  };
  highp vec4 tmpvar_2;
  tmpvar_2 = fract((vec4(1.0, 255.0, 65025.0, 1.658138e+07) * min (
    (sqrt(dot (xlv_TEXCOORD0, xlv_TEXCOORD0)) * _LightPositionRange.w)
  , 0.999)));
  highp vec4 tmpvar_3;
  tmpvar_3 = (tmpvar_2 - (tmpvar_2.yzww * 0.003921569));
  gl_FragData[0] = tmpvar_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SHADOWS_CUBE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec3 vs_TEXCOORD0;
out mediump vec2 vs_TEXCOORD1;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp float t17;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t31;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
highp float t46;
void main()
{
    //Instruction 53880
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 53881
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 53882
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 53883
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 53884
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 53885
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 53886
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 53887
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 53888
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 53889
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 53890
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 53891
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 53892
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 53893
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 53894
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 53895
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 53896
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 53897
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 53898
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 53899
        //FRC
        t15.x = fract(t15.x);
        //Instruction 53900
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 53901
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 53902
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 53903
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 53904
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 53905
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 53906
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 53907
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 53908
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 53909
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 53910
        //IF
        if(tb29){
            //Instruction 53911
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 53912
            //FRC
            t4 = fract(t4);
            //Instruction 53913
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 53914
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 53915
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 53916
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 53917
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 53918
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 53919
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53920
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 53921
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53922
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 53923
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53924
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 53925
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 53926
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 53927
            //SQRT
            t44 = sqrt(t44);
            //Instruction 53928
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 53929
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 53930
            //MUL
            t45 = t45 * t5.x;
            //Instruction 53931
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 53932
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 53933
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 53934
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 53935
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 53936
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 53937
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 53938
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 53939
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 53940
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 53941
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 53942
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 53943
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 53944
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 53945
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 53946
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 53947
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 53948
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 53949
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 53950
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 53951
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 53952
            //SQRT
            t45 = sqrt(t45);
            //Instruction 53953
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 53954
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 53955
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 53956
            //MUL
            t33 = t45 * t5.x;
            //Instruction 53957
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 53958
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 53959
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 53960
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 53961
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 53962
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 53963
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 53964
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 53965
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 53966
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 53967
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 53968
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 53969
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 53970
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 53971
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 53972
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 53973
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 53974
            //LOG
            t43 = log2(t43);
            //Instruction 53975
            //MUL
            t29 = t43 * t15.y;
            //Instruction 53976
            //EXP
            t29 = exp2(t29);
            //Instruction 53977
            //MUL
            t43 = t5.y * t45;
            //Instruction 53978
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 53979
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 53980
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 53981
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 53982
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 53983
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 53984
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 53985
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 53986
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 53987
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 53988
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 53989
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 53990
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 53991
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 53992
            //MOV
            t10.z = t11.x;
            //Instruction 53993
            //MOV
            t10.w = t9.x;
            //Instruction 53994
            //MOV
            t12.z = t8.y;
            //Instruction 53995
            //MOV
            t12.w = t13.y;
            //Instruction 53996
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 53997
            //MOV
            t13.w = t12.y;
            //Instruction 53998
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 53999
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 54000
            //MOV
            t9.w = t10.y;
            //Instruction 54001
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 54002
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 54003
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruc