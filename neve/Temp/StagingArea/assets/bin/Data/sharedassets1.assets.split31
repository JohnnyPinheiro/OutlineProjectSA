m 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 38068
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38069
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38070
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 38246
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38247
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38248
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 38249
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38250
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 38251
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 38252
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 38253
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 38254
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38255
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38256
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 38257
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38258
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38259
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38260
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 38261
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38262
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 38263
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 38264
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 38265
    //IF
    if(tb22){
        //Instruction 38266
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 38267
        //IF
        if(tb22){
            //Instruction 38268
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38269
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 38270
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 38271
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 38272
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 38273
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 38274
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38275
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38276
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38277
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38278
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 38279
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 38280
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38281
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38282
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 38283
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38284
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38285
            //FRC
            t2 = fract(t2);
            //Instruction 38286
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38287
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 38288
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38289
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38290
            //ADD
            t2 = t2 + t2;
            //Instruction 38291
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 38292
            //LT
            tb24 = t5.w<0.0;
            //Instruction 38293
            //MOV
            t5.y = (-t5.w);
            //Instruction 38294
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 38295
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 38296
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 38297
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 38298
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 38299
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 38300
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 38301
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38302
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38303
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 38304
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 38305
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38306
            //MUL
            t24 = t24 * t25;
            //Instruction 38307
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 38308
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38309
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38310
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38311
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38312
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 38313
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 38314
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38315
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 38316
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38317
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 38318
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 38319
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 38320
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 38321
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38322
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 38323
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 38324
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 38325
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38326
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 38327
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 38328
        //ELSE
        } else {
            //Instruction 38329
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38330
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38331
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38332
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38333
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38334
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38335
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38336
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 38337
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 38338
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38339
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38340
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38341
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 38342
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38343
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38344
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 38345
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 38346
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38347
            //MOV
            t2.y = (-t2.w);
            //Instruction 38348
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38349
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38350
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 38351
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 38352
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 38353
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 38354
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38355
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38356
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38357
            //MUL
            t24 = t24 * t5.x;
            //Instruction 38358
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 38359
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 38360
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38361
        //ENDIF
        }
        //Instruction 38362
    //ELSE
    } else {
        //Instruction 38363
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 38364
    //ENDIF
    }
    //Instruction 38365
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 38366
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38367
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38368
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 38369
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 38370
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 38371
    //NE
    tb24 = t22!=0.0;
    //Instruction 38372
    //LOG
    t4.x = log2(t22);
    //Instruction 38373
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 38374
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 38375
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 38376
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38377
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38378
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 38379
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 38380
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38381
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 38382
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38383
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 38384
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 38385
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 38386
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38387
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 38388
    //MUL
    t22 = t22 * t24;
    //Instruction 38389
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 38390
    //MOV
    t4.y = t3.y;
    //Instruction 38391
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 38392
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38393
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 38394
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 38395
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 38396
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 38397
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 38398
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 38399
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38400
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 38401
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 38402
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 38403
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 38404
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 38405
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 38406
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 38407
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 38408
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 38409
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 38410
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 38411
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 38412
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 38413
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 38414
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 38415
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 38416
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 38417
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 38418
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 38419
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 38420
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38421
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38422
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 38423
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 38243
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38244
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38245
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_53;
  tmpvar_53 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62.x = worldTangent_4.x;
  tmpvar_62.y = worldBinormal_3.x;
  tmpvar_62.z = worldNormal_5.x;
  tmpvar_62.w = tmpvar_53.x;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.y;
  tmpvar_63.y = worldBinormal_3.y;
  tmpvar_63.z = worldNormal_5.y;
  tmpvar_63.w = tmpvar_53.y;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.z;
  tmpvar_64.y = worldBinormal_3.z;
  tmpvar_64.z = worldNormal_5.z;
  tmpvar_64.w = tmpvar_53.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD0.xyz, tmpvar_7);
  worldN_2.x = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD1.xyz, tmpvar_7);
  worldN_2.y = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD2.xyz, tmpvar_7);
  worldN_2.z = tmpvar_10;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 38328
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38329
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38330
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 38331
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38332
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 38333
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 38334
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 38335
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 38336
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38337
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38338
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 38339
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38340
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38341
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38342
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 38343
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 38344
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 38345
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 38346
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 38347
    //IF
    if(tb25){
        //Instruction 38348
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 38349
        //IF
        if(tb25){
            //Instruction 38350
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38351
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 38352
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 38353
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 38354
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 38355
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 38356
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38357
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38358
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38359
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38360
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 38361
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 38362
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38363
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38364
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 38365
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38366
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38367
            //FRC
            t2 = fract(t2);
            //Instruction 38368
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38369
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 38370
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38371
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38372
            //ADD
            t2 = t2 + t2;
            //Instruction 38373
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 38374
            //LT
            tb27 = t5.w<0.0;
            //Instruction 38375
            //MOV
            t5.y = (-t5.w);
            //Instruction 38376
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 38377
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 38378
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 38379
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 38380
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 38381
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 38382
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 38383
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38384
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38385
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 38386
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 38387
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38388
            //MUL
            t27 = t27 * t28;
            //Instruction 38389
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 38390
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38391
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38392
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38393
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38394
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 38395
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 38396
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38397
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 38398
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38399
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 38400
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 38401
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 38402
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 38403
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38404
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 38405
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 38406
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 38407
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38408
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 38409
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 38410
        //ELSE
        } else {
            //Instruction 38411
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38412
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38413
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38414
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38415
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38416
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38417
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38418
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 38419
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 38420
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38421
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38422
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38423
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 38424
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38425
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38426
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 38427
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 38428
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38429
            //MOV
            t2.y = (-t2.w);
            //Instruction 38430
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38431
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38432
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 38433
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 38434
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 38435
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 38436
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38437
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38438
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38439
            //MUL
            t27 = t27 * t5.x;
            //Instruction 38440
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 38441
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 38442
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38443
        //ENDIF
        }
        //Instruction 38444
    //ELSE
    } else {
        //Instruction 38445
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 38446
    //ENDIF
    }
    //Instruction 38447
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 38448
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38449
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38450
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 38451
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 38452
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 38453
    //NE
    tb27 = t25!=0.0;
    //Instruction 38454
    //LOG
    t4.x = log2(t25);
    //Instruction 38455
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 38456
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 38457
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 38458
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38459
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38460
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 38461
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 38462
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38463
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 38464
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38465
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 38466
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 38467
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 38468
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38469
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 38470
    //MUL
    t25 = t25 * t27;
    //Instruction 38471
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 38472
    //MOV
    t4.y = t3.y;
    //Instruction 38473
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 38474
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 38475
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 38476
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 38477
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 38478
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 38479
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 38480
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 38481
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38482
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 38483
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 38484
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 38485
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 38486
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 38487
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 38488
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 38489
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 38490
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 38491
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 38492
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 38493
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 38494
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 38495
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 38496
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 38497
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 38498
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 38499
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 38500
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 38501
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38502
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 38503
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 38504
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 38505
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 38506
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 38507
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 38508
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 38509
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 38510
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 38511
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 38512
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 38513
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 38514
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 38515
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 38516
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 38517
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 38518
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 38519
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 38520
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 38521
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 38522
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 38523
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38524
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 38525
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 38320
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 38321
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 38322
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 38323
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 38324
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 38325
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38326
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38327
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 38529
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38530
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 38531
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 38532
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38533
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 38534
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 38535
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 38536
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 38537
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 38538
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 38539
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 38540
    //IF
    if(tb19){
        //Instruction 38541
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 38542
        //IF
        if(tb19){
            //Instruction 38543
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38544
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 38545
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 38546
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 38547
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 38548
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 38549
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38550
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 38551
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38552
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 38553
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38554
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38555
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 38556
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38557
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 38558
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 38559
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 38560
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38561
            //FRC
            t0 = fract(t0);
            //Instruction 38562
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38563
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 38564
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38565
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38566
            //ADD
            t0 = t0 + t0;
            //Instruction 38567
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 38568
            //LT
            tb20 = t4.w<0.0;
            //Instruction 38569
            //MOV
            t4.y = (-t4.w);
            //Instruction 38570
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 38571
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 38572
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 38573
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 38574
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 38575
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 38576
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 38577
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38578
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38579
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 38580
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 38581
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38582
            //MUL
            t20 = t20 * t21;
            //Instruction 38583
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 38584
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38585
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38586
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38587
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38588
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 38589
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 38590
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38591
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 38592
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38593
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 38594
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 38595
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 38596
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 38597
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38598
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 38599
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 38600
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 38601
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38602
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 38603
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 38604
        //ELSE
        } else {
            //Instruction 38605
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38606
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 38607
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38608
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 38609
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38610
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38611
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 38612
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38613
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 38614
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 38615
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38616
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38617
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38618
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 38619
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38620
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38621
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 38622
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 38623
            //LT
            tb19 = t0.w<0.0;
            //Instruction 38624
            //MOV
            t0.y = (-t0.w);
            //Instruction 38625
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 38626
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 38627
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 38628
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 38629
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 38630
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 38631
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 38632
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38633
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38634
            //MUL
            t21 = t21 * t4.x;
            //Instruction 38635
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 38636
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 38637
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38638
        //ENDIF
        }
        //Instruction 38639
    //ELSE
    } else {
        //Instruction 38640
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 38641
    //ENDIF
    }
    //Instruction 38642
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 38643
    //SQRT
    t19 = sqrt(t19);
    //Instruction 38644
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38645
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 38646
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 38647
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 38648
    //NE
    tb3 = t20!=0.0;
    //Instruction 38649
    //LOG
    t9 = log2(t20);
    //Instruction 38650
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 38651
    //EXP
    t9 = exp2(t9);
    //Instruction 38652
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 38653
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38654
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38655
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 38656
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 38657
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38658
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 38659
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38660
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 38661
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 38662
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 38663
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38664
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 38665
    //MUL
    t20 = t20 * t3.x;
    //Instruction 38666
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 38667
    //MOV
    t3.y = t2.y;
    //Instruction 38668
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 38669
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 38670
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 38671
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 38672
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 38673
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 38674
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 38675
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 38676
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 38677
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 38678
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 38679
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 38680
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 38681
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 38682
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 38683
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 38684
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 38685
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 38686
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 38687
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 38688
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 38689
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 38690
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 38691
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 38692
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 38693
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 38694
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 38695
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 38696
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 38697
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38698
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 38699
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 38700
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 38701
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 38702
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 38703
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 38526
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38527
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38528
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 38427
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38428
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38429
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 38430
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38431
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 38432
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 38433
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 38434
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 38435
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38436
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38437
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 38438
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38439
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38440
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38441
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 38442
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38443
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 38444
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 38445
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 38446
    //IF
    if(tb22){
        //Instruction 38447
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 38448
        //IF
        if(tb22){
            //Instruction 38449
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38450
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 38451
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 38452
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 38453
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 38454
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 38455
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38456
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38457
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38458
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38459
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 38460
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 38461
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38462
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38463
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 38464
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38465
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38466
            //FRC
            t2 = fract(t2);
            //Instruction 38467
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38468
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 38469
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38470
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38471
            //ADD
            t2 = t2 + t2;
            //Instruction 38472
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 38473
            //LT
            tb24 = t5.w<0.0;
            //Instruction 38474
            //MOV
            t5.y = (-t5.w);
            //Instruction 38475
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 38476
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 38477
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 38478
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 38479
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 38480
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 38481
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 38482
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38483
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38484
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 38485
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 38486
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38487
            //MUL
            t24 = t24 * t25;
            //Instruction 38488
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 38489
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38490
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38491
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38492
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38493
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 38494
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 38495
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38496
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 38497
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38498
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 38499
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 38500
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 38501
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 38502
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38503
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 38504
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 38505
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 38506
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38507
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 38508
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 38509
        //ELSE
        } else {
            //Instruction 38510
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38511
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38512
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38513
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38514
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38515
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38516
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38517
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 38518
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 38519
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38520
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38521
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38522
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 38523
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38524
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38525
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 38526
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 38527
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38528
            //MOV
            t2.y = (-t2.w);
            //Instruction 38529
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38530
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38531
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 38532
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 38533
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 38534
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 38535
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38536
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38537
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38538
            //MUL
            t24 = t24 * t5.x;
            //Instruction 38539
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 38540
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 38541
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38542
        //ENDIF
        }
        //Instruction 38543
    //ELSE
    } else {
        //Instruction 38544
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 38545
    //ENDIF
    }
    //Instruction 38546
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 38547
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38548
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38549
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 38550
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 38551
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 38552
    //NE
    tb24 = t22!=0.0;
    //Instruction 38553
    //LOG
    t4.x = log2(t22);
    //Instruction 38554
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 38555
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 38556
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 38557
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38558
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38559
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 38560
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 38561
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38562
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 38563
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38564
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 38565
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 38566
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 38567
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38568
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 38569
    //MUL
    t22 = t22 * t24;
    //Instruction 38570
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 38571
    //MOV
    t4.y = t3.y;
    //Instruction 38572
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 38573
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38574
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 38575
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 38576
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 38577
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 38578
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 38579
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 38580
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38581
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 38582
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 38583
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 38584
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 38585
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 38586
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 38587
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 38588
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 38589
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 38590
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 38591
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 38592
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 38593
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 38594
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 38595
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 38596
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 38597
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 38598
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 38599
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 38600
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 38601
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38602
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38603
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 38604
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 38605
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 38606
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 38607
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 38424
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38425
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38426
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 38780
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38781
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38782
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 38783
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38784
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 38785
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 38786
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 38787
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 38788
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38789
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38790
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 38791
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38792
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38793
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38794
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 38795
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 38796
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 38797
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 38798
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 38799
    //IF
    if(tb25){
        //Instruction 38800
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 38801
        //IF
        if(tb25){
            //Instruction 38802
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38803
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 38804
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 38805
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 38806
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 38807
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 38808
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38809
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38810
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38811
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38812
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 38813
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 38814
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38815
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38816
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 38817
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38818
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38819
            //FRC
            t2 = fract(t2);
            //Instruction 38820
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38821
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 38822
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38823
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38824
            //ADD
            t2 = t2 + t2;
            //Instruction 38825
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 38826
            //LT
            tb27 = t5.w<0.0;
            //Instruction 38827
            //MOV
            t5.y = (-t5.w);
            //Instruction 38828
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 38829
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 38830
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 38831
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 38832
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 38833
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 38834
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 38835
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38836
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38837
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 38838
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 38839
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38840
            //MUL
            t27 = t27 * t28;
            //Instruction 38841
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 38842
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38843
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38844
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38845
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38846
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 38847
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 38848
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38849
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 38850
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38851
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 38852
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 38853
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 38854
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 38855
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38856
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 38857
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 38858
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 38859
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38860
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 38861
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 38862
        //ELSE
        } else {
            //Instruction 38863
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38864
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38865
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38866
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38867
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38868
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38869
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38870
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 38871
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 38872
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38873
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38874
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38875
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 38876
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38877
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38878
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 38879
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 38880
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38881
            //MOV
            t2.y = (-t2.w);
            //Instruction 38882
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38883
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38884
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 38885
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 38886
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 38887
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 38888
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38889
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38890
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38891
            //MUL
            t27 = t27 * t5.x;
            //Instruction 38892
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 38893
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 38894
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38895
        //ENDIF
        }
        //Instruction 38896
    //ELSE
    } else {
        //Instruction 38897
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 38898
    //ENDIF
    }
    //Instruction 38899
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 38900
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38901
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38902
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 38903
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 38904
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 38905
    //NE
    tb27 = t25!=0.0;
    //Instruction 38906
    //LOG
    t4.x = log2(t25);
    //Instruction 38907
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 38908
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 38909
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 38910
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38911
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38912
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 38913
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 38914
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38915
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 38916
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38917
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 38918
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 38919
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 38920
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38921
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 38922
    //MUL
    t25 = t25 * t27;
    //Instruction 38923
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 38924
    //MOV
    t4.y = t3.y;
    //Instruction 38925
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 38926
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 38927
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 38928
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 38929
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 38930
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 38931
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 38932
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 38933
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38934
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 38935
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 38936
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 38937
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 38938
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 38939
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 38940
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 38941
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 38942
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 38943
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 38944
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 38945
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 38946
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 38947
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 38948
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 38949
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 38950
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 38951
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 38952
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 38953
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38954
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 38955
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 38956
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 38957
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 38958
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 38959
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 38960
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 38961
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 38962
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 38963
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 38964
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 38965
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 38966
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 38967
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 38968
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 38969
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 38970
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 38971
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 38972
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 38973
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 38974
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 38975
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38976
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 38977
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 38978
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 38979
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 38980
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 38772
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 38773
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 38774
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 38775
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 38776
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 38777
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38778
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38779
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 38711
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38712
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 38713
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 38714
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38715
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 38716
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 38717
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 38718
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 38719
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 38720
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 38721
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 38722
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 38723
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 38724
    //ADD
    t8 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 38725
    //MAD
    t2.x = t8 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 38726
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 38727
    //FRC
    t2.x = fract(t2.x);
    //Instruction 38728
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 38729
    //MUL
    t8 = abs(t2.x) * abs(t2.x);
    //Instruction 38730
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 38731
    //MAD
    t2.x = t8 * t2.x + -0.500000;
    //Instruction 38732
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 38733
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 38734
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 38735
    //MOVC
    t2.xyz = (bool(tb19)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 38736
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 38737
    //IF
    if(tb20){
        //Instruction 38738
        //IF
        if(tb19){
            //Instruction 38739
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38740
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 38741
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 38742
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 38743
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 38744
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 38745
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38746
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38747
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38748
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38749
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38750
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38751
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 38752
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38753
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 38754
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 38755
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 38756
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38757
            //FRC
            t0 = fract(t0);
            //Instruction 38758
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38759
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 38760
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38761
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38762
            //ADD
            t0 = t0 + t0;
            //Instruction 38763
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 38764
            //LT
            tb20 = t5.w<0.0;
            //Instruction 38765
            //MOV
            t5.y = (-t5.w);
            //Instruction 38766
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 38767
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 38768
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 38769
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 38770
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 38771
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 38772
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 38773
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38774
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38775
            //MUL
            t22 = t0.x * t22;
            //Instruction 38776
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 38777
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38778
            //MUL
            t20 = t20 * t21;
            //Instruction 38779
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 38780
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 38781
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38782
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38783
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38784
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 38785
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 38786
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38787
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 38788
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38789
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 38790
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 38791
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 38792
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 38793
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38794
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 38795
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 38796
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 38797
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38798
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 38799
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 38800
        //ELSE
        } else {
            //Instruction 38801
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38802
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 38803
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38804
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 38805
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38806
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38807
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 38808
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38809
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 38810
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 38811
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38812
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38813
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38814
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 38815
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38816
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38817
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 38818
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 38819
            //LT
            tb19 = t0.w<0.0;
            //Instruction 38820
            //MOV
            t0.y = (-t0.w);
            //Instruction 38821
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 38822
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 38823
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 38824
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 38825
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 38826
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 38827
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 38828
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38829
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38830
            //MUL
            t21 = t21 * t4.x;
            //Instruction 38831
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 38832
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 38833
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 38834
        //ENDIF
        }
        //Instruction 38835
    //ENDIF
    }
    //Instruction 38836
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 38837
    //SQRT
    t19 = sqrt(t19);
    //Instruction 38838
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38839
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 38840
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 38841
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 38842
    //NE
    tb3 = t20!=0.0;
    //Instruction 38843
    //LOG
    t9 = log2(t20);
    //Instruction 38844
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 38845
    //EXP
    t9 = exp2(t9);
    //Instruction 38846
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 38847
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38848
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38849
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 38850
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 38851
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38852
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 38853
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38854
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 38855
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 38856
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 38857
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38858
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 38859
    //MUL
    t20 = t20 * t3.x;
    //Instruction 38860
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 38861
    //MOV
    t3.y = t2.y;
    //Instruction 38862
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 38863
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 38864
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 38865
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 38866
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 38867
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 38868
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 38869
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 38870
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 38871
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 38872
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 38873
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 38874
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 38875
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 38876
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 38877
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 38878
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 38879
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 38880
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 38881
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 38882
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 38883
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 38884
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 38885
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 38886
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 38887
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 38888
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 38889
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 38890
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 38891
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38892
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 38893
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 38894
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 38704
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 38705
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 38706
    //LT
    tb0 = t10_1<0.0;
    //Instruction 38707
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 38708
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38709
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38710
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp float t10;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 38615
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38616
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38617
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 38618
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38619
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 38620
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 38621
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 38622
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 38623
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38624
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38625
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 38626
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38627
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38628
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38629
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 38630
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38631
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 38632
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 38633
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 38634
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 38635
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 38636
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 38637
    //MAD
    t3.x = t10 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 38638
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 38639
    //FRC
    t3.x = fract(t3.x);
    //Instruction 38640
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 38641
    //MUL
    t10 = abs(t3.x) * abs(t3.x);
    //Instruction 38642
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 38643
    //MAD
    t3.x = t10 * t3.x + -0.500000;
    //Instruction 38644
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 38645
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 38646
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 38647
    //MOVC
    t3.xyz = (bool(tb22)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 38648
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 38649
    //IF
    if(tb24){
        //Instruction 38650
        //IF
        if(tb22){
            //Instruction 38651
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38652
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 38653
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 38654
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 38655
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 38656
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 38657
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38658
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38659
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38660
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 38661
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 38662
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 38663
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38664
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38665
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 38666
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38667
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38668
            //FRC
            t2 = fract(t2);
            //Instruction 38669
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38670
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 38671
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38672
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38673
            //ADD
            t2 = t2 + t2;
            //Instruction 38674
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 38675
            //LT
            tb24 = t6.w<0.0;
            //Instruction 38676
            //MOV
            t6.y = (-t6.w);
            //Instruction 38677
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 38678
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 38679
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 38680
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 38681
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 38682
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 38683
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 38684
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38685
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38686
            //MUL
            t26 = t2.x * t26;
            //Instruction 38687
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 38688
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38689
            //MUL
            t24 = t24 * t25;
            //Instruction 38690
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 38691
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 38692
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38693
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38694
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38695
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 38696
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 38697
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38698
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 38699
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38700
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 38701
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 38702
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 38703
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 38704
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38705
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 38706
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 38707
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 38708
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38709
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 38710
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 38711
        //ELSE
        } else {
            //Instruction 38712
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38713
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38714
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38715
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 38716
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38717
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38718
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38719
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 38720
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 38721
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38722
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38723
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38724
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 38725
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38726
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38727
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 38728
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 38729
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38730
            //MOV
            t2.y = (-t2.w);
            //Instruction 38731
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38732
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38733
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 38734
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 38735
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 38736
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 38737
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38738
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38739
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38740
            //MUL
            t24 = t24 * t5.x;
            //Instruction 38741
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 38742
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 38743
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 38744
        //ENDIF
        }
        //Instruction 38745
    //ENDIF
    }
    //Instruction 38746
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 38747
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38748
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38749
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 38750
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 38751
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 38752
    //NE
    tb24 = t22!=0.0;
    //Instruction 38753
    //LOG
    t4.x = log2(t22);
    //Instruction 38754
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 38755
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 38756
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 38757
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38758
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38759
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 38760
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 38761
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38762
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 38763
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38764
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 38765
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 38766
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 38767
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38768
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 38769
    //MUL
    t22 = t22 * t24;
    //Instruction 38770
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 38771
    //MOV
    t4.y = t3.y;
    //Instruction 38772
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 38773
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 38774
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 38775
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 38776
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 38777
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 38778
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 38779
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 38780
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38781
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 38782
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 38783
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 38784
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 38785
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 38786
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 38787
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 38788
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 38789
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 38790
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 38791
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 38792
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 38793
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 38794
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 38795
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 38796
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 38797
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 38798
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 38799
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 38800
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 38801
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38802
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38803
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 38804
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 38608
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 38609
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 38610
    //LT
    tb0 = t10_1<0.0;
    //Instruction 38611
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 38612
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38613
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38614
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_5.x;
  tmpvar_68.y = worldBinormal_4.x;
  tmpvar_68.z = worldNormal_6.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.y;
  tmpvar_69.y = worldBinormal_4.y;
  tmpvar_69.z = worldNormal_6.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.z;
  tmpvar_70.y = worldBinormal_4.z;
  tmpvar_70.z = worldNormal_6.z;
  tmpvar_70.w = tmpvar_59.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 38993
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38994
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38995
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 38996
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38997
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 38998
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 38999
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 39000
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 39001
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39002
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39003
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 39004
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39005
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39006
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39007
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 39008
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39009
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 39010
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 39011
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 39012
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 39013
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 39014
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 39015
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 39016
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 39017
    //FRC
    t3.x = fract(t3.x);
    //Instruction 39018
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 39019
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 39020
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 39021
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 39022
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 39023
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 39024
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 39025
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 39026
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 39027
    //IF
    if(tb27){
        //Instruction 39028
        //IF
        if(tb25){
            //Instruction 39029
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39030
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39031
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39032
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 39033
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 39034
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39035
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39036
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39037
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39038
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39039
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 39040
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 39041
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39042
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39043
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 39044
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39045
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39046
            //FRC
            t2 = fract(t2);
            //Instruction 39047
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39048
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39049
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39050
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39051
            //ADD
            t2 = t2 + t2;
            //Instruction 39052
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39053
            //LT
            tb27 = t6.w<0.0;
            //Instruction 39054
            //MOV
            t6.y = (-t6.w);
            //Instruction 39055
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39056
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 39057
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 39058
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 39059
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 39060
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 39061
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 39062
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39063
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39064
            //MUL
            t29 = t2.x * t29;
            //Instruction 39065
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 39066
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39067
            //MUL
            t27 = t27 * t28;
            //Instruction 39068
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 39069
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39070
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39071
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39072
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39073
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39074
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39075
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39076
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39077
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39078
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39079
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39080
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39081
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 39082
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39083
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 39084
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 39085
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39086
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39087
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39088
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39089
        //ELSE
        } else {
            //Instruction 39090
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39091
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39092
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39093
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39094
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39095
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39096
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39097
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39098
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39099
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39100
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39101
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39102
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39103
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39104
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39105
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39106
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39107
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39108
            //MOV
            t2.y = (-t2.w);
            //Instruction 39109
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39110
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39111
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39112
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39113
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 39114
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 39115
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39116
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39117
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39118
            //MUL
            t27 = t27 * t5.x;
            //Instruction 39119
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 39120
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39121
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39122
        //ENDIF
        }
        //Instruction 39123
    //ENDIF
    }
    //Instruction 39124
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39125
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39126
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39127
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 39128
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 39129
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 39130
    //NE
    tb27 = t25!=0.0;
    //Instruction 39131
    //LOG
    t4.x = log2(t25);
    //Instruction 39132
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39133
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39134
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 39135
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39136
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39137
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39138
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39139
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39140
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39141
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39142
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39143
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39144
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 39145
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39146
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 39147
    //MUL
    t25 = t25 * t27;
    //Instruction 39148
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 39149
    //MOV
    t4.y = t3.y;
    //Instruction 39150
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 39151
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39152
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 39153
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39154
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 39155
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39156
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39157
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39158
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39159
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39160
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39161
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39162
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39163
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 39164
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 39165
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 39166
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 39167
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 39168
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 39169
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 39170
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 39171
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 39172
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 39173
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 39174
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 39175
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 39176
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39177
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 39178
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 39179
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 39180
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 39181
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 39182
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39183
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 39184
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 39185
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 39186
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 39187
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 39188
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 39189
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 39190
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 39191
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 39192
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 39193
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 39194
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 39195
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 39196
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 39197
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 39198
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 39199
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 39200
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39201
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 39202
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 38981
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 38982
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 38983
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 38984
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 38985
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 38986
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 38987
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 38988
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 38989
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 38990
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38991
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38992
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_95;
  v_95.x = _World2Object[0].x;
  v_95.y = _World2Object[1].x;
  v_95.z = _World2Object[2].x;
  v_95.w = _World2Object[3].x;
  highp vec4 v_96;
  v_96.x = _World2Object[0].y;
  v_96.y = _World2Object[1].y;
  v_96.z = _World2Object[2].y;
  v_96.w = _World2Object[3].y;
  highp vec4 v_97;
  v_97.x = _World2Object[0].z;
  v_97.y = _World2Object[1].z;
  v_97.z = _World2Object[2].z;
  v_97.w = _World2Object[3].z;
  highp vec3 tmpvar_98;
  tmpvar_98 = normalize(((
    (v_95.xyz * tmpvar_10.x)
   + 
    (v_96.xyz * tmpvar_10.y)
  ) + (v_97.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_98;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 38902
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38903
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 38904
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 38905
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38906
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 38907
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 38908
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 38909
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 38910
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 38911
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 38912
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 38913
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 38914
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 38915
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 38916
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 38917
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 38918
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 38919
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 38920
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 38921
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 38922
        //FRC
        t15.x = fract(t15.x);
        //Instruction 38923
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 38924
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 38925
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 38926
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 38927
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 38928
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 38929
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 38930
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 38931
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 38932
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 38933
        //IF
        if(tb29){
            //Instruction 38934
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 38935
            //FRC
            t4 = fract(t4);
            //Instruction 38936
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38937
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 38938
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 38939
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 38940
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 38941
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 38942
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 38943
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 38944
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38945
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 38946
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38947
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 38948
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 38949
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 38950
            //SQRT
            t44 = sqrt(t44);
            //Instruction 38951
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 38952
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 38953
            //MUL
            t45 = t45 * t5.x;
            //Instruction 38954
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 38955
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 38956
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 38957
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 38958
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 38959
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 38960
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 38961
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 38962
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 38963
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 38964
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 38965
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 38966
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 38967
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 38968
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 38969
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 38970
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 38971
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 38972
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 38973
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 38974
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 38975
            //SQRT
            t45 = sqrt(t45);
            //Instruction 38976
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 38977
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 38978
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 38979
            //MUL
            t33 = t45 * t5.x;
            //Instruction 38980
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 38981
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 38982
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 38983
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 38984
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 38985
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 38986
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 38987
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 38988
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 38989
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38990
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 38991
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38992
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 38993
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 38994
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 38995
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 38996
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 38997
            //LOG
            t43 = log2(t43);
            //Instruction 38998
            //MUL
            t29 = t43 * t15.y;
            //Instruction 38999
            //EXP
            t29 = exp2(t29);
            //Instruction 39000
            //MUL
            t43 = t5.y * t45;
            //Instruction 39001
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 39002
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 39003
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 39004
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 39005
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 39006
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 39007
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 39008
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 39009
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 39010
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 39011
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 39012
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 39013
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 39014
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 39015
            //MOV
            t10.z = t11.x;
            //Instruction 39016
            //MOV
            t10.w = t9.x;
            //Instruction 39017
            //MOV
            t12.z = t8.y;
            //Instruction 39018
            //MOV
            t12.w = t13.y;
            //Instruction 39019
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 39020
            //MOV
            t13.w = t12.y;
            //Instruction 39021
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 39022
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 39023
            //MOV
            t9.w = t10.y;
            //Instruction 39024
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 39025
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 39026
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 39027
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 39028
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 39029
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 39030
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 39031
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 39032
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 39033
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 39034
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 39035
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 39036
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 39037
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 39038
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39039
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 39040
        //ELSE
        } else {
            //Instruction 39041
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 39042
        //ENDIF
        }
        //Instruction 39043
    //ELSE
    } else {
        //Instruction 39044
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 39045
    //ENDIF
    }
    //Instruction 39046
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 39047
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 39048
    //IF
    if(tb16){
        //Instruction 39049
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 39050
        //IF
        if(tb16){
            //Instruction 39051
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39052
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39053
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39054
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 39055
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 39056
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39057
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39058
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39059
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39060
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39061
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39062
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 39063
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 39064
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39065
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 39066
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 39067
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 39068
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39069
            //FRC
            t0 = fract(t0);
            //Instruction 39070
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39071
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 39072
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39073
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39074
            //ADD
            t0 = t0 + t0;
            //Instruction 39075
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 39076
            //LT
            tb44 = t6.w<0.0;
            //Instruction 39077
            //MOV
            t6.y = (-t6.w);
            //Instruction 39078
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39079
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 39080
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 39081
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 39082
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 39083
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 39084
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 39085
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39086
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39087
            //MUL
            t46 = t0.x * t46;
            //Instruction 39088
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 39089
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39090
            //MUL
            t44 = t44 * t45;
            //Instruction 39091
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 39092
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39093
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39094
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39095
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39096
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39097
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 39098
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39099
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 39100
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39101
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 39102
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 39103
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 39104
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 39105
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39106
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 39107
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 39108
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39109
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39110
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39111
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39112
        //ELSE
        } else {
            //Instruction 39113
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39114
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39115
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39116
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39117
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39118
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 39119
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 39120
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39121
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39122
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 39123
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39124
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39125
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39126
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39127
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39128
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39129
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39130
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 39131
            //LT
            tb16 = t0.w<0.0;
            //Instruction 39132
            //MOV
            t0.y = (-t0.w);
            //Instruction 39133
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 39134
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 39135
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 39136
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 39137
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 39138
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 39139
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 39140
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39141
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39142
            //MUL
            t45 = t45 * t5.x;
            //Instruction 39143
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 39144
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39145
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39146
        //ENDIF
        }
        //Instruction 39147
    //ENDIF
    }
    //Instruction 39148
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 39149
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 39150
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39151
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 39152
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 39153
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 39154
    //NE
    tb45 = t44!=0.0;
    //Instruction 39155
    //LOG
    t4.x = log2(t44);
    //Instruction 39156
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39157
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39158
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 39159
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39160
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39161
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39162
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39163
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39164
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39165
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39166
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39167
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39168
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 39169
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39170
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 39171
    //MUL
    t44 = t44 * t45;
    //Instruction 39172
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 39173
    //MOV
    t4.y = t3.y;
    //Instruction 39174
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 39175
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 39176
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 39177
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 39178
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 39179
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 39180
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 39181
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 39182
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 39183
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 39184
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 39185
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 39186
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 39187
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 39188
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 39189
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 39190
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 39191
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 39192
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 39193
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 39194
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 39195
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 39196
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 39197
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 39198
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 39199
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 39200
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 39201
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 39202
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 39203
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39204
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 39205
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 39206
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 38895
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 38896
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 38897
    //LT
    tb0 = t10_1<0.0;
    //Instruction 38898
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 38899
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38900
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38901
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_97;
  v_97.x = _World2Object[0].x;
  v_97.y = _World2Object[1].x;
  v_97.z = _World2Object[2].x;
  v_97.w = _World2Object[3].x;
  highp vec4 v_98;
  v_98.x = _World2Object[0].y;
  v_98.y = _World2Object[1].y;
  v_98.z = _World2Object[2].y;
  v_98.w = _World2Object[3].y;
  highp vec4 v_99;
  v_99.x = _World2Object[0].z;
  v_99.y = _World2Object[1].z;
  v_99.z = _World2Object[2].z;
  v_99.w = _World2Object[3].z;
  highp vec3 tmpvar_100;
  tmpvar_100 = normalize(((
    (v_97.xyz * tmpvar_13.x)
   + 
    (v_98.xyz * tmpvar_13.y)
  ) + (v_99.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_100;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 38812
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38813
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38814
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 38815
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38816
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 38817
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 38818
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 38819
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 38820
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38821
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38822
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 38823
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38824
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38825
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38826
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 38827
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 38828
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 38829
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 38830
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 38831
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 38832
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 38833
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 38834
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 38835
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 38836
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 38837
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 38838
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 38839
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 38840
        //FRC
        t30.x = fract(t30.x);
        //Instruction 38841
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 38842
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 38843
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 38844
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 38845
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 38846
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 38847
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 38848
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 38849
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 38850
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 38851
        //IF
        if(tb45){
            //Instruction 38852
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 38853
            //FRC
            t5 = fract(t5);
            //Instruction 38854
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38855
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 38856
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 38857
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 38858
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 38859
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 38860
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38861
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 38862
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38863
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 38864
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38865
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 38866
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 38867
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 38868
            //SQRT
            t46 = sqrt(t46);
            //Instruction 38869
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 38870
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 38871
            //MUL
            t48 = t48 * t49;
            //Instruction 38872
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 38873
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 38874
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 38875
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 38876
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 38877
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 38878
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 38879
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 38880
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 38881
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 38882
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 38883
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 38884
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 38885
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 38886
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 38887
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 38888
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 38889
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 38890
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 38891
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 38892
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 38893
            //SQRT
            t48 = sqrt(t48);
            //Instruction 38894
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 38895
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 38896
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 38897
            //MUL
            t6.x = t48 * t49;
            //Instruction 38898
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 38899
            //LT
            tb18 = t18<(-t18);
            //Instruction 38900
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 38901
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 38902
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 38903
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 38904
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 38905
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38906
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 38907
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38908
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 38909
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38910
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 38911
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 38912
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 38913
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 38914
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 38915
            //LOG
            t45 = log2(t45);
            //Instruction 38916
            //MUL
            t45 = t45 * t7.y;
            //Instruction 38917
            //EXP
            t45 = exp2(t45);
            //Instruction 38918
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 38919
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 38920
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 38921
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 38922
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 38923
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 38924
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 38925
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 38926
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 38927
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 38928
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 38929
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 38930
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 38931
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 38932
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 38933
            //MOV
            t11.z = t12.x;
            //Instruction 38934
            //MOV
            t11.w = t10.x;
            //Instruction 38935
            //MOV
            t13.z = t9.y;
            //Instruction 38936
            //MOV
            t13.w = t14.y;
            //Instruction 38937
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 38938
            //MOV
            t14.w = t13.y;
            //Instruction 38939
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 38940
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 38941
            //MOV
            t10.w = t11.y;
            //Instruction 38942
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 38943
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 38944
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 38945
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 38946
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 38947
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 38948
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 38949
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 38950
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 38951
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 38952
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 38953
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 38954
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 38955
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 38956
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 38957
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 38958
        //ELSE
        } else {
            //Instruction 38959
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 38960
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 38961
        //ENDIF
        }
        //Instruction 38962
    //ELSE
    } else {
        //Instruction 38963
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 38964
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 38965
    //ENDIF
    }
    //Instruction 38966
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 38967
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 38968
    //IF
    if(tb46){
        //Instruction 38969
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 38970
        //IF
        if(tb46){
            //Instruction 38971
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38972
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 38973
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 38974
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 38975
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 38976
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 38977
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38978
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38979
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38980
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 38981
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 38982
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 38983
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38984
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38985
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 38986
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38987
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38988
            //FRC
            t2 = fract(t2);
            //Instruction 38989
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38990
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 38991
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38992
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38993
            //ADD
            t2 = t2 + t2;
            //Instruction 38994
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 38995
            //LT
            tb48 = t7.w<0.0;
            //Instruction 38996
            //MOV
            t7.y = (-t7.w);
            //Instruction 38997
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 38998
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 38999
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 39000
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 39001
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 39002
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 39003
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 39004
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39005
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39006
            //MUL
            t50 = t2.x * t50;
            //Instruction 39007
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 39008
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39009
            //MUL
            t48 = t48 * t49;
            //Instruction 39010
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 39011
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39012
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39013
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39014
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39015
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 39016
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 39017
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39018
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 39019
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39020
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 39021
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 39022
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 39023
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 39024
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39025
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 39026
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 39027
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 39028
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39029
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 39030
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 39031
        //ELSE
        } else {
            //Instruction 39032
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39033
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39034
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39035
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39036
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39037
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39038
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39039
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 39040
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 39041
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39042
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 39043
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39044
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 39045
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39046
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39047
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 39048
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 39049
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39050
            //MOV
            t2.y = (-t2.w);
            //Instruction 39051
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39052
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39053
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 39054
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 39055
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 39056
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 39057
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39058
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39059
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39060
            //MUL
            t48 = t48 * t6.x;
            //Instruction 39061
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 39062
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 39063
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39064
        //ENDIF
        }
        //Instruction 39065
    //ENDIF
    }
    //Instruction 39066
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 39067
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39068
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39069
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 39070
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 39071
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 39072
    //NE
    tb48 = t46!=0.0;
    //Instruction 39073
    //LOG
    t49 = log2(t46);
    //Instruction 39074
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 39075
    //EXP
    t49 = exp2(t49);
    //Instruction 39076
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 39077
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39078
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39079
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 39080
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 39081
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39082
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 39083
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39084
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 39085
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 39086
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 39087
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39088
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 39089
    //MUL
    t46 = t46 * t48;
    //Instruction 39090
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 39091
    //MOV
    t5.y = t4.y;
    //Instruction 39092
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 39093
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 39094
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 39095
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 39096
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 39097
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 39098
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 39099
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 39100
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39101
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 39102
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 39103
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 39104
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 39105
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 39106
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 39107
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 39108
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 39109
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 39110
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 39111
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 39112
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 39113
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 39114
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 39115
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 39116
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 39117
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 39118
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 39119
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 39120
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 39121
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39122
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39123
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 39124
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 38805
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 38806
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 38807
    //LT
    tb0 = t10_1<0.0;
    //Instruction 38808
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 38809
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 38810
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 38811
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_98;
  tmpvar_98 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_14.x)
   + 
    (v_100.xyz * tmpvar_14.y)
  ) + (v_101.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_102;
  highp mat3 tmpvar_103;
  tmpvar_103[0] = _Object2World[0].xyz;
  tmpvar_103[1] = _Object2World[1].xyz;
  tmpvar_103[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize((tmpvar_103 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_104;
  lowp vec3 tmpvar_105;
  tmpvar_105 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_106;
  tmpvar_106 = (tmpvar_105 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_106;
  highp vec4 tmpvar_107;
  tmpvar_107.x = worldTangent_5.x;
  tmpvar_107.y = worldBinormal_4.x;
  tmpvar_107.z = worldNormal_6.x;
  tmpvar_107.w = tmpvar_98.x;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.y;
  tmpvar_108.y = worldBinormal_4.y;
  tmpvar_108.z = worldNormal_6.y;
  tmpvar_108.w = tmpvar_98.y;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.z;
  tmpvar_109.y = worldBinormal_4.z;
  tmpvar_109.z = worldNormal_6.z;
  tmpvar_109.w = tmpvar_98.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_107;
  xlv_TEXCOORD1 = tmpvar_108;
  xlv_TEXCOORD2 = tmpvar_109;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 39215
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39216
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39217
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 39218
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39219
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 39220
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 39221
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 39222
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 39223
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39224
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39225
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 39226
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39227
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39228
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39229
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 39230
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 39231
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 39232
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 39233
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 39234
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 39235
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 39236
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 39237
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 39238
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 39239
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 39240
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 39241
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 39242
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 39243
        //FRC
        t32.x = fract(t32.x);
        //Instruction 39244
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 39245
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 39246
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 39247
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 39248
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 39249
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 39250
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 39251
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 39252
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 39253
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 39254
        //IF
        if(tb48){
            //Instruction 39255
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 39256
            //FRC
            t5 = fract(t5);
            //Instruction 39257
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39258
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 39259
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 39260
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 39261
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 39262
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 39263
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 39264
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 39265
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39266
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 39267
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39268
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 39269
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 39270
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 39271
            //SQRT
            t49 = sqrt(t49);
            //Instruction 39272
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 39273
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 39274
            //MUL
            t51 = t51 * t52;
            //Instruction 39275
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 39276
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 39277
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 39278
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 39279
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 39280
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 39281
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 39282
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 39283
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 39284
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 39285
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 39286
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 39287
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 39288
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 39289
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 39290
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 39291
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 39292
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 39293
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 39294
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 39295
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 39296
            //SQRT
            t51 = sqrt(t51);
            //Instruction 39297
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 39298
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 39299
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 39300
            //MUL
            t6.x = t51 * t52;
            //Instruction 39301
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 39302
            //LT
            tb19 = t19<(-t19);
            //Instruction 39303
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 39304
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 39305
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 39306
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 39307
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 39308
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 39309
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 39310
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39311
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 39312
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39313
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 39314
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 39315
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 39316
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 39317
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 39318
            //LOG
            t48 = log2(t48);
            //Instruction 39319
            //MUL
            t48 = t48 * t7.y;
            //Instruction 39320
            //EXP
            t48 = exp2(t48);
            //Instruction 39321
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 39322
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 39323
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 39324
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 39325
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 39326
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 39327
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 39328
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 39329
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 39330
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 39331
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 39332
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 39333
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 39334
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 39335
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 39336
            //MOV
            t11.z = t12.x;
            //Instruction 39337
            //MOV
            t11.w = t10.x;
            //Instruction 39338
            //MOV
            t13.z = t9.y;
            //Instruction 39339
            //MOV
            t13.w = t14.y;
            //Instruction 39340
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 39341
            //MOV
            t14.w = t13.y;
            //Instruction 39342
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 39343
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 39344
            //MOV
            t10.w = t11.y;
            //Instruction 39345
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 39346
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 39347
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 39348
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 39349
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 39350
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 39351
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 39352
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 39353
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 39354
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 39355
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 39356
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 39357
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 39358
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 39359
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 39360
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 39361
        //ELSE
        } else {
            //Instruction 39362
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 39363
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 39364
        //ENDIF
        }
        //Instruction 39365
    //ELSE
    } else {
        //Instruction 39366
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 39367
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 39368
    //ENDIF
    }
    //Instruction 39369
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 39370
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 39371
    //IF
    if(tb49){
        //Instruction 39372
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 39373
        //IF
        if(tb49){
            //Instruction 39374
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39375
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 39376
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 39377
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 39378
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 39379
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 39380
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39381
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 39382
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39383
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 39384
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 39385
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 39386
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39387
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39388
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 39389
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39390
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39391
            //FRC
            t2 = fract(t2);
            //Instruction 39392
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39393
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 39394
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39395
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39396
            //ADD
            t2 = t2 + t2;
            //Instruction 39397
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 39398
            //LT
            tb51 = t7.w<0.0;
            //Instruction 39399
            //MOV
            t7.y = (-t7.w);
            //Instruction 39400
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 39401
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 39402
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 39403
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 39404
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 39405
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 39406
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 39407
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39408
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39409
            //MUL
            t53 = t2.x * t53;
            //Instruction 39410
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 39411
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39412
            //MUL
            t51 = t51 * t52;
            //Instruction 39413
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 39414
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39415
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39416
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39417
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39418
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 39419
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 39420
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39421
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 39422
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39423
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 39424
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 39425
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 39426
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 39427
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39428
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 39429
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 39430
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 39431
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39432
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 39433
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 39434
        //ELSE
        } else {
            //Instruction 39435
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39436
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39437
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39438
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39439
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39440
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39441
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39442
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 39443
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 39444
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39445
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 39446
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39447
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 39448
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39449
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39450
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 39451
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 39452
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39453
            //MOV
            t2.y = (-t2.w);
            //Instruction 39454
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39455
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39456
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 39457
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 39458
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 39459
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 39460
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39461
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39462
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39463
            //MUL
            t51 = t51 * t6.x;
            //Instruction 39464
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 39465
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 39466
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39467
        //ENDIF
        }
        //Instruction 39468
    //ENDIF
    }
    //Instruction 39469
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 39470
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39471
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39472
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 39473
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 39474
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 39475
    //NE
    tb51 = t49!=0.0;
    //Instruction 39476
    //LOG
    t52 = log2(t49);
    //Instruction 39477
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 39478
    //EXP
    t52 = exp2(t52);
    //Instruction 39479
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 39480
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39481
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39482
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 39483
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 39484
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39485
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 39486
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39487
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 39488
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 39489
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 39490
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39491
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 39492
    //MUL
    t49 = t49 * t51;
    //Instruction 39493
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 39494
    //MOV
    t5.y = t4.y;
    //Instruction 39495
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 39496
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 39497
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 39498
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 39499
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 39500
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 39501
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 39502
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 39503
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39504
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 39505
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 39506
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 39507
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 39508
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 39509
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 39510
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 39511
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 39512
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 39513
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 39514
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 39515
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 39516
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 39517
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 39518
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 39519
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 39520
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 39521
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 39522
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 39523
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 39524
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 39525
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 39526
    //DP3
    t48 = dot(t4.xyz, t4.xyz);
    //Instruction 39527
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 39528
    //MUL
    t4.xyz = vec3(t48) * t4.xyz;
    //Instruction 39529
    //MUL
    t10_15.xyz = t0.xyz * t4.xyz;
    //Instruction 39530
    //MAD
    t10_15.xyz = t0.zxy * t4.yzx + (-t10_15.xyz);
    //Instruction 39531
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 39532
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 39533
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 39534
    //MOV
    vs_TEXCOORD0.z = t0.y;
    //Instruction 39535
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 39536
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 39537
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 39538
    //MOV
    vs_TEXCOORD1.z = t0.z;
    //Instruction 39539
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 39540
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 39541
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 39542
    //MOV
    vs_TEXCOORD2.z = t0.x;
    //Instruction 39543
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 39544
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 39545
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39546
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 39547
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 39203
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 39204
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 39205
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 39206
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39207
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 39208
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 39209
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 39210
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 39211
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 39212
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39213
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39214
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  FinalPosition_11 = tmpvar_1.xyz;
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  mediump float tmpvar_13;
  tmpvar_13 = (_WindQuality * _WindEnabled);
  if ((tmpvar_13 > 0.0)) {
    highp mat3 tmpvar_14;
    tmpvar_14[0] = _World2Object[0].xyz;
    tmpvar_14[1] = _World2Object[1].xyz;
    tmpvar_14[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_14 * _ST_WindVector.xyz));
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_15 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_11 = tmpvar_16;
  if ((tmpvar_13 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_16;
    if ((tmpvar_13 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_16;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (tmpvar_16 + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_12.x + tmpvar_12.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_13 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_12.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_12.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 39210
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39211
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 39212
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 39213
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39214
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 39215
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 39216
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 39217
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 39218
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 39219
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 39220
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39221
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 39222
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 39223
    //IF
    if(tb19){
        //Instruction 39224
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 39225
        //IF
        if(tb19){
            //Instruction 39226
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39227
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 39228
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 39229
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 39230
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 39231
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39232
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39233
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39234
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39235
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39236
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39237
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39238
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 39239
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39240
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 39241
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 39242
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 39243
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39244
            //FRC
            t0 = fract(t0);
            //Instruction 39245
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39246
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 39247
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39248
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39249
            //ADD
            t0 = t0 + t0;
            //Instruction 39250
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 39251
            //LT
            tb20 = t5.w<0.0;
            //Instruction 39252
            //MOV
            t5.y = (-t5.w);
            //Instruction 39253
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 39254
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 39255
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 39256
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 39257
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 39258
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 39259
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 39260
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39261
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39262
            //MUL
            t22 = t0.x * t22;
            //Instruction 39263
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 39264
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39265
            //MUL
            t20 = t20 * t21;
            //Instruction 39266
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 39267
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39268
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39269
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39270
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39271
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 39272
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 39273
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39274
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 39275
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39276
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 39277
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 39278
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 39279
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 39280
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39281
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 39282
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 39283
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 39284
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39285
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39286
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 39287
        //ELSE
        } else {
            //Instruction 39288
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39289
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 39290
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39291
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 39292
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39293
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39294
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 39295
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39296
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 39297
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 39298
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39299
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39300
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39301
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 39302
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39303
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39304
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 39305
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 39306
            //LT
            tb19 = t0.w<0.0;
            //Instruction 39307
            //MOV
            t0.y = (-t0.w);
            //Instruction 39308
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 39309
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 39310
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 39311
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 39312
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 39313
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 39314
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 39315
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39316
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39317
            //MUL
            t21 = t21 * t4.x;
            //Instruction 39318
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 39319
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39320
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39321
        //ENDIF
        }
        //Instruction 39322
    //ENDIF
    }
    //Instruction 39323
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 39324
    //SQRT
    t19 = sqrt(t19);
    //Instruction 39325
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39326
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 39327
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 39328
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 39329
    //NE
    tb3 = t20!=0.0;
    //Instruction 39330
    //LOG
    t9 = log2(t20);
    //Instruction 39331
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 39332
    //EXP
    t9 = exp2(t9);
    //Instruction 39333
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 39334
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39335
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39336
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 39337
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 39338
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39339
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 39340
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39341
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 39342
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 39343
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 39344
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39345
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 39346
    //MUL
    t20 = t20 * t3.x;
    //Instruction 39347
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 39348
    //MOV
    t3.y = t2.y;
    //Instruction 39349
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 39350
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 39351
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 39352
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 39353
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 39354
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 39355
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 39356
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 39357
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 39358
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 39359
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 39360
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 39361
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 39362
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 39363
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 39364
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 39365
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 39366
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 39367
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 39368
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 39369
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 39370
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 39371
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 39372
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 39373
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 39374
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 39375
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 39376
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 39377
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 39378
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39379
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 39380
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 39381
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 39207
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39208
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39209
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 39128
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39129
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39130
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 39131
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39132
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 39133
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 39134
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 39135
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 39136
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39137
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39138
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 39139
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39140
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39141
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39142
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 39143
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39144
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 39145
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 39146
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39147
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39148
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 39149
    //IF
    if(tb22){
        //Instruction 39150
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 39151
        //IF
        if(tb22){
            //Instruction 39152
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39153
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39154
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39155
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 39156
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 39157
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39158
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39159
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39160
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39161
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39162
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 39163
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 39164
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39165
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39166
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 39167
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39168
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39169
            //FRC
            t2 = fract(t2);
            //Instruction 39170
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39171
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39172
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39173
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39174
            //ADD
            t2 = t2 + t2;
            //Instruction 39175
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39176
            //LT
            tb24 = t6.w<0.0;
            //Instruction 39177
            //MOV
            t6.y = (-t6.w);
            //Instruction 39178
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39179
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 39180
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 39181
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 39182
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 39183
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 39184
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 39185
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39186
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39187
            //MUL
            t26 = t2.x * t26;
            //Instruction 39188
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 39189
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39190
            //MUL
            t24 = t24 * t25;
            //Instruction 39191
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 39192
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39193
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39194
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39195
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39196
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39197
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39198
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39199
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39200
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39201
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39202
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39203
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39204
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 39205
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39206
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 39207
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 39208
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39209
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39210
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39211
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39212
        //ELSE
        } else {
            //Instruction 39213
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39214
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39215
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39216
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39217
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39218
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39219
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39220
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39221
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39222
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39223
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39224
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39225
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39226
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39227
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39228
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39229
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39230
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39231
            //MOV
            t2.y = (-t2.w);
            //Instruction 39232
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39233
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39234
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39235
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39236
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 39237
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 39238
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39239
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39240
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39241
            //MUL
            t24 = t24 * t5.x;
            //Instruction 39242
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 39243
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39244
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39245
        //ENDIF
        }
        //Instruction 39246
    //ENDIF
    }
    //Instruction 39247
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39248
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39249
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39250
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 39251
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 39252
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 39253
    //NE
    tb24 = t22!=0.0;
    //Instruction 39254
    //LOG
    t4.x = log2(t22);
    //Instruction 39255
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39256
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39257
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 39258
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39259
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39260
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39261
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39262
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39263
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39264
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39265
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39266
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39267
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 39268
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39269
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 39270
    //MUL
    t22 = t22 * t24;
    //Instruction 39271
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 39272
    //MOV
    t4.y = t3.y;
    //Instruction 39273
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 39274
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39275
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 39276
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39277
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 39278
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39279
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39280
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39281
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39282
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39283
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39284
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39285
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39286
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 39287
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 39288
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 39289
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 39290
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 39291
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 39292
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 39293
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 39294
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 39295
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 39296
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 39297
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 39298
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 39299
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 39300
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 39301
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 39302
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39303
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39304
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 39305
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 39125
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39126
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39127
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_53;
  tmpvar_53 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_57;
  highp mat3 tmpvar_58;
  tmpvar_58[0] = _Object2World[0].xyz;
  tmpvar_58[1] = _Object2World[1].xyz;
  tmpvar_58[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize((tmpvar_58 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_59;
  lowp vec3 tmpvar_60;
  tmpvar_60 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_61;
  tmpvar_61 = (tmpvar_60 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_61;
  highp vec4 tmpvar_62;
  tmpvar_62.x = worldTangent_4.x;
  tmpvar_62.y = worldBinormal_3.x;
  tmpvar_62.z = worldNormal_5.x;
  tmpvar_62.w = tmpvar_53.x;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.y;
  tmpvar_63.y = worldBinormal_3.y;
  tmpvar_63.z = worldNormal_5.y;
  tmpvar_63.w = tmpvar_53.y;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.z;
  tmpvar_64.y = worldBinormal_3.z;
  tmpvar_64.z = worldNormal_5.z;
  tmpvar_64.w = tmpvar_53.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_62;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_64;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_5;
  mediump vec3 tmpvar_6;
  tmpvar_6 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_6.x, max (tmpvar_6.y, tmpvar_6.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_6 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_7;
  tmpvar_7 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_8;
  tmpvar_8 = dot (xlv_TEXCOORD0.xyz, tmpvar_7);
  worldN_2.x = tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = dot (xlv_TEXCOORD1.xyz, tmpvar_7);
  worldN_2.y = tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD2.xyz, tmpvar_7);
  worldN_2.z = tmpvar_10;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 39556
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39557
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39558
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 39559
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39560
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 39561
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 39562
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 39563
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 39564
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39565
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39566
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 39567
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39568
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39569
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39570
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 39571
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39572
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 39573
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 39574
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39575
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39576
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 39577
    //IF
    if(tb25){
        //Instruction 39578
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 39579
        //IF
        if(tb25){
            //Instruction 39580
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39581
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39582
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39583
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 39584
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 39585
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39586
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39587
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39588
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39589
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39590
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 39591
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 39592
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39593
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39594
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 39595
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39596
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39597
            //FRC
            t2 = fract(t2);
            //Instruction 39598
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39599
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39600
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39601
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39602
            //ADD
            t2 = t2 + t2;
            //Instruction 39603
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39604
            //LT
            tb27 = t6.w<0.0;
            //Instruction 39605
            //MOV
            t6.y = (-t6.w);
            //Instruction 39606
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39607
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 39608
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 39609
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 39610
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 39611
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 39612
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 39613
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39614
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39615
            //MUL
            t29 = t2.x * t29;
            //Instruction 39616
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 39617
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39618
            //MUL
            t27 = t27 * t28;
            //Instruction 39619
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 39620
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39621
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39622
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39623
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39624
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39625
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39626
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39627
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39628
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39629
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39630
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39631
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39632
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 39633
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39634
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 39635
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 39636
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39637
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39638
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39639
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39640
        //ELSE
        } else {
            //Instruction 39641
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39642
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39643
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39644
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39645
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39646
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39647
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39648
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39649
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39650
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39651
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39652
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39653
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39654
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39655
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39656
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39657
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39658
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39659
            //MOV
            t2.y = (-t2.w);
            //Instruction 39660
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39661
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39662
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39663
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39664
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 39665
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 39666
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39667
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39668
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39669
            //MUL
            t27 = t27 * t5.x;
            //Instruction 39670
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 39671
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39672
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39673
        //ENDIF
        }
        //Instruction 39674
    //ENDIF
    }
    //Instruction 39675
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39676
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39677
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39678
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 39679
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 39680
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 39681
    //NE
    tb27 = t25!=0.0;
    //Instruction 39682
    //LOG
    t4.x = log2(t25);
    //Instruction 39683
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39684
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39685
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 39686
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39687
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39688
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39689
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39690
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39691
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39692
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39693
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39694
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39695
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 39696
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39697
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 39698
    //MUL
    t25 = t25 * t27;
    //Instruction 39699
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 39700
    //MOV
    t4.y = t3.y;
    //Instruction 39701
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 39702
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39703
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 39704
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39705
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 39706
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39707
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39708
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39709
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39710
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39711
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39712
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39713
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39714
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 39715
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 39716
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 39717
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 39718
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 39719
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 39720
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 39721
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 39722
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 39723
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 39724
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 39725
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 39726
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 39727
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39728
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 39729
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 39730
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 39731
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 39732
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 39733
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39734
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 39735
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 39736
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 39737
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 39738
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 39739
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 39740
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 39741
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 39742
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 39743
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 39744
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 39745
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 39746
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 39747
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 39748
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 39749
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 39750
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 39751
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39752
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 39753
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 39548
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 39549
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 39550
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 39551
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 39552
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 39553
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39554
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39555
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_18;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (tmpvar_18 + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_52;
  v_52.x = _World2Object[0].x;
  v_52.y = _World2Object[1].x;
  v_52.z = _World2Object[2].x;
  v_52.w = _World2Object[3].x;
  highp vec4 v_53;
  v_53.x = _World2Object[0].y;
  v_53.y = _World2Object[1].y;
  v_53.z = _World2Object[2].y;
  v_53.w = _World2Object[3].y;
  highp vec4 v_54;
  v_54.x = _World2Object[0].z;
  v_54.y = _World2Object[1].z;
  v_54.z = _World2Object[2].z;
  v_54.w = _World2Object[3].z;
  highp vec3 tmpvar_55;
  tmpvar_55 = normalize(((
    (v_52.xyz * _glesNormal.x)
   + 
    (v_53.xyz * _glesNormal.y)
  ) + (v_54.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_55;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 39385
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39386
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 39387
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 39388
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39389
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 39390
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 39391
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 39392
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 39393
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 39394
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 39395
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39396
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 39397
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 39398
    //IF
    if(tb19){
        //Instruction 39399
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 39400
        //IF
        if(tb19){
            //Instruction 39401
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39402
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 39403
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 39404
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 39405
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 39406
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39407
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39408
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39409
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39410
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39411
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39412
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39413
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 39414
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39415
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 39416
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 39417
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 39418
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39419
            //FRC
            t0 = fract(t0);
            //Instruction 39420
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39421
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 39422
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39423
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39424
            //ADD
            t0 = t0 + t0;
            //Instruction 39425
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 39426
            //LT
            tb20 = t5.w<0.0;
            //Instruction 39427
            //MOV
            t5.y = (-t5.w);
            //Instruction 39428
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 39429
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 39430
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 39431
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 39432
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 39433
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 39434
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 39435
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39436
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39437
            //MUL
            t22 = t0.x * t22;
            //Instruction 39438
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 39439
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39440
            //MUL
            t20 = t20 * t21;
            //Instruction 39441
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 39442
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39443
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39444
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39445
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39446
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 39447
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 39448
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39449
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 39450
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39451
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 39452
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 39453
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 39454
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 39455
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39456
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 39457
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 39458
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 39459
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39460
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39461
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 39462
        //ELSE
        } else {
            //Instruction 39463
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39464
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 39465
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39466
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 39467
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39468
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39469
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 39470
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39471
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 39472
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 39473
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39474
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39475
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39476
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 39477
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39478
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39479
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 39480
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 39481
            //LT
            tb19 = t0.w<0.0;
            //Instruction 39482
            //MOV
            t0.y = (-t0.w);
            //Instruction 39483
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 39484
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 39485
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 39486
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 39487
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 39488
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 39489
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 39490
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39491
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39492
            //MUL
            t21 = t21 * t4.x;
            //Instruction 39493
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 39494
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39495
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39496
        //ENDIF
        }
        //Instruction 39497
    //ENDIF
    }
    //Instruction 39498
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 39499
    //SQRT
    t19 = sqrt(t19);
    //Instruction 39500
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39501
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 39502
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 39503
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 39504
    //NE
    tb3 = t20!=0.0;
    //Instruction 39505
    //LOG
    t9 = log2(t20);
    //Instruction 39506
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 39507
    //EXP
    t9 = exp2(t9);
    //Instruction 39508
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 39509
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39510
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39511
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 39512
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 39513
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39514
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 39515
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39516
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 39517
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 39518
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 39519
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39520
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 39521
    //MUL
    t20 = t20 * t3.x;
    //Instruction 39522
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 39523
    //MOV
    t3.y = t2.y;
    //Instruction 39524
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 39525
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 39526
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 39527
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 39528
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 39529
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 39530
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 39531
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 39532
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 39533
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 39534
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 39535
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 39536
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 39537
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 39538
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 39539
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 39540
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 39541
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 39542
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 39543
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 39544
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 39545
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 39546
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 39547
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 39548
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 39549
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 39550
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 39551
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 39552
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 39553
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39554
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 39555
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 39556
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 39557
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 39558
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 39559
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 39382
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39383
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39384
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_54;
  v_54.x = _World2Object[0].x;
  v_54.y = _World2Object[1].x;
  v_54.z = _World2Object[2].x;
  v_54.w = _World2Object[3].x;
  highp vec4 v_55;
  v_55.x = _World2Object[0].y;
  v_55.y = _World2Object[1].y;
  v_55.z = _World2Object[2].y;
  v_55.w = _World2Object[3].y;
  highp vec4 v_56;
  v_56.x = _World2Object[0].z;
  v_56.y = _World2Object[1].z;
  v_56.z = _World2Object[2].z;
  v_56.w = _World2Object[3].z;
  highp vec3 tmpvar_57;
  tmpvar_57 = normalize(((
    (v_54.xyz * _glesNormal.x)
   + 
    (v_55.xyz * _glesNormal.y)
  ) + (v_56.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_57;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 39309
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39310
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39311
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 39312
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39313
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 39314
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 39315
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 39316
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 39317
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39318
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39319
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 39320
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39321
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39322
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39323
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 39324
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39325
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 39326
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 39327
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39328
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39329
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 39330
    //IF
    if(tb22){
        //Instruction 39331
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 39332
        //IF
        if(tb22){
            //Instruction 39333
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39334
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39335
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39336
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 39337
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 39338
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39339
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39340
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39341
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39342
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39343
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 39344
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 39345
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39346
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39347
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 39348
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39349
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39350
            //FRC
            t2 = fract(t2);
            //Instruction 39351
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39352
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39353
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39354
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39355
            //ADD
            t2 = t2 + t2;
            //Instruction 39356
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39357
            //LT
            tb24 = t6.w<0.0;
            //Instruction 39358
            //MOV
            t6.y = (-t6.w);
            //Instruction 39359
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39360
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 39361
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 39362
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 39363
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 39364
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 39365
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 39366
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39367
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39368
            //MUL
            t26 = t2.x * t26;
            //Instruction 39369
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 39370
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39371
            //MUL
            t24 = t24 * t25;
            //Instruction 39372
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 39373
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39374
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39375
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39376
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39377
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39378
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39379
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39380
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39381
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39382
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39383
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39384
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39385
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 39386
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39387
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 39388
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 39389
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39390
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39391
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39392
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39393
        //ELSE
        } else {
            //Instruction 39394
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39395
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39396
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39397
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39398
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39399
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39400
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39401
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39402
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39403
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39404
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39405
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39406
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39407
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39408
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39409
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39410
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39411
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39412
            //MOV
            t2.y = (-t2.w);
            //Instruction 39413
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39414
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39415
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39416
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39417
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 39418
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 39419
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39420
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39421
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39422
            //MUL
            t24 = t24 * t5.x;
            //Instruction 39423
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 39424
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39425
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39426
        //ENDIF
        }
        //Instruction 39427
    //ENDIF
    }
    //Instruction 39428
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39429
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39430
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39431
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 39432
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 39433
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 39434
    //NE
    tb24 = t22!=0.0;
    //Instruction 39435
    //LOG
    t4.x = log2(t22);
    //Instruction 39436
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39437
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39438
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 39439
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39440
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39441
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39442
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39443
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39444
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39445
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39446
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39447
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39448
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 39449
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39450
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 39451
    //MUL
    t22 = t22 * t24;
    //Instruction 39452
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 39453
    //MOV
    t4.y = t3.y;
    //Instruction 39454
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 39455
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39456
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 39457
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39458
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 39459
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39460
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39461
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39462
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39463
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39464
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39465
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39466
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39467
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 39468
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 39469
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 39470
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 39471
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 39472
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 39473
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 39474
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 39475
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 39476
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 39477
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 39478
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 39479
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 39480
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 39481
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 39482
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 39483
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39484
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39485
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 39486
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 39487
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 39488
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 39489
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in mediump vec3 vs_TEXCOORD0;
layout(location = 0) out lowp vec4 SV_Target0;
void main()
{
    //Instruction 39306
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39307
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39308
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_55;
  tmpvar_55 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_59;
  highp mat3 tmpvar_60;
  tmpvar_60[0] = _Object2World[0].xyz;
  tmpvar_60[1] = _Object2World[1].xyz;
  tmpvar_60[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize((tmpvar_60 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_61;
  lowp vec3 tmpvar_62;
  tmpvar_62 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_63;
  tmpvar_63 = (tmpvar_62 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_63;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.x;
  tmpvar_64.y = worldBinormal_3.x;
  tmpvar_64.z = worldNormal_5.x;
  tmpvar_64.w = tmpvar_55.x;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.y;
  tmpvar_65.y = worldBinormal_3.y;
  tmpvar_65.z = worldNormal_5.y;
  tmpvar_65.w = tmpvar_55.y;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.z;
  tmpvar_66.y = worldBinormal_3.z;
  tmpvar_66.z = worldNormal_5.z;
  tmpvar_66.w = tmpvar_55.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_64;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_66;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 blendColor_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_4 = tmpvar_7;
  diffuseColor_5.xyz = mix (blendColor_4.xyz, diffuseColor_5.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 39762
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39763
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39764
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 39765
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39766
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 39767
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 39768
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 39769
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 39770
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39771
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39772
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 39773
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39774
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39775
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39776
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 39777
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39778
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 39779
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 39780
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39781
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39782
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 39783
    //IF
    if(tb25){
        //Instruction 39784
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 39785
        //IF
        if(tb25){
            //Instruction 39786
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39787
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39788
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39789
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 39790
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 39791
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39792
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39793
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39794
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39795
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39796
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 39797
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 39798
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39799
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39800
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 39801
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39802
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39803
            //FRC
            t2 = fract(t2);
            //Instruction 39804
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39805
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39806
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39807
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39808
            //ADD
            t2 = t2 + t2;
            //Instruction 39809
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39810
            //LT
            tb27 = t6.w<0.0;
            //Instruction 39811
            //MOV
            t6.y = (-t6.w);
            //Instruction 39812
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39813
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 39814
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 39815
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 39816
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 39817
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 39818
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 39819
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39820
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39821
            //MUL
            t29 = t2.x * t29;
            //Instruction 39822
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 39823
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39824
            //MUL
            t27 = t27 * t28;
            //Instruction 39825
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 39826
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39827
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39828
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39829
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39830
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39831
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39832
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39833
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39834
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39835
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39836
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39837
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39838
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 39839
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39840
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 39841
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 39842
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39843
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39844
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 39845
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39846
        //ELSE
        } else {
            //Instruction 39847
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39848
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39849
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39850
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39851
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39852
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39853
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39854
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39855
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39856
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39857
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39858
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39859
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39860
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39861
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39862
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39863
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39864
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39865
            //MOV
            t2.y = (-t2.w);
            //Instruction 39866
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39867
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39868
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39869
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39870
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 39871
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 39872
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39873
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39874
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39875
            //MUL
            t27 = t27 * t5.x;
            //Instruction 39876
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 39877
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39878
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39879
        //ENDIF
        }
        //Instruction 39880
    //ENDIF
    }
    //Instruction 39881
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39882
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39883
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39884
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 39885
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 39886
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 39887
    //NE
    tb27 = t25!=0.0;
    //Instruction 39888
    //LOG
    t4.x = log2(t25);
    //Instruction 39889
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39890
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39891
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 39892
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39893
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39894
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39895
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39896
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39897
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39898
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39899
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39900
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39901
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 39902
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39903
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 39904
    //MUL
    t25 = t25 * t27;
    //Instruction 39905
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 39906
    //MOV
    t4.y = t3.y;
    //Instruction 39907
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 39908
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39909
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 39910
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39911
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 39912
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39913
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39914
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39915
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39916
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39917
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39918
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39919
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39920
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 39921
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 39922
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 39923
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 39924
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 39925
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 39926
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 39927
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 39928
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 39929
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 39930
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 39931
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 39932
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 39933
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39934
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 39935
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 39936
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 39937
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 39938
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 39939
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 39940
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 39941
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 39942
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 39943
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 39944
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 39945
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 39946
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 39947
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 39948
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 39949
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 39950
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 39951
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 39952
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 39953
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 39954
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 39955
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 39956
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 39957
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39958
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 39959
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 39960
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 39961
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 39962
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
lowp vec3 t10_1;
void main()
{
    //Instruction 39754
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 39755
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 39756
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 39757
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 39758
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 39759
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39760
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39761
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_18;
  tmpvar_18 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_13 = tmpvar_18;
  if ((tmpvar_15 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_18;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (tmpvar_18 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * tmpvar_10.x)
   + 
    (v_57.xyz * tmpvar_10.y)
  ) + (v_58.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_59;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t17;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
highp float t22;
void main()
{
    //Instruction 39567
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39568
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 39569
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 39570
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39571
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 39572
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 39573
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 39574
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 39575
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 39576
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 39577
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39578
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 39579
    //EQ
    tb19 = t16_0==5.000000;
    //Instruction 39580
    //LT
    tb20 = in_TEXCOORD0.x<0.500000;
    //Instruction 39581
    //AND
    t20 = tb20 ? 0.750000 : float(0.0);
    //Instruction 39582
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 39583
    //MAD
    t20 = t3.x * _ST_WindFrondRipple.z + t20;
    //Instruction 39584
    //ADD
    t20 = t20 + 0.500000;
    //Instruction 39585
    //FRC
    t20 = fract(t20);
    //Instruction 39586
    //MAD
    t20 = t20 * 2.000000 + -1.0;
    //Instruction 39587
    //MUL
    t3.x = abs(t20) * abs(t20);
    //Instruction 39588
    //MAD
    t20 = -abs(t20) * 2.000000 + 3.000000;
    //Instruction 39589
    //MAD
    t20 = t3.x * t20 + -0.500000;
    //Instruction 39590
    //MUL
    t20 = t20 * in_TEXCOORD2.y;
    //Instruction 39591
    //DP2
    t20 = dot(_ST_WindFrondRipple.yy, vec2(t20));
    //Instruction 39592
    //MAD
    t3.xyz = vec3(t20) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 39593
    //MOVC
    t2.xyz = (bool(tb19)) ? t3.xyz : t2.xyz;
    //Instruction 39594
    //GE
    tb20 = t16_0>=3.000000;
    //Instruction 39595
    //IF
    if(tb20){
        //Instruction 39596
        //IF
        if(tb19){
            //Instruction 39597
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39598
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 39599
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 39600
            //DP3
            t19 = dot(t3.xyz, t3.xyz);
            //Instruction 39601
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 39602
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39603
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39604
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39605
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39606
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39607
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39608
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39609
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 39610
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39611
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 39612
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 39613
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 39614
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39615
            //FRC
            t0 = fract(t0);
            //Instruction 39616
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39617
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 39618
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39619
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39620
            //ADD
            t0 = t0 + t0;
            //Instruction 39621
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 39622
            //LT
            tb20 = t5.w<0.0;
            //Instruction 39623
            //MOV
            t5.y = (-t5.w);
            //Instruction 39624
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 39625
            //MOVC
            t5.xy = (bool(tb20)) ? t5.xy : t5.zw;
            //Instruction 39626
            //MAD
            t20 = (-t0.y) * t0.z + t5.x;
            //Instruction 39627
            //MAD
            t20 = t5.y * t20 + t5.w;
            //Instruction 39628
            //ADD
            t21 = (-t20) + t5.x;
            //Instruction 39629
            //MAD
            t20 = t5.y * t21 + t20;
            //Instruction 39630
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 39631
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39632
            //ADD
            t22 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39633
            //MUL
            t22 = t0.x * t22;
            //Instruction 39634
            //MAD
            t20 = t20 * t21 + t22;
            //Instruction 39635
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39636
            //MUL
            t20 = t20 * t21;
            //Instruction 39637
            //MUL
            t4.xyz = vec3(t20) * t4.xyz;
            //Instruction 39638
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39639
            //MAD
            t5.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39640
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39641
            //MAD
            t5.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39642
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 39643
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 39644
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39645
            //MUL
            t17.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 39646
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39647
            //MAD
            t5.xy = t17.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 39648
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 39649
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 39650
            //MUL
            t19 = t5.x * t5.y;
            //Instruction 39651
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39652
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 39653
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 39654
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 39655
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39656
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39657
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 39658
        //ELSE
        } else {
            //Instruction 39659
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39660
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 39661
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39662
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 39663
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39664
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 39665
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 39666
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39667
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 39668
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 39669
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39670
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39671
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39672
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 39673
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39674
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39675
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 39676
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 39677
            //LT
            tb19 = t0.w<0.0;
            //Instruction 39678
            //MOV
            t0.y = (-t0.w);
            //Instruction 39679
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 39680
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 39681
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 39682
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 39683
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 39684
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 39685
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 39686
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39687
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39688
            //MUL
            t21 = t21 * t4.x;
            //Instruction 39689
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 39690
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 39691
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 39692
        //ENDIF
        }
        //Instruction 39693
    //ENDIF
    }
    //Instruction 39694
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 39695
    //SQRT
    t19 = sqrt(t19);
    //Instruction 39696
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39697
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 39698
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 39699
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 39700
    //NE
    tb3 = t20!=0.0;
    //Instruction 39701
    //LOG
    t9 = log2(t20);
    //Instruction 39702
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 39703
    //EXP
    t9 = exp2(t9);
    //Instruction 39704
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 39705
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39706
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39707
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 39708
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 39709
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39710
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 39711
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39712
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 39713
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 39714
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 39715
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39716
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 39717
    //MUL
    t20 = t20 * t3.x;
    //Instruction 39718
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 39719
    //MOV
    t3.y = t2.y;
    //Instruction 39720
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 39721
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 39722
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 39723
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 39724
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 39725
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 39726
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 39727
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 39728
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 39729
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 39730
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 39731
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 39732
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 39733
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 39734
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 39735
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 39736
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 39737
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 39738
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 39739
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 39740
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 39741
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 39742
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 39743
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 39744
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 39745
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 39746
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 39747
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 39748
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 39749
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39750
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 39751
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 39752
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 39560
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 39561
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 39562
    //LT
    tb0 = t10_1<0.0;
    //Instruction 39563
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39564
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39565
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39566
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (tmpvar_20 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_7;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * tmpvar_13.x)
   + 
    (v_59.xyz * tmpvar_13.y)
  ) + (v_60.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_61;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t20;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
highp float t26;
void main()
{
    //Instruction 39497
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39498
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39499
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 39500
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39501
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 39502
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 39503
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 39504
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 39505
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39506
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39507
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 39508
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39509
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39510
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39511
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 39512
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39513
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 39514
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 39515
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39516
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39517
    //EQ
    tb22 = t16_2==5.000000;
    //Instruction 39518
    //LT
    tb24 = in_TEXCOORD0.x<0.500000;
    //Instruction 39519
    //AND
    t24 = tb24 ? 0.750000 : float(0.0);
    //Instruction 39520
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 39521
    //MAD
    t24 = t4.x * _ST_WindFrondRipple.z + t24;
    //Instruction 39522
    //ADD
    t24 = t24 + 0.500000;
    //Instruction 39523
    //FRC
    t24 = fract(t24);
    //Instruction 39524
    //MAD
    t24 = t24 * 2.000000 + -1.0;
    //Instruction 39525
    //MUL
    t4.x = abs(t24) * abs(t24);
    //Instruction 39526
    //MAD
    t24 = -abs(t24) * 2.000000 + 3.000000;
    //Instruction 39527
    //MAD
    t24 = t4.x * t24 + -0.500000;
    //Instruction 39528
    //MUL
    t24 = t24 * in_TEXCOORD2.y;
    //Instruction 39529
    //DP2
    t24 = dot(_ST_WindFrondRipple.yy, vec2(t24));
    //Instruction 39530
    //MAD
    t4.xyz = vec3(t24) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 39531
    //MOVC
    t3.xyz = (bool(tb22)) ? t4.xyz : t3.xyz;
    //Instruction 39532
    //GE
    tb24 = t16_2>=3.000000;
    //Instruction 39533
    //IF
    if(tb24){
        //Instruction 39534
        //IF
        if(tb22){
            //Instruction 39535
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39536
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39537
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39538
            //DP3
            t22 = dot(t4.xyz, t4.xyz);
            //Instruction 39539
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 39540
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39541
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39542
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39543
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39544
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39545
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 39546
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 39547
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39548
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39549
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 39550
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39551
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39552
            //FRC
            t2 = fract(t2);
            //Instruction 39553
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39554
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 39555
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39556
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39557
            //ADD
            t2 = t2 + t2;
            //Instruction 39558
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 39559
            //LT
            tb24 = t6.w<0.0;
            //Instruction 39560
            //MOV
            t6.y = (-t6.w);
            //Instruction 39561
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39562
            //MOVC
            t6.xy = (bool(tb24)) ? t6.xy : t6.zw;
            //Instruction 39563
            //MAD
            t24 = (-t2.y) * t2.z + t6.x;
            //Instruction 39564
            //MAD
            t24 = t6.y * t24 + t6.w;
            //Instruction 39565
            //ADD
            t25 = (-t24) + t6.x;
            //Instruction 39566
            //MAD
            t24 = t6.y * t25 + t24;
            //Instruction 39567
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 39568
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39569
            //ADD
            t26 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39570
            //MUL
            t26 = t2.x * t26;
            //Instruction 39571
            //MAD
            t24 = t24 * t25 + t26;
            //Instruction 39572
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39573
            //MUL
            t24 = t24 * t25;
            //Instruction 39574
            //MUL
            t5.xyz = vec3(t24) * t5.xyz;
            //Instruction 39575
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39576
            //MAD
            t6.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39577
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39578
            //MAD
            t6.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39579
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39580
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39581
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39582
            //MUL
            t20.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39583
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39584
            //MAD
            t6.xy = t20.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39585
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39586
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 39587
            //MUL
            t22 = t6.x * t6.y;
            //Instruction 39588
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39589
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 39590
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 39591
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39592
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39593
            //MUL
            t4.xyz = vec3(t22) * t4.xyz;
            //Instruction 39594
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39595
        //ELSE
        } else {
            //Instruction 39596
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39597
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39598
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39599
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39600
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39601
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39602
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39603
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39604
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 39605
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39606
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39607
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39608
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39609
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39610
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39611
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39612
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 39613
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39614
            //MOV
            t2.y = (-t2.w);
            //Instruction 39615
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39616
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39617
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 39618
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 39619
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 39620
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 39621
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39622
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39623
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39624
            //MUL
            t24 = t24 * t5.x;
            //Instruction 39625
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 39626
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 39627
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39628
        //ENDIF
        }
        //Instruction 39629
    //ENDIF
    }
    //Instruction 39630
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 39631
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39632
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39633
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 39634
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 39635
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 39636
    //NE
    tb24 = t22!=0.0;
    //Instruction 39637
    //LOG
    t4.x = log2(t22);
    //Instruction 39638
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 39639
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 39640
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 39641
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39642
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39643
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 39644
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 39645
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39646
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 39647
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39648
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 39649
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 39650
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 39651
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39652
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 39653
    //MUL
    t22 = t22 * t24;
    //Instruction 39654
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 39655
    //MOV
    t4.y = t3.y;
    //Instruction 39656
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 39657
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 39658
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 39659
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 39660
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 39661
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 39662
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 39663
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 39664
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39665
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 39666
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 39667
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 39668
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 39669
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 39670
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 39671
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 39672
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 39673
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 39674
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 39675
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 39676
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 39677
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 39678
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 39679
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 39680
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 39681
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 39682
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 39683
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 39684
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 39685
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 39686
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 39687
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 39688
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 39490
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 39491
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 39492
    //LT
    tb0 = t10_1<0.0;
    //Instruction 39493
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39494
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39495
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39496
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_7 = tmpvar_8;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * tmpvar_14.x)
   + 
    (v_61.xyz * tmpvar_14.y)
  ) + (v_62.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_5.x;
  tmpvar_68.y = worldBinormal_4.x;
  tmpvar_68.z = worldNormal_6.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.y;
  tmpvar_69.y = worldBinormal_4.y;
  tmpvar_69.z = worldNormal_6.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.z;
  tmpvar_70.y = worldBinormal_4.z;
  tmpvar_70.z = worldNormal_6.z;
  tmpvar_70.w = tmpvar_59.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_9;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 39975
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39976
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39977
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 39978
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39979
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 39980
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 39981
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 39982
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 39983
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39984
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39985
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 39986
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39987
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39988
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39989
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 39990
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 39991
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 39992
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 39993
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 39994
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 39995
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 39996
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 39997
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 39998
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 39999
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 40000
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 40001
    //FRC
    t27 = fract(t27);
    //Instruction 40002
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 40003
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 40004
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 40005
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 40006
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 40007
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 40008
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 40009
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 40010
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 40011
    //IF
    if(tb27){
        //Instruction 40012
        //IF
        if(tb25){
            //Instruction 40013
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40014
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 40015
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 40016
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 40017
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 40018
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 40019
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40020
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40021
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40022
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 40023
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 40024
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 40025
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40026
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40027
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 40028
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40029
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40030
            //FRC
            t2 = fract(t2);
            //Instruction 40031
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40032
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 40033
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40034
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40035
            //ADD
            t2 = t2 + t2;
            //Instruction 40036
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 40037
            //LT
            tb27 = t6.w<0.0;
            //Instruction 40038
            //MOV
            t6.y = (-t6.w);
            //Instruction 40039
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 40040
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 40041
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 40042
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 40043
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 40044
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 40045
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 40046
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40047
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40048
            //MUL
            t29 = t2.x * t29;
            //Instruction 40049
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 40050
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40051
            //MUL
            t27 = t27 * t28;
            //Instruction 40052
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 40053
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 40054
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40055
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40056
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40057
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 40058
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 40059
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40060
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 40061
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40062
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 40063
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 40064
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 40065
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 40066
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40067
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 40068
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 40069
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 40070
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40071
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 40072
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 40073
        //ELSE
        } else {
            //Instruction 40074
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40075
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40076
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40077
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40078
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40079
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40080
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40081
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40082
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40083
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40084
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40085
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40086
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40087
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40088
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40089
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40090
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40091
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40092
            //MOV
            t2.y = (-t2.w);
            //Instruction 40093
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40094
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40095
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40096
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40097
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 40098
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 40099
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40100
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40101
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40102
            //MUL
            t27 = t27 * t5.x;
            //Instruction 40103
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 40104
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40105
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 40106
        //ENDIF
        }
        //Instruction 40107
    //ENDIF
    }
    //Instruction 40108
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40109
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40110
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40111
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 40112
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 40113
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 40114
    //NE
    tb27 = t25!=0.0;
    //Instruction 40115
    //LOG
    t4.x = log2(t25);
    //Instruction 40116
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40117
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40118
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 40119
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40120
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40121
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40122
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40123
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40124
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40125
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40126
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40127
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40128
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 40129
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40130
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 40131
    //MUL
    t25 = t25 * t27;
    //Instruction 40132
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 40133
    //MOV
    t4.y = t3.y;
    //Instruction 40134
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 40135
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 40136
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 40137
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40138
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 40139
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40140
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40141
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40142
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40143
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40144
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 40145
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40146
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40147
    //MOV
    t3.y = _World2Object[0].x;
    //Instruction 40148
    //MOV
    t3.z = _World2Object[1].x;
    //Instruction 40149
    //MOV
    t3.x = _World2Object[2].x;
    //Instruction 40150
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 40151
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 40152
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 40153
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 40154
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 40155
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 40156
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 40157
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 40158
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 40159
    //DP3
    t24 = dot(t3.xyz, t3.xyz);
    //Instruction 40160
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40161
    //MUL
    t3.xyz = vec3(t24) * t3.xyz;
    //Instruction 40162
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 40163
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 40164
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 40165
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 40166
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 40167
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 40168
    //MUL
    t10_7.xyz = t3.xyz * t4.xyz;
    //Instruction 40169
    //MAD
    t10_7.xyz = t3.zxy * t4.yzx + (-t10_7.xyz);
    //Instruction 40170
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 40171
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 40172
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 40173
    //MOV
    vs_TEXCOORD0.z = t3.y;
    //Instruction 40174
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 40175
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 40176
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 40177
    //MOV
    vs_TEXCOORD1.z = t3.z;
    //Instruction 40178
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 40179
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 40180
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 40181
    //MOV
    vs_TEXCOORD2.z = t3.x;
    //Instruction 40182
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 40183
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 40184
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40185
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 40186
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 39963
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 39964
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 39965
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 39966
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39967
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 39968
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 39969
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 39970
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 39971
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 39972
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39973
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39974
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_15 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_20;
  tmpvar_20.x = tmpvar_4.w;
  tmpvar_20.y = tmpvar_5.x;
  tmpvar_20.z = tmpvar_5.y;
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (FinalPosition_15, tmpvar_20, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_21;
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_17 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = tmpvar_21;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (tmpvar_21 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_14.zxy) - (tmpvar_32.zxy * vRotatedWindVector_14.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_14, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_12 = vDirection_26;
    FinalPosition_15 = vPos_25;
  };
  FinalPosition_15 = (FinalPosition_15 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_15;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_15 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_13 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_15 = vPos_66;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_15;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_15 = vPos_91;
  };
  tmpvar_11.xyz = FinalPosition_15;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_99;
  v_99.x = _World2Object[0].x;
  v_99.y = _World2Object[1].x;
  v_99.z = _World2Object[2].x;
  v_99.w = _World2Object[3].x;
  highp vec4 v_100;
  v_100.x = _World2Object[0].y;
  v_100.y = _World2Object[1].y;
  v_100.z = _World2Object[2].y;
  v_100.w = _World2Object[3].y;
  highp vec4 v_101;
  v_101.x = _World2Object[0].z;
  v_101.y = _World2Object[1].z;
  v_101.z = _World2Object[2].z;
  v_101.w = _World2Object[3].z;
  highp vec3 tmpvar_102;
  tmpvar_102 = normalize(((
    (v_99.xyz * tmpvar_12.x)
   + 
    (v_100.xyz * tmpvar_12.y)
  ) + (v_101.xyz * tmpvar_12.z)));
  worldNormal_6 = tmpvar_102;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_3 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_3 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 39760
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39761
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 39762
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 39763
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39764
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 39765
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 39766
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 39767
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 39768
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 39769
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 39770
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 39771
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 39772
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 39773
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 39774
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 39775
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 39776
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 39777
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 39778
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 39779
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 39780
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 39781
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 39782
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 39783
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 39784
        //FRC
        t15.x = fract(t15.x);
        //Instruction 39785
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 39786
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 39787
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 39788
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 39789
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 39790
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 39791
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 39792
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 39793
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 39794
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 39795
        //IF
        if(tb29){
            //Instruction 39796
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 39797
            //FRC
            t4 = fract(t4);
            //Instruction 39798
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39799
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 39800
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 39801
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 39802
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 39803
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 39804
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39805
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 39806
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39807
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 39808
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39809
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 39810
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 39811
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 39812
            //SQRT
            t44 = sqrt(t44);
            //Instruction 39813
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 39814
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 39815
            //MUL
            t45 = t45 * t5.x;
            //Instruction 39816
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 39817
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 39818
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 39819
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 39820
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 39821
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 39822
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 39823
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 39824
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 39825
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 39826
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 39827
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 39828
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 39829
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 39830
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 39831
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 39832
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 39833
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 39834
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 39835
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 39836
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 39837
            //SQRT
            t45 = sqrt(t45);
            //Instruction 39838
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 39839
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 39840
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 39841
            //MUL
            t33 = t45 * t5.x;
            //Instruction 39842
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 39843
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 39844
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 39845
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 39846
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 39847
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 39848
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 39849
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39850
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 39851
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39852
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 39853
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39854
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 39855
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 39856
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 39857
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 39858
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 39859
            //LOG
            t43 = log2(t43);
            //Instruction 39860
            //MUL
            t29 = t43 * t15.y;
            //Instruction 39861
            //EXP
            t29 = exp2(t29);
            //Instruction 39862
            //MUL
            t43 = t5.y * t45;
            //Instruction 39863
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 39864
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 39865
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 39866
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 39867
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 39868
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 39869
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 39870
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 39871
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 39872
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 39873
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 39874
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 39875
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 39876
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 39877
            //MOV
            t10.z = t11.x;
            //Instruction 39878
            //MOV
            t10.w = t9.x;
            //Instruction 39879
            //MOV
            t12.z = t8.y;
            //Instruction 39880
            //MOV
            t12.w = t13.y;
            //Instruction 39881
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 39882
            //MOV
            t13.w = t12.y;
            //Instruction 39883
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 39884
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 39885
            //MOV
            t9.w = t10.y;
            //Instruction 39886
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 39887
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 39888
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 39889
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 39890
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 39891
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 39892
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 39893
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 39894
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 39895
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 39896
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 39897
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 39898
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 39899
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 39900
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39901
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 39902
        //ELSE
        } else {
            //Instruction 39903
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 39904
        //ENDIF
        }
        //Instruction 39905
    //ELSE
    } else {
        //Instruction 39906
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 39907
    //ENDIF
    }
    //Instruction 39908
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 39909
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 39910
    //IF
    if(tb16){
        //Instruction 39911
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 39912
        //IF
        if(tb16){
            //Instruction 39913
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39914
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 39915
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 39916
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 39917
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 39918
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39919
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39920
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39921
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39922
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39923
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39924
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 39925
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 39926
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39927
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 39928
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 39929
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 39930
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39931
            //FRC
            t0 = fract(t0);
            //Instruction 39932
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39933
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 39934
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39935
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39936
            //ADD
            t0 = t0 + t0;
            //Instruction 39937
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 39938
            //LT
            tb44 = t6.w<0.0;
            //Instruction 39939
            //MOV
            t6.y = (-t6.w);
            //Instruction 39940
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 39941
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 39942
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 39943
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 39944
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 39945
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 39946
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 39947
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39948
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39949
            //MUL
            t46 = t0.x * t46;
            //Instruction 39950
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 39951
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39952
            //MUL
            t44 = t44 * t45;
            //Instruction 39953
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 39954
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 39955
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39956
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39957
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39958
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 39959
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 39960
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39961
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 39962
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39963
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 39964
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 39965
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 39966
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 39967
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39968
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 39969
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 39970
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 39971
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39972
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 39973
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 39974
        //ELSE
        } else {
            //Instruction 39975
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39976
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 39977
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39978
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 39979
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 39980
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 39981
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 39982
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39983
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 39984
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 39985
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39986
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39987
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39988
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 39989
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39990
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39991
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 39992
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 39993
            //LT
            tb16 = t0.w<0.0;
            //Instruction 39994
            //MOV
            t0.y = (-t0.w);
            //Instruction 39995
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 39996
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 39997
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 39998
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 39999
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 40000
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 40001
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 40002
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40003
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40004
            //MUL
            t45 = t45 * t5.x;
            //Instruction 40005
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 40006
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 40007
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 40008
        //ENDIF
        }
        //Instruction 40009
    //ENDIF
    }
    //Instruction 40010
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 40011
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 40012
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40013
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 40014
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 40015
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 40016
    //NE
    tb45 = t44!=0.0;
    //Instruction 40017
    //LOG
    t4.x = log2(t44);
    //Instruction 40018
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40019
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40020
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 40021
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40022
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40023
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40024
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40025
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40026
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40027
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40028
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40029
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40030
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 40031
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40032
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 40033
    //MUL
    t44 = t44 * t45;
    //Instruction 40034
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 40035
    //MOV
    t4.y = t3.y;
    //Instruction 40036
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 40037
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 40038
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 40039
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 40040
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 40041
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 40042
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 40043
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 40044
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 40045
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 40046
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 40047
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 40048
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 40049
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 40050
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 40051
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 40052
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 40053
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 40054
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 40055
    //MUL
    t3.xyz = t15.yyy * t3.xyz;
    //Instruction 40056
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t3.xyz;
    //Instruction 40057
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 40058
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 40059
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 40060
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 40061
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 40062
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 40063
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 40064
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 40065
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40066
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 40067
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 40068
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 39753
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 39754
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 39755
    //LT
    tb0 = t10_1<0.0;
    //Instruction 39756
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39757
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39758
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39759
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_22;
  tmpvar_22.x = tmpvar_4.w;
  tmpvar_22.y = tmpvar_5.x;
  tmpvar_22.z = tmpvar_5.y;
  highp vec3 tmpvar_23;
  tmpvar_23 = mix (FinalPosition_18, tmpvar_22, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_23;
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_24;
    tmpvar_24 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_25;
    isBestWind_25 = (tmpvar_19 == 4.0);
    bool bLeaf2_26;
    bLeaf2_26 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_27;
    vPos_27 = tmpvar_23;
    highp vec3 vDirection_28;
    vDirection_28 = tmpvar_2;
    highp float tmpvar_29;
    if (bLeaf2_26) {
      tmpvar_29 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_30;
    if (bLeaf2_26) {
      tmpvar_30 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_31;
    highp vec4 tmpvar_32;
    tmpvar_32.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_32.x = (tmpvar_29 + tmpvar_24);
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_32 + 0.5))
     * 2.0) - 1.0));
    vPos_31 = (tmpvar_23 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_30 * (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_28 = tmpvar_2;
    vPos_27 = vPos_31;
    if (isBestWind_25) {
      highp vec3 tmpvar_34;
      tmpvar_34 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_35;
      if (bLeaf2_26) {
        tmpvar_35 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_36;
      if (bLeaf2_26) {
        tmpvar_36 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_37;
      if (bLeaf2_26) {
        tmpvar_37 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_38;
      if (bLeaf2_26) {
        tmpvar_38 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_39;
      if (bLeaf2_26) {
        tmpvar_39 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_39 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_40;
      if (bLeaf2_26) {
        tmpvar_40 = bool(1);
      } else {
        tmpvar_40 = bool(1);
      };
      highp float fTwitch_41;
      highp vec3 vAxis_42;
      highp float fOsc_43;
      highp vec3 vOriginPos_44;
      highp vec3 tmpvar_45;
      tmpvar_45 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_46;
      tmpvar_46 = ((tmpvar_45.x + tmpvar_45.y) + tmpvar_45.z);
      highp vec4 tmpvar_47;
      tmpvar_47.x = (tmpvar_35 + tmpvar_46);
      tmpvar_47.y = ((tmpvar_35 * 0.75) - tmpvar_46);
      tmpvar_47.z = ((tmpvar_35 * 0.01) + tmpvar_46);
      tmpvar_47.w = (tmpvar_35 + tmpvar_46);
      highp vec4 tmpvar_48;
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      tmpvar_48 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      vOriginPos_44 = vPos_31;
      highp float tmpvar_50;
      tmpvar_50 = sqrt(dot (vPos_31, vPos_31));
      highp float fAngle_51;
      fAngle_51 = ((_glesMultiTexCoord2.x * tmpvar_37) * (tmpvar_48.x + (tmpvar_48.y * tmpvar_48.y)));
      highp vec2 vSinCos_52;
      vSinCos_52.x = sin(fAngle_51);
      vSinCos_52.y = cos(fAngle_51);
      highp float tmpvar_53;
      tmpvar_53 = (1.0 - vSinCos_52.y);
      highp mat3 tmpvar_54;
      tmpvar_54[0].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.x) + vSinCos_52.y);
      tmpvar_54[0].y = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) + (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[0].z = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[1].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.y) - (vSinCos_52.x * tmpvar_34.z));
      tmpvar_54[1].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.y) + vSinCos_52.y);
      tmpvar_54[1].z = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].x = (((tmpvar_53 * tmpvar_34.x) * tmpvar_34.z) + (vSinCos_52.x * tmpvar_34.y));
      tmpvar_54[2].y = (((tmpvar_53 * tmpvar_34.y) * tmpvar_34.z) - (vSinCos_52.x * tmpvar_34.x));
      tmpvar_54[2].z = (((tmpvar_53 * tmpvar_34.z) * tmpvar_34.z) + vSinCos_52.y);
      highp vec3 tmpvar_55;
      tmpvar_55 = ((tmpvar_34.yzx * vRotatedWindVector_17.zxy) - (tmpvar_34.zxy * vRotatedWindVector_17.yzx));
      vAxis_42.xz = tmpvar_55.xz;
      highp float tmpvar_56;
      tmpvar_56 = clamp (dot (vRotatedWindVector_17, tmpvar_34), -1.0, 1.0);
      vAxis_42.y = (tmpvar_55.y + tmpvar_56);
      highp vec3 tmpvar_57;
      tmpvar_57 = normalize(vAxis_42);
      vAxis_42 = tmpvar_57;
      highp float tmpvar_58;
      tmpvar_58 = (1.570796 - (sign(tmpvar_56) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_56))) * (1.570796 + (abs(tmpvar_56) * (-0.2146018 + 
          (abs(tmpvar_56) * (0.08656672 + (abs(tmpvar_56) * -0.03102955)))
        ))))
      )));
      fOsc_43 = (tmpvar_48.y - (tmpvar_48.x * tmpvar_48.x));
      fTwitch_41 = 0.0;
      if (tmpvar_40) {
        highp float fTime_59;
        fTime_59 = (tmpvar_39.z + tmpvar_46);
        highp vec4 tmpvar_60;
        tmpvar_60.zw = vec2(0.0, 0.0);
        tmpvar_60.x = fTime_59;
        tmpvar_60.y = (0.87 * fTime_59);
        highp vec4 tmpvar_61;
        highp vec4 tmpvar_62;
        tmpvar_62 = abs(((
          fract((tmpvar_60 + 0.5))
         * 2.0) - 1.0));
        tmpvar_61 = (((
          (tmpvar_62 * tmpvar_62)
         * 
          (3.0 - (2.0 * tmpvar_62))
        ) - 0.5) * 2.0);
        fTwitch_41 = (tmpvar_39.x * pow (clamp (
          ((((tmpvar_61.x * tmpvar_61.y) * tmpvar_61.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_39.y));
      };
      highp float fAngle_63;
      fAngle_63 = (_glesMultiTexCoord2.x * ((
        (tmpvar_58 * tmpvar_38)
       + 
        (fOsc_43 * tmpvar_36)
      ) + fTwitch_41));
      highp vec2 vSinCos_64;
      vSinCos_64.x = sin(fAngle_63);
      vSinCos_64.y = cos(fAngle_63);
      highp float tmpvar_65;
      tmpvar_65 = (1.0 - vSinCos_64.y);
      highp mat3 tmpvar_66;
      tmpvar_66[0].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.x) + vSinCos_64.y);
      tmpvar_66[0].y = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) + (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[0].z = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[1].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.y) - (vSinCos_64.x * tmpvar_57.z));
      tmpvar_66[1].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.y) + vSinCos_64.y);
      tmpvar_66[1].z = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].x = (((tmpvar_65 * tmpvar_57.x) * tmpvar_57.z) + (vSinCos_64.x * tmpvar_57.y));
      tmpvar_66[2].y = (((tmpvar_65 * tmpvar_57.y) * tmpvar_57.z) - (vSinCos_64.x * tmpvar_57.x));
      tmpvar_66[2].z = (((tmpvar_65 * tmpvar_57.z) * tmpvar_57.z) + vSinCos_64.y);
      highp mat3 tmpvar_67;
      tmpvar_67 = (tmpvar_54 * tmpvar_66);
      vOriginPos_44 = (normalize((tmpvar_67 * vPos_31)) * tmpvar_50);
      vDirection_28 = (tmpvar_67 * _glesNormal);
      vPos_27 = vOriginPos_44;
    };
    tmpvar_15 = vDirection_28;
    FinalPosition_18 = vPos_27;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_68;
    vPos_68 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_69;
      vPos_69 = FinalPosition_18;
      highp float fTime_70;
      highp float fAdherenceScale_71;
      highp vec3 vWindVector_72;
      vWindVector_72 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_70 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_73;
      highp float fOscillation_74;
      fOscillation_74 = 1.0;
      highp float fAmount_75;
      highp float fTarget_76;
      highp vec4 tmpvar_77;
      tmpvar_77.x = (fTime_70 + _glesMultiTexCoord0.w);
      tmpvar_77.y = ((fTime_70 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_77.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_70 + _glesMultiTexCoord0.w));
      tmpvar_77.w = ((fTime_70 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      vOscillations_73 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      highp float tmpvar_79;
      tmpvar_79 = (vOscillations_73.y * vOscillations_73.z);
      fTarget_76 = 1.0;
      fAmount_75 = tmpvar_79;
      if ((tmpvar_79 < 0.0)) {
        fTarget_76 = -1.0;
        fAmount_75 = -(tmpvar_79);
      };
      fOscillation_74 = (((
        mix (mix (tmpvar_79, fTarget_76, fAmount_75), fTarget_76, fAmount_75)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_73.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_74 = (fOscillation_74 * (1.0 + (vOscillations_73.w * _ST_WindBranchWhip.x)));
      vPos_69 = (FinalPosition_18 + ((vWindVector_72 * fOscillation_74) * _ST_WindBranch.y));
      highp vec4 tmpvar_80;
      tmpvar_80.zw = vec2(0.0, 0.0);
      tmpvar_80.x = ((fTime_70 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_80.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_81;
      highp vec4 tmpvar_82;
      tmpvar_82 = abs(((
        fract((tmpvar_80 + 0.5))
       * 2.0) - 1.0));
      tmpvar_81 = (((
        (tmpvar_82 * tmpvar_82)
       * 
        (3.0 - (2.0 * tmpvar_82))
      ) - 0.5) * 2.0);
      fAdherenceScale_71 = (1.0 - ((tmpvar_81.x * tmpvar_81.y) * (
        (tmpvar_81.x * tmpvar_81.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_71 = (fAdherenceScale_71 + ((vOscillations_73.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_69 = (vPos_69 + ((
        ((vRotatedBranchAnchor_16 - vPos_69) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_71) * _glesMultiTexCoord0.z));
      vPos_68 = vPos_69;
    } else {
      highp vec3 vPos_83;
      vPos_83 = vPos_68;
      highp float fTime_84;
      highp vec3 vWindVector_85;
      vWindVector_85 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_84 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_86;
      highp float fOscillation_87;
      fOscillation_87 = 1.0;
      highp float fAmount_88;
      highp float fTarget_89;
      highp vec4 tmpvar_90;
      tmpvar_90.w = 0.0;
      tmpvar_90.x = (fTime_84 + _glesMultiTexCoord0.w);
      tmpvar_90.y = ((fTime_84 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_90.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_84 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_91;
      tmpvar_91 = abs(((
        fract((tmpvar_90 + 0.5))
       * 2.0) - 1.0));
      vOscillations_86 = (((
        (tmpvar_91 * tmpvar_91)
       * 
        (3.0 - (2.0 * tmpvar_91))
      ) - 0.5) * 2.0);
      highp float tmpvar_92;
      tmpvar_92 = (vOscillations_86.y * vOscillations_86.z);
      fTarget_89 = 1.0;
      fAmount_88 = tmpvar_92;
      if ((tmpvar_92 < 0.0)) {
        fTarget_89 = -1.0;
        fAmount_88 = -(tmpvar_92);
      };
      fOscillation_87 = (((
        mix (mix (tmpvar_92, fTarget_89, fAmount_88), fTarget_89, fAmount_88)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_86.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_83 = (vPos_68 + ((vWindVector_85 * fOscillation_87) * _ST_WindBranch.y));
      vPos_68 = vPos_83;
    };
    FinalPosition_18 = vPos_68;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_93;
    vPos_93 = FinalPosition_18;
    highp float fMoveAmount_94;
    highp float fAdjust_95;
    highp float fLength_96;
    fLength_96 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_97;
    tmpvar_97 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_95 = tmpvar_97;
    if ((tmpvar_97 != 0.0)) {
      fAdjust_95 = pow (tmpvar_97, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_98;
    tmpvar_98.zw = vec2(0.0, 0.0);
    tmpvar_98.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_98.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_99;
    highp vec4 tmpvar_100;
    tmpvar_100 = abs(((
      fract((tmpvar_98 + 0.5))
     * 2.0) - 1.0));
    tmpvar_99 = (((
      (tmpvar_100 * tmpvar_100)
     * 
      (3.0 - (2.0 * tmpvar_100))
    ) - 0.5) * 2.0);
    fMoveAmount_94 = ((_ST_WindGlobal.y * (tmpvar_99.x + 
      (tmpvar_99.y * tmpvar_99.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_94 = (fMoveAmount_94 * fAdjust_95);
    vPos_93.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_94));
    vPos_93 = (normalize(vPos_93) * fLength_96);
    FinalPosition_18 = vPos_93;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_8 = tmpvar_9;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_15.x)
   + 
    (v_102.xyz * tmpvar_15.y)
  ) + (v_103.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_104;
  tmpvar_7 = worldNormal_6;
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_10;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 39696
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 39697
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 39698
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 39699
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 39700
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 39701
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 39702
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 39703
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 39704
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 39705
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 39706
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 39707
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 39708
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 39709
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 39710
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 39711
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 39712
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 39713
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 39714
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 39715
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 39716
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 39717
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 39718
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 39719
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 39720
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 39721
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 39722
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 39723
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 39724
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 39725
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 39726
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 39727
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 39728
        //FRC
        t30.x = fract(t30.x);
        //Instruction 39729
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 39730
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 39731
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 39732
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 39733
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 39734
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 39735
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 39736
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 39737
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 39738
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 39739
        //IF
        if(tb45){
            //Instruction 39740
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 39741
            //FRC
            t5 = fract(t5);
            //Instruction 39742
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39743
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 39744
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 39745
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 39746
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 39747
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 39748
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 39749
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 39750
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39751
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 39752
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39753
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 39754
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 39755
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 39756
            //SQRT
            t46 = sqrt(t46);
            //Instruction 39757
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 39758
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 39759
            //MUL
            t48 = t48 * t49;
            //Instruction 39760
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 39761
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 39762
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 39763
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 39764
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 39765
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 39766
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 39767
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 39768
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 39769
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 39770
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 39771
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 39772
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 39773
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 39774
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 39775
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 39776
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 39777
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 39778
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 39779
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 39780
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 39781
            //SQRT
            t48 = sqrt(t48);
            //Instruction 39782
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 39783
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 39784
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 39785
            //MUL
            t6.x = t48 * t49;
            //Instruction 39786
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 39787
            //LT
            tb18 = t18<(-t18);
            //Instruction 39788
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 39789
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 39790
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 39791
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 39792
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 39793
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 39794
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 39795
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39796
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 39797
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39798
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 39799
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 39800
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 39801
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 39802
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 39803
            //LOG
            t45 = log2(t45);
            //Instruction 39804
            //MUL
            t45 = t45 * t7.y;
            //Instruction 39805
            //EXP
            t45 = exp2(t45);
            //Instruction 39806
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 39807
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 39808
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 39809
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 39810
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 39811
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 39812
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 39813
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 39814
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 39815
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 39816
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 39817
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 39818
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 39819
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 39820
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 39821
            //MOV
            t11.z = t12.x;
            //Instruction 39822
            //MOV
            t11.w = t10.x;
            //Instruction 39823
            //MOV
            t13.z = t9.y;
            //Instruction 39824
            //MOV
            t13.w = t14.y;
            //Instruction 39825
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 39826
            //MOV
            t14.w = t13.y;
            //Instruction 39827
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 39828
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 39829
            //MOV
            t10.w = t11.y;
            //Instruction 39830
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 39831
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 39832
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 39833
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 39834
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 39835
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 39836
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 39837
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 39838
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 39839
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 39840
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 39841
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 39842
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 39843
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 39844
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 39845
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 39846
        //ELSE
        } else {
            //Instruction 39847
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 39848
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 39849
        //ENDIF
        }
        //Instruction 39850
    //ELSE
    } else {
        //Instruction 39851
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 39852
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 39853
    //ENDIF
    }
    //Instruction 39854
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 39855
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 39856
    //IF
    if(tb46){
        //Instruction 39857
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 39858
        //IF
        if(tb46){
            //Instruction 39859
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 39860
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 39861
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 39862
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 39863
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 39864
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 39865
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39866
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 39867
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39868
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 39869
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 39870
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 39871
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39872
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 39873
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 39874
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 39875
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 39876
            //FRC
            t2 = fract(t2);
            //Instruction 39877
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 39878
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 39879
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 39880
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 39881
            //ADD
            t2 = t2 + t2;
            //Instruction 39882
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 39883
            //LT
            tb48 = t7.w<0.0;
            //Instruction 39884
            //MOV
            t7.y = (-t7.w);
            //Instruction 39885
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 39886
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 39887
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 39888
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 39889
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 39890
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 39891
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 39892
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39893
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39894
            //MUL
            t50 = t2.x * t50;
            //Instruction 39895
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 39896
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 39897
            //MUL
            t48 = t48 * t49;
            //Instruction 39898
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 39899
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39900
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39901
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 39902
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 39903
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 39904
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 39905
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 39906
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 39907
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 39908
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 39909
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 39910
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 39911
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 39912
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 39913
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 39914
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 39915
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 39916
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 39917
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 39918
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 39919
        //ELSE
        } else {
            //Instruction 39920
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 39921
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 39922
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39923
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 39924
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 39925
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 39926
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 39927
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 39928
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 39929
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 39930
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 39931
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 39932
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 39933
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 39934
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 39935
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 39936
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 39937
            //LT
            tb0 = t2.w<0.0;
            //Instruction 39938
            //MOV
            t2.y = (-t2.w);
            //Instruction 39939
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 39940
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 39941
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 39942
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 39943
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 39944
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 39945
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 39946
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 39947
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 39948
            //MUL
            t48 = t48 * t6.x;
            //Instruction 39949
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 39950
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 39951
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 39952
        //ENDIF
        }
        //Instruction 39953
    //ENDIF
    }
    //Instruction 39954
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 39955
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 39956
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 39957
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 39958
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 39959
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 39960
    //NE
    tb48 = t46!=0.0;
    //Instruction 39961
    //LOG
    t49 = log2(t46);
    //Instruction 39962
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 39963
    //EXP
    t49 = exp2(t49);
    //Instruction 39964
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 39965
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 39966
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 39967
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 39968
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 39969
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 39970
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 39971
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 39972
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 39973
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 39974
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 39975
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 39976
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 39977
    //MUL
    t46 = t46 * t48;
    //Instruction 39978
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 39979
    //MOV
    t5.y = t4.y;
    //Instruction 39980
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 39981
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 39982
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 39983
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 39984
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 39985
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 39986
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 39987
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 39988
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 39989
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 39990
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 39991
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 39992
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 39993
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 39994
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 39995
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 39996
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 39997
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 39998
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 39999
    //MUL
    t0.xyw = t30.yyy * t5.xyz;
    //Instruction 40000
    //MAD
    t0.xyz = t4.xyz * t30.xxx + t0.xyw;
    //Instruction 40001
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 40002
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 40003
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 40004
    //MAD
    t0.xyz = t4.xyz * vec3(t18) + t0.xyz;
    //Instruction 40005
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 40006
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 40007
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 40008
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 40009
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40010
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40011
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 40012
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp float t10_0;
bool tb0;
lowp float t10_1;
void main()
{
    //Instruction 39689
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy).w;
    //Instruction 39690
    //MAD
    t10_1 = t10_0 * _Color.w + (-_Cutoff);
    //Instruction 39691
    //LT
    tb0 = t10_1<0.0;
    //Instruction 39692
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 39693
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 39694
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 39695
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_9 = tmpvar_10;
  highp vec3 tmpvar_102;
  tmpvar_102 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_16.x)
   + 
    (v_104.xyz * tmpvar_16.y)
  ) + (v_105.xyz * tmpvar_16.z)));
  worldNormal_8 = tmpvar_106;
  highp mat3 tmpvar_107;
  tmpvar_107[0] = _Object2World[0].xyz;
  tmpvar_107[1] = _Object2World[1].xyz;
  tmpvar_107[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_108;
  tmpvar_108 = normalize((tmpvar_107 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_108;
  lowp vec3 tmpvar_109;
  tmpvar_109 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_110;
  tmpvar_110 = (tmpvar_109 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_110;
  highp vec4 tmpvar_111;
  tmpvar_111.x = worldTangent_7.x;
  tmpvar_111.y = worldBinormal_6.x;
  tmpvar_111.z = worldNormal_8.x;
  tmpvar_111.w = tmpvar_102.x;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.y;
  tmpvar_112.y = worldBinormal_6.y;
  tmpvar_112.z = worldNormal_8.y;
  tmpvar_112.w = tmpvar_102.y;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.z;
  tmpvar_113.y = worldBinormal_6.z;
  tmpvar_113.z = worldNormal_8.z;
  tmpvar_113.w = tmpvar_102.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_111;
  xlv_TEXCOORD1 = tmpvar_112;
  xlv_TEXCOORD2 = tmpvar_113;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_11;
}


#endif
#ifdef FRAGMENT
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  lowp float tmpvar_3;
  mediump float maxBase_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_3 = (diffuseColor_5.w * _Color.w);
  lowp float x_7;
  x_7 = (tmpvar_3 - _Cutoff);
  if ((x_7 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_5.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_4 = (max (diffuseColor_5.x, max (diffuseColor_5.y, diffuseColor_5.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_4 = ((maxBase_4 * 0.5) + 0.5);
  diffuseColor_5.xyz = clamp ((tmpvar_8 * maxBase_4), 0.0, 1.0);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 40199
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40200
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40201
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 40202
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40203
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 40204
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 40205
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 40206
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 40207
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40208
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40209
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 40210
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40211
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40212
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40213
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 40214
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 40215
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 40216
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 40217
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 40218
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 40219
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 40220
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 40221
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 40222
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 40223
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 40224
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 40225
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 40226
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 40227
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 40228
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 40229
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 40230
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 40231
        //FRC
        t32.x = fract(t32.x);
        //Instruction 40232
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 40233
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 40234
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 40235
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 40236
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 40237
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 40238
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 40239
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 40240
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 40241
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 40242
        //IF
        if(tb48){
            //Instruction 40243
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 40244
            //FRC
            t5 = fract(t5);
            //Instruction 40245
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40246
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 40247
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 40248
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 40249
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 40250
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 40251
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40252
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 40253
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40254
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 40255
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40256
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 40257
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 40258
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 40259
            //SQRT
            t49 = sqrt(t49);
            //Instruction 40260
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 40261
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 40262
            //MUL
            t51 = t51 * t52;
            //Instruction 40263
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 40264
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 40265
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 40266
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 40267
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 40268
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 40269
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 40270
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 40271
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 40272
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 40273
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 40274
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 40275
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 40276
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 40277
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 40278
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 40279
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 40280
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 40281
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 40282
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 40283
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 40284
            //SQRT
            t51 = sqrt(t51);
            //Instruction 40285
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 40286
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 40287
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 40288
            //MUL
            t6.x = t51 * t52;
            //Instruction 40289
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 40290
            //LT
            tb19 = t19<(-t19);
            //Instruction 40291
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 40292
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 40293
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 40294
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 40295
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 40296
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 40297
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 40298
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40299
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 40300
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40301
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 40302
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 40303
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 40304
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 40305
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 40306
            //LOG
            t48 = log2(t48);
            //Instruction 40307
            //MUL
            t48 = t48 * t7.y;
            //Instruction 40308
            //EXP
            t48 = exp2(t48);
            //Instruction 40309
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 40310
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 40311
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 40312
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 40313
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 40314
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 40315
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 40316
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 40317
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 40318
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 40319
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 40320
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 40321
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 40322
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 40323
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 40324
            //MOV
            t11.z = t12.x;
            //Instruction 40325
            //MOV
            t11.w = t10.x;
            //Instruction 40326
            //MOV
            t13.z = t9.y;
            //Instruction 40327
            //MOV
            t13.w = t14.y;
            //Instruction 40328
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 40329
            //MOV
            t14.w = t13.y;
            //Instruction 40330
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 40331
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 40332
            //MOV
            t10.w = t11.y;
            //Instruction 40333
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 40334
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 40335
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 40336
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 40337
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 40338
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 40339
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 40340
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 40341
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 40342
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 40343
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 40344
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 40345
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 40346
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 40347
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 40348
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 40349
        //ELSE
        } else {
            //Instruction 40350
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 40351
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 40352
        //ENDIF
        }
        //Instruction 40353
    //ELSE
    } else {
        //Instruction 40354
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 40355
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 40356
    //ENDIF
    }
    //Instruction 40357
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 40358
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 40359
    //IF
    if(tb49){
        //Instruction 40360
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 40361
        //IF
        if(tb49){
            //Instruction 40362
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40363
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 40364
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 40365
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 40366
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 40367
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 40368
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40369
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40370
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40371
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 40372
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 40373
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 40374
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40375
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40376
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 40377
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40378
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40379
            //FRC
            t2 = fract(t2);
            //Instruction 40380
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40381
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 40382
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40383
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40384
            //ADD
            t2 = t2 + t2;
            //Instruction 40385
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 40386
            //LT
            tb51 = t7.w<0.0;
            //Instruction 40387
            //MOV
            t7.y = (-t7.w);
            //Instruction 40388
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 40389
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 40390
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 40391
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 40392
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 40393
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 40394
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 40395
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40396
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40397
            //MUL
            t53 = t2.x * t53;
            //Instruction 40398
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 40399
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40400
            //MUL
            t51 = t51 * t52;
            //Instruction 40401
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 40402
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40403
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40404
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40405
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40406
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 40407
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 40408
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40409
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 40410
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40411
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 40412
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 40413
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 40414
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 40415
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40416
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 40417
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 40418
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 40419
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40420
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 40421
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 40422
        //ELSE
        } else {
            //Instruction 40423
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40424
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40425
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40426
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 40427
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40428
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40429
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40430
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 40431
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 40432
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40433
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 40434
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40435
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 40436
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40437
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40438
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 40439
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 40440
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40441
            //MOV
            t2.y = (-t2.w);
            //Instruction 40442
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40443
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40444
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 40445
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 40446
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 40447
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 40448
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40449
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40450
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40451
            //MUL
            t51 = t51 * t6.x;
            //Instruction 40452
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 40453
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 40454
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 40455
        //ENDIF
        }
        //Instruction 40456
    //ENDIF
    }
    //Instruction 40457
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 40458
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40459
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40460
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 40461
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 40462
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 40463
    //NE
    tb51 = t49!=0.0;
    //Instruction 40464
    //LOG
    t52 = log2(t49);
    //Instruction 40465
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 40466
    //EXP
    t52 = exp2(t52);
    //Instruction 40467
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 40468
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40469
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40470
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 40471
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 40472
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40473
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 40474
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40475
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 40476
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 40477
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 40478
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40479
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 40480
    //MUL
    t49 = t49 * t51;
    //Instruction 40481
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 40482
    //MOV
    t5.y = t4.y;
    //Instruction 40483
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 40484
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 40485
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 40486
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 40487
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 40488
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 40489
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 40490
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 40491
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40492
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 40493
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 40494
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 40495
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 40496
    //MOV
    t4.y = _World2Object[0].x;
    //Instruction 40497
    //MOV
    t4.z = _World2Object[1].x;
    //Instruction 40498
    //MOV
    t4.x = _World2Object[2].x;
    //Instruction 40499
    //MOV
    t5.y = _World2Object[0].y;
    //Instruction 40500
    //MOV
    t5.z = _World2Object[1].y;
    //Instruction 40501
    //MOV
    t5.x = _World2Object[2].y;
    //Instruction 40502
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 40503
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 40504
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 40505
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 40506
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 40507
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 40508
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 40509
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 40510
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 40511
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 40512
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 40513
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 40514
    //DP3
    t48 = dot(t4.xyz, t4.xyz);
    //Instruction 40515
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 40516
    //MUL
    t4.xyz = vec3(t48) * t4.xyz;
    //Instruction 40517
    //MUL
    t10_15.xyz = t0.xyz * t4.xyz;
    //Instruction 40518
    //MAD
    t10_15.xyz = t0.zxy * t4.yzx + (-t10_15.xyz);
    //Instruction 40519
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 40520
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 40521
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 40522
    //MOV
    vs_TEXCOORD0.z = t0.y;
    //Instruction 40523
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 40524
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 40525
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 40526
    //MOV
    vs_TEXCOORD1.z = t0.z;
    //Instruction 40527
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 40528
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 40529
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 40530
    //MOV
    vs_TEXCOORD2.z = t0.x;
    //Instruction 40531
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 40532
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 40533
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40534
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 40535
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec3 t10_0;
bool tb0;
lowp vec3 t10_1;
void main()
{
    //Instruction 40187
    //SAMPLE
    t10_0.x = texture(_MainTex, vs_TEXCOORD4.xy).w;
    //Instruction 40188
    //MAD
    t10_1.x = t10_0.x * _Color.w + (-_Cutoff);
    //Instruction 40189
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 40190
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 40191
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 40192
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 40193
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 40194
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 40195
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 40196
    //MAD
    SV_Target0.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40197
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40198
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  highp vec4 hPos_50;
  hPos_50 = (glstate_matrix_mvp * tmpvar_8);
  mediump vec3 screenPos_51;
  highp vec4 o_52;
  highp vec4 tmpvar_53;
  tmpvar_53 = (hPos_50 * 0.5);
  highp vec2 tmpvar_54;
  tmpvar_54.x = tmpvar_53.x;
  tmpvar_54.y = (tmpvar_53.y * _ProjectionParams.x);
  o_52.xy = (tmpvar_54 + tmpvar_53.w);
  o_52.zw = hPos_50.zw;
  highp vec3 tmpvar_55;
  tmpvar_55 = o_52.xyw;
  screenPos_51 = tmpvar_55;
  screenPos_51.xy = (screenPos_51.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_56;
  v_56.x = _World2Object[0].x;
  v_56.y = _World2Object[1].x;
  v_56.z = _World2Object[2].x;
  v_56.w = _World2Object[3].x;
  highp vec4 v_57;
  v_57.x = _World2Object[0].y;
  v_57.y = _World2Object[1].y;
  v_57.z = _World2Object[2].y;
  v_57.w = _World2Object[3].y;
  highp vec4 v_58;
  v_58.x = _World2Object[0].z;
  v_58.y = _World2Object[1].z;
  v_58.z = _World2Object[2].z;
  v_58.w = _World2Object[3].z;
  highp vec3 tmpvar_59;
  tmpvar_59 = normalize(((
    (v_56.xyz * _glesNormal.x)
   + 
    (v_57.xyz * _glesNormal.y)
  ) + (v_58.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_59;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_51;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump vec2 projUV_3;
  mediump vec2 tmpvar_4;
  tmpvar_4 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_3.x = tmpvar_4.x;
  projUV_3.y = ((fract(tmpvar_4.y) * 0.0625) + unity_LODFade.y);
  lowp float x_5;
  x_5 = (texture2D (_DitherMaskLOD2D, projUV_3).w - 0.5);
  if ((x_5 < 0.0)) {
    discard;
  };
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 40080
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40081
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 40082
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 40083
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40084
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 40085
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 40086
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 40087
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 40088
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 40089
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 40090
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 40091
    //IF
    if(tb19){
        //Instruction 40092
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 40093
        //IF
        if(tb19){
            //Instruction 40094
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40095
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 40096
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 40097
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 40098
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 40099
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 40100
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40101
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 40102
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40103
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 40104
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40105
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40106
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 40107
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40108
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 40109
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 40110
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 40111
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40112
            //FRC
            t0 = fract(t0);
            //Instruction 40113
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40114
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 40115
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40116
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40117
            //ADD
            t0 = t0 + t0;
            //Instruction 40118
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 40119
            //LT
            tb20 = t4.w<0.0;
            //Instruction 40120
            //MOV
            t4.y = (-t4.w);
            //Instruction 40121
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 40122
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 40123
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 40124
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 40125
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 40126
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 40127
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 40128
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40129
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40130
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 40131
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 40132
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40133
            //MUL
            t20 = t20 * t21;
            //Instruction 40134
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 40135
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40136
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40137
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40138
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40139
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 40140
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 40141
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40142
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 40143
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40144
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 40145
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 40146
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 40147
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 40148
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40149
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 40150
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 40151
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 40152
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40153
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 40154
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 40155
        //ELSE
        } else {
            //Instruction 40156
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40157
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 40158
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40159
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 40160
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 40161
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 40162
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 40163
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40164
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 40165
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 40166
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40167
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40168
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40169
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 40170
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40171
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40172
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 40173
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 40174
            //LT
            tb19 = t0.w<0.0;
            //Instruction 40175
            //MOV
            t0.y = (-t0.w);
            //Instruction 40176
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 40177
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 40178
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 40179
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 40180
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 40181
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 40182
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 40183
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40184
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40185
            //MUL
            t21 = t21 * t4.x;
            //Instruction 40186
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 40187
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 40188
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40189
        //ENDIF
        }
        //Instruction 40190
    //ELSE
    } else {
        //Instruction 40191
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 40192
    //ENDIF
    }
    //Instruction 40193
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 40194
    //SQRT
    t19 = sqrt(t19);
    //Instruction 40195
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40196
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 40197
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 40198
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 40199
    //NE
    tb3 = t20!=0.0;
    //Instruction 40200
    //LOG
    t9 = log2(t20);
    //Instruction 40201
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 40202
    //EXP
    t9 = exp2(t9);
    //Instruction 40203
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 40204
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40205
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40206
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 40207
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 40208
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40209
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 40210
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40211
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 40212
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 40213
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 40214
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40215
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 40216
    //MUL
    t20 = t20 * t3.x;
    //Instruction 40217
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 40218
    //MOV
    t3.y = t2.y;
    //Instruction 40219
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 40220
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 40221
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 40222
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 40223
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 40224
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40225
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 40226
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 40227
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 40228
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 40229
    //MUL
    t19 = t2.y * _ProjectionParams.x;
    //Instruction 40230
    //MUL
    t3.w = t19 * 0.500000;
    //Instruction 40231
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 40232
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 40233
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 40234
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 40235
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 40236
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 40237
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 40238
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 40239
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 40240
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 40241
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 40242
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 40243
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 40244
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 40245
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 40246
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 40247
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 40248
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 40249
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 40250
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 40251
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 40252
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 40253
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 40254
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 40255
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 40256
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 40257
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 40258
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40259
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 40260
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 40261
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 40262
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 40069
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 40070
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 40071
    //MOV
    t1.x = t16_0.x;
    //Instruction 40072
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 40073
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40074
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40075
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40076
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40077
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40078
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40079
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_8;
  highp float tmpvar_9;
  tmpvar_9 = _Object2World[3].x;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].y;
  tmpvar_8 = clamp (((
    fract(((tmpvar_9 + tmpvar_10) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_8;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_15;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_15;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_12 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_9 + tmpvar_10));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_14 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_14;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_9 + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_10 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_14 = vPos_44;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_53;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_4 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_9 * maxBase_3), 0.0, 1.0);
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec2 t7;
bool tb7;
highp vec2 t14;
highp vec2 t18;
highp vec2 t19;
highp float t21;
highp float t22;
bool tb22;
highp float t24;
bool tb24;
highp float t25;
void main()
{
    //Instruction 40024
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40025
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40026
    //ADD
    t7.x = t0.x + _Object2World[3].z;
    //Instruction 40027
    //ADD
    t14.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40028
    //ADD
    t7.y = t14.x + in_NORMAL0.x;
    //Instruction 40029
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 40030
    //MAD
    t7.x = t7.y * 0.500000 + t7.x;
    //Instruction 40031
    //ADD
    t7.x = t7.x + -0.300000;
    //Instruction 40032
    //MUL
    t1.z = t7.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40033
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40034
    //LT
    tb7 = 0.0<t16_2;
    //Instruction 40035
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40036
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40037
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40038
    //DP3
    t14.x = dot(t3.xyz, t3.xyz);
    //Instruction 40039
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40040
    //MUL
    t14.xy = t14.xx * t3.xz;
    //Instruction 40041
    //AND
    t14.xy = mix(vec2(0.0, 0.0), t14.xy, bvec2(tb7));
    //Instruction 40042
    //GE
    tb22 = t16_2>=3.000000;
    //Instruction 40043
    //IF
    if(tb22){
        //Instruction 40044
        //EQ
        tb22 = t16_2==5.000000;
        //Instruction 40045
        //IF
        if(tb22){
            //Instruction 40046
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40047
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 40048
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 40049
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 40050
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 40051
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 40052
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40053
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40054
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40055
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40056
            //ADD
            t22 = t0.x + _ST_WindBranch.x;
            //Instruction 40057
            //ADD
            t2.x = t22 + in_TEXCOORD0.w;
            //Instruction 40058
            //MAD
            t2.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40059
            //MUL
            t24 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40060
            //MUL
            t2.z = t24 * 0.500000;
            //Instruction 40061
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40062
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40063
            //FRC
            t2 = fract(t2);
            //Instruction 40064
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40065
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 40066
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40067
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40068
            //ADD
            t2 = t2 + t2;
            //Instruction 40069
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 40070
            //LT
            tb24 = t5.w<0.0;
            //Instruction 40071
            //MOV
            t5.y = (-t5.w);
            //Instruction 40072
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 40073
            //MOVC
            t5.xy = (bool(tb24)) ? t5.xy : t5.zw;
            //Instruction 40074
            //MAD
            t24 = (-t2.y) * t2.z + t5.x;
            //Instruction 40075
            //MAD
            t24 = t5.y * t24 + t5.w;
            //Instruction 40076
            //ADD
            t25 = (-t24) + t5.x;
            //Instruction 40077
            //MAD
            t24 = t5.y * t25 + t24;
            //Instruction 40078
            //MUL
            t24 = t24 * _ST_WindBranchTwitch.x;
            //Instruction 40079
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40080
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40081
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 40082
            //MAD
            t24 = t24 * t25 + t5.x;
            //Instruction 40083
            //MAD
            t25 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40084
            //MUL
            t24 = t24 * t25;
            //Instruction 40085
            //MUL
            t4.xyz = vec3(t24) * t4.xyz;
            //Instruction 40086
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40087
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40088
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40089
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40090
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 40091
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 40092
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40093
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 40094
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40095
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 40096
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 40097
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 40098
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 40099
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40100
            //MUL
            t24 = t2.w * _ST_WindVector.w;
            //Instruction 40101
            //MAD
            t22 = t24 * _ST_WindBranchWhip.x + t22;
            //Instruction 40102
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 40103
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40104
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 40105
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 40106
        //ELSE
        } else {
            //Instruction 40107
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40108
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40109
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40110
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40111
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40112
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40113
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40114
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40115
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40116
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40117
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40118
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40119
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40120
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40121
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40122
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40123
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40124
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40125
            //MOV
            t2.y = (-t2.w);
            //Instruction 40126
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40127
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40128
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40129
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40130
            //ADD
            t22 = (-t0.x) + t6.x;
            //Instruction 40131
            //MAD
            t0.x = t6.y * t22 + t0.x;
            //Instruction 40132
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40133
            //ADD
            t22 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40134
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40135
            //MUL
            t24 = t24 * t5.x;
            //Instruction 40136
            //MAD
            t0.x = t0.x * t22 + t24;
            //Instruction 40137
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40138
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40139
        //ENDIF
        }
        //Instruction 40140
    //ELSE
    } else {
        //Instruction 40141
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 40142
    //ENDIF
    }
    //Instruction 40143
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40144
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40145
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40146
    //MAD
    t22 = (-t22) * 0.250000 + t3.y;
    //Instruction 40147
    //MAX
    t22 = max(t22, 0.0);
    //Instruction 40148
    //MUL
    t22 = t22 * _ST_WindGlobal.z;
    //Instruction 40149
    //NE
    tb24 = t22!=0.0;
    //Instruction 40150
    //LOG
    t4.x = log2(t22);
    //Instruction 40151
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40152
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 40153
    //MOVC
    t22 = (tb24) ? t4.x : t22;
    //Instruction 40154
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 40155
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 40156
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 40157
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 40158
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 40159
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 40160
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 40161
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 40162
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 40163
    //MAD
    t24 = t4.y * t4.y + t4.x;
    //Instruction 40164
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 40165
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t4.x;
    //Instruction 40166
    //MUL
    t22 = t22 * t24;
    //Instruction 40167
    //MAD
    t4.xz = t14.xy * vec2(t22) + t3.xz;
    //Instruction 40168
    //MOV
    t4.y = t3.y;
    //Instruction 40169
    //DP3
    t14.x = dot(t4.xyz, t4.xyz);
    //Instruction 40170
    //RSQ
    t14.x = inversesqrt(t14.x);
    //Instruction 40171
    //MUL
    t4.xyz = t14.xxx * t4.xyz;
    //Instruction 40172
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 40173
    //MOVC
    t0.xyz = (bool(tb7)) ? t0.xzw : t3.xyz;
    //Instruction 40174
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 40175
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 40176
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 40177
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 40178
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 40179
    //MUL
    t21 = t3.y * _ProjectionParams.x;
    //Instruction 40180
    //MUL
    t4.w = t21 * 0.500000;
    //Instruction 40181
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 40182
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 40183
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 40184
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 40185
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 40186
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 40187
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 40188
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 40189
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 40190
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 40191
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 40192
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 40193
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 40194
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 40195
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 40196
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 40197
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 40198
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 40199
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 40200
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 40201
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 40202
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 40203
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 40204
    //DP3
    t21 = dot(t0.xyz, t0.xyz);
    //Instruction 40205
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 40206
    //MUL
    t0.xyz = vec3(t21) * t0.xyz;
    //Instruction 40207
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 40208
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 40209
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 40210
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 40211
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 40212
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
in mediump vec3 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
mediump float t16_2;
void main()
{
    //Instruction 40013
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 40014
    //FRC
    t16_2 = fract(t16_0.y);
    //Instruction 40015
    //MOV
    t1.x = t16_0.x;
    //Instruction 40016
    //MAD
    t1.y = t16_2 * 0.062500 + unity_LODFade.y;
    //Instruction 40017
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 40018
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 40019
    //LT
    tb1 = t16_1<0.0;
    //Instruction 40020
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 40021
    //MAD
    SV_Target0.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 40022
    //MOV
    SV_Target0.w = _Shininess;
    //Instruction 40023
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_63;
  highp mat3 tmpvar_64;
  tmpvar_64[0] = _Object2World[0].xyz;
  tmpvar_64[1] = _Object2World[1].xyz;
  tmpvar_64[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize((tmpvar_64 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_65;
  lowp vec3 tmpvar_66;
  tmpvar_66 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_67;
  tmpvar_67 = (tmpvar_66 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_67;
  highp vec4 tmpvar_68;
  tmpvar_68.x = worldTangent_4.x;
  tmpvar_68.y = worldBinormal_3.x;
  tmpvar_68.z = worldNormal_5.x;
  tmpvar_68.w = tmpvar_59.x;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.y;
  tmpvar_69.y = worldBinormal_3.y;
  tmpvar_69.z = worldNormal_5.y;
  tmpvar_69.w = tmpvar_59.y;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.z;
  tmpvar_70.y = worldBinormal_3.z;
  tmpvar_70.z = worldNormal_5.z;
  tmpvar_70.w = tmpvar_59.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_68;
  xlv_TEXCOORD1 = tmpvar_69;
  xlv_TEXCOORD2 = tmpvar_70;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_54;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform mediump float _Shininess;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 worldN_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_4 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_9 * maxBase_3), 0.0, 1.0);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_2.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_2.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_2.z = tmpvar_13;
  res_1.xyz = ((worldN_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
void main()
{
    //Instruction 40229
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 40230
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 40231
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 40232
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 40233
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 40234
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 40235
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 40236
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 40237
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 40238
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 40239
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 40240
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 40241
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 40242
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 40243
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 40244
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 40245
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 40246
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 40247
    //GE
    tb25 = t16_2>=3.000000;
    //Instruction 40248
    //IF
    if(tb25){
        //Instruction 40249
        //EQ
        tb25 = t16_2==5.000000;
        //Instruction 40250
        //IF
        if(tb25){
            //Instruction 40251
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 40252
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 40253
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 40254
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 40255
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 40256
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 40257
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40258
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40259
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40260
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40261
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 40262
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 40263
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40264
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 40265
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 40266
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 40267
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 40268
            //FRC
            t2 = fract(t2);
            //Instruction 40269
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 40270
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 40271
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 40272
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 40273
            //ADD
            t2 = t2 + t2;
            //Instruction 40274
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 40275
            //LT
            tb27 = t5.w<0.0;
            //Instruction 40276
            //MOV
            t5.y = (-t5.w);
            //Instruction 40277
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 40278
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 40279
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 40280
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 40281
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 40282
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 40283
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 40284
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40285
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40286
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 40287
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 40288
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 40289
            //MUL
            t27 = t27 * t28;
            //Instruction 40290
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 40291
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40292
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40293
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 40294
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 40295
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 40296
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 40297
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 40298
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 40299
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 40300
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 40301
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 40302
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 40303
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 40304
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 40305
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 40306
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 40307
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 40308
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 40309
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 40310
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 40311
        //ELSE
        } else {
            //Instruction 40312
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 40313
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 40314
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40315
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 40316
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 40317
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 40318
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 40319
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 40320
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 40321
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 40322
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 40323
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 40324
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 40325
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 40326
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 40327
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 40328
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 40329
            //LT
            tb0 = t2.w<0.0;
            //Instruction 40330
            //MOV
            t2.y = (-t2.w);
            //Instruction 40331
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 40332
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 40333
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 40334
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 40335
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 40336
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 40337
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 40338
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 40339
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 40340
            //MUL
            t27 = t27 * t5.x;
            //Instruction 40341
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 40342
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 40343
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 40344
        //ENDIF
        }
        //Instruction 40345
    //ELSE
    } else {
        //Instruction 40346
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 40347
    //ENDIF
    }
    //Instruction 40348
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 40349
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 40350
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 40351
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 40352
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 40353
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 40354
    //NE
    tb27 = t25!=0.0;
    //Instruction 40355
    //LOG
    t4.x = log2(t25);
    //Instruction 40356
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 40357
    //EXP
    t4.x = exp2(t4.x);
    //Inst