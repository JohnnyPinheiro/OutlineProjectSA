 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36878
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 36879
    //MUL
    t25 = t25 * t27;
    //Instruction 36880
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 36881
    //MOV
    t4.y = t3.y;
    //Instruction 36882
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 36883
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36884
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 36885
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36886
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 36887
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36888
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36889
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36890
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36891
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36892
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 36893
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 36894
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36895
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36896
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36897
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36898
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36899
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36900
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36901
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36902
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36903
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36904
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36905
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 36906
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 36907
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 36908
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 36909
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 36910
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 36911
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36912
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36913
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 36914
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 36915
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 36916
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36917
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 36918
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36919
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 36920
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 36921
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 36922
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 36923
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 36924
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36925
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 36926
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 36927
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 36928
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 36929
    //MOV
    t6.x = t4.z;
    //Instruction 36930
    //MOV
    t6.y = t5.x;
    //Instruction 36931
    //MOV
    t6.z = t0.x;
    //Instruction 36932
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 36933
    //MOV
    t6.x = t4.x;
    //Instruction 36934
    //MOV
    t6.y = t5.y;
    //Instruction 36935
    //MOV
    t6.z = t0.y;
    //Instruction 36936
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 36937
    //MOV
    t0.x = t4.y;
    //Instruction 36938
    //MOV
    t0.y = t5.z;
    //Instruction 36939
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 36940
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 36941
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36942
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 36943
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 36944
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 36678
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 36679
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 36680
    //MOV
    t1.x = t16_0.x;
    //Instruction 36681
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 36682
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36683
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36684
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36685
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36686
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 36687
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36688
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 36689
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36690
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36691
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36692
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36693
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 36694
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 36695
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 36696
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36697
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36698
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36699
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 36700
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 36701
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 36702
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 36703
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 36704
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 36705
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 36706
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 36707
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 36708
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 36709
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36710
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36711
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 36712
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 36713
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 36714
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 36715
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 36716
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 36717
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 36718
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 36719
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 36720
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 36721
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 36722
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36723
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36724
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_68;
  highp mat3 tmpvar_69;
  tmpvar_69[0] = _Object2World[0].xyz;
  tmpvar_69[1] = _Object2World[1].xyz;
  tmpvar_69[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_70;
  tmpvar_70 = normalize((tmpvar_69 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_70;
  lowp vec3 tmpvar_71;
  tmpvar_71 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_72;
  tmpvar_72 = (tmpvar_71 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_72;
  lowp vec3 tmpvar_73;
  tmpvar_73.x = worldTangent_5.x;
  tmpvar_73.y = worldBinormal_4.x;
  tmpvar_73.z = worldNormal_6.x;
  lowp vec3 tmpvar_74;
  tmpvar_74.x = worldTangent_5.y;
  tmpvar_74.y = worldBinormal_4.y;
  tmpvar_74.z = worldNormal_6.y;
  lowp vec3 tmpvar_75;
  tmpvar_75.x = worldTangent_5.z;
  tmpvar_75.y = worldBinormal_4.z;
  tmpvar_75.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_73;
  xlv_TEXCOORD1 = tmpvar_74;
  xlv_TEXCOORD2 = tmpvar_75;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_60;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, tmpvar_20).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
lowp vec3 t10_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
void main()
{
    //Instruction 36256
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36257
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36258
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 36259
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36260
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 36261
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 36262
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 36263
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 36264
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36265
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36266
    //LT
    tb8 = 0.0<t16_2;
    //Instruction 36267
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36268
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36269
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36270
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36271
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36272
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 36273
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 36274
    //EQ
    tb25 = t16_2==5.000000;
    //Instruction 36275
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 36276
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 36277
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 36278
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 36279
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 36280
    //FRC
    t3.x = fract(t3.x);
    //Instruction 36281
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 36282
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 36283
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 36284
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 36285
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 36286
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 36287
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 36288
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 36289
    //GE
    tb27 = t16_2>=3.000000;
    //Instruction 36290
    //IF
    if(tb27){
        //Instruction 36291
        //IF
        if(tb25){
            //Instruction 36292
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36293
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36294
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36295
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 36296
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 36297
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36298
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36299
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36300
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36301
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36302
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 36303
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 36304
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36305
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 36306
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 36307
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 36308
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36309
            //FRC
            t2 = fract(t2);
            //Instruction 36310
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36311
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 36312
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36313
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36314
            //ADD
            t2 = t2 + t2;
            //Instruction 36315
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 36316
            //LT
            tb27 = t6.w<0.0;
            //Instruction 36317
            //MOV
            t6.y = (-t6.w);
            //Instruction 36318
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36319
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 36320
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 36321
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 36322
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 36323
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 36324
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 36325
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36326
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36327
            //MUL
            t29 = t2.x * t29;
            //Instruction 36328
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 36329
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36330
            //MUL
            t27 = t27 * t28;
            //Instruction 36331
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 36332
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36333
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36334
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36335
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36336
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36337
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36338
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36339
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36340
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36341
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36342
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36343
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 36344
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 36345
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36346
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 36347
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 36348
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36349
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36350
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 36351
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36352
        //ELSE
        } else {
            //Instruction 36353
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36354
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36355
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36356
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36357
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 36358
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 36359
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36360
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36361
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 36362
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36363
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36364
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36365
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36366
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36367
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36368
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36369
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 36370
            //LT
            tb0 = t2.w<0.0;
            //Instruction 36371
            //MOV
            t2.y = (-t2.w);
            //Instruction 36372
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 36373
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 36374
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 36375
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 36376
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 36377
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 36378
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 36379
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36380
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36381
            //MUL
            t27 = t27 * t5.x;
            //Instruction 36382
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 36383
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 36384
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36385
        //ENDIF
        }
        //Instruction 36386
    //ENDIF
    }
    //Instruction 36387
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 36388
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 36389
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36390
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 36391
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 36392
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 36393
    //NE
    tb27 = t25!=0.0;
    //Instruction 36394
    //LOG
    t4.x = log2(t25);
    //Instruction 36395
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36396
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36397
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 36398
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36399
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36400
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36401
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36402
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36403
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36404
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36405
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36406
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36407
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 36408
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36409
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 36410
    //MUL
    t25 = t25 * t27;
    //Instruction 36411
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 36412
    //MOV
    t4.y = t3.y;
    //Instruction 36413
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 36414
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 36415
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 36416
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 36417
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 36418
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36419
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 36420
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 36421
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36422
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36423
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 36424
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 36425
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36426
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36427
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36428
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 36429
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 36430
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 36431
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 36432
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 36433
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 36434
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 36435
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 36436
    //MOV
    t0.y = _World2Object[0].x;
    //Instruction 36437
    //MOV
    t0.z = _World2Object[1].x;
    //Instruction 36438
    //MOV
    t0.x = _World2Object[2].x;
    //Instruction 36439
    //MOV
    t4.y = _World2Object[0].y;
    //Instruction 36440
    //MOV
    t4.z = _World2Object[1].y;
    //Instruction 36441
    //MOV
    t4.x = _World2Object[2].y;
    //Instruction 36442
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 36443
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 36444
    //MOV
    t4.y = _World2Object[0].z;
    //Instruction 36445
    //MOV
    t4.z = _World2Object[1].z;
    //Instruction 36446
    //MOV
    t4.x = _World2Object[2].z;
    //Instruction 36447
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 36448
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 36449
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36450
    //MUL
    t0.xyz = vec3(t24) * t0.yzx;
    //Instruction 36451
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 36452
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 36453
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 36454
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 36455
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 36456
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 36457
    //MUL
    t10_7.xyz = t0.zxy * t4.xyz;
    //Instruction 36458
    //MAD
    t10_7.xyz = t0.yzx * t4.yzx + (-t10_7.xyz);
    //Instruction 36459
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 36460
    //MOV
    t6.x = t4.z;
    //Instruction 36461
    //MOV
    t6.y = t5.x;
    //Instruction 36462
    //MOV
    t6.z = t0.x;
    //Instruction 36463
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 36464
    //MOV
    t6.x = t4.x;
    //Instruction 36465
    //MOV
    t6.y = t5.y;
    //Instruction 36466
    //MOV
    t6.z = t0.y;
    //Instruction 36467
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 36468
    //MOV
    t0.x = t4.y;
    //Instruction 36469
    //MOV
    t0.y = t5.z;
    //Instruction 36470
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 36471
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 36472
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 36473
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 36474
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 36475
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 36216
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 36217
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 36218
    //MOV
    t1.x = t16_0.x;
    //Instruction 36219
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 36220
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36221
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 36222
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36223
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36224
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 36225
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36226
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 36227
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36228
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36229
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36230
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36231
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 36232
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 36233
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 36234
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36235
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36236
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36237
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 36238
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 36239
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 36240
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 36241
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 36242
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 36243
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 36244
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36245
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 36246
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 36247
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 36248
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 36249
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 36250
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 36251
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 36252
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 36253
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36254
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36255
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 36296
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36297
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 36298
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 36299
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36300
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 36301
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 36302
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 36303
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 36304
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 36305
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 36306
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 36307
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 36308
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 36309
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 36310
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 36311
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 36312
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 36313
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 36314
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 36315
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 36316
        //FRC
        t15.x = fract(t15.x);
        //Instruction 36317
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 36318
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 36319
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 36320
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 36321
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 36322
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 36323
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 36324
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 36325
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 36326
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 36327
        //IF
        if(tb29){
            //Instruction 36328
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 36329
            //FRC
            t4 = fract(t4);
            //Instruction 36330
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36331
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 36332
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 36333
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 36334
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 36335
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 36336
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36337
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36338
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36339
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36340
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36341
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36342
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36343
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 36344
            //SQRT
            t44 = sqrt(t44);
            //Instruction 36345
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 36346
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 36347
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36348
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 36349
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 36350
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 36351
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 36352
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 36353
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 36354
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 36355
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 36356
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 36357
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 36358
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 36359
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 36360
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 36361
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 36362
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 36363
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 36364
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 36365
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 36366
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 36367
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 36368
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 36369
            //SQRT
            t45 = sqrt(t45);
            //Instruction 36370
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 36371
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 36372
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 36373
            //MUL
            t33 = t45 * t5.x;
            //Instruction 36374
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 36375
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 36376
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 36377
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 36378
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 36379
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 36380
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 36381
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36382
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 36383
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36384
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 36385
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36386
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 36387
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 36388
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 36389
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 36390
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 36391
            //LOG
            t43 = log2(t43);
            //Instruction 36392
            //MUL
            t29 = t43 * t15.y;
            //Instruction 36393
            //EXP
            t29 = exp2(t29);
            //Instruction 36394
            //MUL
            t43 = t5.y * t45;
            //Instruction 36395
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 36396
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 36397
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 36398
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 36399
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 36400
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 36401
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 36402
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 36403
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 36404
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 36405
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 36406
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 36407
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 36408
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 36409
            //MOV
            t10.z = t11.x;
            //Instruction 36410
            //MOV
            t10.w = t9.x;
            //Instruction 36411
            //MOV
            t12.z = t8.y;
            //Instruction 36412
            //MOV
            t12.w = t13.y;
            //Instruction 36413
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 36414
            //MOV
            t13.w = t12.y;
            //Instruction 36415
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 36416
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 36417
            //MOV
            t9.w = t10.y;
            //Instruction 36418
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 36419
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 36420
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 36421
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 36422
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 36423
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 36424
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 36425
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 36426
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 36427
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 36428
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 36429
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 36430
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36431
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36432
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36433
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 36434
        //ELSE
        } else {
            //Instruction 36435
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 36436
        //ENDIF
        }
        //Instruction 36437
    //ELSE
    } else {
        //Instruction 36438
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 36439
    //ENDIF
    }
    //Instruction 36440
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 36441
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 36442
    //IF
    if(tb16){
        //Instruction 36443
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 36444
        //IF
        if(tb16){
            //Instruction 36445
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36446
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36447
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36448
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36449
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36450
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36451
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36452
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36453
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36454
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36455
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36456
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36457
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36458
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36459
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 36460
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 36461
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 36462
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36463
            //FRC
            t0 = fract(t0);
            //Instruction 36464
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36465
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 36466
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36467
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36468
            //ADD
            t0 = t0 + t0;
            //Instruction 36469
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 36470
            //LT
            tb44 = t6.w<0.0;
            //Instruction 36471
            //MOV
            t6.y = (-t6.w);
            //Instruction 36472
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36473
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 36474
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 36475
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 36476
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 36477
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 36478
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 36479
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36480
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36481
            //MUL
            t46 = t0.x * t46;
            //Instruction 36482
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 36483
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36484
            //MUL
            t44 = t44 * t45;
            //Instruction 36485
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 36486
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36487
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36488
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36489
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36490
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36491
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 36492
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36493
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 36494
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36495
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 36496
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 36497
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 36498
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 36499
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36500
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 36501
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 36502
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36503
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36504
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36505
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36506
        //ELSE
        } else {
            //Instruction 36507
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36508
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36509
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36510
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36511
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36512
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36513
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36514
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36515
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36516
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 36517
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36518
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36519
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36520
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36521
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36522
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36523
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36524
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 36525
            //LT
            tb16 = t0.w<0.0;
            //Instruction 36526
            //MOV
            t0.y = (-t0.w);
            //Instruction 36527
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 36528
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 36529
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 36530
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 36531
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 36532
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 36533
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 36534
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36535
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36536
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36537
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 36538
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36539
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36540
        //ENDIF
        }
        //Instruction 36541
    //ENDIF
    }
    //Instruction 36542
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36543
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 36544
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36545
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 36546
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 36547
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 36548
    //NE
    tb45 = t44!=0.0;
    //Instruction 36549
    //LOG
    t4.x = log2(t44);
    //Instruction 36550
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36551
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36552
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 36553
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36554
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36555
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36556
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36557
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36558
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36559
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36560
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36561
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36562
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 36563
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36564
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 36565
    //MUL
    t44 = t44 * t45;
    //Instruction 36566
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 36567
    //MOV
    t4.y = t3.y;
    //Instruction 36568
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 36569
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 36570
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 36571
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 36572
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 36573
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36574
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 36575
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 36576
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36577
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36578
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 36579
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 36580
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36581
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36582
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36583
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 36584
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 36585
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 36586
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 36587
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 36588
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 36589
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 36590
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 36591
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 36592
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 36593
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 36594
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 36595
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 36596
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 36597
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 36598
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 36599
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 36600
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 36601
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 36602
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 36603
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 36604
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 36605
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 36606
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 36607
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 36608
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 36609
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 36610
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 36611
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 36265
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36266
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36267
    //MOV
    t1.x = t16_0.x;
    //Instruction 36268
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36269
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36270
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36271
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36272
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36273
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36274
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36275
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36276
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36277
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36278
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 36279
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 36280
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 36281
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 36282
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 36283
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 36284
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 36285
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36286
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36287
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 36288
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 36289
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 36290
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 36291
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36292
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36293
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36294
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36295
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 36965
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36966
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 36967
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 36968
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36969
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 36970
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 36971
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 36972
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 36973
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 36974
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 36975
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 36976
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 36977
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 36978
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 36979
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 36980
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 36981
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 36982
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 36983
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 36984
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 36985
        //FRC
        t15.x = fract(t15.x);
        //Instruction 36986
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 36987
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 36988
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 36989
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 36990
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 36991
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 36992
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 36993
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 36994
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 36995
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 36996
        //IF
        if(tb29){
            //Instruction 36997
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 36998
            //FRC
            t4 = fract(t4);
            //Instruction 36999
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37000
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37001
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37002
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 37003
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 37004
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 37005
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37006
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 37007
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37008
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 37009
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37010
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 37011
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 37012
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 37013
            //SQRT
            t44 = sqrt(t44);
            //Instruction 37014
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 37015
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 37016
            //MUL
            t45 = t45 * t5.x;
            //Instruction 37017
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 37018
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 37019
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 37020
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 37021
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 37022
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 37023
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 37024
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 37025
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 37026
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 37027
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 37028
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 37029
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 37030
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 37031
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 37032
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 37033
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 37034
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 37035
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 37036
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 37037
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 37038
            //SQRT
            t45 = sqrt(t45);
            //Instruction 37039
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 37040
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 37041
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 37042
            //MUL
            t33 = t45 * t5.x;
            //Instruction 37043
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 37044
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 37045
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 37046
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 37047
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 37048
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 37049
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 37050
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37051
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 37052
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37053
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 37054
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37055
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 37056
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 37057
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 37058
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 37059
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 37060
            //LOG
            t43 = log2(t43);
            //Instruction 37061
            //MUL
            t29 = t43 * t15.y;
            //Instruction 37062
            //EXP
            t29 = exp2(t29);
            //Instruction 37063
            //MUL
            t43 = t5.y * t45;
            //Instruction 37064
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 37065
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 37066
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 37067
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 37068
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 37069
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 37070
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 37071
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 37072
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 37073
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 37074
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 37075
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 37076
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 37077
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 37078
            //MOV
            t10.z = t11.x;
            //Instruction 37079
            //MOV
            t10.w = t9.x;
            //Instruction 37080
            //MOV
            t12.z = t8.y;
            //Instruction 37081
            //MOV
            t12.w = t13.y;
            //Instruction 37082
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 37083
            //MOV
            t13.w = t12.y;
            //Instruction 37084
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 37085
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 37086
            //MOV
            t9.w = t10.y;
            //Instruction 37087
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 37088
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 37089
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 37090
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 37091
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 37092
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 37093
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 37094
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37095
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37096
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 37097
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 37098
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 37099
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 37100
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 37101
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37102
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 37103
        //ELSE
        } else {
            //Instruction 37104
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 37105
        //ENDIF
        }
        //Instruction 37106
    //ELSE
    } else {
        //Instruction 37107
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 37108
    //ENDIF
    }
    //Instruction 37109
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 37110
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 37111
    //IF
    if(tb16){
        //Instruction 37112
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 37113
        //IF
        if(tb16){
            //Instruction 37114
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37115
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 37116
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 37117
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 37118
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 37119
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37120
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37121
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37122
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37123
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37124
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 37125
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 37126
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 37127
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37128
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 37129
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 37130
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 37131
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37132
            //FRC
            t0 = fract(t0);
            //Instruction 37133
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37134
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 37135
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37136
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37137
            //ADD
            t0 = t0 + t0;
            //Instruction 37138
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 37139
            //LT
            tb44 = t6.w<0.0;
            //Instruction 37140
            //MOV
            t6.y = (-t6.w);
            //Instruction 37141
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 37142
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 37143
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 37144
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 37145
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 37146
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 37147
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 37148
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37149
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37150
            //MUL
            t46 = t0.x * t46;
            //Instruction 37151
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 37152
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37153
            //MUL
            t44 = t44 * t45;
            //Instruction 37154
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 37155
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 37156
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37157
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37158
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37159
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37160
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 37161
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37162
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 37163
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37164
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 37165
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 37166
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 37167
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 37168
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37169
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 37170
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 37171
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 37172
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37173
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37174
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 37175
        //ELSE
        } else {
            //Instruction 37176
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37177
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 37178
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37179
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 37180
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 37181
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 37182
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 37183
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37184
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 37185
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 37186
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37187
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37188
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37189
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 37190
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37191
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37192
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 37193
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 37194
            //LT
            tb16 = t0.w<0.0;
            //Instruction 37195
            //MOV
            t0.y = (-t0.w);
            //Instruction 37196
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 37197
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 37198
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 37199
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 37200
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 37201
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 37202
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 37203
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37204
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37205
            //MUL
            t45 = t45 * t5.x;
            //Instruction 37206
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 37207
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37208
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 37209
        //ENDIF
        }
        //Instruction 37210
    //ENDIF
    }
    //Instruction 37211
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 37212
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 37213
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37214
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 37215
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 37216
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 37217
    //NE
    tb45 = t44!=0.0;
    //Instruction 37218
    //LOG
    t4.x = log2(t44);
    //Instruction 37219
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 37220
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 37221
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 37222
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37223
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37224
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 37225
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 37226
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37227
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 37228
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37229
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 37230
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 37231
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 37232
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37233
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 37234
    //MUL
    t44 = t44 * t45;
    //Instruction 37235
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 37236
    //MOV
    t4.y = t3.y;
    //Instruction 37237
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 37238
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 37239
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 37240
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 37241
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 37242
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 37243
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 37244
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 37245
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 37246
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 37247
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 37248
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 37249
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 37250
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 37251
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 37252
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 37253
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 37254
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 37255
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 37256
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 37257
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 37258
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 37259
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 37260
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 37261
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 37262
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 37263
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 37264
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 37265
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 37266
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 37267
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 37268
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 37269
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 37270
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 37271
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 37272
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 37273
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 37274
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 37275
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 37276
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37277
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 37278
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 37279
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 37280
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_15;
void main()
{
    //Instruction 36945
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36946
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 36947
    //MOV
    t1.x = t16_0.x;
    //Instruction 36948
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 36949
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36950
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36951
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36952
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36953
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36954
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36955
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36956
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 36957
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36958
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36959
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 36960
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 36961
    //MUL
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    //Instruction 36962
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36963
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36964
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 36514
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36515
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 36516
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 36517
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36518
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 36519
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 36520
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 36521
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 36522
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 36523
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 36524
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 36525
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 36526
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 36527
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 36528
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 36529
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 36530
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 36531
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 36532
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 36533
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 36534
        //FRC
        t15.x = fract(t15.x);
        //Instruction 36535
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 36536
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 36537
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 36538
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 36539
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 36540
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 36541
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 36542
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 36543
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 36544
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 36545
        //IF
        if(tb29){
            //Instruction 36546
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 36547
            //FRC
            t4 = fract(t4);
            //Instruction 36548
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36549
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 36550
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 36551
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 36552
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 36553
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 36554
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36555
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36556
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36557
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36558
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36559
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36560
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36561
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 36562
            //SQRT
            t44 = sqrt(t44);
            //Instruction 36563
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 36564
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 36565
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36566
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 36567
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 36568
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 36569
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 36570
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 36571
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 36572
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 36573
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 36574
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 36575
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 36576
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 36577
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 36578
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 36579
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 36580
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 36581
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 36582
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 36583
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 36584
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 36585
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 36586
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 36587
            //SQRT
            t45 = sqrt(t45);
            //Instruction 36588
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 36589
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 36590
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 36591
            //MUL
            t33 = t45 * t5.x;
            //Instruction 36592
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 36593
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 36594
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 36595
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 36596
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 36597
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 36598
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 36599
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36600
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 36601
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36602
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 36603
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36604
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 36605
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 36606
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 36607
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 36608
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 36609
            //LOG
            t43 = log2(t43);
            //Instruction 36610
            //MUL
            t29 = t43 * t15.y;
            //Instruction 36611
            //EXP
            t29 = exp2(t29);
            //Instruction 36612
            //MUL
            t43 = t5.y * t45;
            //Instruction 36613
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 36614
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 36615
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 36616
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 36617
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 36618
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 36619
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 36620
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 36621
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 36622
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 36623
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 36624
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 36625
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 36626
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 36627
            //MOV
            t10.z = t11.x;
            //Instruction 36628
            //MOV
            t10.w = t9.x;
            //Instruction 36629
            //MOV
            t12.z = t8.y;
            //Instruction 36630
            //MOV
            t12.w = t13.y;
            //Instruction 36631
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 36632
            //MOV
            t13.w = t12.y;
            //Instruction 36633
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 36634
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 36635
            //MOV
            t9.w = t10.y;
            //Instruction 36636
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 36637
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 36638
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 36639
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 36640
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 36641
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 36642
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 36643
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 36644
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 36645
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 36646
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 36647
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 36648
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36649
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36650
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36651
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 36652
        //ELSE
        } else {
            //Instruction 36653
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 36654
        //ENDIF
        }
        //Instruction 36655
    //ELSE
    } else {
        //Instruction 36656
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 36657
    //ENDIF
    }
    //Instruction 36658
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 36659
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 36660
    //IF
    if(tb16){
        //Instruction 36661
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 36662
        //IF
        if(tb16){
            //Instruction 36663
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36664
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36665
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36666
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36667
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36668
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36669
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36670
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36671
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36672
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36673
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36674
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36675
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36676
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36677
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 36678
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 36679
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 36680
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36681
            //FRC
            t0 = fract(t0);
            //Instruction 36682
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36683
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 36684
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36685
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36686
            //ADD
            t0 = t0 + t0;
            //Instruction 36687
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 36688
            //LT
            tb44 = t6.w<0.0;
            //Instruction 36689
            //MOV
            t6.y = (-t6.w);
            //Instruction 36690
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36691
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 36692
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 36693
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 36694
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 36695
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 36696
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 36697
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36698
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36699
            //MUL
            t46 = t0.x * t46;
            //Instruction 36700
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 36701
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36702
            //MUL
            t44 = t44 * t45;
            //Instruction 36703
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 36704
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36705
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36706
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36707
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36708
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36709
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 36710
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36711
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 36712
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36713
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 36714
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 36715
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 36716
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 36717
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36718
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 36719
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 36720
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36721
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36722
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36723
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36724
        //ELSE
        } else {
            //Instruction 36725
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36726
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36727
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36728
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36729
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36730
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36731
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36732
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36733
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36734
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 36735
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36736
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36737
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36738
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36739
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36740
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36741
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36742
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 36743
            //LT
            tb16 = t0.w<0.0;
            //Instruction 36744
            //MOV
            t0.y = (-t0.w);
            //Instruction 36745
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 36746
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 36747
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 36748
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 36749
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 36750
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 36751
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 36752
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36753
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36754
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36755
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 36756
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36757
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36758
        //ENDIF
        }
        //Instruction 36759
    //ENDIF
    }
    //Instruction 36760
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36761
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 36762
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36763
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 36764
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 36765
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 36766
    //NE
    tb45 = t44!=0.0;
    //Instruction 36767
    //LOG
    t4.x = log2(t44);
    //Instruction 36768
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36769
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36770
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 36771
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36772
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36773
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36774
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36775
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36776
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36777
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36778
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36779
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36780
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 36781
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36782
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 36783
    //MUL
    t44 = t44 * t45;
    //Instruction 36784
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 36785
    //MOV
    t4.y = t3.y;
    //Instruction 36786
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 36787
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 36788
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 36789
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 36790
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 36791
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36792
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 36793
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 36794
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36795
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36796
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 36797
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 36798
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36799
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36800
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36801
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 36802
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 36803
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 36804
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 36805
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 36806
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 36807
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 36808
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 36809
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 36810
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 36811
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 36812
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 36813
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 36814
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 36815
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 36816
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 36817
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 36818
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 36819
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 36820
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 36821
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 36822
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 36823
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 36824
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 36825
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 36826
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 36827
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 36828
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 36829
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 36476
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36477
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36478
    //MOV
    t1.x = t16_0.x;
    //Instruction 36479
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36480
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36481
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36482
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36483
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36484
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36485
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36486
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36487
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36488
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36489
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 36490
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 36491
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 36492
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 36493
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 36494
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 36495
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 36496
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 36497
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 36498
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 36499
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 36500
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 36501
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 36502
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 36503
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36504
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36505
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 36506
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 36507
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 36508
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 36509
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36510
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36511
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36512
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36513
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 36645
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36646
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 36647
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 36648
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36649
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 36650
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 36651
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 36652
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 36653
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 36654
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 36655
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 36656
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 36657
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 36658
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 36659
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 36660
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 36661
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 36662
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 36663
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 36664
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 36665
        //FRC
        t15.x = fract(t15.x);
        //Instruction 36666
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 36667
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 36668
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 36669
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 36670
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 36671
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 36672
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 36673
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 36674
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 36675
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 36676
        //IF
        if(tb29){
            //Instruction 36677
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 36678
            //FRC
            t4 = fract(t4);
            //Instruction 36679
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36680
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 36681
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 36682
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 36683
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 36684
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 36685
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36686
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 36687
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36688
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 36689
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36690
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 36691
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 36692
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 36693
            //SQRT
            t44 = sqrt(t44);
            //Instruction 36694
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 36695
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 36696
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36697
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 36698
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 36699
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 36700
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 36701
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 36702
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 36703
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 36704
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 36705
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 36706
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 36707
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 36708
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 36709
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 36710
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 36711
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 36712
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 36713
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 36714
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 36715
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 36716
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 36717
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 36718
            //SQRT
            t45 = sqrt(t45);
            //Instruction 36719
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 36720
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 36721
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 36722
            //MUL
            t33 = t45 * t5.x;
            //Instruction 36723
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 36724
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 36725
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 36726
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 36727
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 36728
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 36729
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 36730
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36731
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 36732
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36733
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 36734
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36735
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 36736
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 36737
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 36738
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 36739
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 36740
            //LOG
            t43 = log2(t43);
            //Instruction 36741
            //MUL
            t29 = t43 * t15.y;
            //Instruction 36742
            //EXP
            t29 = exp2(t29);
            //Instruction 36743
            //MUL
            t43 = t5.y * t45;
            //Instruction 36744
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 36745
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 36746
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 36747
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 36748
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 36749
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 36750
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 36751
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 36752
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 36753
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 36754
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 36755
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 36756
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 36757
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 36758
            //MOV
            t10.z = t11.x;
            //Instruction 36759
            //MOV
            t10.w = t9.x;
            //Instruction 36760
            //MOV
            t12.z = t8.y;
            //Instruction 36761
            //MOV
            t12.w = t13.y;
            //Instruction 36762
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 36763
            //MOV
            t13.w = t12.y;
            //Instruction 36764
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 36765
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 36766
            //MOV
            t9.w = t10.y;
            //Instruction 36767
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 36768
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 36769
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 36770
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 36771
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 36772
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 36773
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 36774
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 36775
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 36776
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 36777
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 36778
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 36779
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36780
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36781
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36782
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 36783
        //ELSE
        } else {
            //Instruction 36784
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 36785
        //ENDIF
        }
        //Instruction 36786
    //ELSE
    } else {
        //Instruction 36787
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 36788
    //ENDIF
    }
    //Instruction 36789
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 36790
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 36791
    //IF
    if(tb16){
        //Instruction 36792
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 36793
        //IF
        if(tb16){
            //Instruction 36794
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 36795
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 36796
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 36797
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 36798
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 36799
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36800
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36801
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36802
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36803
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 36804
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36805
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36806
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36807
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36808
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 36809
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 36810
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 36811
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 36812
            //FRC
            t0 = fract(t0);
            //Instruction 36813
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 36814
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 36815
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 36816
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 36817
            //ADD
            t0 = t0 + t0;
            //Instruction 36818
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 36819
            //LT
            tb44 = t6.w<0.0;
            //Instruction 36820
            //MOV
            t6.y = (-t6.w);
            //Instruction 36821
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 36822
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 36823
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 36824
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 36825
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 36826
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 36827
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 36828
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36829
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36830
            //MUL
            t46 = t0.x * t46;
            //Instruction 36831
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 36832
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 36833
            //MUL
            t44 = t44 * t45;
            //Instruction 36834
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 36835
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36836
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36837
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 36838
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 36839
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 36840
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 36841
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36842
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 36843
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36844
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 36845
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 36846
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 36847
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 36848
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 36849
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 36850
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 36851
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 36852
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 36853
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36854
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 36855
        //ELSE
        } else {
            //Instruction 36856
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 36857
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 36858
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36859
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 36860
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 36861
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 36862
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 36863
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 36864
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 36865
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 36866
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 36867
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 36868
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36869
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 36870
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 36871
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 36872
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 36873
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 36874
            //LT
            tb16 = t0.w<0.0;
            //Instruction 36875
            //MOV
            t0.y = (-t0.w);
            //Instruction 36876
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 36877
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 36878
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 36879
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 36880
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 36881
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 36882
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 36883
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 36884
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 36885
            //MUL
            t45 = t45 * t5.x;
            //Instruction 36886
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 36887
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 36888
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 36889
        //ENDIF
        }
        //Instruction 36890
    //ENDIF
    }
    //Instruction 36891
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 36892
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 36893
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 36894
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 36895
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 36896
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 36897
    //NE
    tb45 = t44!=0.0;
    //Instruction 36898
    //LOG
    t4.x = log2(t44);
    //Instruction 36899
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 36900
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 36901
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 36902
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 36903
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 36904
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 36905
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 36906
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 36907
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 36908
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 36909
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 36910
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 36911
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 36912
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 36913
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 36914
    //MUL
    t44 = t44 * t45;
    //Instruction 36915
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 36916
    //MOV
    t4.y = t3.y;
    //Instruction 36917
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 36918
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 36919
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 36920
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 36921
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 36922
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 36923
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 36924
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 36925
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 36926
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 36927
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 36928
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 36929
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 36930
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 36931
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 36932
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 36933
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 36934
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 36935
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 36936
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 36937
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 36938
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 36939
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 36940
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 36941
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 36942
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 36943
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 36944
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 36945
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 36946
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 36947
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 36948
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 36949
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 36950
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 36951
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 36952
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 36953
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 36954
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 36955
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 36956
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 36957
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 36958
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 36959
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 36960
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 36612
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36613
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36614
    //MOV
    t1.x = t16_0.x;
    //Instruction 36615
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36616
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36617
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36618
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36619
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36620
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36621
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36622
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36623
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36624
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36625
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 36626
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 36627
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 36628
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 36629
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 36630
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 36631
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 36632
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 36633
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 36634
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36635
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36636
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 36637
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 36638
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 36639
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 36640
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36641
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36642
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36643
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36644
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  FinalPosition_13 = tmpvar_1.xyz;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_13 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_15 > 1.0) && (tmpvar_15 < 5.0))) {
    highp float tmpvar_18;
    tmpvar_18 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_19;
    isBestWind_19 = (tmpvar_15 == 4.0);
    bool bLeaf2_20;
    bLeaf2_20 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_21;
    vPos_21 = FinalPosition_13;
    highp vec3 vDirection_22;
    vDirection_22 = tmpvar_2;
    highp float tmpvar_23;
    if (bLeaf2_20) {
      tmpvar_23 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_23 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_24;
    if (bLeaf2_20) {
      tmpvar_24 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_25;
    highp vec4 tmpvar_26;
    tmpvar_26.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_26.x = (tmpvar_23 + tmpvar_18);
    highp vec4 tmpvar_27;
    tmpvar_27 = abs(((
      fract((tmpvar_26 + 0.5))
     * 2.0) - 1.0));
    vPos_25 = (FinalPosition_13 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_24 * (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_22 = tmpvar_2;
    vPos_21 = vPos_25;
    if (isBestWind_19) {
      highp vec3 tmpvar_28;
      tmpvar_28 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_29;
      if (bLeaf2_20) {
        tmpvar_29 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_29 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_30;
      if (bLeaf2_20) {
        tmpvar_30 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_31;
      if (bLeaf2_20) {
        tmpvar_31 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_32;
      if (bLeaf2_20) {
        tmpvar_32 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_33;
      if (bLeaf2_20) {
        tmpvar_33 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_33 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_34;
      if (bLeaf2_20) {
        tmpvar_34 = bool(1);
      } else {
        tmpvar_34 = bool(1);
      };
      highp float fTwitch_35;
      highp vec3 vAxis_36;
      highp float fOsc_37;
      highp vec3 vOriginPos_38;
      highp vec3 tmpvar_39;
      tmpvar_39 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_40;
      tmpvar_40 = ((tmpvar_39.x + tmpvar_39.y) + tmpvar_39.z);
      highp vec4 tmpvar_41;
      tmpvar_41.x = (tmpvar_29 + tmpvar_40);
      tmpvar_41.y = ((tmpvar_29 * 0.75) - tmpvar_40);
      tmpvar_41.z = ((tmpvar_29 * 0.01) + tmpvar_40);
      tmpvar_41.w = (tmpvar_29 + tmpvar_40);
      highp vec4 tmpvar_42;
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      tmpvar_42 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      vOriginPos_38 = vPos_25;
      highp float tmpvar_44;
      tmpvar_44 = sqrt(dot (vPos_25, vPos_25));
      highp float fAngle_45;
      fAngle_45 = ((_glesMultiTexCoord2.x * tmpvar_31) * (tmpvar_42.x + (tmpvar_42.y * tmpvar_42.y)));
      highp vec2 vSinCos_46;
      vSinCos_46.x = sin(fAngle_45);
      vSinCos_46.y = cos(fAngle_45);
      highp float tmpvar_47;
      tmpvar_47 = (1.0 - vSinCos_46.y);
      highp mat3 tmpvar_48;
      tmpvar_48[0].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.x) + vSinCos_46.y);
      tmpvar_48[0].y = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) + (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[0].z = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[1].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.y) - (vSinCos_46.x * tmpvar_28.z));
      tmpvar_48[1].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.y) + vSinCos_46.y);
      tmpvar_48[1].z = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].x = (((tmpvar_47 * tmpvar_28.x) * tmpvar_28.z) + (vSinCos_46.x * tmpvar_28.y));
      tmpvar_48[2].y = (((tmpvar_47 * tmpvar_28.y) * tmpvar_28.z) - (vSinCos_46.x * tmpvar_28.x));
      tmpvar_48[2].z = (((tmpvar_47 * tmpvar_28.z) * tmpvar_28.z) + vSinCos_46.y);
      highp vec3 tmpvar_49;
      tmpvar_49 = ((tmpvar_28.yzx * vRotatedWindVector_12.zxy) - (tmpvar_28.zxy * vRotatedWindVector_12.yzx));
      vAxis_36.xz = tmpvar_49.xz;
      highp float tmpvar_50;
      tmpvar_50 = clamp (dot (vRotatedWindVector_12, tmpvar_28), -1.0, 1.0);
      vAxis_36.y = (tmpvar_49.y + tmpvar_50);
      highp vec3 tmpvar_51;
      tmpvar_51 = normalize(vAxis_36);
      vAxis_36 = tmpvar_51;
      highp float tmpvar_52;
      tmpvar_52 = (1.570796 - (sign(tmpvar_50) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_50))) * (1.570796 + (abs(tmpvar_50) * (-0.2146018 + 
          (abs(tmpvar_50) * (0.08656672 + (abs(tmpvar_50) * -0.03102955)))
        ))))
      )));
      fOsc_37 = (tmpvar_42.y - (tmpvar_42.x * tmpvar_42.x));
      fTwitch_35 = 0.0;
      if (tmpvar_34) {
        highp float fTime_53;
        fTime_53 = (tmpvar_33.z + tmpvar_40);
        highp vec4 tmpvar_54;
        tmpvar_54.zw = vec2(0.0, 0.0);
        tmpvar_54.x = fTime_53;
        tmpvar_54.y = (0.87 * fTime_53);
        highp vec4 tmpvar_55;
        highp vec4 tmpvar_56;
        tmpvar_56 = abs(((
          fract((tmpvar_54 + 0.5))
         * 2.0) - 1.0));
        tmpvar_55 = (((
          (tmpvar_56 * tmpvar_56)
         * 
          (3.0 - (2.0 * tmpvar_56))
        ) - 0.5) * 2.0);
        fTwitch_35 = (tmpvar_33.x * pow (clamp (
          ((((tmpvar_55.x * tmpvar_55.y) * tmpvar_55.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_33.y));
      };
      highp float fAngle_57;
      fAngle_57 = (_glesMultiTexCoord2.x * ((
        (tmpvar_52 * tmpvar_32)
       + 
        (fOsc_37 * tmpvar_30)
      ) + fTwitch_35));
      highp vec2 vSinCos_58;
      vSinCos_58.x = sin(fAngle_57);
      vSinCos_58.y = cos(fAngle_57);
      highp float tmpvar_59;
      tmpvar_59 = (1.0 - vSinCos_58.y);
      highp mat3 tmpvar_60;
      tmpvar_60[0].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.x) + vSinCos_58.y);
      tmpvar_60[0].y = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) + (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[0].z = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[1].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.y) - (vSinCos_58.x * tmpvar_51.z));
      tmpvar_60[1].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.y) + vSinCos_58.y);
      tmpvar_60[1].z = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].x = (((tmpvar_59 * tmpvar_51.x) * tmpvar_51.z) + (vSinCos_58.x * tmpvar_51.y));
      tmpvar_60[2].y = (((tmpvar_59 * tmpvar_51.y) * tmpvar_51.z) - (vSinCos_58.x * tmpvar_51.x));
      tmpvar_60[2].z = (((tmpvar_59 * tmpvar_51.z) * tmpvar_51.z) + vSinCos_58.y);
      highp mat3 tmpvar_61;
      tmpvar_61 = (tmpvar_48 * tmpvar_60);
      vOriginPos_38 = (normalize((tmpvar_61 * vPos_25)) * tmpvar_44);
      vDirection_22 = (tmpvar_61 * _glesNormal);
      vPos_21 = vOriginPos_38;
    };
    tmpvar_10 = vDirection_22;
    FinalPosition_13 = vPos_21;
  };
  FinalPosition_13 = (FinalPosition_13 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_62;
    vPos_62 = FinalPosition_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_63;
      vPos_63 = FinalPosition_13;
      highp float fTime_64;
      highp float fAdherenceScale_65;
      highp vec3 vWindVector_66;
      vWindVector_66 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_64 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_67;
      highp float fOscillation_68;
      fOscillation_68 = 1.0;
      highp float fAmount_69;
      highp float fTarget_70;
      highp vec4 tmpvar_71;
      tmpvar_71.x = (fTime_64 + _glesMultiTexCoord0.w);
      tmpvar_71.y = ((fTime_64 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_71.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_64 + _glesMultiTexCoord0.w));
      tmpvar_71.w = ((fTime_64 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_72;
      tmpvar_72 = abs(((
        fract((tmpvar_71 + 0.5))
       * 2.0) - 1.0));
      vOscillations_67 = (((
        (tmpvar_72 * tmpvar_72)
       * 
        (3.0 - (2.0 * tmpvar_72))
      ) - 0.5) * 2.0);
      highp float tmpvar_73;
      tmpvar_73 = (vOscillations_67.y * vOscillations_67.z);
      fTarget_70 = 1.0;
      fAmount_69 = tmpvar_73;
      if ((tmpvar_73 < 0.0)) {
        fTarget_70 = -1.0;
        fAmount_69 = -(tmpvar_73);
      };
      fOscillation_68 = (((
        mix (mix (tmpvar_73, fTarget_70, fAmount_69), fTarget_70, fAmount_69)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_67.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_68 = (fOscillation_68 * (1.0 + (vOscillations_67.w * _ST_WindBranchWhip.x)));
      vPos_63 = (FinalPosition_13 + ((vWindVector_66 * fOscillation_68) * _ST_WindBranch.y));
      highp vec4 tmpvar_74;
      tmpvar_74.zw = vec2(0.0, 0.0);
      tmpvar_74.x = ((fTime_64 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_74.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_75;
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      tmpvar_75 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      fAdherenceScale_65 = (1.0 - ((tmpvar_75.x * tmpvar_75.y) * (
        (tmpvar_75.x * tmpvar_75.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_65 = (fAdherenceScale_65 + ((vOscillations_67.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_63 = (vPos_63 + ((
        ((vRotatedBranchAnchor_11 - vPos_63) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_65) * _glesMultiTexCoord0.z));
      vPos_62 = vPos_63;
    } else {
      highp vec3 vPos_77;
      vPos_77 = vPos_62;
      highp float fTime_78;
      highp vec3 vWindVector_79;
      vWindVector_79 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_78 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_80;
      highp float fOscillation_81;
      fOscillation_81 = 1.0;
      highp float fAmount_82;
      highp float fTarget_83;
      highp vec4 tmpvar_84;
      tmpvar_84.w = 0.0;
      tmpvar_84.x = (fTime_78 + _glesMultiTexCoord0.w);
      tmpvar_84.y = ((fTime_78 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_84.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_78 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_85;
      tmpvar_85 = abs(((
        fract((tmpvar_84 + 0.5))
       * 2.0) - 1.0));
      vOscillations_80 = (((
        (tmpvar_85 * tmpvar_85)
       * 
        (3.0 - (2.0 * tmpvar_85))
      ) - 0.5) * 2.0);
      highp float tmpvar_86;
      tmpvar_86 = (vOscillations_80.y * vOscillations_80.z);
      fTarget_83 = 1.0;
      fAmount_82 = tmpvar_86;
      if ((tmpvar_86 < 0.0)) {
        fTarget_83 = -1.0;
        fAmount_82 = -(tmpvar_86);
      };
      fOscillation_81 = (((
        mix (mix (tmpvar_86, fTarget_83, fAmount_82), fTarget_83, fAmount_82)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_80.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_77 = (vPos_62 + ((vWindVector_79 * fOscillation_81) * _ST_WindBranch.y));
      vPos_62 = vPos_77;
    };
    FinalPosition_13 = vPos_62;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_87;
    vPos_87 = FinalPosition_13;
    highp float fMoveAmount_88;
    highp float fAdjust_89;
    highp float fLength_90;
    fLength_90 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_91;
    tmpvar_91 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_89 = tmpvar_91;
    if ((tmpvar_91 != 0.0)) {
      fAdjust_89 = pow (tmpvar_91, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_92;
    tmpvar_92.zw = vec2(0.0, 0.0);
    tmpvar_92.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_92.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_93;
    highp vec4 tmpvar_94;
    tmpvar_94 = abs(((
      fract((tmpvar_92 + 0.5))
     * 2.0) - 1.0));
    tmpvar_93 = (((
      (tmpvar_94 * tmpvar_94)
     * 
      (3.0 - (2.0 * tmpvar_94))
    ) - 0.5) * 2.0);
    fMoveAmount_88 = ((_ST_WindGlobal.y * (tmpvar_93.x + 
      (tmpvar_93.y * tmpvar_93.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_88 = (fMoveAmount_88 * fAdjust_89);
    vPos_87.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_88));
    vPos_87 = (normalize(vPos_87) * fLength_90);
    FinalPosition_13 = vPos_87;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_95;
  hPos_95 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_96;
  highp vec4 o_97;
  highp vec4 tmpvar_98;
  tmpvar_98 = (hPos_95 * 0.5);
  highp vec2 tmpvar_99;
  tmpvar_99.x = tmpvar_98.x;
  tmpvar_99.y = (tmpvar_98.y * _ProjectionParams.x);
  o_97.xy = (tmpvar_99 + tmpvar_98.w);
  o_97.zw = hPos_95.zw;
  highp vec3 tmpvar_100;
  tmpvar_100 = o_97.xyw;
  screenPos_96 = tmpvar_100;
  screenPos_96.xy = (screenPos_96.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_101;
  v_101.x = _World2Object[0].x;
  v_101.y = _World2Object[1].x;
  v_101.z = _World2Object[2].x;
  v_101.w = _World2Object[3].x;
  highp vec4 v_102;
  v_102.x = _World2Object[0].y;
  v_102.y = _World2Object[1].y;
  v_102.z = _World2Object[2].y;
  v_102.w = _World2Object[3].y;
  highp vec4 v_103;
  v_103.x = _World2Object[0].z;
  v_103.y = _World2Object[1].z;
  v_103.z = _World2Object[2].z;
  v_103.w = _World2Object[3].z;
  highp vec3 tmpvar_104;
  tmpvar_104 = normalize(((
    (v_101.xyz * tmpvar_10.x)
   + 
    (v_102.xyz * tmpvar_10.y)
  ) + (v_103.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_104;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_96;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec3 t15;
highp int ti15;
highp vec3 t16;
bool tb16;
highp vec3 t21;
highp float t29;
bool tb29;
highp vec2 t32;
highp float t33;
highp vec2 t34;
highp float t43;
bool tb43;
highp float t44;
bool tb44;
highp float t45;
bool tb45;
highp float t46;
void main()
{
    //Instruction 37307
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37308
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 37309
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_0)).xy;
    //Instruction 37310
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37311
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 37312
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 37313
    //DP3
    t29 = dot(t2.xyz, t2.xyz);
    //Instruction 37314
    //RSQ
    t29 = inversesqrt(t29);
    //Instruction 37315
    //MUL
    t2.xyz = vec3(t29) * t2.xyz;
    //Instruction 37316
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 37317
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37318
    //LT
    tb29 = t16_0<5.000000;
    //Instruction 37319
    //AND
    ti15 = int(uint(tb29) & uint(tb1.y));
    //Instruction 37320
    //IF
    if((uint(ti15))!=uint(0u)){
        //Instruction 37321
        //ADD
        t15.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37322
        //EQ
        tb29 = t16_0==4.000000;
        //Instruction 37323
        //LT
        tb43 = 0.0<in_TEXCOORD2.w;
        //Instruction 37324
        //MOVC
        t4.xy = (bool(tb43)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37325
        //ADD
        t15.x = t15.x + t4.x;
        //Instruction 37326
        //ADD
        t15.x = t15.x + 0.500000;
        //Instruction 37327
        //FRC
        t15.x = fract(t15.x);
        //Instruction 37328
        //MAD
        t15.x = t15.x * 2.000000 + -1.0;
        //Instruction 37329
        //MUL
        t44 = abs(t15.x) * abs(t15.x);
        //Instruction 37330
        //MAD
        t15.x = -abs(t15.x) * 2.000000 + 3.000000;
        //Instruction 37331
        //MAD
        t15.x = t44 * t15.x + -0.500000;
        //Instruction 37332
        //DP2
        t15.x = dot(t15.xx, t4.yy);
        //Instruction 37333
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37334
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 37335
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37336
        //MUL
        t4.xyz = t15.xxx * t4.xyz;
        //Instruction 37337
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 37338
        //IF
        if(tb29){
            //Instruction 37339
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37340
            //FRC
            t4 = fract(t4);
            //Instruction 37341
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37342
            //MOVC
            t5 = (bool(tb43)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37343
            //MOVC
            t15.xyz = (bool(tb43)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37344
            //MUL
            t44 = t4.w * 3.000000;
            //Instruction 37345
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 37346
            //MAD
            t6.x = t5.x * 0.750000 + (-t44);
            //Instruction 37347
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37348
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 37349
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37350
            //MUL
            t34.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 37351
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37352
            //MAD
            t6.xy = t34.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 37353
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 37354
            //DP3
            t44 = dot(t3.xyz, t3.xyz);
            //Instruction 37355
            //SQRT
            t44 = sqrt(t44);
            //Instruction 37356
            //MAD
            t45 = t6.x * t6.x + t6.y;
            //Instruction 37357
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 37358
            //MUL
            t45 = t45 * t5.x;
            //Instruction 37359
            //SINCOS
            t5.x = sin(t45);
            t7.x = cos(t45);
            //Instruction 37360
            //ADD
            t45 = (-t7.x) + 1.0;
            //Instruction 37361
            //MUL
            t8 = t4.xxxy * vec4(t45);
            //Instruction 37362
            //MUL
            t21.xyz = t4.zxy * t5.xxx;
            //Instruction 37363
            //MAD
            t9.xy = t8.zy * t4.zy + t21.zx;
            //Instruction 37364
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 37365
            //MAD
            t9.z = t8.w * t4.z + (-t21.y);
            //Instruction 37366
            //MAD
            t11.xy = t8.yz * t4.yz + (-t21.xz);
            //Instruction 37367
            //MAD
            t11.z = t8.w * t4.z + t21.y;
            //Instruction 37368
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 37369
            //MAD
            t11.w = t5.x * t45 + t7.x;
            //Instruction 37370
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 37371
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 37372
            //DP3
            t16.x = dot(t2.xyz, t4.xyz);
            //Instruction 37373
            //MAX
            t16.x = max(t16.x, -1.0);
            //Instruction 37374
            //MIN
            t16.x = min(t16.x, 1.0);
            //Instruction 37375
            //ADD
            t7.w = t16.x + t7.y;
            //Instruction 37376
            //DP3
            t45 = dot(t7.xzw, t7.xzw);
            //Instruction 37377
            //RSQ
            t45 = inversesqrt(t45);
            //Instruction 37378
            //MUL
            t4.xyz = vec3(t45) * t7.zxw;
            //Instruction 37379
            //ADD
            t45 = -abs(t16.x) + 1.0;
            //Instruction 37380
            //SQRT
            t45 = sqrt(t45);
            //Instruction 37381
            //MAD
            t5.x = abs(t16.x) * -0.018729 + 0.074261;
            //Instruction 37382
            //MAD
            t5.x = t5.x * abs(t16.x) + -0.212114;
            //Instruction 37383
            //MAD
            t5.x = t5.x * abs(t16.x) + 1.570729;
            //Instruction 37384
            //MUL
            t33 = t45 * t5.x;
            //Instruction 37385
            //MAD
            t33 = t33 * -2.000000 + 3.141593;
            //Instruction 37386
            //LT
            tb16 = t16.x<(-t16.x);
            //Instruction 37387
            //AND
            t16.x = tb16 ? t33 : float(0.0);
            //Instruction 37388
            //MAD
            t16.x = t5.x * t45 + t16.x;
            //Instruction 37389
            //MAD
            t45 = (-t6.y) * t6.y + t6.x;
            //Instruction 37390
            //MAD
            t6.x = t4.w * 3.000000 + t15.z;
            //Instruction 37391
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 37392
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37393
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 37394
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37395
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 37396
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37397
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 37398
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 37399
            //MUL
            t43 = t5.z * t5.z;
            //Instruction 37400
            //MAD
            t43 = t43 * t5.x + 1.0;
            //Instruction 37401
            //MUL
            t43 = t43 * 0.500000;
            t43 = clamp(t43, 0.0, 1.0);
            //Instruction 37402
            //LOG
            t43 = log2(t43);
            //Instruction 37403
            //MUL
            t29 = t43 * t15.y;
            //Instruction 37404
            //EXP
            t29 = exp2(t29);
            //Instruction 37405
            //MUL
            t43 = t5.y * t45;
            //Instruction 37406
            //MAD
            t43 = t16.x * t5.w + t43;
            //Instruction 37407
            //MAD
            t15.x = t15.x * t29 + t43;
            //Instruction 37408
            //MUL
            t15.x = t15.x * in_TEXCOORD2.x;
            //Instruction 37409
            //SINCOS
            t5.x = sin(t15.x);
            t6.x = cos(t15.x);
            //Instruction 37410
            //ADD
            t15.x = (-t6.x) + 1.0;
            //Instruction 37411
            //MUL
            t7 = vec4(t4.y * t15.x, t4.y * t15.x, t4.y * t15.x, t4.z * t15.x);
            //Instruction 37412
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 37413
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 37414
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 37415
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 37416
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 37417
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 37418
            //MUL
            t29 = t4.x * t4.x;
            //Instruction 37419
            //MAD
            t8.w = t29 * t15.x + t6.x;
            //Instruction 37420
            //MOV
            t10.z = t11.x;
            //Instruction 37421
            //MOV
            t10.w = t9.x;
            //Instruction 37422
            //MOV
            t12.z = t8.y;
            //Instruction 37423
            //MOV
            t12.w = t13.y;
            //Instruction 37424
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 37425
            //MOV
            t13.w = t12.y;
            //Instruction 37426
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 37427
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 37428
            //MOV
            t9.w = t10.y;
            //Instruction 37429
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 37430
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 37431
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 37432
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 37433
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 37434
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 37435
            //DP3
            t15.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 37436
            //DP3
            t15.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37437
            //DP3
            t15.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37438
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 37439
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 37440
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 37441
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 37442
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 37443
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37444
            //MUL
            t3.xyz = vec3(t44) * t4.xyz;
            //Instruction 37445
        //ELSE
        } else {
            //Instruction 37446
            //MOV
            t15.xyz = in_NORMAL0.xyz;
            //Instruction 37447
        //ENDIF
        }
        //Instruction 37448
    //ELSE
    } else {
        //Instruction 37449
        //MOV
        t15.xyz = in_NORMAL0.xyz;
        //Instruction 37450
    //ENDIF
    }
    //Instruction 37451
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 37452
    //GE
    tb16 = t16_0>=3.000000;
    //Instruction 37453
    //IF
    if(tb16){
        //Instruction 37454
        //EQ
        tb16 = t16_0==5.000000;
        //Instruction 37455
        //IF
        if(tb16){
            //Instruction 37456
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37457
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 37458
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 37459
            //DP3
            t16.x = dot(t4.xyz, t4.xyz);
            //Instruction 37460
            //RSQ
            t16.x = inversesqrt(t16.x);
            //Instruction 37461
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37462
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37463
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37464
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37465
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37466
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 37467
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 37468
            //ADD
            t0.x = t16.x + in_TEXCOORD0.w;
            //Instruction 37469
            //MAD
            t0.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37470
            //MUL
            t44 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 37471
            //MUL
            t0.z = t44 * 0.500000;
            //Instruction 37472
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 37473
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37474
            //FRC
            t0 = fract(t0);
            //Instruction 37475
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37476
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 37477
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37478
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37479
            //ADD
            t0 = t0 + t0;
            //Instruction 37480
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 37481
            //LT
            tb44 = t6.w<0.0;
            //Instruction 37482
            //MOV
            t6.y = (-t6.w);
            //Instruction 37483
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 37484
            //MOVC
            t6.xy = (bool(tb44)) ? t6.xy : t6.zw;
            //Instruction 37485
            //MAD
            t44 = (-t0.y) * t0.z + t6.x;
            //Instruction 37486
            //MAD
            t44 = t6.y * t44 + t6.w;
            //Instruction 37487
            //ADD
            t45 = (-t44) + t6.x;
            //Instruction 37488
            //MAD
            t44 = t6.y * t45 + t44;
            //Instruction 37489
            //MUL
            t44 = t44 * _ST_WindBranchTwitch.x;
            //Instruction 37490
            //ADD
            t45 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37491
            //ADD
            t46 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37492
            //MUL
            t46 = t0.x * t46;
            //Instruction 37493
            //MAD
            t44 = t44 * t45 + t46;
            //Instruction 37494
            //MAD
            t45 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37495
            //MUL
            t44 = t44 * t45;
            //Instruction 37496
            //MUL
            t5.xyz = vec3(t44) * t5.xyz;
            //Instruction 37497
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 37498
            //MAD
            t6.x = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37499
            //MUL
            t16.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37500
            //MAD
            t6.y = t16.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37501
            //ADD
            t16.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 37502
            //FRC
            t16.xz = fract(t16.xz);
            //Instruction 37503
            //MAD
            t16.xz = t16.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37504
            //MUL
            t6.xy = abs(t16.xz) * abs(t16.xz);
            //Instruction 37505
            //MAD
            t16.xz = -abs(t16.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37506
            //MAD
            t16.xz = t6.xy * t16.xz + vec2(-0.500000, -0.500000);
            //Instruction 37507
            //ADD
            t16.xz = t16.xz + t16.xz;
            //Instruction 37508
            //MUL
            t16.xz = t16.xz * t16.xz;
            //Instruction 37509
            //MUL
            t16.x = t16.x * t16.z;
            //Instruction 37510
            //MAD
            t16.x = (-t16.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37511
            //MUL
            t44 = t0.w * _ST_WindVector.w;
            //Instruction 37512
            //MAD
            t16.x = t44 * _ST_WindBranchWhip.x + t16.x;
            //Instruction 37513
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 37514
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37515
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37516
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 37517
        //ELSE
        } else {
            //Instruction 37518
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37519
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 37520
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37521
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 37522
            //ADD
            t16.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 37523
            //ADD
            t16.x = t16.x + _ST_WindBranch.x;
            //Instruction 37524
            //ADD
            t5.x = t16.x + in_TEXCOORD0.w;
            //Instruction 37525
            //MAD
            t5.y = t16.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37526
            //MUL
            t16.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 37527
            //MUL
            t5.z = t16.x * 0.500000;
            //Instruction 37528
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37529
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37530
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37531
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 37532
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37533
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37534
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 37535
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 37536
            //LT
            tb16 = t0.w<0.0;
            //Instruction 37537
            //MOV
            t0.y = (-t0.w);
            //Instruction 37538
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 37539
            //MOVC
            t16.xz = (bool(tb16)) ? t0.xy : t0.zw;
            //Instruction 37540
            //MAD
            t45 = (-t5.y) * t5.z + t16.x;
            //Instruction 37541
            //MAD
            t45 = t16.z * t45 + t0.w;
            //Instruction 37542
            //ADD
            t16.x = t16.x + (-t45);
            //Instruction 37543
            //MAD
            t16.x = t16.z * t16.x + t45;
            //Instruction 37544
            //MUL
            t16.x = t16.x * _ST_WindBranchTwitch.x;
            //Instruction 37545
            //ADD
            t44 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37546
            //ADD
            t45 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37547
            //MUL
            t45 = t45 * t5.x;
            //Instruction 37548
            //MAD
            t16.x = t16.x * t44 + t45;
            //Instruction 37549
            //MUL
            t4.xyz = t16.xxx * t4.xyz;
            //Instruction 37550
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 37551
        //ENDIF
        }
        //Instruction 37552
    //ENDIF
    }
    //Instruction 37553
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 37554
    //SQRT
    t16.x = sqrt(t16.x);
    //Instruction 37555
    //DIV
    t44 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37556
    //MAD
    t44 = (-t44) * 0.250000 + t3.y;
    //Instruction 37557
    //MAX
    t44 = max(t44, 0.0);
    //Instruction 37558
    //MUL
    t44 = t44 * _ST_WindGlobal.z;
    //Instruction 37559
    //NE
    tb45 = t44!=0.0;
    //Instruction 37560
    //LOG
    t4.x = log2(t44);
    //Instruction 37561
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 37562
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 37563
    //MOVC
    t44 = (tb45) ? t4.x : t44;
    //Instruction 37564
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37565
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37566
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 37567
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 37568
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37569
    //MUL
    t32.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 37570
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37571
    //MAD
    t4.xy = t32.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 37572
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 37573
    //MAD
    t45 = t4.y * t4.y + t4.x;
    //Instruction 37574
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37575
    //MAD
    t45 = _ST_WindGlobal.y * t45 + t4.x;
    //Instruction 37576
    //MUL
    t44 = t44 * t45;
    //Instruction 37577
    //MAD
    t4.xz = t2.xz * vec2(t44) + t3.xz;
    //Instruction 37578
    //MOV
    t4.y = t3.y;
    //Instruction 37579
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 37580
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 37581
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 37582
    //MUL
    t2.xyz = t16.xxx * t2.xzw;
    //Instruction 37583
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 37584
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 37585
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t3.xyz;
    //Instruction 37586
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t2.zzz + t3.xyz;
    //Instruction 37587
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 37588
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 37589
    //MUL
    t1.x = t3.y * _ProjectionParams.x;
    //Instruction 37590
    //MUL
    t4.w = t1.x * 0.500000;
    //Instruction 37591
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 37592
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 37593
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 37594
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 37595
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 37596
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 37597
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 37598
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 37599
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 37600
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 37601
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 37602
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 37603
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 37604
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 37605
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 37606
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 37607
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 37608
    //MUL
    t4.xyz = t15.yyy * t4.xyz;
    //Instruction 37609
    //MAD
    t1.xyz = t2.xyz * t15.xxx + t4.xyz;
    //Instruction 37610
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 37611
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 37612
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 37613
    //MAD
    t1.xyz = t2.xyz * t15.zzz + t1.xyz;
    //Instruction 37614
    //DP3
    t43 = dot(t1.xyz, t1.xyz);
    //Instruction 37615
    //RSQ
    t43 = inversesqrt(t43);
    //Instruction 37616
    //MUL
    t1.xyz = vec3(t43) * t1.xyz;
    //Instruction 37617
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 37618
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37619
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 37620
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 37621
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 37622
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 37281
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 37282
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 37283
    //MOV
    t1.x = t16_0.x;
    //Instruction 37284
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 37285
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37286
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 37287
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37288
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37289
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 37290
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37291
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 37292
    //LT
    tb1 = t10_2<0.0;
    //Instruction 37293
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37294
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 37295
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 37296
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 37297
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 37298
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 37299
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 37300
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37301
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 37302
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 37303
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 37304
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37305
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37306
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 36870
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36871
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36872
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 36873
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36874
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 36875
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 36876
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 36877
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 36878
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36879
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 36880
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 36881
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 36882
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 36883
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 36884
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 36885
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 36886
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 36887
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 36888
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 36889
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 36890
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 36891
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 36892
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 36893
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 36894
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 36895
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 36896
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 36897
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 36898
        //FRC
        t30.x = fract(t30.x);
        //Instruction 36899
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 36900
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 36901
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 36902
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 36903
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 36904
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 36905
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 36906
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 36907
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 36908
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 36909
        //IF
        if(tb45){
            //Instruction 36910
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 36911
            //FRC
            t5 = fract(t5);
            //Instruction 36912
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 36913
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 36914
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 36915
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 36916
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 36917
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 36918
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 36919
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 36920
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36921
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 36922
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36923
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 36924
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 36925
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 36926
            //SQRT
            t46 = sqrt(t46);
            //Instruction 36927
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 36928
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 36929
            //MUL
            t48 = t48 * t49;
            //Instruction 36930
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 36931
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 36932
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 36933
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 36934
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 36935
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 36936
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 36937
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 36938
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 36939
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 36940
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 36941
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 36942
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 36943
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 36944
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 36945
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 36946
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 36947
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 36948
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 36949
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 36950
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 36951
            //SQRT
            t48 = sqrt(t48);
            //Instruction 36952
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 36953
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 36954
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 36955
            //MUL
            t6.x = t48 * t49;
            //Instruction 36956
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 36957
            //LT
            tb18 = t18<(-t18);
            //Instruction 36958
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 36959
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 36960
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 36961
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 36962
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 36963
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 36964
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 36965
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 36966
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 36967
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 36968
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 36969
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 36970
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 36971
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 36972
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 36973
            //LOG
            t45 = log2(t45);
            //Instruction 36974
            //MUL
            t45 = t45 * t7.y;
            //Instruction 36975
            //EXP
            t45 = exp2(t45);
            //Instruction 36976
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 36977
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 36978
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 36979
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 36980
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 36981
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 36982
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 36983
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 36984
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 36985
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 36986
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 36987
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 36988
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 36989
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 36990
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 36991
            //MOV
            t11.z = t12.x;
            //Instruction 36992
            //MOV
            t11.w = t10.x;
            //Instruction 36993
            //MOV
            t13.z = t9.y;
            //Instruction 36994
            //MOV
            t13.w = t14.y;
            //Instruction 36995
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 36996
            //MOV
            t14.w = t13.y;
            //Instruction 36997
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 36998
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 36999
            //MOV
            t10.w = t11.y;
            //Instruction 37000
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37001
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37002
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37003
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37004
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37005
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37006
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37007
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37008
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37009
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37010
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37011
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37012
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 37013
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37014
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 37015
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 37016
        //ELSE
        } else {
            //Instruction 37017
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 37018
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 37019
        //ENDIF
        }
        //Instruction 37020
    //ELSE
    } else {
        //Instruction 37021
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 37022
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 37023
    //ENDIF
    }
    //Instruction 37024
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37025
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 37026
    //IF
    if(tb46){
        //Instruction 37027
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 37028
        //IF
        if(tb46){
            //Instruction 37029
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37030
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37031
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37032
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 37033
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 37034
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37035
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37036
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37037
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37038
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37039
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 37040
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 37041
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37042
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37043
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 37044
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37045
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37046
            //FRC
            t2 = fract(t2);
            //Instruction 37047
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37048
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37049
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37050
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37051
            //ADD
            t2 = t2 + t2;
            //Instruction 37052
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37053
            //LT
            tb48 = t7.w<0.0;
            //Instruction 37054
            //MOV
            t7.y = (-t7.w);
            //Instruction 37055
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37056
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 37057
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 37058
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 37059
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 37060
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 37061
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 37062
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37063
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37064
            //MUL
            t50 = t2.x * t50;
            //Instruction 37065
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 37066
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37067
            //MUL
            t48 = t48 * t49;
            //Instruction 37068
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 37069
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37070
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37071
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37072
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37073
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37074
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37075
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37076
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37077
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37078
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37079
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37080
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37081
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 37082
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37083
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 37084
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 37085
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37086
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37087
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37088
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37089
        //ELSE
        } else {
            //Instruction 37090
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37091
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37092
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37093
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37094
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37095
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37096
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37097
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37098
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37099
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37100
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37101
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37102
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37103
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37104
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37105
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37106
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37107
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37108
            //MOV
            t2.y = (-t2.w);
            //Instruction 37109
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37110
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37111
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37112
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37113
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 37114
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 37115
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37116
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37117
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37118
            //MUL
            t48 = t48 * t6.x;
            //Instruction 37119
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 37120
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37121
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37122
        //ENDIF
        }
        //Instruction 37123
    //ENDIF
    }
    //Instruction 37124
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37125
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37126
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37127
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 37128
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 37129
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 37130
    //NE
    tb48 = t46!=0.0;
    //Instruction 37131
    //LOG
    t49 = log2(t46);
    //Instruction 37132
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 37133
    //EXP
    t49 = exp2(t49);
    //Instruction 37134
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 37135
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37136
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37137
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37138
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37139
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37140
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37141
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37142
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37143
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37144
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 37145
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37146
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 37147
    //MUL
    t46 = t46 * t48;
    //Instruction 37148
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 37149
    //MOV
    t5.y = t4.y;
    //Instruction 37150
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 37151
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 37152
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 37153
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37154
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 37155
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37156
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37157
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37158
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37159
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37160
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37161
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37162
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37163
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37164
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37165
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37166
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37167
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37168
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37169
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37170
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37171
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37172
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37173
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 37174
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 37175
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 37176
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 37177
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 37178
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 37179
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 37180
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 37181
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 37182
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 37183
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 37184
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 37185
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 37186
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37187
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 37188
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 37189
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37190
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37191
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 37192
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 37193
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 36830
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36831
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36832
    //MOV
    t1.x = t16_0.x;
    //Instruction 36833
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36834
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36835
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36836
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36837
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36838
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36839
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36840
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36841
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36842
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36843
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36844
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36845
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 36846
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 36847
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 36848
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 36849
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36850
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36851
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36852
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 36853
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 36854
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 36855
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 36856
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 36857
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 36858
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 36859
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 36860
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 36861
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 36862
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 36863
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 36864
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 36865
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36866
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36867
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36868
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36869
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 36990
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 36991
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 36992
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 36993
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 36994
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 36995
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 36996
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 36997
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 36998
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 36999
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37000
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37001
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37002
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37003
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37004
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 37005
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37006
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 37007
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 37008
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37009
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 37010
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 37011
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 37012
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37013
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 37014
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 37015
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37016
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 37017
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 37018
        //FRC
        t30.x = fract(t30.x);
        //Instruction 37019
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 37020
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 37021
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 37022
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 37023
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 37024
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37025
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37026
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37027
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 37028
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37029
        //IF
        if(tb45){
            //Instruction 37030
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37031
            //FRC
            t5 = fract(t5);
            //Instruction 37032
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37033
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37034
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37035
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 37036
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37037
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 37038
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37039
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 37040
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37041
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 37042
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37043
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 37044
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 37045
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 37046
            //SQRT
            t46 = sqrt(t46);
            //Instruction 37047
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 37048
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 37049
            //MUL
            t48 = t48 * t49;
            //Instruction 37050
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 37051
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 37052
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 37053
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 37054
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 37055
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37056
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 37057
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 37058
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 37059
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 37060
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 37061
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37062
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37063
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 37064
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 37065
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 37066
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 37067
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 37068
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37069
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 37070
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 37071
            //SQRT
            t48 = sqrt(t48);
            //Instruction 37072
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 37073
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 37074
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 37075
            //MUL
            t6.x = t48 * t49;
            //Instruction 37076
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37077
            //LT
            tb18 = t18<(-t18);
            //Instruction 37078
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 37079
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 37080
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 37081
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37082
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37083
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37084
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37085
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37086
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37087
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37088
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37089
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37090
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 37091
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 37092
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 37093
            //LOG
            t45 = log2(t45);
            //Instruction 37094
            //MUL
            t45 = t45 * t7.y;
            //Instruction 37095
            //EXP
            t45 = exp2(t45);
            //Instruction 37096
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 37097
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 37098
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 37099
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 37100
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 37101
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 37102
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 37103
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37104
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37105
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37106
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37107
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37108
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37109
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 37110
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 37111
            //MOV
            t11.z = t12.x;
            //Instruction 37112
            //MOV
            t11.w = t10.x;
            //Instruction 37113
            //MOV
            t13.z = t9.y;
            //Instruction 37114
            //MOV
            t13.w = t14.y;
            //Instruction 37115
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37116
            //MOV
            t14.w = t13.y;
            //Instruction 37117
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37118
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37119
            //MOV
            t10.w = t11.y;
            //Instruction 37120
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37121
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37122
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37123
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37124
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37125
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37126
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37127
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37128
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37129
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37130
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37131
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37132
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 37133
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37134
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 37135
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 37136
        //ELSE
        } else {
            //Instruction 37137
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 37138
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 37139
        //ENDIF
        }
        //Instruction 37140
    //ELSE
    } else {
        //Instruction 37141
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 37142
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 37143
    //ENDIF
    }
    //Instruction 37144
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37145
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 37146
    //IF
    if(tb46){
        //Instruction 37147
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 37148
        //IF
        if(tb46){
            //Instruction 37149
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37150
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37151
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37152
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 37153
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 37154
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37155
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37156
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37157
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37158
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37159
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 37160
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 37161
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37162
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37163
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 37164
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37165
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37166
            //FRC
            t2 = fract(t2);
            //Instruction 37167
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37168
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37169
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37170
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37171
            //ADD
            t2 = t2 + t2;
            //Instruction 37172
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37173
            //LT
            tb48 = t7.w<0.0;
            //Instruction 37174
            //MOV
            t7.y = (-t7.w);
            //Instruction 37175
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37176
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 37177
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 37178
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 37179
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 37180
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 37181
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 37182
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37183
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37184
            //MUL
            t50 = t2.x * t50;
            //Instruction 37185
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 37186
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37187
            //MUL
            t48 = t48 * t49;
            //Instruction 37188
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 37189
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37190
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37191
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37192
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37193
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37194
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37195
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37196
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37197
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37198
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37199
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37200
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37201
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 37202
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37203
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 37204
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 37205
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37206
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37207
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37208
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37209
        //ELSE
        } else {
            //Instruction 37210
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37211
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37212
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37213
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37214
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37215
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37216
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37217
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37218
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37219
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37220
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37221
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37222
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37223
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37224
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37225
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37226
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37227
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37228
            //MOV
            t2.y = (-t2.w);
            //Instruction 37229
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37230
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37231
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37232
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37233
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 37234
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 37235
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37236
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37237
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37238
            //MUL
            t48 = t48 * t6.x;
            //Instruction 37239
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 37240
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37241
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37242
        //ENDIF
        }
        //Instruction 37243
    //ENDIF
    }
    //Instruction 37244
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37245
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37246
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37247
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 37248
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 37249
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 37250
    //NE
    tb48 = t46!=0.0;
    //Instruction 37251
    //LOG
    t49 = log2(t46);
    //Instruction 37252
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 37253
    //EXP
    t49 = exp2(t49);
    //Instruction 37254
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 37255
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37256
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37257
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37258
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37259
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37260
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37261
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37262
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37263
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37264
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 37265
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37266
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 37267
    //MUL
    t46 = t46 * t48;
    //Instruction 37268
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 37269
    //MOV
    t5.y = t4.y;
    //Instruction 37270
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 37271
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 37272
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 37273
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37274
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 37275
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37276
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37277
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37278
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37279
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37280
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37281
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37282
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37283
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37284
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37285
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37286
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37287
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37288
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37289
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37290
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37291
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37292
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37293
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 37294
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 37295
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 37296
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 37297
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 37298
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 37299
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 37300
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 37301
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 37302
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 37303
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 37304
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 37305
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 37306
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37307
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 37308
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 37309
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37310
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37311
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 37312
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 37313
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 36961
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 36962
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 36963
    //MOV
    t1.x = t16_0.x;
    //Instruction 36964
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 36965
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 36966
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 36967
    //LT
    tb1 = t16_1<0.0;
    //Instruction 36968
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36969
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 36970
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 36971
    //LT
    tb1 = t10_2<0.0;
    //Instruction 36972
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 36973
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 36974
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 36975
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 36976
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 36977
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 36978
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 36979
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 36980
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 36981
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 36982
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 36983
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 36984
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 36985
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 36986
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 36987
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 36988
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 36989
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_5 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_5.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 37670
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37671
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37672
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 37673
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37674
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 37675
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 37676
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 37677
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 37678
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37679
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37680
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37681
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37682
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37683
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37684
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 37685
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37686
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 37687
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 37688
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37689
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 37690
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 37691
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 37692
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37693
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 37694
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 37695
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37696
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 37697
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 37698
        //FRC
        t30.x = fract(t30.x);
        //Instruction 37699
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 37700
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 37701
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 37702
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 37703
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 37704
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37705
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37706
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37707
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 37708
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37709
        //IF
        if(tb45){
            //Instruction 37710
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37711
            //FRC
            t5 = fract(t5);
            //Instruction 37712
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37713
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37714
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37715
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 37716
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37717
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 37718
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37719
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 37720
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37721
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 37722
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37723
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 37724
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 37725
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 37726
            //SQRT
            t46 = sqrt(t46);
            //Instruction 37727
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 37728
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 37729
            //MUL
            t48 = t48 * t49;
            //Instruction 37730
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 37731
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 37732
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 37733
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 37734
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 37735
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37736
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 37737
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 37738
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 37739
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 37740
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 37741
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37742
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37743
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 37744
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 37745
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 37746
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 37747
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 37748
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37749
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 37750
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 37751
            //SQRT
            t48 = sqrt(t48);
            //Instruction 37752
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 37753
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 37754
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 37755
            //MUL
            t6.x = t48 * t49;
            //Instruction 37756
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37757
            //LT
            tb18 = t18<(-t18);
            //Instruction 37758
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 37759
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 37760
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 37761
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37762
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37763
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37764
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37765
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37766
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37767
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37768
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37769
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37770
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 37771
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 37772
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 37773
            //LOG
            t45 = log2(t45);
            //Instruction 37774
            //MUL
            t45 = t45 * t7.y;
            //Instruction 37775
            //EXP
            t45 = exp2(t45);
            //Instruction 37776
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 37777
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 37778
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 37779
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 37780
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 37781
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 37782
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 37783
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37784
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37785
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37786
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37787
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37788
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37789
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 37790
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 37791
            //MOV
            t11.z = t12.x;
            //Instruction 37792
            //MOV
            t11.w = t10.x;
            //Instruction 37793
            //MOV
            t13.z = t9.y;
            //Instruction 37794
            //MOV
            t13.w = t14.y;
            //Instruction 37795
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37796
            //MOV
            t14.w = t13.y;
            //Instruction 37797
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37798
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37799
            //MOV
            t10.w = t11.y;
            //Instruction 37800
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37801
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37802
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37803
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37804
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37805
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37806
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37807
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37808
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37809
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37810
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37811
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37812
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 37813
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37814
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 37815
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 37816
        //ELSE
        } else {
            //Instruction 37817
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 37818
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 37819
        //ENDIF
        }
        //Instruction 37820
    //ELSE
    } else {
        //Instruction 37821
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 37822
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 37823
    //ENDIF
    }
    //Instruction 37824
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37825
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 37826
    //IF
    if(tb46){
        //Instruction 37827
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 37828
        //IF
        if(tb46){
            //Instruction 37829
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37830
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37831
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37832
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 37833
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 37834
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37835
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37836
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37837
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37838
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37839
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 37840
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 37841
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37842
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37843
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 37844
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37845
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37846
            //FRC
            t2 = fract(t2);
            //Instruction 37847
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37848
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37849
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37850
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37851
            //ADD
            t2 = t2 + t2;
            //Instruction 37852
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37853
            //LT
            tb48 = t7.w<0.0;
            //Instruction 37854
            //MOV
            t7.y = (-t7.w);
            //Instruction 37855
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37856
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 37857
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 37858
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 37859
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 37860
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 37861
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 37862
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37863
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37864
            //MUL
            t50 = t2.x * t50;
            //Instruction 37865
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 37866
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37867
            //MUL
            t48 = t48 * t49;
            //Instruction 37868
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 37869
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37870
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37871
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37872
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37873
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37874
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37875
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37876
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37877
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37878
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37879
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37880
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37881
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 37882
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37883
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 37884
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 37885
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37886
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37887
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37888
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37889
        //ELSE
        } else {
            //Instruction 37890
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37891
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37892
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37893
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37894
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37895
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37896
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37897
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37898
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37899
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37900
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37901
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37902
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37903
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37904
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37905
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37906
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37907
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37908
            //MOV
            t2.y = (-t2.w);
            //Instruction 37909
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37910
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37911
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37912
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37913
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 37914
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 37915
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37916
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37917
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37918
            //MUL
            t48 = t48 * t6.x;
            //Instruction 37919
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 37920
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37921
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37922
        //ENDIF
        }
        //Instruction 37923
    //ENDIF
    }
    //Instruction 37924
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37925
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37926
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37927
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 37928
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 37929
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 37930
    //NE
    tb48 = t46!=0.0;
    //Instruction 37931
    //LOG
    t49 = log2(t46);
    //Instruction 37932
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 37933
    //EXP
    t49 = exp2(t49);
    //Instruction 37934
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 37935
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37936
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37937
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37938
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37939
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37940
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37941
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37942
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37943
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37944
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 37945
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37946
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 37947
    //MUL
    t46 = t46 * t48;
    //Instruction 37948
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 37949
    //MOV
    t5.y = t4.y;
    //Instruction 37950
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 37951
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 37952
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 37953
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37954
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 37955
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37956
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37957
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37958
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37959
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37960
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37961
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37962
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37963
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37964
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37965
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37966
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37967
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37968
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37969
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37970
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37971
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37972
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37973
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 37974
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 37975
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 37976
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 37977
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 37978
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 37979
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 37980
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 37981
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 37982
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 37983
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 37984
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 37985
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 37986
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37987
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 37988
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 37989
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37990
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37991
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 37992
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 37993
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump vec3 t16_8;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 37623
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 37624
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 37625
    //MOV
    t1.x = t16_0.x;
    //Instruction 37626
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 37627
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37628
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 37629
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37630
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37631
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 37632
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37633
    //LT
    tb1 = t10_2<0.0;
    //Instruction 37634
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37635
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37636
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37637
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37638
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 37639
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 37640
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 37641
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 37642
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37643
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37644
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 37645
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 37646
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 37647
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 37648
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 37649
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 37650
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 37651
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 37652
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 37653
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 37654
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 37655
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 37656
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 37657
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 37658
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 37659
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37660
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 37661
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 37662
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 37663
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 37664
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 37665
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 37666
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 37667
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37668
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37669
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 37236
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37237
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37238
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 37239
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37240
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 37241
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 37242
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 37243
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 37244
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37245
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37246
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37247
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37248
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37249
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37250
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 37251
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37252
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 37253
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 37254
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37255
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 37256
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 37257
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 37258
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37259
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 37260
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 37261
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37262
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 37263
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 37264
        //FRC
        t30.x = fract(t30.x);
        //Instruction 37265
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 37266
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 37267
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 37268
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 37269
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 37270
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37271
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37272
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37273
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 37274
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37275
        //IF
        if(tb45){
            //Instruction 37276
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37277
            //FRC
            t5 = fract(t5);
            //Instruction 37278
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37279
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37280
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37281
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 37282
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37283
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 37284
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37285
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 37286
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37287
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 37288
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37289
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 37290
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 37291
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 37292
            //SQRT
            t46 = sqrt(t46);
            //Instruction 37293
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 37294
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 37295
            //MUL
            t48 = t48 * t49;
            //Instruction 37296
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 37297
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 37298
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 37299
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 37300
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 37301
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37302
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 37303
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 37304
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 37305
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 37306
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 37307
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37308
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37309
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 37310
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 37311
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 37312
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 37313
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 37314
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37315
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 37316
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 37317
            //SQRT
            t48 = sqrt(t48);
            //Instruction 37318
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 37319
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 37320
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 37321
            //MUL
            t6.x = t48 * t49;
            //Instruction 37322
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37323
            //LT
            tb18 = t18<(-t18);
            //Instruction 37324
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 37325
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 37326
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 37327
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37328
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37329
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37330
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37331
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37332
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37333
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37334
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37335
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37336
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 37337
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 37338
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 37339
            //LOG
            t45 = log2(t45);
            //Instruction 37340
            //MUL
            t45 = t45 * t7.y;
            //Instruction 37341
            //EXP
            t45 = exp2(t45);
            //Instruction 37342
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 37343
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 37344
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 37345
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 37346
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 37347
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 37348
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 37349
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37350
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37351
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37352
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37353
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37354
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37355
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 37356
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 37357
            //MOV
            t11.z = t12.x;
            //Instruction 37358
            //MOV
            t11.w = t10.x;
            //Instruction 37359
            //MOV
            t13.z = t9.y;
            //Instruction 37360
            //MOV
            t13.w = t14.y;
            //Instruction 37361
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37362
            //MOV
            t14.w = t13.y;
            //Instruction 37363
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37364
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37365
            //MOV
            t10.w = t11.y;
            //Instruction 37366
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37367
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37368
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37369
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37370
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37371
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37372
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37373
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37374
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37375
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37376
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37377
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37378
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 37379
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37380
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 37381
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 37382
        //ELSE
        } else {
            //Instruction 37383
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 37384
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 37385
        //ENDIF
        }
        //Instruction 37386
    //ELSE
    } else {
        //Instruction 37387
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 37388
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 37389
    //ENDIF
    }
    //Instruction 37390
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37391
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 37392
    //IF
    if(tb46){
        //Instruction 37393
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 37394
        //IF
        if(tb46){
            //Instruction 37395
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37396
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37397
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37398
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 37399
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 37400
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37401
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37402
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37403
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37404
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37405
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 37406
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 37407
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37408
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37409
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 37410
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37411
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37412
            //FRC
            t2 = fract(t2);
            //Instruction 37413
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37414
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37415
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37416
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37417
            //ADD
            t2 = t2 + t2;
            //Instruction 37418
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37419
            //LT
            tb48 = t7.w<0.0;
            //Instruction 37420
            //MOV
            t7.y = (-t7.w);
            //Instruction 37421
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37422
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 37423
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 37424
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 37425
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 37426
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 37427
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 37428
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37429
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37430
            //MUL
            t50 = t2.x * t50;
            //Instruction 37431
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 37432
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37433
            //MUL
            t48 = t48 * t49;
            //Instruction 37434
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 37435
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37436
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37437
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37438
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37439
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37440
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37441
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37442
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37443
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37444
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37445
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37446
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37447
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 37448
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37449
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 37450
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 37451
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37452
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37453
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37454
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37455
        //ELSE
        } else {
            //Instruction 37456
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37457
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37458
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37459
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37460
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37461
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37462
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37463
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37464
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37465
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37466
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37467
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37468
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37469
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37470
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37471
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37472
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37473
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37474
            //MOV
            t2.y = (-t2.w);
            //Instruction 37475
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37476
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37477
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37478
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37479
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 37480
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 37481
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37482
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37483
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37484
            //MUL
            t48 = t48 * t6.x;
            //Instruction 37485
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 37486
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37487
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37488
        //ENDIF
        }
        //Instruction 37489
    //ENDIF
    }
    //Instruction 37490
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37491
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37492
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37493
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 37494
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 37495
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 37496
    //NE
    tb48 = t46!=0.0;
    //Instruction 37497
    //LOG
    t49 = log2(t46);
    //Instruction 37498
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 37499
    //EXP
    t49 = exp2(t49);
    //Instruction 37500
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 37501
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37502
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37503
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37504
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37505
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37506
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37507
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37508
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37509
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37510
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 37511
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37512
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 37513
    //MUL
    t46 = t46 * t48;
    //Instruction 37514
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 37515
    //MOV
    t5.y = t4.y;
    //Instruction 37516
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 37517
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 37518
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 37519
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37520
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 37521
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37522
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37523
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37524
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37525
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37526
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37527
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37528
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37529
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37530
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37531
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37532
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37533
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37534
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37535
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37536
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37537
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37538
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37539
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 37540
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 37541
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 37542
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 37543
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 37544
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 37545
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 37546
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 37547
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 37548
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 37549
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 37550
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 37551
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 37552
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37553
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 37554
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 37555
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37556
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37557
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 37558
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 37559
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 37194
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 37195
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 37196
    //MOV
    t1.x = t16_0.x;
    //Instruction 37197
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 37198
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37199
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 37200
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37201
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37202
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 37203
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37204
    //LT
    tb1 = t10_2<0.0;
    //Instruction 37205
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37206
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37207
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37208
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37209
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 37210
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 37211
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 37212
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 37213
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37214
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37215
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 37216
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 37217
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 37218
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 37219
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 37220
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 37221
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 37222
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 37223
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 37224
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 37225
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37226
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 37227
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 37228
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 37229
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 37230
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 37231
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 37232
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 37233
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37234
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37235
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_17 > 1.0) && (tmpvar_17 < 5.0))) {
    highp float tmpvar_20;
    tmpvar_20 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_21;
    isBestWind_21 = (tmpvar_17 == 4.0);
    bool bLeaf2_22;
    bLeaf2_22 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_16;
    highp vec3 vDirection_24;
    vDirection_24 = tmpvar_2;
    highp float tmpvar_25;
    if (bLeaf2_22) {
      tmpvar_25 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_26;
    if (bLeaf2_22) {
      tmpvar_26 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_27;
    highp vec4 tmpvar_28;
    tmpvar_28.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_28.x = (tmpvar_25 + tmpvar_20);
    highp vec4 tmpvar_29;
    tmpvar_29 = abs(((
      fract((tmpvar_28 + 0.5))
     * 2.0) - 1.0));
    vPos_27 = (FinalPosition_16 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_26 * (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_24 = tmpvar_2;
    vPos_23 = vPos_27;
    if (isBestWind_21) {
      highp vec3 tmpvar_30;
      tmpvar_30 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_31;
      if (bLeaf2_22) {
        tmpvar_31 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_32;
      if (bLeaf2_22) {
        tmpvar_32 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_33;
      if (bLeaf2_22) {
        tmpvar_33 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_34;
      if (bLeaf2_22) {
        tmpvar_34 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_35;
      if (bLeaf2_22) {
        tmpvar_35 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_35 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_36;
      if (bLeaf2_22) {
        tmpvar_36 = bool(1);
      } else {
        tmpvar_36 = bool(1);
      };
      highp float fTwitch_37;
      highp vec3 vAxis_38;
      highp float fOsc_39;
      highp vec3 vOriginPos_40;
      highp vec3 tmpvar_41;
      tmpvar_41 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_42;
      tmpvar_42 = ((tmpvar_41.x + tmpvar_41.y) + tmpvar_41.z);
      highp vec4 tmpvar_43;
      tmpvar_43.x = (tmpvar_31 + tmpvar_42);
      tmpvar_43.y = ((tmpvar_31 * 0.75) - tmpvar_42);
      tmpvar_43.z = ((tmpvar_31 * 0.01) + tmpvar_42);
      tmpvar_43.w = (tmpvar_31 + tmpvar_42);
      highp vec4 tmpvar_44;
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      tmpvar_44 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      vOriginPos_40 = vPos_27;
      highp float tmpvar_46;
      tmpvar_46 = sqrt(dot (vPos_27, vPos_27));
      highp float fAngle_47;
      fAngle_47 = ((_glesMultiTexCoord2.x * tmpvar_33) * (tmpvar_44.x + (tmpvar_44.y * tmpvar_44.y)));
      highp vec2 vSinCos_48;
      vSinCos_48.x = sin(fAngle_47);
      vSinCos_48.y = cos(fAngle_47);
      highp float tmpvar_49;
      tmpvar_49 = (1.0 - vSinCos_48.y);
      highp mat3 tmpvar_50;
      tmpvar_50[0].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.x) + vSinCos_48.y);
      tmpvar_50[0].y = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) + (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[0].z = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[1].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.y) - (vSinCos_48.x * tmpvar_30.z));
      tmpvar_50[1].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.y) + vSinCos_48.y);
      tmpvar_50[1].z = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].x = (((tmpvar_49 * tmpvar_30.x) * tmpvar_30.z) + (vSinCos_48.x * tmpvar_30.y));
      tmpvar_50[2].y = (((tmpvar_49 * tmpvar_30.y) * tmpvar_30.z) - (vSinCos_48.x * tmpvar_30.x));
      tmpvar_50[2].z = (((tmpvar_49 * tmpvar_30.z) * tmpvar_30.z) + vSinCos_48.y);
      highp vec3 tmpvar_51;
      tmpvar_51 = ((tmpvar_30.yzx * vRotatedWindVector_15.zxy) - (tmpvar_30.zxy * vRotatedWindVector_15.yzx));
      vAxis_38.xz = tmpvar_51.xz;
      highp float tmpvar_52;
      tmpvar_52 = clamp (dot (vRotatedWindVector_15, tmpvar_30), -1.0, 1.0);
      vAxis_38.y = (tmpvar_51.y + tmpvar_52);
      highp vec3 tmpvar_53;
      tmpvar_53 = normalize(vAxis_38);
      vAxis_38 = tmpvar_53;
      highp float tmpvar_54;
      tmpvar_54 = (1.570796 - (sign(tmpvar_52) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_52))) * (1.570796 + (abs(tmpvar_52) * (-0.2146018 + 
          (abs(tmpvar_52) * (0.08656672 + (abs(tmpvar_52) * -0.03102955)))
        ))))
      )));
      fOsc_39 = (tmpvar_44.y - (tmpvar_44.x * tmpvar_44.x));
      fTwitch_37 = 0.0;
      if (tmpvar_36) {
        highp float fTime_55;
        fTime_55 = (tmpvar_35.z + tmpvar_42);
        highp vec4 tmpvar_56;
        tmpvar_56.zw = vec2(0.0, 0.0);
        tmpvar_56.x = fTime_55;
        tmpvar_56.y = (0.87 * fTime_55);
        highp vec4 tmpvar_57;
        highp vec4 tmpvar_58;
        tmpvar_58 = abs(((
          fract((tmpvar_56 + 0.5))
         * 2.0) - 1.0));
        tmpvar_57 = (((
          (tmpvar_58 * tmpvar_58)
         * 
          (3.0 - (2.0 * tmpvar_58))
        ) - 0.5) * 2.0);
        fTwitch_37 = (tmpvar_35.x * pow (clamp (
          ((((tmpvar_57.x * tmpvar_57.y) * tmpvar_57.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_35.y));
      };
      highp float fAngle_59;
      fAngle_59 = (_glesMultiTexCoord2.x * ((
        (tmpvar_54 * tmpvar_34)
       + 
        (fOsc_39 * tmpvar_32)
      ) + fTwitch_37));
      highp vec2 vSinCos_60;
      vSinCos_60.x = sin(fAngle_59);
      vSinCos_60.y = cos(fAngle_59);
      highp float tmpvar_61;
      tmpvar_61 = (1.0 - vSinCos_60.y);
      highp mat3 tmpvar_62;
      tmpvar_62[0].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.x) + vSinCos_60.y);
      tmpvar_62[0].y = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) + (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[0].z = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[1].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.y) - (vSinCos_60.x * tmpvar_53.z));
      tmpvar_62[1].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.y) + vSinCos_60.y);
      tmpvar_62[1].z = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].x = (((tmpvar_61 * tmpvar_53.x) * tmpvar_53.z) + (vSinCos_60.x * tmpvar_53.y));
      tmpvar_62[2].y = (((tmpvar_61 * tmpvar_53.y) * tmpvar_53.z) - (vSinCos_60.x * tmpvar_53.x));
      tmpvar_62[2].z = (((tmpvar_61 * tmpvar_53.z) * tmpvar_53.z) + vSinCos_60.y);
      highp mat3 tmpvar_63;
      tmpvar_63 = (tmpvar_50 * tmpvar_62);
      vOriginPos_40 = (normalize((tmpvar_63 * vPos_27)) * tmpvar_46);
      vDirection_24 = (tmpvar_63 * _glesNormal);
      vPos_23 = vOriginPos_40;
    };
    tmpvar_13 = vDirection_24;
    FinalPosition_16 = vPos_23;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_64;
    vPos_64 = FinalPosition_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_65;
      vPos_65 = FinalPosition_16;
      highp float fTime_66;
      highp float fAdherenceScale_67;
      highp vec3 vWindVector_68;
      vWindVector_68 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_66 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_69;
      highp float fOscillation_70;
      fOscillation_70 = 1.0;
      highp float fAmount_71;
      highp float fTarget_72;
      highp vec4 tmpvar_73;
      tmpvar_73.x = (fTime_66 + _glesMultiTexCoord0.w);
      tmpvar_73.y = ((fTime_66 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_73.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_66 + _glesMultiTexCoord0.w));
      tmpvar_73.w = ((fTime_66 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_74;
      tmpvar_74 = abs(((
        fract((tmpvar_73 + 0.5))
       * 2.0) - 1.0));
      vOscillations_69 = (((
        (tmpvar_74 * tmpvar_74)
       * 
        (3.0 - (2.0 * tmpvar_74))
      ) - 0.5) * 2.0);
      highp float tmpvar_75;
      tmpvar_75 = (vOscillations_69.y * vOscillations_69.z);
      fTarget_72 = 1.0;
      fAmount_71 = tmpvar_75;
      if ((tmpvar_75 < 0.0)) {
        fTarget_72 = -1.0;
        fAmount_71 = -(tmpvar_75);
      };
      fOscillation_70 = (((
        mix (mix (tmpvar_75, fTarget_72, fAmount_71), fTarget_72, fAmount_71)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_69.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_70 = (fOscillation_70 * (1.0 + (vOscillations_69.w * _ST_WindBranchWhip.x)));
      vPos_65 = (FinalPosition_16 + ((vWindVector_68 * fOscillation_70) * _ST_WindBranch.y));
      highp vec4 tmpvar_76;
      tmpvar_76.zw = vec2(0.0, 0.0);
      tmpvar_76.x = ((fTime_66 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_76.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_77;
      highp vec4 tmpvar_78;
      tmpvar_78 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      tmpvar_77 = (((
        (tmpvar_78 * tmpvar_78)
       * 
        (3.0 - (2.0 * tmpvar_78))
      ) - 0.5) * 2.0);
      fAdherenceScale_67 = (1.0 - ((tmpvar_77.x * tmpvar_77.y) * (
        (tmpvar_77.x * tmpvar_77.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_67 = (fAdherenceScale_67 + ((vOscillations_69.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_65 = (vPos_65 + ((
        ((vRotatedBranchAnchor_14 - vPos_65) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_67) * _glesMultiTexCoord0.z));
      vPos_64 = vPos_65;
    } else {
      highp vec3 vPos_79;
      vPos_79 = vPos_64;
      highp float fTime_80;
      highp vec3 vWindVector_81;
      vWindVector_81 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_80 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_82;
      highp float fOscillation_83;
      fOscillation_83 = 1.0;
      highp float fAmount_84;
      highp float fTarget_85;
      highp vec4 tmpvar_86;
      tmpvar_86.w = 0.0;
      tmpvar_86.x = (fTime_80 + _glesMultiTexCoord0.w);
      tmpvar_86.y = ((fTime_80 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_86.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_80 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_87;
      tmpvar_87 = abs(((
        fract((tmpvar_86 + 0.5))
       * 2.0) - 1.0));
      vOscillations_82 = (((
        (tmpvar_87 * tmpvar_87)
       * 
        (3.0 - (2.0 * tmpvar_87))
      ) - 0.5) * 2.0);
      highp float tmpvar_88;
      tmpvar_88 = (vOscillations_82.y * vOscillations_82.z);
      fTarget_85 = 1.0;
      fAmount_84 = tmpvar_88;
      if ((tmpvar_88 < 0.0)) {
        fTarget_85 = -1.0;
        fAmount_84 = -(tmpvar_88);
      };
      fOscillation_83 = (((
        mix (mix (tmpvar_88, fTarget_85, fAmount_84), fTarget_85, fAmount_84)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_82.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_79 = (vPos_64 + ((vWindVector_81 * fOscillation_83) * _ST_WindBranch.y));
      vPos_64 = vPos_79;
    };
    FinalPosition_16 = vPos_64;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_89;
    vPos_89 = FinalPosition_16;
    highp float fMoveAmount_90;
    highp float fAdjust_91;
    highp float fLength_92;
    fLength_92 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_93;
    tmpvar_93 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_91 = tmpvar_93;
    if ((tmpvar_93 != 0.0)) {
      fAdjust_91 = pow (tmpvar_93, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_94;
    tmpvar_94.zw = vec2(0.0, 0.0);
    tmpvar_94.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_94.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_95;
    highp vec4 tmpvar_96;
    tmpvar_96 = abs(((
      fract((tmpvar_94 + 0.5))
     * 2.0) - 1.0));
    tmpvar_95 = (((
      (tmpvar_96 * tmpvar_96)
     * 
      (3.0 - (2.0 * tmpvar_96))
    ) - 0.5) * 2.0);
    fMoveAmount_90 = ((_ST_WindGlobal.y * (tmpvar_95.x + 
      (tmpvar_95.y * tmpvar_95.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_90 = (fMoveAmount_90 * fAdjust_91);
    vPos_89.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_90));
    vPos_89 = (normalize(vPos_89) * fLength_92);
    FinalPosition_16 = vPos_89;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_97;
  hPos_97 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_98;
  highp vec4 o_99;
  highp vec4 tmpvar_100;
  tmpvar_100 = (hPos_97 * 0.5);
  highp vec2 tmpvar_101;
  tmpvar_101.x = tmpvar_100.x;
  tmpvar_101.y = (tmpvar_100.y * _ProjectionParams.x);
  o_99.xy = (tmpvar_101 + tmpvar_100.w);
  o_99.zw = hPos_97.zw;
  highp vec3 tmpvar_102;
  tmpvar_102 = o_99.xyw;
  screenPos_98 = tmpvar_102;
  screenPos_98.xy = (screenPos_98.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_103;
  v_103.x = _World2Object[0].x;
  v_103.y = _World2Object[1].x;
  v_103.z = _World2Object[2].x;
  v_103.w = _World2Object[3].x;
  highp vec4 v_104;
  v_104.x = _World2Object[0].y;
  v_104.y = _World2Object[1].y;
  v_104.z = _World2Object[2].y;
  v_104.w = _World2Object[3].y;
  highp vec4 v_105;
  v_105.x = _World2Object[0].z;
  v_105.y = _World2Object[1].z;
  v_105.z = _World2Object[2].z;
  v_105.w = _World2Object[3].z;
  highp vec3 tmpvar_106;
  tmpvar_106 = normalize(((
    (v_103.xyz * tmpvar_13.x)
   + 
    (v_104.xyz * tmpvar_13.y)
  ) + (v_105.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_106;
  tmpvar_5 = worldNormal_4;
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_98;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
highp vec2 t15;
bvec2 tb15;
highp float t18;
bool tb18;
highp vec3 t23;
highp vec2 t30;
highp int ti30;
highp vec2 t35;
highp vec2 t37;
highp float t45;
bool tb45;
highp float t46;
bool tb46;
highp float t48;
bool tb48;
highp float t49;
highp float t50;
void main()
{
    //Instruction 37349
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37350
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37351
    //ADD
    t15.x = t0.x + _Object2World[3].z;
    //Instruction 37352
    //ADD
    t30.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37353
    //ADD
    t15.y = t30.x + in_NORMAL0.x;
    //Instruction 37354
    //FRC
    t15.xy = fract(t15.xy);
    //Instruction 37355
    //MAD
    t15.x = t15.y * 0.500000 + t15.x;
    //Instruction 37356
    //ADD
    t15.x = t15.x + -0.300000;
    //Instruction 37357
    //MUL
    t1.z = t15.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37358
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37359
    //LT
    tb15.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37360
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37361
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37362
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37363
    //DP3
    t45 = dot(t3.xyz, t3.xyz);
    //Instruction 37364
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37365
    //MUL
    t3.xyz = vec3(t45) * t3.xyz;
    //Instruction 37366
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb15.xxx);
    //Instruction 37367
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37368
    //LT
    tb45 = t16_2<5.000000;
    //Instruction 37369
    //AND
    ti30 = int(uint(tb45) & uint(tb15.y));
    //Instruction 37370
    //IF
    if((uint(ti30))!=uint(0u)){
        //Instruction 37371
        //ADD
        t30.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37372
        //EQ
        tb45 = t16_2==4.000000;
        //Instruction 37373
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 37374
        //MOVC
        t5.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37375
        //ADD
        t30.x = t30.x + t5.x;
        //Instruction 37376
        //ADD
        t30.x = t30.x + 0.500000;
        //Instruction 37377
        //FRC
        t30.x = fract(t30.x);
        //Instruction 37378
        //MAD
        t30.x = t30.x * 2.000000 + -1.0;
        //Instruction 37379
        //MUL
        t48 = abs(t30.x) * abs(t30.x);
        //Instruction 37380
        //MAD
        t30.x = -abs(t30.x) * 2.000000 + 3.000000;
        //Instruction 37381
        //MAD
        t30.x = t48 * t30.x + -0.500000;
        //Instruction 37382
        //DP2
        t30.x = dot(t30.xx, t5.yy);
        //Instruction 37383
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37384
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37385
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37386
        //MUL
        t5.xyz = t30.xxx * t5.xyz;
        //Instruction 37387
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37388
        //IF
        if(tb45){
            //Instruction 37389
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37390
            //FRC
            t5 = fract(t5);
            //Instruction 37391
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37392
            //MOVC
            t6 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37393
            //MOVC
            t7.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37394
            //MUL
            t30.x = t5.w * 3.000000;
            //Instruction 37395
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37396
            //MAD
            t8.x = t6.x * 0.750000 + (-t30.x);
            //Instruction 37397
            //ADD
            t30.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37398
            //FRC
            t30.xy = fract(t30.xy);
            //Instruction 37399
            //MAD
            t30.xy = t30.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37400
            //MUL
            t8.xy = abs(t30.xy) * abs(t30.xy);
            //Instruction 37401
            //MAD
            t30.xy = -abs(t30.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37402
            //MAD
            t30.xy = t8.xy * t30.xy + vec2(-0.500000, -0.500000);
            //Instruction 37403
            //ADD
            t30.xy = t30.xy + t30.xy;
            //Instruction 37404
            //DP3
            t46 = dot(t4.xyz, t4.xyz);
            //Instruction 37405
            //SQRT
            t46 = sqrt(t46);
            //Instruction 37406
            //MAD
            t48 = t30.x * t30.x + t30.y;
            //Instruction 37407
            //MUL
            t49 = t6.z * in_TEXCOORD2.x;
            //Instruction 37408
            //MUL
            t48 = t48 * t49;
            //Instruction 37409
            //SINCOS
            t6.x = sin(t48);
            t8.x = cos(t48);
            //Instruction 37410
            //ADD
            t48 = (-t8.x) + 1.0;
            //Instruction 37411
            //MUL
            t9 = t5.xxxy * vec4(t48);
            //Instruction 37412
            //MUL
            t23.xyz = t5.zxy * t6.xxx;
            //Instruction 37413
            //MAD
            t10.xy = t9.zy * t5.zy + t23.zx;
            //Instruction 37414
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37415
            //MAD
            t10.z = t9.w * t5.z + (-t23.y);
            //Instruction 37416
            //MAD
            t12.xy = t9.yz * t5.yz + (-t23.xz);
            //Instruction 37417
            //MAD
            t12.z = t9.w * t5.z + t23.y;
            //Instruction 37418
            //MUL
            t49 = t5.z * t5.z;
            //Instruction 37419
            //MAD
            t12.w = t49 * t48 + t8.x;
            //Instruction 37420
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37421
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37422
            //DP3
            t18 = dot(t3.xyz, t5.xyz);
            //Instruction 37423
            //MAX
            t18 = max(t18, -1.0);
            //Instruction 37424
            //MIN
            t18 = min(t18, 1.0);
            //Instruction 37425
            //ADD
            t8.w = t18 + t8.y;
            //Instruction 37426
            //DP3
            t48 = dot(t8.xzw, t8.xzw);
            //Instruction 37427
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37428
            //MUL
            t5.xyz = vec3(t48) * t8.zxw;
            //Instruction 37429
            //ADD
            t48 = -abs(t18) + 1.0;
            //Instruction 37430
            //SQRT
            t48 = sqrt(t48);
            //Instruction 37431
            //MAD
            t49 = abs(t18) * -0.018729 + 0.074261;
            //Instruction 37432
            //MAD
            t49 = t49 * abs(t18) + -0.212114;
            //Instruction 37433
            //MAD
            t49 = t49 * abs(t18) + 1.570729;
            //Instruction 37434
            //MUL
            t6.x = t48 * t49;
            //Instruction 37435
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37436
            //LT
            tb18 = t18<(-t18);
            //Instruction 37437
            //AND
            t18 = tb18 ? t6.x : float(0.0);
            //Instruction 37438
            //MAD
            t18 = t49 * t48 + t18;
            //Instruction 37439
            //MAD
            t30.x = (-t30.y) * t30.y + t30.x;
            //Instruction 37440
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37441
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37442
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37443
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37444
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37445
            //MUL
            t37.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37446
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37447
            //MAD
            t6.xz = t37.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37448
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37449
            //MUL
            t45 = t6.z * t6.z;
            //Instruction 37450
            //MAD
            t45 = t45 * t6.x + 1.0;
            //Instruction 37451
            //MUL
            t45 = t45 * 0.500000;
            t45 = clamp(t45, 0.0, 1.0);
            //Instruction 37452
            //LOG
            t45 = log2(t45);
            //Instruction 37453
            //MUL
            t45 = t45 * t7.y;
            //Instruction 37454
            //EXP
            t45 = exp2(t45);
            //Instruction 37455
            //MUL
            t30.x = t6.y * t30.x;
            //Instruction 37456
            //MAD
            t30.x = t18 * t6.w + t30.x;
            //Instruction 37457
            //MAD
            t30.x = t7.x * t45 + t30.x;
            //Instruction 37458
            //MUL
            t30.x = t30.x * in_TEXCOORD2.x;
            //Instruction 37459
            //SINCOS
            t6.x = sin(t30.x);
            t7.x = cos(t30.x);
            //Instruction 37460
            //ADD
            t30.x = (-t7.x) + 1.0;
            //Instruction 37461
            //MUL
            t8 = vec4(t5.y * t30.x, t5.y * t30.x, t5.y * t30.x, t5.z * t30.x);
            //Instruction 37462
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37463
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37464
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37465
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37466
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37467
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37468
            //MUL
            t45 = t5.x * t5.x;
            //Instruction 37469
            //MAD
            t9.w = t45 * t30.x + t7.x;
            //Instruction 37470
            //MOV
            t11.z = t12.x;
            //Instruction 37471
            //MOV
            t11.w = t10.x;
            //Instruction 37472
            //MOV
            t13.z = t9.y;
            //Instruction 37473
            //MOV
            t13.w = t14.y;
            //Instruction 37474
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37475
            //MOV
            t14.w = t13.y;
            //Instruction 37476
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37477
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37478
            //MOV
            t10.w = t11.y;
            //Instruction 37479
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37480
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37481
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37482
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37483
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37484
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37485
            //DP3
            t30.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37486
            //DP3
            t30.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37487
            //DP3
            t18 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37488
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37489
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37490
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37491
            //DP3
            t48 = dot(t5.xyz, t5.xyz);
            //Instruction 37492
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 37493
            //MUL
            t5.xyz = vec3(t48) * t5.xyz;
            //Instruction 37494
            //MUL
            t4.xyz = vec3(t46) * t5.xyz;
            //Instruction 37495
        //ELSE
        } else {
            //Instruction 37496
            //MOV
            t30.xy = in_NORMAL0.xy;
            //Instruction 37497
            //MOV
            t18 = in_NORMAL0.z;
            //Instruction 37498
        //ENDIF
        }
        //Instruction 37499
    //ELSE
    } else {
        //Instruction 37500
        //MOV
        t30.xy = in_NORMAL0.xy;
        //Instruction 37501
        //MOV
        t18 = in_NORMAL0.z;
        //Instruction 37502
    //ENDIF
    }
    //Instruction 37503
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37504
    //GE
    tb46 = t16_2>=3.000000;
    //Instruction 37505
    //IF
    if(tb46){
        //Instruction 37506
        //EQ
        tb46 = t16_2==5.000000;
        //Instruction 37507
        //IF
        if(tb46){
            //Instruction 37508
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37509
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37510
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37511
            //DP3
            t46 = dot(t5.xyz, t5.xyz);
            //Instruction 37512
            //RSQ
            t46 = inversesqrt(t46);
            //Instruction 37513
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37514
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37515
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37516
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37517
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37518
            //ADD
            t46 = t0.x + _ST_WindBranch.x;
            //Instruction 37519
            //ADD
            t2.x = t46 + in_TEXCOORD0.w;
            //Instruction 37520
            //MAD
            t2.y = t46 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37521
            //MUL
            t48 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37522
            //MUL
            t2.z = t48 * 0.500000;
            //Instruction 37523
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37524
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37525
            //FRC
            t2 = fract(t2);
            //Instruction 37526
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37527
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37528
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37529
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37530
            //ADD
            t2 = t2 + t2;
            //Instruction 37531
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37532
            //LT
            tb48 = t7.w<0.0;
            //Instruction 37533
            //MOV
            t7.y = (-t7.w);
            //Instruction 37534
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37535
            //MOVC
            t7.xy = (bool(tb48)) ? t7.xy : t7.zw;
            //Instruction 37536
            //MAD
            t48 = (-t2.y) * t2.z + t7.x;
            //Instruction 37537
            //MAD
            t48 = t7.y * t48 + t7.w;
            //Instruction 37538
            //ADD
            t49 = (-t48) + t7.x;
            //Instruction 37539
            //MAD
            t48 = t7.y * t49 + t48;
            //Instruction 37540
            //MUL
            t48 = t48 * _ST_WindBranchTwitch.x;
            //Instruction 37541
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37542
            //ADD
            t50 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37543
            //MUL
            t50 = t2.x * t50;
            //Instruction 37544
            //MAD
            t48 = t48 * t49 + t50;
            //Instruction 37545
            //MAD
            t49 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37546
            //MUL
            t48 = t48 * t49;
            //Instruction 37547
            //MUL
            t6.xyz = vec3(t48) * t6.xyz;
            //Instruction 37548
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37549
            //MAD
            t7.x = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37550
            //MUL
            t46 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37551
            //MAD
            t7.y = t46 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37552
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37553
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37554
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37555
            //MUL
            t37.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37556
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37557
            //MAD
            t7.xy = t37.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37558
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37559
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37560
            //MUL
            t46 = t7.x * t7.y;
            //Instruction 37561
            //MAD
            t46 = (-t46) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37562
            //MUL
            t48 = t2.w * _ST_WindVector.w;
            //Instruction 37563
            //MAD
            t46 = t48 * _ST_WindBranchWhip.x + t46;
            //Instruction 37564
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37565
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37566
            //MUL
            t5.xyz = vec3(t46) * t5.xyz;
            //Instruction 37567
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37568
        //ELSE
        } else {
            //Instruction 37569
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37570
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37571
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37572
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37573
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37574
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37575
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37576
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37577
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37578
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37579
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37580
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37581
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37582
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37583
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37584
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37585
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37586
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37587
            //MOV
            t2.y = (-t2.w);
            //Instruction 37588
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37589
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37590
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37591
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37592
            //ADD
            t46 = (-t0.x) + t7.x;
            //Instruction 37593
            //MAD
            t0.x = t7.y * t46 + t0.x;
            //Instruction 37594
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37595
            //ADD
            t46 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37596
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37597
            //MUL
            t48 = t48 * t6.x;
            //Instruction 37598
            //MAD
            t0.x = t0.x * t46 + t48;
            //Instruction 37599
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37600
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37601
        //ENDIF
        }
        //Instruction 37602
    //ENDIF
    }
    //Instruction 37603
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37604
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37605
    //DIV
    t46 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37606
    //MAD
    t46 = (-t46) * 0.250000 + t4.y;
    //Instruction 37607
    //MAX
    t46 = max(t46, 0.0);
    //Instruction 37608
    //MUL
    t46 = t46 * _ST_WindGlobal.z;
    //Instruction 37609
    //NE
    tb48 = t46!=0.0;
    //Instruction 37610
    //LOG
    t49 = log2(t46);
    //Instruction 37611
    //MUL
    t49 = t49 * _ST_WindGlobal.w;
    //Instruction 37612
    //EXP
    t49 = exp2(t49);
    //Instruction 37613
    //MOVC
    t46 = (tb48) ? t49 : t46;
    //Instruction 37614
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37615
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37616
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37617
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37618
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37619
    //MUL
    t35.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37620
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37621
    //MAD
    t5.xy = t35.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37622
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37623
    //MAD
    t48 = t5.y * t5.y + t5.x;
    //Instruction 37624
    //DIV
    t49 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37625
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t49;
    //Instruction 37626
    //MUL
    t46 = t46 * t48;
    //Instruction 37627
    //MAD
    t5.xz = t3.xz * vec2(t46) + t4.xz;
    //Instruction 37628
    //MOV
    t5.y = t4.y;
    //Instruction 37629
    //DP3
    t46 = dot(t5.xyz, t5.xyz);
    //Instruction 37630
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 37631
    //MUL
    t3.xzw = vec3(t46) * t5.xyz;
    //Instruction 37632
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37633
    //MOVC
    t3.xzw = (tb15.x) ? t3.xzw : t4.xyz;
    //Instruction 37634
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37635
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37636
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37637
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37638
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37639
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37640
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37641
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37642
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37643
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37644
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37645
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37646
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37647
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37648
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37649
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37650
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37651
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37652
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 37653
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 37654
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 37655
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 37656
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 37657
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 37658
    //MUL
    t0.xyw = t30.yyy * t6.xyz;
    //Instruction 37659
    //MAD
    t0.xyz = t5.xyz * t30.xxx + t0.xyw;
    //Instruction 37660
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 37661
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 37662
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 37663
    //MAD
    t0.xyz = t5.xyz * vec3(t18) + t0.xyz;
    //Instruction 37664
    //DP3
    t45 = dot(t0.xyz, t0.xyz);
    //Instruction 37665
    //RSQ
    t45 = inversesqrt(t45);
    //Instruction 37666
    //MUL
    t0.xyz = vec3(t45) * t0.xyz;
    //Instruction 37667
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 37668
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 37669
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37670
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 37671
    //MOV
    vs_TEXCOORD4.xyz = t4.xyz;
    //Instruction 37672
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 37314
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 37315
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 37316
    //MOV
    t1.x = t16_0.x;
    //Instruction 37317
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 37318
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37319
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 37320
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37321
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37322
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 37323
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37324
    //LT
    tb1 = t10_2<0.0;
    //Instruction 37325
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37326
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37327
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37328
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37329
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 37330
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 37331
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 37332
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 37333
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37334
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37335
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 37336
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 37337
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 37338
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 37339
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 37340
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 37341
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 37342
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37343
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 37344
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 37345
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 37346
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37347
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37348
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_5.x;
  tmpvar_112.y = worldBinormal_4.x;
  tmpvar_112.z = worldNormal_6.x;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_5.y;
  tmpvar_113.y = worldBinormal_4.y;
  tmpvar_113.z = worldNormal_6.y;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_5.z;
  tmpvar_114.y = worldBinormal_4.z;
  tmpvar_114.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 38039
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38040
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38041
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 38042
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38043
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 38044
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 38045
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 38046
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 38047
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38048
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38049
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 38050
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38051
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38052
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38053
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38054
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38055
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38056
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 38057
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 38058
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 38059
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 38060
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 38061
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 38062
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 38063
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 38064
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 38065
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 38066
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 38067
        //FRC
        t32.x = fract(t32.x);
        //Instruction 38068
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 38069
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 38070
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 38071
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 38072
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 38073
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 38074
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 38075
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 38076
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 38077
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 38078
        //IF
        if(tb48){
            //Instruction 38079
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 38080
            //FRC
            t5 = fract(t5);
            //Instruction 38081
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38082
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 38083
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 38084
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 38085
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 38086
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 38087
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38088
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 38089
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38090
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 38091
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38092
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 38093
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 38094
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 38095
            //SQRT
            t49 = sqrt(t49);
            //Instruction 38096
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 38097
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 38098
            //MUL
            t51 = t51 * t52;
            //Instruction 38099
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 38100
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 38101
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 38102
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 38103
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 38104
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 38105
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 38106
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 38107
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 38108
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 38109
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 38110
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 38111
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 38112
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 38113
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 38114
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 38115
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 38116
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 38117
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38118
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 38119
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 38120
            //SQRT
            t51 = sqrt(t51);
            //Instruction 38121
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 38122
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 38123
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 38124
            //MUL
            t6.x = t51 * t52;
            //Instruction 38125
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 38126
            //LT
            tb19 = t19<(-t19);
            //Instruction 38127
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 38128
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 38129
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 38130
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 38131
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 38132
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38133
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 38134
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38135
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 38136
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38137
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 38138
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 38139
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 38140
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 38141
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 38142
            //LOG
            t48 = log2(t48);
            //Instruction 38143
            //MUL
            t48 = t48 * t7.y;
            //Instruction 38144
            //EXP
            t48 = exp2(t48);
            //Instruction 38145
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 38146
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 38147
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 38148
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 38149
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 38150
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 38151
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 38152
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 38153
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 38154
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 38155
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 38156
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 38157
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 38158
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 38159
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 38160
            //MOV
            t11.z = t12.x;
            //Instruction 38161
            //MOV
            t11.w = t10.x;
            //Instruction 38162
            //MOV
            t13.z = t9.y;
            //Instruction 38163
            //MOV
            t13.w = t14.y;
            //Instruction 38164
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 38165
            //MOV
            t14.w = t13.y;
            //Instruction 38166
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 38167
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 38168
            //MOV
            t10.w = t11.y;
            //Instruction 38169
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 38170
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 38171
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 38172
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 38173
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 38174
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 38175
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 38176
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 38177
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 38178
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 38179
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 38180
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 38181
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 38182
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38183
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 38184
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 38185
        //ELSE
        } else {
            //Instruction 38186
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 38187
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 38188
        //ENDIF
        }
        //Instruction 38189
    //ELSE
    } else {
        //Instruction 38190
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 38191
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 38192
    //ENDIF
    }
    //Instruction 38193
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 38194
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 38195
    //IF
    if(tb49){
        //Instruction 38196
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 38197
        //IF
        if(tb49){
            //Instruction 38198
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38199
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 38200
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 38201
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 38202
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 38203
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38204
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38205
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38206
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38207
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 38208
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 38209
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 38210
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38211
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38212
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 38213
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38214
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38215
            //FRC
            t2 = fract(t2);
            //Instruction 38216
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38217
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 38218
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38219
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38220
            //ADD
            t2 = t2 + t2;
            //Instruction 38221
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 38222
            //LT
            tb51 = t7.w<0.0;
            //Instruction 38223
            //MOV
            t7.y = (-t7.w);
            //Instruction 38224
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 38225
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 38226
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 38227
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 38228
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 38229
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 38230
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 38231
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38232
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38233
            //MUL
            t53 = t2.x * t53;
            //Instruction 38234
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 38235
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38236
            //MUL
            t51 = t51 * t52;
            //Instruction 38237
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 38238
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38239
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38240
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38241
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38242
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 38243
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 38244
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38245
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 38246
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38247
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 38248
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 38249
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 38250
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 38251
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38252
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 38253
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 38254
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 38255
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38256
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38257
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 38258
        //ELSE
        } else {
            //Instruction 38259
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38260
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38261
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38262
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 38263
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38264
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38265
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38266
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 38267
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 38268
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38269
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38270
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38271
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 38272
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38273
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38274
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 38275
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 38276
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38277
            //MOV
            t2.y = (-t2.w);
            //Instruction 38278
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38279
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38280
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 38281
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 38282
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 38283
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 38284
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38285
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38286
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38287
            //MUL
            t51 = t51 * t6.x;
            //Instruction 38288
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 38289
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 38290
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38291
        //ENDIF
        }
        //Instruction 38292
    //ENDIF
    }
    //Instruction 38293
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 38294
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38295
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38296
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 38297
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 38298
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 38299
    //NE
    tb51 = t49!=0.0;
    //Instruction 38300
    //LOG
    t52 = log2(t49);
    //Instruction 38301
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 38302
    //EXP
    t52 = exp2(t52);
    //Instruction 38303
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 38304
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38305
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38306
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 38307
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 38308
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38309
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 38310
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38311
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 38312
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 38313
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 38314
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38315
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 38316
    //MUL
    t49 = t49 * t51;
    //Instruction 38317
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 38318
    //MOV
    t5.y = t4.y;
    //Instruction 38319
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 38320
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 38321
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 38322
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 38323
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 38324
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 38325
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 38326
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 38327
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 38328
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 38329
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 38330
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 38331
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 38332
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 38333
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 38334
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 38335
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 38336
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 38337
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38338
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 38339
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 38340
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 38341
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 38342
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 38343
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 38344
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 38345
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 38346
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 38347
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 38348
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 38349
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 38350
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 38351
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 38352
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 38353
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 38354
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 38355
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38356
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 38357
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38358
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 38359
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 38360
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38361
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38362
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38363
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 38364
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 38365
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 38366
    //MOV
    t6.x = t3.z;
    //Instruction 38367
    //MOV
    t6.y = t5.x;
    //Instruction 38368
    //MOV
    t6.z = t0.x;
    //Instruction 38369
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 38370
    //MOV
    t6.x = t3.x;
    //Instruction 38371
    //MOV
    t6.y = t5.y;
    //Instruction 38372
    //MOV
    t6.z = t0.y;
    //Instruction 38373
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 38374
    //MOV
    t0.x = t3.y;
    //Instruction 38375
    //MOV
    t0.y = t5.z;
    //Instruction 38376
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 38377
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 38378
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38379
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 38380
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 38381
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 37994
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 37995
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 37996
    //MOV
    t1.x = t16_0.x;
    //Instruction 37997
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 37998
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37999
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 38000
    //LT
    tb1 = t16_1<0.0;
    //Instruction 38001
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 38002
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 38003
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 38004
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 38005
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 38006
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 38007
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 38008
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 38009
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 38010
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 38011
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 38012
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 38013
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 38014
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 38015
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 38016
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 38017
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 38018
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 38019
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 38020
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 38021
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 38022
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 38023
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 38024
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 38025
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 38026
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 38027
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 38028
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 38029
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 38030
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 38031
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 38032
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 38033
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 38034
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 38035
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 38036
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 38037
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 38038
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_5.x;
  tmpvar_112.y = worldBinormal_4.x;
  tmpvar_112.z = worldNormal_6.x;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_5.y;
  tmpvar_113.y = worldBinormal_4.y;
  tmpvar_113.z = worldNormal_6.y;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_5.z;
  tmpvar_114.y = worldBinormal_4.z;
  tmpvar_114.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 37594
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37595
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37596
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 37597
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37598
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 37599
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 37600
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 37601
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 37602
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37603
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37604
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37605
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37606
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37607
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37608
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 37609
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 37610
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 37611
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 37612
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37613
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 37614
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 37615
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 37616
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37617
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 37618
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 37619
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37620
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 37621
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 37622
        //FRC
        t32.x = fract(t32.x);
        //Instruction 37623
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 37624
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 37625
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 37626
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 37627
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 37628
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37629
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37630
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37631
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 37632
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37633
        //IF
        if(tb48){
            //Instruction 37634
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37635
            //FRC
            t5 = fract(t5);
            //Instruction 37636
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37637
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37638
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37639
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 37640
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37641
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 37642
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37643
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 37644
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37645
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 37646
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37647
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 37648
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 37649
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 37650
            //SQRT
            t49 = sqrt(t49);
            //Instruction 37651
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 37652
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 37653
            //MUL
            t51 = t51 * t52;
            //Instruction 37654
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 37655
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 37656
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 37657
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 37658
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 37659
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37660
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 37661
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 37662
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 37663
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 37664
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 37665
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37666
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37667
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 37668
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 37669
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 37670
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 37671
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 37672
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 37673
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 37674
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 37675
            //SQRT
            t51 = sqrt(t51);
            //Instruction 37676
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 37677
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 37678
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 37679
            //MUL
            t6.x = t51 * t52;
            //Instruction 37680
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37681
            //LT
            tb19 = t19<(-t19);
            //Instruction 37682
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 37683
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 37684
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 37685
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37686
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37687
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37688
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37689
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37690
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37691
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37692
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37693
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37694
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 37695
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 37696
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 37697
            //LOG
            t48 = log2(t48);
            //Instruction 37698
            //MUL
            t48 = t48 * t7.y;
            //Instruction 37699
            //EXP
            t48 = exp2(t48);
            //Instruction 37700
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 37701
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 37702
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 37703
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 37704
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 37705
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 37706
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 37707
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37708
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37709
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37710
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37711
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37712
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37713
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 37714
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 37715
            //MOV
            t11.z = t12.x;
            //Instruction 37716
            //MOV
            t11.w = t10.x;
            //Instruction 37717
            //MOV
            t13.z = t9.y;
            //Instruction 37718
            //MOV
            t13.w = t14.y;
            //Instruction 37719
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37720
            //MOV
            t14.w = t13.y;
            //Instruction 37721
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37722
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37723
            //MOV
            t10.w = t11.y;
            //Instruction 37724
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37725
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37726
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37727
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37728
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37729
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37730
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37731
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37732
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37733
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37734
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37735
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37736
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 37737
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 37738
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 37739
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 37740
        //ELSE
        } else {
            //Instruction 37741
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 37742
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 37743
        //ENDIF
        }
        //Instruction 37744
    //ELSE
    } else {
        //Instruction 37745
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 37746
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 37747
    //ENDIF
    }
    //Instruction 37748
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37749
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 37750
    //IF
    if(tb49){
        //Instruction 37751
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 37752
        //IF
        if(tb49){
            //Instruction 37753
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37754
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37755
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37756
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 37757
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 37758
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 37759
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37760
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37761
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37762
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37763
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 37764
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 37765
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37766
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37767
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 37768
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37769
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37770
            //FRC
            t2 = fract(t2);
            //Instruction 37771
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37772
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37773
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37774
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37775
            //ADD
            t2 = t2 + t2;
            //Instruction 37776
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37777
            //LT
            tb51 = t7.w<0.0;
            //Instruction 37778
            //MOV
            t7.y = (-t7.w);
            //Instruction 37779
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37780
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 37781
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 37782
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 37783
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 37784
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 37785
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 37786
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37787
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37788
            //MUL
            t53 = t2.x * t53;
            //Instruction 37789
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 37790
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37791
            //MUL
            t51 = t51 * t52;
            //Instruction 37792
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 37793
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37794
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37795
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37796
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37797
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37798
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37799
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37800
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37801
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37802
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37803
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37804
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37805
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 37806
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37807
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 37808
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 37809
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37810
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37811
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 37812
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37813
        //ELSE
        } else {
            //Instruction 37814
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37815
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37816
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37817
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37818
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37819
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37820
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37821
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37822
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37823
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37824
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37825
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37826
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37827
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37828
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37829
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37830
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37831
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37832
            //MOV
            t2.y = (-t2.w);
            //Instruction 37833
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37834
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37835
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37836
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37837
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 37838
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 37839
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37840
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37841
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37842
            //MUL
            t51 = t51 * t6.x;
            //Instruction 37843
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 37844
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37845
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37846
        //ENDIF
        }
        //Instruction 37847
    //ENDIF
    }
    //Instruction 37848
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37849
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37850
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37851
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 37852
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 37853
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 37854
    //NE
    tb51 = t49!=0.0;
    //Instruction 37855
    //LOG
    t52 = log2(t49);
    //Instruction 37856
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 37857
    //EXP
    t52 = exp2(t52);
    //Instruction 37858
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 37859
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37860
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37861
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37862
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37863
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37864
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37865
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37866
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37867
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37868
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 37869
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 37870
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 37871
    //MUL
    t49 = t49 * t51;
    //Instruction 37872
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 37873
    //MOV
    t5.y = t4.y;
    //Instruction 37874
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 37875
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 37876
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 37877
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 37878
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 37879
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 37880
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 37881
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 37882
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 37883
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 37884
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 37885
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 37886
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 37887
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 37888
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 37889
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 37890
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 37891
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 37892
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 37893
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 37894
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 37895
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 37896
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 37897
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 37898
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 37899
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 37900
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 37901
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 37902
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 37903
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 37904
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 37905
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 37906
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 37907
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 37908
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 37909
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 37910
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 37911
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 37912
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 37913
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 37914
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 37915
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 37916
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 37917
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 37918
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 37919
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 37920
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 37921
    //MOV
    t6.x = t3.z;
    //Instruction 37922
    //MOV
    t6.y = t5.x;
    //Instruction 37923
    //MOV
    t6.z = t0.x;
    //Instruction 37924
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 37925
    //MOV
    t6.x = t3.x;
    //Instruction 37926
    //MOV
    t6.y = t5.y;
    //Instruction 37927
    //MOV
    t6.z = t0.y;
    //Instruction 37928
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 37929
    //MOV
    t0.x = t3.y;
    //Instruction 37930
    //MOV
    t0.y = t5.z;
    //Instruction 37931
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 37932
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 37933
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 37934
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 37935
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 37936
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 37560
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 37561
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 37562
    //MOV
    t1.x = t16_0.x;
    //Instruction 37563
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 37564
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37565
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 37566
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37567
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37568
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 37569
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37570
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 37571
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37572
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37573
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37574
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37575
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 37576
    //MAX
    t16_4 = max(t16_9.z, t16_9.y);
    //Instruction 37577
    //MAX
    t16_4 = max(t16_9.x, t16_4);
    //Instruction 37578
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 37579
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37580
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37581
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 37582
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 37583
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 37584
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 37585
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 37586
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 37587
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 37588
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 37589
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 37590
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 37591
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37592
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37593
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_5.x;
  tmpvar_112.y = worldBinormal_4.x;
  tmpvar_112.z = worldNormal_6.x;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_5.y;
  tmpvar_113.y = worldBinormal_4.y;
  tmpvar_113.z = worldNormal_6.y;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_5.z;
  tmpvar_114.y = worldBinormal_4.z;
  tmpvar_114.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_6 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_6.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_5 = tmpvar_28;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 37725
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37726
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37727
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 37728
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37729
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 37730
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 37731
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 37732
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 37733
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37734
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37735
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37736
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37737
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37738
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37739
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 37740
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 37741
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 37742
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 37743
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37744
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 37745
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 37746
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 37747
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 37748
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 37749
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 37750
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 37751
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 37752
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 37753
        //FRC
        t32.x = fract(t32.x);
        //Instruction 37754
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 37755
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 37756
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 37757
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 37758
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 37759
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 37760
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 37761
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 37762
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 37763
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 37764
        //IF
        if(tb48){
            //Instruction 37765
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 37766
            //FRC
            t5 = fract(t5);
            //Instruction 37767
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37768
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 37769
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 37770
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 37771
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 37772
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 37773
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37774
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 37775
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37776
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 37777
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37778
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 37779
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 37780
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 37781
            //SQRT
            t49 = sqrt(t49);
            //Instruction 37782
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 37783
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 37784
            //MUL
            t51 = t51 * t52;
            //Instruction 37785
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 37786
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 37787
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 37788
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 37789
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 37790
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 37791
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 37792
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 37793
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 37794
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 37795
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 37796
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 37797
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 37798
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 37799
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 37800
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 37801
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 37802
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 37803
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 37804
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 37805
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 37806
            //SQRT
            t51 = sqrt(t51);
            //Instruction 37807
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 37808
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 37809
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 37810
            //MUL
            t6.x = t51 * t52;
            //Instruction 37811
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 37812
            //LT
            tb19 = t19<(-t19);
            //Instruction 37813
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 37814
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 37815
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 37816
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 37817
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 37818
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 37819
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 37820
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37821
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 37822
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37823
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 37824
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 37825
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 37826
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 37827
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 37828
            //LOG
            t48 = log2(t48);
            //Instruction 37829
            //MUL
            t48 = t48 * t7.y;
            //Instruction 37830
            //EXP
            t48 = exp2(t48);
            //Instruction 37831
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 37832
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 37833
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 37834
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 37835
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 37836
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 37837
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 37838
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 37839
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 37840
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 37841
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 37842
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 37843
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 37844
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 37845
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 37846
            //MOV
            t11.z = t12.x;
            //Instruction 37847
            //MOV
            t11.w = t10.x;
            //Instruction 37848
            //MOV
            t13.z = t9.y;
            //Instruction 37849
            //MOV
            t13.w = t14.y;
            //Instruction 37850
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 37851
            //MOV
            t14.w = t13.y;
            //Instruction 37852
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 37853
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 37854
            //MOV
            t10.w = t11.y;
            //Instruction 37855
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 37856
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 37857
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 37858
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 37859
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 37860
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 37861
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 37862
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 37863
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 37864
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 37865
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 37866
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 37867
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 37868
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 37869
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 37870
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 37871
        //ELSE
        } else {
            //Instruction 37872
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 37873
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 37874
        //ENDIF
        }
        //Instruction 37875
    //ELSE
    } else {
        //Instruction 37876
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 37877
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 37878
    //ENDIF
    }
    //Instruction 37879
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 37880
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 37881
    //IF
    if(tb49){
        //Instruction 37882
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 37883
        //IF
        if(tb49){
            //Instruction 37884
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 37885
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 37886
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 37887
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 37888
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 37889
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 37890
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37891
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37892
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37893
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 37894
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 37895
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 37896
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37897
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 37898
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 37899
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 37900
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 37901
            //FRC
            t2 = fract(t2);
            //Instruction 37902
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 37903
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 37904
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 37905
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 37906
            //ADD
            t2 = t2 + t2;
            //Instruction 37907
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 37908
            //LT
            tb51 = t7.w<0.0;
            //Instruction 37909
            //MOV
            t7.y = (-t7.w);
            //Instruction 37910
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 37911
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 37912
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 37913
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 37914
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 37915
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 37916
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 37917
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37918
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37919
            //MUL
            t53 = t2.x * t53;
            //Instruction 37920
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 37921
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 37922
            //MUL
            t51 = t51 * t52;
            //Instruction 37923
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 37924
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37925
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37926
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 37927
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 37928
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 37929
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 37930
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 37931
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 37932
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 37933
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 37934
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 37935
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 37936
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 37937
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 37938
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 37939
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 37940
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 37941
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 37942
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 37943
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 37944
        //ELSE
        } else {
            //Instruction 37945
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 37946
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 37947
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37948
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 37949
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 37950
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 37951
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 37952
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 37953
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 37954
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 37955
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 37956
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 37957
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 37958
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 37959
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 37960
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 37961
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 37962
            //LT
            tb0 = t2.w<0.0;
            //Instruction 37963
            //MOV
            t2.y = (-t2.w);
            //Instruction 37964
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 37965
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 37966
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 37967
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 37968
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 37969
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 37970
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 37971
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 37972
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 37973
            //MUL
            t51 = t51 * t6.x;
            //Instruction 37974
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 37975
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 37976
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 37977
        //ENDIF
        }
        //Instruction 37978
    //ENDIF
    }
    //Instruction 37979
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 37980
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 37981
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 37982
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 37983
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 37984
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 37985
    //NE
    tb51 = t49!=0.0;
    //Instruction 37986
    //LOG
    t52 = log2(t49);
    //Instruction 37987
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 37988
    //EXP
    t52 = exp2(t52);
    //Instruction 37989
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 37990
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 37991
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 37992
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 37993
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 37994
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 37995
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 37996
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 37997
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 37998
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 37999
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 38000
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38001
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 38002
    //MUL
    t49 = t49 * t51;
    //Instruction 38003
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 38004
    //MOV
    t5.y = t4.y;
    //Instruction 38005
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 38006
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 38007
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 38008
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 38009
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 38010
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 38011
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 38012
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 38013
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 38014
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 38015
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 38016
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 38017
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 38018
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 38019
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 38020
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 38021
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 38022
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 38023
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38024
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 38025
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 38026
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 38027
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 38028
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 38029
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 38030
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 38031
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 38032
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 38033
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 38034
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 38035
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 38036
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 38037
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 38038
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 38039
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 38040
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 38041
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38042
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 38043
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38044
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 38045
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 38046
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38047
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38048
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38049
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 38050
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 38051
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 38052
    //MOV
    t6.x = t3.z;
    //Instruction 38053
    //MOV
    t6.y = t5.x;
    //Instruction 38054
    //MOV
    t6.z = t0.x;
    //Instruction 38055
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 38056
    //MOV
    t6.x = t3.x;
    //Instruction 38057
    //MOV
    t6.y = t5.y;
    //Instruction 38058
    //MOV
    t6.z = t0.y;
    //Instruction 38059
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 38060
    //MOV
    t0.x = t3.y;
    //Instruction 38061
    //MOV
    t0.y = t5.z;
    //Instruction 38062
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 38063
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 38064
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38065
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 38066
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 38067
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump vec3 t16_10;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 37673
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 37674
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 37675
    //MOV
    t1.x = t16_0.x;
    //Instruction 37676
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 37677
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37678
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 37679
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37680
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37681
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 37682
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37683
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 37684
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37685
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37686
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37687
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37688
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 37689
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 37690
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 37691
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 37692
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37693
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37694
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 37695
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 37696
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 37697
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 37698
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 37699
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 37700
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 37701
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 37702
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 37703
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 37704
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 37705
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 37706
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 37707
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 37708
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 37709
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37710
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 37711
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 37712
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 37713
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 37714
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 37715
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 37716
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 37717
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 37718
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 37719
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 37720
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 37721
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 37722
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37723
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37724
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_5.x;
  tmpvar_112.y = worldBinormal_4.x;
  tmpvar_112.z = worldNormal_6.x;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_5.y;
  tmpvar_113.y = worldBinormal_4.y;
  tmpvar_113.z = worldNormal_6.y;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_5.z;
  tmpvar_114.y = worldBinormal_4.z;
  tmpvar_114.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, tmpvar_20).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 38429
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38430
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 38431
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 38432
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 38433
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 38434
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 38435
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 38436
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 38437
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 38438
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 38439
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 38440
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38441
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 38442
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 38443
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38444
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38445
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38446
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 38447
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 38448
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 38449
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 38450
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 38451
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 38452
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 38453
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 38454
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 38455
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 38456
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 38457
        //FRC
        t32.x = fract(t32.x);
        //Instruction 38458
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 38459
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 38460
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 38461
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 38462
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 38463
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 38464
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 38465
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 38466
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 38467
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 38468
        //IF
        if(tb48){
            //Instruction 38469
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 38470
            //FRC
            t5 = fract(t5);
            //Instruction 38471
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38472
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 38473
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 38474
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 38475
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 38476
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 38477
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38478
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 38479
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38480
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 38481
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38482
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 38483
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 38484
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 38485
            //SQRT
            t49 = sqrt(t49);
            //Instruction 38486
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 38487
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 38488
            //MUL
            t51 = t51 * t52;
            //Instruction 38489
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 38490
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 38491
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 38492
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 38493
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 38494
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 38495
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 38496
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 38497
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 38498
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 38499
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 38500
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 38501
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 38502
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 38503
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 38504
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 38505
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 38506
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 38507
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38508
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 38509
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 38510
            //SQRT
            t51 = sqrt(t51);
            //Instruction 38511
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 38512
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 38513
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 38514
            //MUL
            t6.x = t51 * t52;
            //Instruction 38515
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 38516
            //LT
            tb19 = t19<(-t19);
            //Instruction 38517
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 38518
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 38519
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 38520
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 38521
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 38522
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38523
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 38524
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38525
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 38526
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38527
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 38528
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 38529
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 38530
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 38531
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 38532
            //LOG
            t48 = log2(t48);
            //Instruction 38533
            //MUL
            t48 = t48 * t7.y;
            //Instruction 38534
            //EXP
            t48 = exp2(t48);
            //Instruction 38535
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 38536
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 38537
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 38538
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 38539
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 38540
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 38541
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 38542
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 38543
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 38544
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 38545
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 38546
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 38547
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 38548
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 38549
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 38550
            //MOV
            t11.z = t12.x;
            //Instruction 38551
            //MOV
            t11.w = t10.x;
            //Instruction 38552
            //MOV
            t13.z = t9.y;
            //Instruction 38553
            //MOV
            t13.w = t14.y;
            //Instruction 38554
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 38555
            //MOV
            t14.w = t13.y;
            //Instruction 38556
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 38557
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 38558
            //MOV
            t10.w = t11.y;
            //Instruction 38559
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 38560
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 38561
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 38562
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 38563
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 38564
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 38565
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 38566
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 38567
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 38568
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 38569
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 38570
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 38571
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 38572
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38573
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 38574
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 38575
        //ELSE
        } else {
            //Instruction 38576
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 38577
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 38578
        //ENDIF
        }
        //Instruction 38579
    //ELSE
    } else {
        //Instruction 38580
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 38581
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 38582
    //ENDIF
    }
    //Instruction 38583
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 38584
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 38585
    //IF
    if(tb49){
        //Instruction 38586
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 38587
        //IF
        if(tb49){
            //Instruction 38588
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38589
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 38590
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 38591
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 38592
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 38593
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38594
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38595
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38596
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38597
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 38598
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 38599
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 38600
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38601
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38602
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 38603
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38604
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38605
            //FRC
            t2 = fract(t2);
            //Instruction 38606
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38607
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 38608
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38609
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38610
            //ADD
            t2 = t2 + t2;
            //Instruction 38611
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 38612
            //LT
            tb51 = t7.w<0.0;
            //Instruction 38613
            //MOV
            t7.y = (-t7.w);
            //Instruction 38614
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 38615
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 38616
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 38617
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 38618
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 38619
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 38620
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 38621
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38622
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38623
            //MUL
            t53 = t2.x * t53;
            //Instruction 38624
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 38625
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38626
            //MUL
            t51 = t51 * t52;
            //Instruction 38627
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 38628
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38629
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38630
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38631
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38632
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 38633
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 38634
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38635
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 38636
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38637
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 38638
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 38639
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 38640
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 38641
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38642
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 38643
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 38644
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 38645
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38646
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38647
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 38648
        //ELSE
        } else {
            //Instruction 38649
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38650
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38651
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38652
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 38653
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38654
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38655
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38656
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 38657
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 38658
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38659
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38660
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38661
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 38662
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38663
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38664
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 38665
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 38666
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38667
            //MOV
            t2.y = (-t2.w);
            //Instruction 38668
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38669
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38670
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 38671
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 38672
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 38673
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 38674
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38675
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38676
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38677
            //MUL
            t51 = t51 * t6.x;
            //Instruction 38678
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 38679
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 38680
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38681
        //ENDIF
        }
        //Instruction 38682
    //ENDIF
    }
    //Instruction 38683
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 38684
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38685
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38686
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 38687
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 38688
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 38689
    //NE
    tb51 = t49!=0.0;
    //Instruction 38690
    //LOG
    t52 = log2(t49);
    //Instruction 38691
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 38692
    //EXP
    t52 = exp2(t52);
    //Instruction 38693
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 38694
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38695
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38696
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 38697
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 38698
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38699
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 38700
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38701
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 38702
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 38703
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 38704
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38705
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 38706
    //MUL
    t49 = t49 * t51;
    //Instruction 38707
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 38708
    //MOV
    t5.y = t4.y;
    //Instruction 38709
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 38710
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 38711
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 38712
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 38713
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 38714
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 38715
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 38716
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 38717
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 38718
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 38719
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 38720
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 38721
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 38722
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 38723
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 38724
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 38725
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 38726
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 38727
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38728
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 38729
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 38730
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 38731
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 38732
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 38733
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 38734
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 38735
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 38736
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 38737
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 38738
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 38739
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 38740
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 38741
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 38742
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 38743
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 38744
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 38745
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38746
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 38747
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38748
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 38749
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 38750
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38751
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38752
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38753
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 38754
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 38755
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 38756
    //MOV
    t6.x = t3.z;
    //Instruction 38757
    //MOV
    t6.y = t5.x;
    //Instruction 38758
    //MOV
    t6.z = t0.x;
    //Instruction 38759
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 38760
    //MOV
    t6.x = t3.x;
    //Instruction 38761
    //MOV
    t6.y = t5.y;
    //Instruction 38762
    //MOV
    t6.z = t0.y;
    //Instruction 38763
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 38764
    //MOV
    t0.x = t3.y;
    //Instruction 38765
    //MOV
    t0.y = t5.z;
    //Instruction 38766
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 38767
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 38768
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38769
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 38770
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 38771
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 38382
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 38383
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 38384
    //MOV
    t1.x = t16_0.x;
    //Instruction 38385
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 38386
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 38387
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 38388
    //LT
    tb1 = t16_1<0.0;
    //Instruction 38389
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 38390
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 38391
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 38392
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 38393
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 38394
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 38395
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 38396
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 38397
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 38398
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 38399
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 38400
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 38401
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 38402
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 38403
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 38404
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 38405
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 38406
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 38407
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 38408
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 38409
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 38410
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 38411
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 38412
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 38413
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 38414
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 38415
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 38416
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 38417
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 38418
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 38419
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 38420
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 38421
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 38422
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 38423
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 38424
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 38425
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 38426
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 38427
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 38428
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_98;
  hPos_98 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_99;
  highp vec4 o_100;
  highp vec4 tmpvar_101;
  tmpvar_101 = (hPos_98 * 0.5);
  highp vec2 tmpvar_102;
  tmpvar_102.x = tmpvar_101.x;
  tmpvar_102.y = (tmpvar_101.y * _ProjectionParams.x);
  o_100.xy = (tmpvar_102 + tmpvar_101.w);
  o_100.zw = hPos_98.zw;
  highp vec3 tmpvar_103;
  tmpvar_103 = o_100.xyw;
  screenPos_99 = tmpvar_103;
  screenPos_99.xy = (screenPos_99.xy * (_ScreenParams.xy * 0.25));
  tmpvar_7 = tmpvar_8;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_14.x)
   + 
    (v_105.xyz * tmpvar_14.y)
  ) + (v_106.xyz * tmpvar_14.z)));
  worldNormal_6 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_111;
  lowp vec3 tmpvar_112;
  tmpvar_112.x = worldTangent_5.x;
  tmpvar_112.y = worldBinormal_4.x;
  tmpvar_112.z = worldNormal_6.x;
  lowp vec3 tmpvar_113;
  tmpvar_113.x = worldTangent_5.y;
  tmpvar_113.y = worldBinormal_4.y;
  tmpvar_113.z = worldNormal_6.y;
  lowp vec3 tmpvar_114;
  tmpvar_114.x = worldTangent_5.z;
  tmpvar_114.y = worldBinormal_4.z;
  tmpvar_114.z = worldNormal_6.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_99;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, tmpvar_20).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
void main()
{
    //Instruction 37977
    //MUL
    vs_TEXCOORD4.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 37978
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 37979
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 37980
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 37981
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 37982
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 37983
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 37984
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 37985
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 37986
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 37987
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), vec4(t16_2)).xy;
    //Instruction 37988
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 37989
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 37990
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 37991
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 37992
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 37993
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 37994
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 37995
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 37996
    //LT
    tb48 = t16_2<5.000000;
    //Instruction 37997
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 37998
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 37999
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 38000
        //EQ
        tb48 = t16_2==4.000000;
        //Instruction 38001
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 38002
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 38003
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 38004
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 38005
        //FRC
        t32.x = fract(t32.x);
        //Instruction 38006
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 38007
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 38008
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 38009
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 38010
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 38011
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 38012
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 38013
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 38014
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 38015
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 38016
        //IF
        if(tb48){
            //Instruction 38017
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 38018
            //FRC
            t5 = fract(t5);
            //Instruction 38019
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38020
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 38021
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 38022
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 38023
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 38024
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 38025
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38026
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 38027
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38028
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 38029
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38030
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 38031
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 38032
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 38033
            //SQRT
            t49 = sqrt(t49);
            //Instruction 38034
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 38035
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 38036
            //MUL
            t51 = t51 * t52;
            //Instruction 38037
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 38038
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 38039
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 38040
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 38041
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 38042
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 38043
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 38044
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 38045
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 38046
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 38047
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 38048
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 38049
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 38050
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 38051
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 38052
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 38053
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 38054
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 38055
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38056
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 38057
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 38058
            //SQRT
            t51 = sqrt(t51);
            //Instruction 38059
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 38060
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 38061
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 38062
            //MUL
            t6.x = t51 * t52;
            //Instruction 38063
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 38064
            //LT
            tb19 = t19<(-t19);
            //Instruction 38065
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 38066
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 38067
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 38068
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 38069
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 38070
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 38071
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 38072
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38073
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 38074
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38075
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 38076
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 38077
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 38078
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 38079
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 38080
            //LOG
            t48 = log2(t48);
            //Instruction 38081
            //MUL
            t48 = t48 * t7.y;
            //Instruction 38082
            //EXP
            t48 = exp2(t48);
            //Instruction 38083
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 38084
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 38085
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 38086
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 38087
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 38088
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 38089
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 38090
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 38091
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 38092
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 38093
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 38094
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 38095
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 38096
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 38097
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 38098
            //MOV
            t11.z = t12.x;
            //Instruction 38099
            //MOV
            t11.w = t10.x;
            //Instruction 38100
            //MOV
            t13.z = t9.y;
            //Instruction 38101
            //MOV
            t13.w = t14.y;
            //Instruction 38102
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 38103
            //MOV
            t14.w = t13.y;
            //Instruction 38104
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 38105
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 38106
            //MOV
            t10.w = t11.y;
            //Instruction 38107
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 38108
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 38109
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 38110
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 38111
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 38112
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 38113
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 38114
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 38115
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 38116
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 38117
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 38118
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 38119
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 38120
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 38121
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 38122
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 38123
        //ELSE
        } else {
            //Instruction 38124
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 38125
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 38126
        //ENDIF
        }
        //Instruction 38127
    //ELSE
    } else {
        //Instruction 38128
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 38129
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 38130
    //ENDIF
    }
    //Instruction 38131
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 38132
    //GE
    tb49 = t16_2>=3.000000;
    //Instruction 38133
    //IF
    if(tb49){
        //Instruction 38134
        //EQ
        tb49 = t16_2==5.000000;
        //Instruction 38135
        //IF
        if(tb49){
            //Instruction 38136
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38137
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 38138
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 38139
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 38140
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 38141
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38142
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38143
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38144
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38145
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 38146
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 38147
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 38148
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38149
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 38150
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 38151
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 38152
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38153
            //FRC
            t2 = fract(t2);
            //Instruction 38154
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38155
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 38156
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38157
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38158
            //ADD
            t2 = t2 + t2;
            //Instruction 38159
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 38160
            //LT
            tb51 = t7.w<0.0;
            //Instruction 38161
            //MOV
            t7.y = (-t7.w);
            //Instruction 38162
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 38163
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 38164
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 38165
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 38166
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 38167
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 38168
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 38169
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38170
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38171
            //MUL
            t53 = t2.x * t53;
            //Instruction 38172
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 38173
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38174
            //MUL
            t51 = t51 * t52;
            //Instruction 38175
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 38176
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38177
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38178
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38179
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38180
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 38181
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 38182
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38183
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 38184
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38185
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 38186
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 38187
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 38188
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 38189
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38190
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 38191
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 38192
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 38193
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38194
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 38195
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 38196
        //ELSE
        } else {
            //Instruction 38197
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38198
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 38199
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38200
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 38201
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 38202
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 38203
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38204
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 38205
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 38206
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38207
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 38208
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38209
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 38210
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38211
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38212
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 38213
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 38214
            //LT
            tb0 = t2.w<0.0;
            //Instruction 38215
            //MOV
            t2.y = (-t2.w);
            //Instruction 38216
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 38217
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 38218
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 38219
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 38220
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 38221
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 38222
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 38223
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38224
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38225
            //MUL
            t51 = t51 * t6.x;
            //Instruction 38226
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 38227
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 38228
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 38229
        //ENDIF
        }
        //Instruction 38230
    //ENDIF
    }
    //Instruction 38231
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 38232
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 38233
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38234
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 38235
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 38236
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 38237
    //NE
    tb51 = t49!=0.0;
    //Instruction 38238
    //LOG
    t52 = log2(t49);
    //Instruction 38239
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 38240
    //EXP
    t52 = exp2(t52);
    //Instruction 38241
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 38242
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38243
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38244
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 38245
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 38246
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38247
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 38248
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38249
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 38250
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 38251
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 38252
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38253
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 38254
    //MUL
    t49 = t49 * t51;
    //Instruction 38255
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 38256
    //MOV
    t5.y = t4.y;
    //Instruction 38257
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 38258
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 38259
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 38260
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 38261
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 38262
    //MUL
    t4.xyz = t3.zzz * glstate_matrix_mvp[1].xyw;
    //Instruction 38263
    //MAD
    t4.xyz = glstate_matrix_mvp[0].xyw * t3.xxx + t4.xyz;
    //Instruction 38264
    //MAD
    t4.xyz = glstate_matrix_mvp[2].xyw * t3.www + t4.xyz;
    //Instruction 38265
    //MAD
    t4.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t4.xyz;
    //Instruction 38266
    //MUL
    t5.xz = t4.xz * vec2(0.500000, 0.500000);
    //Instruction 38267
    //MUL
    t0.x = t4.y * _ProjectionParams.x;
    //Instruction 38268
    //MUL
    t5.w = t0.x * 0.500000;
    //Instruction 38269
    //ADD
    t0.xy = t5.zz + t5.xw;
    //Instruction 38270
    //MUL
    t0.xy = t0.xy * _ScreenParams.xy;
    //Instruction 38271
    //MUL
    t4.xy = t0.xy * vec2(0.250000, 0.250000);
    //Instruction 38272
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 38273
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 38274
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 38275
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 38276
    //MUL
    t5.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 38277
    //MAD
    t5.xyz = _Object2World[0].xyz * t3.xxx + t5.xyz;
    //Instruction 38278
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t5.xyz;
    //Instruction 38279
    //MAD
    vs_TEXCOORD3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 38280
    //MOV
    t5.y = _World2Object[0].x;
    //Instruction 38281
    //MOV
    t5.z = _World2Object[1].x;
    //Instruction 38282
    //MOV
    t5.x = _World2Object[2].x;
    //Instruction 38283
    //MOV
    t6.y = _World2Object[0].y;
    //Instruction 38284
    //MOV
    t6.z = _World2Object[1].y;
    //Instruction 38285
    //MOV
    t6.x = _World2Object[2].y;
    //Instruction 38286
    //MUL
    t0.xyw = t32.yyy * t6.xyz;
    //Instruction 38287
    //MAD
    t0.xyz = t5.xyz * t32.xxx + t0.xyw;
    //Instruction 38288
    //MOV
    t5.y = _World2Object[0].z;
    //Instruction 38289
    //MOV
    t5.z = _World2Object[1].z;
    //Instruction 38290
    //MOV
    t5.x = _World2Object[2].z;
    //Instruction 38291
    //MAD
    t0.xyz = t5.xyz * vec3(t19) + t0.xyz;
    //Instruction 38292
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 38293
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38294
    //MUL
    t0.xyz = vec3(t48) * t0.yzx;
    //Instruction 38295
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 38296
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 38297
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 38298
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 38299
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 38300
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 38301
    //MUL
    t10_15.xyz = t0.zxy * t3.xyz;
    //Instruction 38302
    //MAD
    t10_15.xyz = t0.yzx * t3.yzx + (-t10_15.xyz);
    //Instruction 38303
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 38304
    //MOV
    t6.x = t3.z;
    //Instruction 38305
    //MOV
    t6.y = t5.x;
    //Instruction 38306
    //MOV
    t6.z = t0.x;
    //Instruction 38307
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 38308
    //MOV
    t6.x = t3.x;
    //Instruction 38309
    //MOV
    t6.y = t5.y;
    //Instruction 38310
    //MOV
    t6.z = t0.y;
    //Instruction 38311
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 38312
    //MOV
    t0.x = t3.y;
    //Instruction 38313
    //MOV
    t0.y = t5.z;
    //Instruction 38314
    //MOV
    vs_TEXCOORD2.xyz = t0.xyz;
    //Instruction 38315
    //MOV
    vs_TEXCOORD4.w = _Color.w;
    //Instruction 38316
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 38317
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 38318
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 38319
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 37937
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 37938
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 37939
    //MOV
    t1.x = t16_0.x;
    //Instruction 37940
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 37941
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 37942
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 37943
    //LT
    tb1 = t16_1<0.0;
    //Instruction 37944
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37945
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 37946
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 37947
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 37948
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 37949
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 37950
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 37951
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 37952
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 37953
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 37954
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 37955
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 37956
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 37957
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 37958
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 37959
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 37960
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 37961
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 37962
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 37963
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 37964
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 37965
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 37966
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 37967
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 37968
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 37969
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 37970
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 37971
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 37972
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 37973
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 37974
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 37975
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 37976
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3"
}
}
 }
 Pass {
  Name "PREPASS"
  Tags { "LIGHTMODE"="PrePassBase" "QUEUE"="Geometry" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="Opaque" }
  Cull [_Cull]
  GpuProgramID 132435
Program "vp" {
SubProgram "gles " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_8;
  tmpvar_8 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_9;
  highp vec3 vRotatedWindVector_10;
  highp vec3 FinalPosition_11;
  highp vec3 tmpvar_12;
  tmpvar_12 = tmpvar_1.xyz;
  FinalPosition_11 = tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_10 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_9 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_10 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_9 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_17;
    vPos_17 = tmpvar_12;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_18;
      vPos_18 = tmpvar_12;
      highp float fTime_19;
      highp float fAdherenceScale_20;
      highp vec3 vWindVector_21;
      vWindVector_21 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_19 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_22;
      highp float fOscillation_23;
      fOscillation_23 = 1.0;
      highp float fAmount_24;
      highp float fTarget_25;
      highp vec4 tmpvar_26;
      tmpvar_26.x = (fTime_19 + _glesMultiTexCoord0.w);
      tmpvar_26.y = ((fTime_19 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_26.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_19 + _glesMultiTexCoord0.w));
      tmpvar_26.w = ((fTime_19 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_27;
      tmpvar_27 = abs(((
        fract((tmpvar_26 + 0.5))
       * 2.0) - 1.0));
      vOscillations_22 = (((
        (tmpvar_27 * tmpvar_27)
       * 
        (3.0 - (2.0 * tmpvar_27))
      ) - 0.5) * 2.0);
      highp float tmpvar_28;
      tmpvar_28 = (vOscillations_22.y * vOscillations_22.z);
      fTarget_25 = 1.0;
      fAmount_24 = tmpvar_28;
      if ((tmpvar_28 < 0.0)) {
        fTarget_25 = -1.0;
        fAmount_24 = -(tmpvar_28);
      };
      fOscillation_23 = (((
        mix (mix (tmpvar_28, fTarget_25, fAmount_24), fTarget_25, fAmount_24)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_22.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_23 = (fOscillation_23 * (1.0 + (vOscillations_22.w * _ST_WindBranchWhip.x)));
      vPos_18 = (_glesVertex.xyz + ((vWindVector_21 * fOscillation_23) * _ST_WindBranch.y));
      highp vec4 tmpvar_29;
      tmpvar_29.zw = vec2(0.0, 0.0);
      tmpvar_29.x = ((fTime_19 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_29.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_30;
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      tmpvar_30 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      fAdherenceScale_20 = (1.0 - ((tmpvar_30.x * tmpvar_30.y) * (
        (tmpvar_30.x * tmpvar_30.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_20 = (fAdherenceScale_20 + ((vOscillations_22.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_18 = (vPos_18 + ((
        ((vRotatedBranchAnchor_9 - vPos_18) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_20) * _glesMultiTexCoord0.z));
      vPos_17 = vPos_18;
    } else {
      highp vec3 vPos_32;
      vPos_32 = vPos_17;
      highp float fTime_33;
      highp vec3 vWindVector_34;
      vWindVector_34 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_33 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_35;
      highp float fOscillation_36;
      fOscillation_36 = 1.0;
      highp float fAmount_37;
      highp float fTarget_38;
      highp vec4 tmpvar_39;
      tmpvar_39.w = 0.0;
      tmpvar_39.x = (fTime_33 + _glesMultiTexCoord0.w);
      tmpvar_39.y = ((fTime_33 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_39.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_33 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      vOscillations_35 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      highp float tmpvar_41;
      tmpvar_41 = (vOscillations_35.y * vOscillations_35.z);
      fTarget_38 = 1.0;
      fAmount_37 = tmpvar_41;
      if ((tmpvar_41 < 0.0)) {
        fTarget_38 = -1.0;
        fAmount_37 = -(tmpvar_41);
      };
      fOscillation_36 = (((
        mix (mix (tmpvar_41, fTarget_38, fAmount_37), fTarget_38, fAmount_37)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_35.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_32 = (vPos_17 + ((vWindVector_34 * fOscillation_36) * _ST_WindBranch.y));
      vPos_17 = vPos_32;
    };
    FinalPosition_11 = vPos_17;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_42;
    vPos_42 = FinalPosition_11;
    highp float fMoveAmount_43;
    highp float fAdjust_44;
    highp float fLength_45;
    fLength_45 = sqrt(dot (FinalPosition_11, FinalPosition_11));
    highp float tmpvar_46;
    tmpvar_46 = (max ((FinalPosition_11.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_44 = tmpvar_46;
    if ((tmpvar_46 != 0.0)) {
      fAdjust_44 = pow (tmpvar_46, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_47;
    tmpvar_47.zw = vec2(0.0, 0.0);
    tmpvar_47.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_47.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_48;
    highp vec4 tmpvar_49;
    tmpvar_49 = abs(((
      fract((tmpvar_47 + 0.5))
     * 2.0) - 1.0));
    tmpvar_48 = (((
      (tmpvar_49 * tmpvar_49)
     * 
      (3.0 - (2.0 * tmpvar_49))
    ) - 0.5) * 2.0);
    fMoveAmount_43 = ((_ST_WindGlobal.y * (tmpvar_48.x + 
      (tmpvar_48.y * tmpvar_48.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_43 = (fMoveAmount_43 * fAdjust_44);
    vPos_42.xz = (FinalPosition_11.xz + (vRotatedWindVector_10.xz * fMoveAmount_43));
    vPos_42 = (normalize(vPos_42) * fLength_45);
    FinalPosition_11 = vPos_42;
  };
  tmpvar_8.xyz = FinalPosition_11;
  tmpvar_5 = tmpvar_6;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].y;
  v_51.y = _World2Object[1].y;
  v_51.z = _World2Object[2].y;
  v_51.w = _World2Object[3].y;
  highp vec4 v_52;
  v_52.x = _World2Object[0].z;
  v_52.y = _World2Object[1].z;
  v_52.z = _World2Object[2].z;
  v_52.w = _World2Object[3].z;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize(((
    (v_50.xyz * _glesNormal.x)
   + 
    (v_51.xyz * _glesNormal.y)
  ) + (v_52.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_53;
  tmpvar_4 = worldNormal_3;
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_8).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump float _Shininess;
varying mediump vec3 xlv_TEXCOORD0;
void main ()
{
  lowp vec4 res_1;
  lowp vec3 tmpvar_2;
  tmpvar_2 = xlv_TEXCOORD0;
  res_1.xyz = ((tmpvar_2 * 0.5) + 0.5);
  res_1.w = _Shininess;
  gl_FragData[0] = res_1;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
mediump float t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp float t9;
highp float t13;
highp vec2 t15;
highp vec2 t16;
highp float t19;
bool tb19;
highp float t20;
bool tb20;
highp float t21;
void main()
{
    //Instruction 38071
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 38072
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 38073
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 38074
    //MUL
    t7.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 38075
    //MAD
    t7.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t7.xyz;
    //Instruction 38076
    //MAD
    t7.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t7.xyz;
    //Instruction 38077
    //DP3
    t13 = dot(t7.xyz, t7.xyz);
    //Instruction 38078
    //RSQ
    t13 = inversesqrt(t13);
    //Instruction 38079
    //MUL
    t7.xy = vec2(t13) * t7.xz;
    //Instruction 38080
    //AND
    t7.xy = mix(vec2(0.0, 0.0), t7.xy, bvec2(tb1));
    //Instruction 38081
    //GE
    tb19 = t16_0>=3.000000;
    //Instruction 38082
    //IF
    if(tb19){
        //Instruction 38083
        //EQ
        tb19 = t16_0==5.000000;
        //Instruction 38084
        //IF
        if(tb19){
            //Instruction 38085
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 38086
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 38087
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 38088
            //DP3
            t19 = dot(t2.xyz, t2.xyz);
            //Instruction 38089
            //RSQ
            t19 = inversesqrt(t19);
            //Instruction 38090
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 38091
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38092
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 38093
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38094
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 38095
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38096
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38097
            //ADD
            t0.x = t19 + in_TEXCOORD0.w;
            //Instruction 38098
            //MAD
            t0.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38099
            //MUL
            t20 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 38100
            //MUL
            t0.z = t20 * 0.500000;
            //Instruction 38101
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 38102
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 38103
            //FRC
            t0 = fract(t0);
            //Instruction 38104
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 38105
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 38106
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 38107
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 38108
            //ADD
            t0 = t0 + t0;
            //Instruction 38109
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 38110
            //LT
            tb20 = t4.w<0.0;
            //Instruction 38111
            //MOV
            t4.y = (-t4.w);
            //Instruction 38112
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 38113
            //MOVC
            t4.xy = (bool(tb20)) ? t4.xy : t4.zw;
            //Instruction 38114
            //MAD
            t20 = (-t0.y) * t0.z + t4.x;
            //Instruction 38115
            //MAD
            t20 = t4.y * t20 + t4.w;
            //Instruction 38116
            //ADD
            t21 = (-t20) + t4.x;
            //Instruction 38117
            //MAD
            t20 = t4.y * t21 + t20;
            //Instruction 38118
            //MUL
            t20 = t20 * _ST_WindBranchTwitch.x;
            //Instruction 38119
            //ADD
            t21 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38120
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38121
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 38122
            //MAD
            t20 = t20 * t21 + t4.x;
            //Instruction 38123
            //MAD
            t21 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 38124
            //MUL
            t20 = t20 * t21;
            //Instruction 38125
            //MUL
            t3.xyz = vec3(t20) * t3.xyz;
            //Instruction 38126
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38127
            //MAD
            t4.x = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38128
            //MUL
            t19 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 38129
            //MAD
            t4.y = t19 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 38130
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 38131
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 38132
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 38133
            //MUL
            t16.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 38134
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 38135
            //MAD
            t4.xy = t16.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 38136
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 38137
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 38138
            //MUL
            t19 = t4.x * t4.y;
            //Instruction 38139
            //MAD
            t19 = (-t19) * _ST_WindTurbulences.x + 1.0;
            //Instruction 38140
            //MUL
            t20 = t0.w * _ST_WindVector.w;
            //Instruction 38141
            //MAD
            t19 = t20 * _ST_WindBranchWhip.x + t19;
            //Instruction 38142
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 38143
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 38144
            //MUL
            t2.xyz = vec3(t19) * t2.xyz;
            //Instruction 38145
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 38146
        //ELSE
        } else {
            //Instruction 38147
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 38148
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 38149
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38150
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 38151
            //ADD
            t19 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 38152
            //ADD
            t19 = t19 + _ST_WindBranch.x;
            //Instruction 38153
            //ADD
            t4.x = t19 + in_TEXCOORD0.w;
            //Instruction 38154
            //MAD
            t4.y = t19 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 38155
            //MUL
            t19 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 38156
            //MUL
            t4.z = t19 * 0.500000;
            //Instruction 38157
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 38158
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 38159
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 38160
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 38161
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 38162
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 38163
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 38164
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 38165
            //LT
            tb19 = t0.w<0.0;
            //Instruction 38166
            //MOV
            t0.y = (-t0.w);
            //Instruction 38167
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 38168
            //MOVC
            t5.xy = (bool(tb19)) ? t0.xy : t0.zw;
            //Instruction 38169
            //MAD
            t19 = (-t4.y) * t4.z + t5.x;
            //Instruction 38170
            //MAD
            t19 = t5.y * t19 + t0.w;
            //Instruction 38171
            //ADD
            t20 = (-t19) + t5.x;
            //Instruction 38172
            //MAD
            t19 = t5.y * t20 + t19;
            //Instruction 38173
            //MUL
            t19 = t19 * _ST_WindBranchTwitch.x;
            //Instruction 38174
            //ADD
            t20 = (-_ST_WindVector.w) + 1.0;
            //Instruction 38175
            //ADD
            t21 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 38176
            //MUL
            t21 = t21 * t4.x;
            //Instruction 38177
            //MAD
            t19 = t19 * t20 + t21;
            //Instruction 38178
            //MUL
            t3.xyz = vec3(t19) * t3.xyz;
            //Instruction 38179
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 38180
        //ENDIF
        }
        //Instruction 38181
    //ELSE
    } else {
        //Instruction 38182
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 38183
    //ENDIF
    }
    //Instruction 38184
    //DP3
    t19 = dot(t2.xyz, t2.xyz);
    //Instruction 38185
    //SQRT
    t19 = sqrt(t19);
    //Instruction 38186
    //DIV
    t20 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 38187
    //MAD
    t20 = (-t20) * 0.250000 + t2.y;
    //Instruction 38188
    //MAX
    t20 = max(t20, 0.0);
    //Instruction 38189
    //MUL
    t20 = t20 * _ST_WindGlobal.z;
    //Instruction 38190
    //NE
    tb3 = t20!=0.0;
    //Instruction 38191
    //LOG
    t9 = log2(t20);
    //Instruction 38192
    //MUL
    t9 = t9 * _ST_WindGlobal.w;
    //Instruction 38193
    //EXP
    t9 = exp2(t9);
    //Instruction 38194
    //MOVC
    t20 = (tb3) ? t9 : t20;
    //Instruction 38195
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 38196
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 38197
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 38198
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 38199
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 38200
    //MUL
    t15.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 38201
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 38202
    //MAD
    t3.xy = t15.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 38203
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 38204
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 38205
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 38206
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t9;
    //Instruction 38207
    //MUL
    t20 = t20 * t3.x;
    //Instruction 38208
    //MAD
    t3.xz = t7.xy * vec2(t20) + t2.xz;
    //Instruction 38209
    //MOV
    t3.y = t2.y;
    //Instruction 38210
    //DP3
    t7.x = dot(t3.xyz, t3.xyz);
    //Instruction 38211
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 38212
    //MUL
    t3.xyz = t7.xxx * t3.xyz;
    //Instruction 38213
    //MUL
    t7.xyz = vec3(t19) * t3.xyz;
    //Instruction 38214
    //MOVC
    t1.xyz = (bool(tb1)) ? t7.xyz : t2.xyz;
    //Instruction 38215
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 38216
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 38217
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 38218
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 38219
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 38220
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 38221
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 38222
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 38223
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 38224
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 38225
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 38226
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 38227
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 38228
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 38229
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 38230
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 38231
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 38232
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 38233
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 38234
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 38235
    //DP3
    t19 = dot(t1.xyz, t1.xyz);
    //Instruction 38236
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 38237
    //MUL
    t1.xyz = vec3(t19) * t1.xyz;
    //Instruction 38238
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 38239
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 38240
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 38241
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 38242
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
unifor