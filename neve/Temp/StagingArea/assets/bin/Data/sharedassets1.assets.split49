 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
bool tb7;
highp vec2 t12;
bool tb12;
highp float t18;
highp uint tu18;
void main()
{
    //Instruction 70193
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 70194
    //LT
    tb12 = 0.0<_InstanceData.x;
    //Instruction 70195
    //MOVC
    t1 = (bool(tb12)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70196
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 70197
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 70198
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70199
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 70200
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70201
    //MUL
    t12.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 70202
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70203
    //MAD
    t0.xy = t12.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 70204
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 70205
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 70206
    //DIV
    t6 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70207
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t6;
    //Instruction 70208
    //DIV
    t6 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70209
    //ADD
    t12.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70210
    //MUL
    t18 = in_COLOR0.w * 255.000000;
    //Instruction 70211
    //FTOU
    tu18 = uint(t18);
    //Instruction 70212
    //MUL
    t12.x = t12.x * _TreeSize[int(tu18) + 0].x;
    //Instruction 70213
    //MUL
    t12.x = t1.x * t12.x;
    //Instruction 70214
    //MUL
    t2.xyz = t12.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70215
    //MAD
    t12.x = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 70216
    //MAD
    t2.w = t12.x * t1.y + t2.y;
    //Instruction 70217
    //ADD
    t12.x = t1.z + _CameraXZAngle;
    //Instruction 70218
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 70219
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 70220
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 70221
    //MAD
    t6 = (-t6) * 0.250000 + t2.w;
    //Instruction 70222
    //MAX
    t6 = max(t6, 0.0);
    //Instruction 70223
    //MUL
    t6 = t6 * _ST_WindGlobal.z;
    //Instruction 70224
    //LOG
    t1.x = log2(t6);
    //Instruction 70225
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 70226
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 70227
    //NE
    tb7 = t6!=0.0;
    //Instruction 70228
    //MOVC
    t6 = (tb7) ? t1.x : t6;
    //Instruction 70229
    //MUL
    t0.x = t6 * t0.x;
    //Instruction 70230
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 70231
    //MOV
    t1.y = t2.w;
    //Instruction 70232
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 70233
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70234
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70235
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 70236
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 70237
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70238
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 70239
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 70240
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 70241
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 70242
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 70243
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 70244
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 70245
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 70246
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70247
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70248
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 70249
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70250
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70251
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 70252
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 70253
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70254
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70255
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 70256
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 70257
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 70258
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70259
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 70260
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 70261
    //MUL
    t4.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 70262
    //MAD
    t4.xyz = _Object2World[0].xyz * t1.xxx + t4.xyz;
    //Instruction 70263
    //MAD
    t4.xyz = _Object2World[2].xyz * t1.zzz + t4.xyz;
    //Instruction 70264
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 70265
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 70266
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 70267
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 70268
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 70269
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 70270
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70271
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70272
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70273
    //MAD
    t4.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70274
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t4.xy;
    //Instruction 70275
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 70276
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70277
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 70278
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 70279
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70280
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 70281
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 70282
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 70283
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 70284
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 70285
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 70286
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 70287
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70288
    //MUL
    t16_3 = t2.y * t2.y;
    //Instruction 70289
    //MAD
    t16_3 = t2.x * t2.x + (-t16_3);
    //Instruction 70290
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 70291
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 70292
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 70293
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 70294
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_3) + t16_5.xyz;
    //Instruction 70295
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70165
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 70166
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70167
    //MOV
    t1.x = t16_0.x;
    //Instruction 70168
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70169
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70170
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 70171
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70172
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70173
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 70174
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70175
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 70176
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70177
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70178
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70179
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70180
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70181
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70182
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70183
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70184
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 70185
    //MOV
    t16_0.w = 1.0;
    //Instruction 70186
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 70187
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 70188
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 70189
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 70190
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70191
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70192
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 69958
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 69959
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 69960
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 69961
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 69962
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 69963
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 69964
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 69965
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 69966
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 69967
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 69968
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 69969
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 69970
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 69971
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 69972
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 69973
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 69974
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 69975
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 69976
    //FTOU
    tu9 = uint(t9);
    //Instruction 69977
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 69978
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 69979
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 69980
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 69981
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 69982
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 69983
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 69984
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 69985
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 69986
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 69987
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 69988
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 69989
    //LOG
    t14 = log2(t7.x);
    //Instruction 69990
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 69991
    //EXP
    t14 = exp2(t14);
    //Instruction 69992
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 69993
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 69994
    //MUL
    t7.x = t7.x * t21;
    //Instruction 69995
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 69996
    //MOV
    t4.y = t3.w;
    //Instruction 69997
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 69998
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 69999
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 70000
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 70001
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70002
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 70003
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 70004
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 70005
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 70006
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 70007
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 70008
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 70009
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 70010
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70011
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70012
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70013
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 70014
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70015
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70016
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 70017
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 70018
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70019
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70020
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 70021
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 70022
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 70023
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 70024
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 70025
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 70026
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 70027
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 70028
    //MAD
    t3.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 70029
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 70030
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 70031
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 70032
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 70033
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70034
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70035
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 70036
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 70037
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 70038
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 70039
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 70040
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70041
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70042
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70043
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70044
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t8.xy : t3.xy;
    //Instruction 70045
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70046
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 70047
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 70048
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70049
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 70050
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 70051
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 70052
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 70053
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 70054
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 70055
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 70056
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70057
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 70058
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 70059
    //MUL
    t16_0 = t2.zwwx * t2.xzww;
    //Instruction 70060
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 70061
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 70062
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 70063
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 70064
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 69920
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 69921
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 69922
    //MOV
    t1.x = t16_0.x;
    //Instruction 69923
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 69924
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 69925
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 69926
    //LT
    tb1 = t16_1<0.0;
    //Instruction 69927
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69928
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 69929
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 69930
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 69931
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 69932
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 69933
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 69934
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 69935
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 69936
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 69937
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 69938
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 69939
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 69940
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 69941
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 69942
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 69943
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 69944
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 69945
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 69946
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 69947
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 69948
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 69949
    //MOV
    t16_0.w = 1.0;
    //Instruction 69950
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 69951
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 69952
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 69953
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 69954
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 69955
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 69956
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 69957
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_39;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_40;
  tmpvar_40.w = 1.0;
  tmpvar_40.xyz = worldNormal_2;
  mediump vec4 normal_41;
  normal_41 = tmpvar_40;
  mediump vec3 x2_42;
  mediump vec4 tmpvar_43;
  tmpvar_43 = (normal_41.xyzz * normal_41.yzzx);
  x2_42.x = dot (unity_SHBr, tmpvar_43);
  x2_42.y = dot (unity_SHBg, tmpvar_43);
  x2_42.z = dot (unity_SHBb, tmpvar_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_31;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_42 + (unity_SHC.xyz * (
    (normal_41.x * normal_41.x)
   - 
    (normal_41.y * normal_41.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 71663
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71664
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71665
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71666
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 71667
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 71668
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71669
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 71670
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71671
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 71672
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71673
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 71674
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 71675
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 71676
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71677
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 71678
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71679
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71680
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 71681
    //FTOU
    tu9 = uint(t9);
    //Instruction 71682
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 71683
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 71684
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71685
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 71686
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 71687
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 71688
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 71689
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 71690
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 71691
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 71692
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 71693
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 71694
    //LOG
    t14 = log2(t7.x);
    //Instruction 71695
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 71696
    //EXP
    t14 = exp2(t14);
    //Instruction 71697
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 71698
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 71699
    //MUL
    t7.x = t7.x * t21;
    //Instruction 71700
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 71701
    //MOV
    t4.y = t3.w;
    //Instruction 71702
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 71703
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 71704
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 71705
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 71706
    //SQRT
    t22 = sqrt(t22);
    //Instruction 71707
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 71708
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 71709
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 71710
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 71711
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 71712
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 71713
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 71714
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 71715
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 71716
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71717
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71718
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71719
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71720
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71721
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71722
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 71723
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71724
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71725
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71726
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 71727
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 71728
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 71729
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 71730
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 71731
    //MUL
    t3.xyz = t7.yyy * _Object2World[1].xyz;
    //Instruction 71732
    //MAD
    t3.xyz = _Object2World[0].xyz * t7.xxx + t3.xyz;
    //Instruction 71733
    //MAD
    t3.xyz = _Object2World[2].xyz * t7.zzz + t3.xyz;
    //Instruction 71734
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 71735
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71736
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 71737
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 71738
    //FRC
    t1.x = fract(t1.x);
    //Instruction 71739
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 71740
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 71741
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 71742
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 71743
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 71744
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 71745
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71746
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71747
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71748
    //MAD
    t3.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71749
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t8.xy : t3.xy;
    //Instruction 71750
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71751
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 71752
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 71753
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71754
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 71755
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 71756
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 71757
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 71758
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 71759
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 71760
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 71761
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71762
    //MUL
    t16_5 = t2.z * t2.z;
    //Instruction 71763
    //MAD
    t16_5 = t2.x * t2.x + (-t16_5);
    //Instruction 71764
    //MUL
    t16_0 = t2.zwwx * t2.xzww;
    //Instruction 71765
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 71766
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 71767
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 71768
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 71769
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 71626
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 71627
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 71628
    //MOV
    t1.x = t16_0.x;
    //Instruction 71629
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 71630
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71631
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 71632
    //LT
    tb1 = t16_1<0.0;
    //Instruction 71633
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71634
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71635
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71636
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 71637
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71638
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71639
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71640
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71641
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71642
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 71643
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 71644
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 71645
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71646
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71647
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71648
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 71649
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71650
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71651
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71652
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 71653
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71654
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 71655
    //MOV
    t16_0.w = 1.0;
    //Instruction 71656
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 71657
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 71658
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 71659
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 71660
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 71661
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71662
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 70329
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 70330
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 70331
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70332
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 70333
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 70334
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70335
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 70336
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70337
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 70338
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70339
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 70340
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 70341
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 70342
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70343
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 70344
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70345
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70346
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 70347
    //FTOU
    tu24 = uint(t24);
    //Instruction 70348
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 70349
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 70350
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70351
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 70352
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 70353
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 70354
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 70355
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 70356
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 70357
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 70358
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 70359
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 70360
    //LOG
    t1.x = log2(t8);
    //Instruction 70361
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 70362
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 70363
    //NE
    tb9 = t8!=0.0;
    //Instruction 70364
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 70365
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 70366
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 70367
    //MOV
    t1.y = t2.w;
    //Instruction 70368
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 70369
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70370
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70371
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 70372
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 70373
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70374
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 70375
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 70376
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 70377
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 70378
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 70379
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 70380
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 70381
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 70382
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 70383
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 70384
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 70385
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 70386
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 70387
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70388
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70389
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 70390
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70391
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70392
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 70393
    //ADD
    t3 = t3 + t4;
    //Instruction 70394
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70395
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70396
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 70397
    //ADD
    t3 = t3 + t4;
    //Instruction 70398
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 70399
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70400
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 70401
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 70402
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 70403
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 70404
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 70405
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70406
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 70407
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 70408
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 70409
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 70410
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70411
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 70412
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 70413
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 70414
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 70415
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 70416
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70417
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 70418
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 70419
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70420
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70421
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 70422
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 70423
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 70424
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 70425
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70426
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70427
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70428
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70429
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t2.xy;
    //Instruction 70430
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 70431
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70432
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 70433
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 70434
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70435
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 70436
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 70437
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 70438
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 70439
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 70440
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 70441
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 70442
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70443
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 70444
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 70445
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70446
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 70447
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 70448
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 70449
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 70450
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70296
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70297
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70298
    //MOV
    t1.x = t16_0.x;
    //Instruction 70299
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70300
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70301
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70302
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70303
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70304
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70305
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70306
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70307
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70308
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70309
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70310
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70311
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70312
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70313
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70314
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70315
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70316
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70317
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70318
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70319
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70320
    //MOV
    t0.w = 1.0;
    //Instruction 70321
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70322
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70323
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70324
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70325
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70326
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 70327
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70328
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_36;
  tmpvar_36 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_37;
  v_37.x = _World2Object[0].x;
  v_37.y = _World2Object[1].x;
  v_37.z = _World2Object[2].x;
  v_37.w = _World2Object[3].x;
  highp vec4 v_38;
  v_38.x = _World2Object[0].y;
  v_38.y = _World2Object[1].y;
  v_38.z = _World2Object[2].y;
  v_38.w = _World2Object[3].y;
  highp vec4 v_39;
  v_39.x = _World2Object[0].z;
  v_39.y = _World2Object[1].z;
  v_39.z = _World2Object[2].z;
  v_39.w = _World2Object[3].z;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize(((
    (v_37.xyz * _BillboardNormal.x)
   + 
    (v_38.xyz * _BillboardNormal.y)
  ) + (v_39.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_40;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = _Object2World[0].xyz;
  tmpvar_41[1] = _Object2World[1].xyz;
  tmpvar_41[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_42;
  tmpvar_42 = normalize((tmpvar_41 * _BillboardTangent));
  worldTangent_3 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_44;
  tmpvar_44 = -(tmpvar_43);
  worldBinormal_2 = tmpvar_44;
  highp vec4 tmpvar_45;
  tmpvar_45.x = worldTangent_3.x;
  tmpvar_45.y = worldBinormal_2.x;
  tmpvar_45.z = worldNormal_4.x;
  tmpvar_45.w = tmpvar_36.x;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.y;
  tmpvar_46.y = worldBinormal_2.y;
  tmpvar_46.z = worldNormal_4.y;
  tmpvar_46.w = tmpvar_36.y;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.z;
  tmpvar_47.y = worldBinormal_2.z;
  tmpvar_47.z = worldNormal_4.z;
  tmpvar_47.w = tmpvar_36.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_48;
  tmpvar_48.w = 1.0;
  tmpvar_48.xyz = worldNormal_4;
  mediump vec4 normal_49;
  normal_49 = tmpvar_48;
  mediump vec3 x2_50;
  mediump vec4 tmpvar_51;
  tmpvar_51 = (normal_49.xyzz * normal_49.yzzx);
  x2_50.x = dot (unity_SHBr, tmpvar_51);
  x2_50.y = dot (unity_SHBg, tmpvar_51);
  x2_50.z = dot (unity_SHBb, tmpvar_51);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_45;
  xlv_TEXCOORD1 = tmpvar_46;
  xlv_TEXCOORD2 = tmpvar_47;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_31;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_50 + (unity_SHC.xyz * (
    (normal_49.x * normal_49.x)
   - 
    (normal_49.y * normal_49.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec3 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec4 t4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_7;
highp float t8;
bool tb8;
bool tb9;
highp vec2 t16;
bool tb16;
highp float t24;
highp uint tu24;
void main()
{
    //Instruction 70097
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 70098
    //LT
    tb16 = 0.0<_InstanceData.x;
    //Instruction 70099
    //MOVC
    t1 = (bool(tb16)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70100
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 70101
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 70102
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70103
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 70104
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70105
    //MUL
    t16.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 70106
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70107
    //MAD
    t0.xy = t16.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 70108
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 70109
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 70110
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70111
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t8;
    //Instruction 70112
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70113
    //ADD
    t16.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70114
    //MUL
    t24 = in_COLOR0.w * 255.000000;
    //Instruction 70115
    //FTOU
    tu24 = uint(t24);
    //Instruction 70116
    //MUL
    t16.x = t16.x * _TreeSize[int(tu24) + 0].x;
    //Instruction 70117
    //MUL
    t16.x = t1.x * t16.x;
    //Instruction 70118
    //MUL
    t2.xyz = t16.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70119
    //MAD
    t16.x = in_TEXCOORD0.y * _TreeSize[int(tu24) + 0].y + _TreeSize[int(tu24) + 0].z;
    //Instruction 70120
    //MAD
    t2.w = t16.x * t1.y + t2.y;
    //Instruction 70121
    //ADD
    t16.x = t1.z + _CameraXZAngle;
    //Instruction 70122
    //MAD
    t16.x = t16.x * _TreeInfo[int(tu24) + 0].y + 0.500000;
    //Instruction 70123
    //ROUND_NI
    t16.x = floor(t16.x);
    //Instruction 70124
    //DIV
    t16.x = t16.x / _TreeInfo[int(tu24) + 0].x;
    //Instruction 70125
    //MAD
    t8 = (-t8) * 0.250000 + t2.w;
    //Instruction 70126
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 70127
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 70128
    //LOG
    t1.x = log2(t8);
    //Instruction 70129
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 70130
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 70131
    //NE
    tb9 = t8!=0.0;
    //Instruction 70132
    //MOVC
    t8 = (tb9) ? t1.x : t8;
    //Instruction 70133
    //MUL
    t0.x = t8 * t0.x;
    //Instruction 70134
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 70135
    //MOV
    t1.y = t2.w;
    //Instruction 70136
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 70137
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70138
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70139
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 70140
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 70141
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 70142
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 70143
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 70144
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 70145
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 70146
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 70147
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 70148
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 70149
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 70150
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 70151
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 70152
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 70153
    //ADD
    t2.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 70154
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 70155
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70156
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70157
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 70158
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70159
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70160
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 70161
    //ADD
    t3 = t3 + t4;
    //Instruction 70162
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70163
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70164
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 70165
    //ADD
    t3 = t3 + t4;
    //Instruction 70166
    //DP3
    t0.x = dot(t3.xyw, t3.xyw);
    //Instruction 70167
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70168
    //MUL
    t3 = t0.xxxx * t3;
    //Instruction 70169
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 70170
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 70171
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 70172
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 70173
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 70174
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 70175
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 70176
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 70177
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 70178
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70179
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 70180
    //MOV
    vs_TEXCOORD1.w = t2.y;
    //Instruction 70181
    //MOV
    vs_TEXCOORD2.w = t2.z;
    //Instruction 70182
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 70183
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 70184
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70185
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 70186
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 70187
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70188
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70189
    //GE
    tb0 = t16.x>=(-t16.x);
    //Instruction 70190
    //FRC
    t8 = fract(abs(t16.x));
    //Instruction 70191
    //MOVC
    t0.x = (tb0) ? t8 : (-t8);
    //Instruction 70192
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu24) + 0].x + _TreeInfo[int(tu24) + 0].z;
    //Instruction 70193
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70194
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70195
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70196
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70197
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb8)) ? t16.xy : t2.xy;
    //Instruction 70198
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 70199
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70200
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 70201
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 70202
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70203
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 70204
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 70205
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 70206
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 70207
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 70208
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 70209
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 70210
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70211
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 70212
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 70213
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70214
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 70215
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 70216
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 70217
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 70218
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70065
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70066
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70067
    //MOV
    t1.x = t16_0.x;
    //Instruction 70068
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70069
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70070
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70071
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70072
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70073
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70074
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70075
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70076
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70077
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70078
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70079
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70080
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70081
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70082
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70083
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70084
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70085
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70086
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70087
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70088
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70089
    //MOV
    t0.w = 1.0;
    //Instruction 70090
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70091
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70092
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70093
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70094
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70095
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70096
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 71812
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71813
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71814
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71815
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 71816
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 71817
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71818
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 71819
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71820
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 71821
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71822
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 71823
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 71824
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 71825
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71826
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 71827
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71828
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71829
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 71830
    //FTOU
    tu10 = uint(t10);
    //Instruction 71831
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 71832
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 71833
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71834
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 71835
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 71836
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 71837
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 71838
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 71839
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 71840
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 71841
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 71842
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 71843
    //LOG
    t16 = log2(t8.x);
    //Instruction 71844
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 71845
    //EXP
    t16 = exp2(t16);
    //Instruction 71846
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 71847
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 71848
    //MUL
    t8.x = t8.x * t24;
    //Instruction 71849
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 71850
    //MOV
    t4.y = t3.w;
    //Instruction 71851
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 71852
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 71853
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 71854
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 71855
    //SQRT
    t25 = sqrt(t25);
    //Instruction 71856
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 71857
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 71858
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 71859
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 71860
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 71861
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 71862
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 71863
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 71864
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 71865
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 71866
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 71867
    //MAD
    t2.xzw = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 71868
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 71869
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 71870
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71871
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71872
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 71873
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71874
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71875
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 71876
    //ADD
    t3 = t3 + t4;
    //Instruction 71877
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71878
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71879
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 71880
    //ADD
    t3 = t3 + t4;
    //Instruction 71881
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 71882
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 71883
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 71884
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 71885
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 71886
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 71887
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 71888
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 71889
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 71890
    //MUL
    t10_6.xyz = t3.wxy * t4.xyz;
    //Instruction 71891
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 71892
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 71893
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 71894
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 71895
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 71896
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 71897
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 71898
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 71899
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 71900
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 71901
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 71902
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 71903
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 71904
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 71905
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 71906
    //FRC
    t1.x = fract(t1.x);
    //Instruction 71907
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 71908
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 71909
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 71910
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 71911
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 71912
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 71913
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71914
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71915
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71916
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71917
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 71918
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71919
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 71920
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t0.xyz;
    //Instruction 71921
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71922
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 71923
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 71924
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 71925
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 71926
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 71927
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 71928
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 71929
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71930
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 71931
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 71932
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 71933
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 71934
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 71935
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 71936
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 71937
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 71770
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 71771
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 71772
    //MOV
    t1.x = t16_0.x;
    //Instruction 71773
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 71774
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71775
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 71776
    //LT
    tb1 = t16_1<0.0;
    //Instruction 71777
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71778
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 71779
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71780
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 71781
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71782
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71783
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71784
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71785
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71786
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 71787
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 71788
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 71789
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71790
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71791
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 71792
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 71793
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71794
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71795
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71796
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 71797
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 71798
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 71799
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 71800
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 71801
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71802
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 71803
    //MOV
    t0.w = 1.0;
    //Instruction 71804
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 71805
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 71806
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 71807
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 71808
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 71809
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 71810
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71811
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_16;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_16 = _InstanceData;
  } else {
    tmpvar_16 = tmpvar_1;
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_16.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_17.xz;
  billboardPos_9.y = (tmpvar_17.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_16.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_18;
    vPos_18 = billboardPos_9;
    highp float fMoveAmount_19;
    highp float fAdjust_20;
    highp float fLength_21;
    fLength_21 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_22;
    tmpvar_22 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_20 = tmpvar_22;
    if ((tmpvar_22 != 0.0)) {
      fAdjust_20 = pow (tmpvar_22, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_23;
    tmpvar_23.zw = vec2(0.0, 0.0);
    tmpvar_23.x = (tmpvar_15.x + tmpvar_16.w);
    tmpvar_23.y = (tmpvar_15.y + (tmpvar_16.w * 0.8));
    highp vec4 tmpvar_24;
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    tmpvar_24 = (((
      (tmpvar_25 * tmpvar_25)
     * 
      (3.0 - (2.0 * tmpvar_25))
    ) - 0.5) * 2.0);
    fMoveAmount_19 = ((_ST_WindGlobal.y * (tmpvar_24.x + 
      (tmpvar_24.y * tmpvar_24.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_19 = (fMoveAmount_19 * fAdjust_20);
    vPos_18.xz = (tmpvar_17.xz + (_ST_WindVector.xz * fMoveAmount_19));
    vPos_18 = (normalize(vPos_18) * fLength_21);
    billboardPos_9 = vPos_18;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_16.z);
  highp float tmpvar_26;
  tmpvar_26 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_27;
  tmpvar_27 = (fract(abs(tmpvar_26)) * tmpvar_12.x);
  highp float tmpvar_28;
  if ((tmpvar_26 >= 0.0)) {
    tmpvar_28 = tmpvar_27;
  } else {
    tmpvar_28 = -(tmpvar_27);
  };
  highp vec4 tmpvar_29;
  tmpvar_29 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_28))];
  if ((tmpvar_29.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_29.xy - (tmpvar_29.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_29.xy + (tmpvar_29.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_30;
  tmpvar_30 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_30;
  highp vec4 hPos_31;
  hPos_31 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_32;
  highp vec4 o_33;
  highp vec4 tmpvar_34;
  tmpvar_34 = (hPos_31 * 0.5);
  highp vec2 tmpvar_35;
  tmpvar_35.x = tmpvar_34.x;
  tmpvar_35.y = (tmpvar_34.y * _ProjectionParams.x);
  o_33.xy = (tmpvar_35 + tmpvar_34.w);
  o_33.zw = hPos_31.zw;
  highp vec3 tmpvar_36;
  tmpvar_36 = o_33.xyw;
  screenPos_32 = tmpvar_36;
  screenPos_32.xy = (screenPos_32.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_37;
  tmpvar_37 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_38;
  v_38.x = _World2Object[0].x;
  v_38.y = _World2Object[1].x;
  v_38.z = _World2Object[2].x;
  v_38.w = _World2Object[3].x;
  highp vec4 v_39;
  v_39.x = _World2Object[0].y;
  v_39.y = _World2Object[1].y;
  v_39.z = _World2Object[2].y;
  v_39.w = _World2Object[3].y;
  highp vec4 v_40;
  v_40.x = _World2Object[0].z;
  v_40.y = _World2Object[1].z;
  v_40.z = _World2Object[2].z;
  v_40.w = _World2Object[3].z;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize(((
    (v_38.xyz * _BillboardNormal.x)
   + 
    (v_39.xyz * _BillboardNormal.y)
  ) + (v_40.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_41;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = _Object2World[0].xyz;
  tmpvar_42[1] = _Object2World[1].xyz;
  tmpvar_42[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_43;
  tmpvar_43 = normalize((tmpvar_42 * _BillboardTangent));
  worldTangent_3 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_45;
  tmpvar_45 = -(tmpvar_44);
  worldBinormal_2 = tmpvar_45;
  highp vec4 tmpvar_46;
  tmpvar_46.x = worldTangent_3.x;
  tmpvar_46.y = worldBinormal_2.x;
  tmpvar_46.z = worldNormal_4.x;
  tmpvar_46.w = tmpvar_37.x;
  highp vec4 tmpvar_47;
  tmpvar_47.x = worldTangent_3.y;
  tmpvar_47.y = worldBinormal_2.y;
  tmpvar_47.z = worldNormal_4.y;
  tmpvar_47.w = tmpvar_37.y;
  highp vec4 tmpvar_48;
  tmpvar_48.x = worldTangent_3.z;
  tmpvar_48.y = worldBinormal_2.z;
  tmpvar_48.z = worldNormal_4.z;
  tmpvar_48.w = tmpvar_37.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_49;
  tmpvar_49.w = 1.0;
  tmpvar_49.xyz = worldNormal_4;
  mediump vec4 normal_50;
  normal_50 = tmpvar_49;
  mediump vec3 x2_51;
  mediump vec4 tmpvar_52;
  tmpvar_52 = (normal_50.xyzz * normal_50.yzzx);
  x2_51.x = dot (unity_SHBr, tmpvar_52);
  x2_51.y = dot (unity_SHBg, tmpvar_52);
  x2_51.z = dot (unity_SHBb, tmpvar_52);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_46;
  xlv_TEXCOORD1 = tmpvar_47;
  xlv_TEXCOORD2 = tmpvar_48;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_32;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_51 + (unity_SHC.xyz * (
    (normal_50.x * normal_50.x)
   - 
    (normal_50.y * normal_50.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
mediump float t16_5;
lowp vec3 t10_6;
mediump vec3 t16_7;
highp vec3 t8;
highp vec2 t9;
highp float t10;
highp uint tu10;
highp float t16;
highp vec2 t18;
highp float t24;
highp float t25;
bool tb25;
void main()
{
    //Instruction 70492
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 70493
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70494
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70495
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 70496
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 70497
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70498
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70499
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70500
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70501
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70502
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70503
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70504
    //MAD
    t24 = t2.y * t2.y + t2.x;
    //Instruction 70505
    //DIV
    t25 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70506
    //MAD
    t24 = _ST_WindGlobal.y * t24 + t25;
    //Instruction 70507
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70508
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 70509
    //MUL
    t10 = in_COLOR0.w * 255.000000;
    //Instruction 70510
    //FTOU
    tu10 = uint(t10);
    //Instruction 70511
    //MUL
    t2.x = t2.x * _TreeSize[int(tu10) + 0].x;
    //Instruction 70512
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 70513
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 70514
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu10) + 0].y + _TreeSize[int(tu10) + 0].z;
    //Instruction 70515
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 70516
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 70517
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].y + 0.500000;
    //Instruction 70518
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 70519
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu10) + 0].x;
    //Instruction 70520
    //MAD
    t8.x = (-t25) * 0.250000 + t3.w;
    //Instruction 70521
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 70522
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 70523
    //LOG
    t16 = log2(t8.x);
    //Instruction 70524
    //MUL
    t16 = t16 * _ST_WindGlobal.w;
    //Instruction 70525
    //EXP
    t16 = exp2(t16);
    //Instruction 70526
    //NE
    tb25 = t8.x!=0.0;
    //Instruction 70527
    //MOVC
    t8.x = (tb25) ? t16 : t8.x;
    //Instruction 70528
    //MUL
    t8.x = t8.x * t24;
    //Instruction 70529
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 70530
    //MOV
    t4.y = t3.w;
    //Instruction 70531
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 70532
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 70533
    //MUL
    t8.xyz = t8.xxx * t4.xyz;
    //Instruction 70534
    //DP3
    t25 = dot(t3.xzw, t3.xzw);
    //Instruction 70535
    //SQRT
    t25 = sqrt(t25);
    //Instruction 70536
    //MUL
    t8.xyz = t8.xyz * vec3(t25);
    //Instruction 70537
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 70538
    //LT
    tb25 = 0.0<t16_5;
    //Instruction 70539
    //MOVC
    t8.xyz = (bool(tb25)) ? t8.xyz : t3.xwz;
    //Instruction 70540
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 70541
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 70542
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 70543
    //MAD
    t3 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 70544
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70545
    //MUL
    t2.xzw = t8.yyy * _Object2World[1].xyz;
    //Instruction 70546
    //MAD
    t2.xzw = _Object2World[0].xyz * t8.xxx + t2.xzw;
    //Instruction 70547
    //MAD
    t2.xzw = _Object2World[2].xyz * t8.zzz + t2.xzw;
    //Instruction 70548
    //ADD
    t2.xzw = t2.xzw + _Object2World[3].xyz;
    //Instruction 70549
    //MOV
    vs_TEXCOORD0.w = t2.x;
    //Instruction 70550
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 70551
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 70552
    //MUL
    t3.zw = _World2Object[2].xx * _BillboardNormal.xyzx.xx;
    //Instruction 70553
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 70554
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 70555
    //MUL
    t4.zw = _World2Object[2].yy * _BillboardNormal.xyzx.yy;
    //Instruction 70556
    //ADD
    t3 = t3 + t4;
    //Instruction 70557
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 70558
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 70559
    //MUL
    t4.zw = _World2Object[2].zz * _BillboardNormal.xyzx.zz;
    //Instruction 70560
    //ADD
    t3 = t3 + t4;
    //Instruction 70561
    //DP3
    t25 = dot(t3.xyw, t3.xyw);
    //Instruction 70562
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 70563
    //MUL
    t3 = vec4(t25) * t3;
    //Instruction 70564
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 70565
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 70566
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 70567
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 70568
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 70569
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 70570
    //MUL
    t10_6.xyz = t3.wxy * t4.xyz;
    //Instruction 70571
    //MAD
    t10_6.xyz = t3.ywx * t4.yzx + (-t10_6.xyz);
    //Instruction 70572
    //MOV
    vs_TEXCOORD0.y = (-t10_6.x);
    //Instruction 70573
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70574
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 70575
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 70576
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 70577
    //MOV
    vs_TEXCOORD1.w = t2.z;
    //Instruction 70578
    //MOV
    vs_TEXCOORD2.w = t2.w;
    //Instruction 70579
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70580
    //MOV
    vs_TEXCOORD1.y = (-t10_6.y);
    //Instruction 70581
    //MOV
    vs_TEXCOORD2.y = (-t10_6.z);
    //Instruction 70582
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70583
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70584
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 70585
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 70586
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70587
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70588
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 70589
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 70590
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 70591
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 70592
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu10) + 0].x + _TreeInfo[int(tu10) + 0].z;
    //Instruction 70593
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70594
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70595
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70596
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70597
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 70598
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70599
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 70600
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t0.xyz;
    //Instruction 70601
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70602
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 70603
    //MUL
    t24 = t0.y * _ProjectionParams.x;
    //Instruction 70604
    //MUL
    t1.w = t24 * 0.500000;
    //Instruction 70605
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 70606
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 70607
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 70608
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 70609
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70610
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 70611
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 70612
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70613
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 70614
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 70615
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 70616
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_5) + t16_7.xyz;
    //Instruction 70617
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70451
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70452
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70453
    //MOV
    t1.x = t16_0.x;
    //Instruction 70454
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70455
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70456
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70457
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70458
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70459
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70460
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70461
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70462
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70463
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70464
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70465
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70466
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70467
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70468
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70469
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70470
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70471
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70472
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70473
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70474
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70475
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70476
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70477
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70478
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70479
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70480
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70481
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70482
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70483
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70484
    //MOV
    t0.w = 1.0;
    //Instruction 70485
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70486
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70487
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70488
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70489
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70490
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70491
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_2;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 70248
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70249
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70250
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70251
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 70252
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70253
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 70254
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 70255
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70256
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70257
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70258
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70259
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70260
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70261
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70262
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70263
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70264
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70265
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 70266
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70267
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 70268
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 70269
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 70270
    //MUL
    t3.y = t0.y * t23;
    //Instruction 70271
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 70272
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 70273
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 70274
    //LOG
    t23 = log2(t9);
    //Instruction 70275
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 70276
    //EXP
    t23 = exp2(t23);
    //Instruction 70277
    //NE
    tb24 = t9!=0.0;
    //Instruction 70278
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 70279
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 70280
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70281
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 70282
    //MUL
    t9 = t0.x * t9;
    //Instruction 70283
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 70284
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 70285
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 70286
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70287
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 70288
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70289
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 70290
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 70291
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 70292
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70293
    //MOV
    t4.y = t3.y;
    //Instruction 70294
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 70295
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 70296
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 70297
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 70298
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70299
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 70300
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70301
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70302
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70303
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70304
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70305
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70306
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 70307
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 70308
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 70309
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 70310
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 70311
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 70312
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 70313
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 70314
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70315
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 70316
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 70317
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70318
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 70319
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 70320
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 70321
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 70322
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 70323
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70324
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 70325
    //MUL
    t1.x = t1.x * t22;
    //Instruction 70326
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 70327
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 70328
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 70329
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 70330
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 70331
    //MUL
    t24 = t22 * t1.x;
    //Instruction 70332
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 70333
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 70334
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 70335
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 70336
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 70337
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 70338
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 70339
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 70340
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 70341
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 70342
    //LT
    tb15 = t22<(-t22);
    //Instruction 70343
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 70344
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 70345
    //LT
    tb8 = t1.x<0.0;
    //Instruction 70346
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 70347
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 70348
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70349
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 70350
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70351
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 70352
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 70353
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70354
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 70355
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 70356
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70357
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70358
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70359
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70360
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 70361
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 70362
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70363
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70364
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70365
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70366
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70367
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 70368
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 70369
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70370
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70371
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70372
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 70373
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70374
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 70375
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 70376
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 70377
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 70378
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 70379
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 70380
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 70381
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70219
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 70220
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70221
    //MOV
    t1.x = t16_0.x;
    //Instruction 70222
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70223
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70224
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 70225
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70226
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70227
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 70228
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70229
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 70230
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70231
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70232
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70233
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70234
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70235
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70236
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70237
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70238
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 70239
    //MOV
    t16_0.w = 1.0;
    //Instruction 70240
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 70241
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 70242
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 70243
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 70244
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70245
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 70246
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70247
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_50;
  tmpvar_50.w = 1.0;
  tmpvar_50.xyz = worldNormal_2;
  mediump vec4 normal_51;
  normal_51 = tmpvar_50;
  mediump vec3 x2_52;
  mediump vec4 tmpvar_53;
  tmpvar_53 = (normal_51.xyzz * normal_51.yzzx);
  x2_52.x = dot (unity_SHBr, tmpvar_53);
  x2_52.y = dot (unity_SHBg, tmpvar_53);
  x2_52.z = dot (unity_SHBb, tmpvar_53);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_42;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_52 + (unity_SHC.xyz * (
    (normal_51.x * normal_51.x)
   - 
    (normal_51.y * normal_51.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
bool tb4;
mediump float t16_5;
mediump vec3 t16_6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 70410
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70411
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70412
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70413
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 70414
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70415
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 70416
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 70417
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70418
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70419
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70420
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70421
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70422
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70423
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70424
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70425
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70426
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70427
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 70428
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70429
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 70430
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 70431
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 70432
    //MUL
    t3.y = t0.y * t23;
    //Instruction 70433
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 70434
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 70435
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 70436
    //LOG
    t23 = log2(t9);
    //Instruction 70437
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 70438
    //EXP
    t23 = exp2(t23);
    //Instruction 70439
    //NE
    tb24 = t9!=0.0;
    //Instruction 70440
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 70441
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 70442
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70443
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 70444
    //MUL
    t9 = t0.x * t9;
    //Instruction 70445
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 70446
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 70447
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 70448
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70449
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 70450
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70451
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 70452
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 70453
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 70454
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70455
    //MOV
    t4.y = t3.y;
    //Instruction 70456
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 70457
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 70458
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 70459
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 70460
    //SQRT
    t22 = sqrt(t22);
    //Instruction 70461
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 70462
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70463
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70464
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70465
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70466
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70467
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70468
    //MUL
    t3.x = t8.y * _World2Object[0].x;
    //Instruction 70469
    //MUL
    t3.y = t8.y * _World2Object[1].x;
    //Instruction 70470
    //MUL
    t3.z = t8.y * _World2Object[2].x;
    //Instruction 70471
    //MUL
    t4.x = (-t8.x) * _World2Object[0].z;
    //Instruction 70472
    //MUL
    t4.y = (-t8.x) * _World2Object[1].z;
    //Instruction 70473
    //MUL
    t4.z = (-t8.x) * _World2Object[2].z;
    //Instruction 70474
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 70475
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 70476
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70477
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 70478
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 70479
    //MUL
    t4.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70480
    //MAD
    t4.xyz = _Object2World[0].xyz * t2.xxx + t4.xyz;
    //Instruction 70481
    //MAD
    t4.xyz = _Object2World[2].xyz * t2.www + t4.xyz;
    //Instruction 70482
    //ADD
    vs_TEXCOORD1.xyz = t4.xyz + _Object2World[3].xyz;
    //Instruction 70483
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 70484
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 70485
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70486
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 70487
    //MUL
    t1.x = t1.x * t22;
    //Instruction 70488
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 70489
    //MAD
    t24 = t22 * 0.020835 + -0.085133;
    //Instruction 70490
    //MAD
    t24 = t22 * t24 + 0.180141;
    //Instruction 70491
    //MAD
    t24 = t22 * t24 + -0.330299;
    //Instruction 70492
    //MAD
    t22 = t22 * t24 + 0.999866;
    //Instruction 70493
    //MUL
    t24 = t22 * t1.x;
    //Instruction 70494
    //MAD
    t24 = t24 * -2.000000 + 1.570796;
    //Instruction 70495
    //LT
    tb4 = abs(t8.y)<abs(t8.x);
    //Instruction 70496
    //AND
    t24 = tb4 ? t24 : float(0.0);
    //Instruction 70497
    //MAD
    t1.x = t1.x * t22 + t24;
    //Instruction 70498
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 70499
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 70500
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 70501
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 70502
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 70503
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 70504
    //LT
    tb15 = t22<(-t22);
    //Instruction 70505
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 70506
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 70507
    //LT
    tb8 = t1.x<0.0;
    //Instruction 70508
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 70509
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 70510
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70511
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 70512
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70513
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 70514
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 70515
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70516
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 70517
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 70518
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70519
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70520
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70521
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70522
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb8)) ? t15.xy : t4.xy;
    //Instruction 70523
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 70524
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70525
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70526
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70527
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70528
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70529
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 70530
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 70531
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70532
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70533
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70534
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 70535
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70536
    //MUL
    t16_5 = t3.y * t3.y;
    //Instruction 70537
    //MAD
    t16_5 = t3.x * t3.x + (-t16_5);
    //Instruction 70538
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 70539
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 70540
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 70541
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 70542
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_5) + t16_6.xyz;
    //Instruction 70543
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70382
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 70383
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70384
    //MOV
    t1.x = t16_0.x;
    //Instruction 70385
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70386
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70387
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 70388
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70389
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70390
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 70391
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70392
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 70393
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70394
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70395
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70396
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70397
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70398
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70399
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70400
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70401
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 70402
    //MOV
    t16_0.w = 1.0;
    //Instruction 70403
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 70404
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 70405
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 70406
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 70407
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70408
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70409
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_2;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 70656
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70657
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70658
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 70659
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70660
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70661
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 70662
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 70663
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70664
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70665
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70666
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70667
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70668
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70669
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70670
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70671
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70672
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 70673
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70674
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 70675
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 70676
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 70677
    //MUL
    t3.y = t0.y * t26;
    //Instruction 70678
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 70679
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 70680
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 70681
    //LOG
    t26 = log2(t10);
    //Instruction 70682
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 70683
    //EXP
    t26 = exp2(t26);
    //Instruction 70684
    //NE
    tb27 = t10!=0.0;
    //Instruction 70685
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 70686
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 70687
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70688
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 70689
    //MUL
    t10 = t0.x * t10;
    //Instruction 70690
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70691
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 70692
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70693
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 70694
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70695
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 70696
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70697
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 70698
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 70699
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 70700
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70701
    //MOV
    t5.y = t3.y;
    //Instruction 70702
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70703
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70704
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70705
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 70706
    //SQRT
    t27 = sqrt(t27);
    //Instruction 70707
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 70708
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70709
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70710
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70711
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70712
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70713
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70714
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 70715
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 70716
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 70717
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70718
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70719
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 70720
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 70721
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 70722
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70723
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 70724
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 70725
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70726
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 70727
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 70728
    //ADD
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 70729
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 70730
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 70731
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 70732
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70733
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70734
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 70735
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 70736
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70737
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70738
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 70739
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 70740
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 70741
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 70742
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 70743
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 70744
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 70745
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 70746
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 70747
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 70748
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 70749
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 70750
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 70751
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70752
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 70753
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 70754
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 70755
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 70756
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 70757
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 70758
    //LT
    tb9 = t1.x<0.0;
    //Instruction 70759
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 70760
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 70761
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70762
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 70763
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70764
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 70765
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 70766
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70767
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 70768
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 70769
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70770
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70771
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70772
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70773
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 70774
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70775
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70776
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70777
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70778
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70779
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 70780
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 70781
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70782
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70783
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70784
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 70785
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70786
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 70787
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 70788
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 70789
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 70790
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 70791
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 70792
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 70793
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70618
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 70619
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70620
    //MOV
    t1.x = t16_0.x;
    //Instruction 70621
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70622
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70623
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 70624
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70625
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70626
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 70627
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70628
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70629
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70630
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70631
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70632
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70633
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70634
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70635
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70636
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70637
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70638
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70639
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 70640
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70641
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70642
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70643
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70644
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70645
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70646
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 70647
    //MOV
    t16_0.w = 1.0;
    //Instruction 70648
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 70649
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 70650
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 70651
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 70652
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70653
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 70654
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70655
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_48;
  v_48.x = _World2Object[0].x;
  v_48.y = _World2Object[1].x;
  v_48.z = _World2Object[2].x;
  v_48.w = _World2Object[3].x;
  highp vec4 v_49;
  v_49.x = _World2Object[0].z;
  v_49.y = _World2Object[1].z;
  v_49.z = _World2Object[2].z;
  v_49.w = _World2Object[3].z;
  highp vec3 tmpvar_50;
  tmpvar_50 = normalize(((v_48.xyz * tmpvar_17.z) + (v_49.xyz * tmpvar_18.z)));
  worldNormal_2 = tmpvar_50;
  tmpvar_3 = worldNormal_2;
  tmpvar_5.zw = vec2(0.0, 0.0);
  tmpvar_5.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_51;
  tmpvar_51.w = 1.0;
  tmpvar_51.xyz = worldNormal_2;
  mediump vec4 normal_52;
  normal_52 = tmpvar_51;
  mediump vec3 x2_53;
  mediump vec4 tmpvar_54;
  tmpvar_54 = (normal_52.xyzz * normal_52.yzzx);
  x2_53.x = dot (unity_SHBr, tmpvar_54);
  x2_53.y = dot (unity_SHBg, tmpvar_54);
  x2_53.z = dot (unity_SHBb, tmpvar_54);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = screenPos_43;
  xlv_TEXCOORD6 = tmpvar_5;
  xlv_TEXCOORD7 = (x2_53 + (unity_SHC.xyz * (
    (normal_52.x * normal_52.x)
   - 
    (normal_52.y * normal_52.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
mediump float t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
highp float t25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 71975
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 71976
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 71977
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 71978
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71979
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71980
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 71981
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 71982
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 71983
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 71984
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71985
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 71986
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71987
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 71988
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 71989
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 71990
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71991
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 71992
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71993
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 71994
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 71995
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 71996
    //MUL
    t3.y = t0.y * t26;
    //Instruction 71997
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 71998
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 71999
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 72000
    //LOG
    t26 = log2(t10);
    //Instruction 72001
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 72002
    //EXP
    t26 = exp2(t26);
    //Instruction 72003
    //NE
    tb27 = t10!=0.0;
    //Instruction 72004
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 72005
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 72006
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72007
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 72008
    //MUL
    t10 = t0.x * t10;
    //Instruction 72009
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 72010
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 72011
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 72012
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 72013
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 72014
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 72015
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 72016
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 72017
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 72018
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 72019
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 72020
    //MOV
    t5.y = t3.y;
    //Instruction 72021
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 72022
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 72023
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 72024
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 72025
    //SQRT
    t27 = sqrt(t27);
    //Instruction 72026
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 72027
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 72028
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 72029
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 72030
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 72031
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 72032
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 72033
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 72034
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 72035
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 72036
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 72037
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 72038
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 72039
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 72040
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 72041
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 72042
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 72043
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 72044
    //MUL
    t5.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 72045
    //MAD
    t5.xyz = _Object2World[0].xyz * t2.xxx + t5.xyz;
    //Instruction 72046
    //MAD
    t5.xyz = _Object2World[2].xyz * t2.www + t5.xyz;
    //Instruction 72047
    //ADD
    vs_TEXCOORD1.xyz = t5.xyz + _Object2World[3].xyz;
    //Instruction 72048
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 72049
    //ADD
    t1.x = t9.y + t9.x;
    //Instruction 72050
    //ADD
    t1.x = t9.z + t1.x;
    //Instruction 72051
    //FRC
    t1.x = fract(t1.x);
    //Instruction 72052
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 72053
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 72054
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 72055
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 72056
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 72057
    //MUL
    t1.x = t1.x * t9.x;
    //Instruction 72058
    //MUL
    t9.x = t1.x * t1.x;
    //Instruction 72059
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 72060
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 72061
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 72062
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 72063
    //MUL
    t17.x = t9.x * t1.x;
    //Instruction 72064
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 72065
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 72066
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 72067
    //MAD
    t1.x = t1.x * t9.x + t17.x;
    //Instruction 72068
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 72069
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 72070
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 72071
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 72072
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 72073
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 72074
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 72075
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 72076
    //MOVC
    t1.x = (ti9 != 0) ? (-t1.x) : t1.x;
    //Instruction 72077
    //LT
    tb9 = t1.x<0.0;
    //Instruction 72078
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 72079
    //ADD
    t1.x = t9.x + t1.x;
    //Instruction 72080
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 72081
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 72082
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 72083
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu18) + 0].x;
    //Instruction 72084
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 72085
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 72086
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 72087
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 72088
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72089
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 72090
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 72091
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 72092
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb9)) ? t17.xy : t4.xy;
    //Instruction 72093
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 72094
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 72095
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 72096
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 72097
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 72098
    //MUL
    t25 = t1.y * _ProjectionParams.x;
    //Instruction 72099
    //MUL
    t2.w = t25 * 0.500000;
    //Instruction 72100
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 72101
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 72102
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 72103
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 72104
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 72105
    //MUL
    t16_6 = t3.y * t3.y;
    //Instruction 72106
    //MAD
    t16_6 = t3.x * t3.x + (-t16_6);
    //Instruction 72107
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 72108
    //DP4
    t16_7.x = dot(unity_SHBr, t16_0);
    //Instruction 72109
    //DP4
    t16_7.y = dot(unity_SHBg, t16_0);
    //Instruction 72110
    //DP4
    t16_7.z = dot(unity_SHBb, t16_0);
    //Instruction 72111
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_6) + t16_7.xyz;
    //Instruction 72112
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 71938
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 71939
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 71940
    //MOV
    t1.x = t16_0.x;
    //Instruction 71941
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 71942
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71943
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 71944
    //LT
    tb1 = t16_1<0.0;
    //Instruction 71945
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71946
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71947
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71948
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 71949
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71950
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71951
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71952
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71953
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71954
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 71955
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 71956
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 71957
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71958
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71959
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71960
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 71961
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71962
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 71963
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 71964
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 71965
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 71966
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 71967
    //MOV
    t16_0.w = 1.0;
    //Instruction 71968
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 71969
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 71970
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 71971
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 71972
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 71973
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 71974
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_18));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_6 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 70577
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70578
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70579
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70580
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 70581
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70582
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 70583
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 70584
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70585
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70586
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70587
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70588
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70589
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70590
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70591
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70592
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70593
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70594
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 70595
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70596
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 70597
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 70598
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 70599
    //MUL
    t3.y = t0.y * t29;
    //Instruction 70600
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 70601
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 70602
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 70603
    //LOG
    t29 = log2(t11);
    //Instruction 70604
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 70605
    //EXP
    t29 = exp2(t29);
    //Instruction 70606
    //NE
    tb30 = t11!=0.0;
    //Instruction 70607
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 70608
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 70609
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70610
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 70611
    //MUL
    t11 = t0.x * t11;
    //Instruction 70612
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 70613
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 70614
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 70615
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70616
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 70617
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70618
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 70619
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 70620
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 70621
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70622
    //MOV
    t4.y = t3.y;
    //Instruction 70623
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 70624
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 70625
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 70626
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 70627
    //SQRT
    t28 = sqrt(t28);
    //Instruction 70628
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 70629
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70630
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70631
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70632
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70633
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70634
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70635
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 70636
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 70637
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 70638
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 70639
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 70640
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 70641
    //ADD
    t3 = t3 + t4;
    //Instruction 70642
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 70643
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70644
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 70645
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 70646
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 70647
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 70648
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70649
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 70650
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 70651
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 70652
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 70653
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70654
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 70655
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 70656
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 70657
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 70658
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70659
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 70660
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 70661
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 70662
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 70663
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 70664
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70665
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 70666
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 70667
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70668
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70669
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 70670
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70671
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 70672
    //MUL
    t1.x = t1.x * t28;
    //Instruction 70673
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 70674
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 70675
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 70676
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 70677
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 70678
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 70679
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 70680
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 70681
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 70682
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 70683
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 70684
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 70685
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 70686
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 70687
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 70688
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 70689
    //LT
    tb19 = t28<(-t28);
    //Instruction 70690
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 70691
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 70692
    //LT
    tb10 = t1.x<0.0;
    //Instruction 70693
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 70694
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 70695
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70696
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 70697
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70698
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 70699
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 70700
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70701
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 70702
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 70703
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70704
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70705
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70706
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70707
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 70708
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 70709
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70710
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70711
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70712
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70713
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70714
    //MUL
    t28 = t1.y * _ProjectionParams.x;
    //Instruction 70715
    //MUL
    t2.w = t28 * 0.500000;
    //Instruction 70716
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70717
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70718
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70719
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 70720
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70721
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 70722
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 70723
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70724
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 70725
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 70726
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 70727
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 70728
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70544
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70545
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70546
    //MOV
    t1.x = t16_0.x;
    //Instruction 70547
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70548
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70549
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70550
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70551
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70552
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70553
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70554
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70555
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70556
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70557
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70558
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70559
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70560
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70561
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70562
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70563
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70564
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70565
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70566
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70567
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70568
    //MOV
    t0.w = 1.0;
    //Instruction 70569
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70570
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70571
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70572
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70573
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70574
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 70575
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70576
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_42;
  hPos_42 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_43;
  highp vec4 o_44;
  highp vec4 tmpvar_45;
  tmpvar_45 = (hPos_42 * 0.5);
  highp vec2 tmpvar_46;
  tmpvar_46.x = tmpvar_45.x;
  tmpvar_46.y = (tmpvar_45.y * _ProjectionParams.x);
  o_44.xy = (tmpvar_46 + tmpvar_45.w);
  o_44.zw = hPos_42.zw;
  highp vec3 tmpvar_47;
  tmpvar_47 = o_44.xyw;
  screenPos_43 = tmpvar_47;
  screenPos_43.xy = (screenPos_43.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_48;
  tmpvar_48 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_49;
  v_49.x = _World2Object[0].x;
  v_49.y = _World2Object[1].x;
  v_49.z = _World2Object[2].x;
  v_49.w = _World2Object[3].x;
  highp vec4 v_50;
  v_50.x = _World2Object[0].z;
  v_50.y = _World2Object[1].z;
  v_50.z = _World2Object[2].z;
  v_50.w = _World2Object[3].z;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize(((v_49.xyz * tmpvar_18.z) + (v_50.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_51;
  highp mat3 tmpvar_52;
  tmpvar_52[0] = _Object2World[0].xyz;
  tmpvar_52[1] = _Object2World[1].xyz;
  tmpvar_52[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_53;
  tmpvar_53 = normalize((tmpvar_52 * tmpvar_18));
  worldTangent_3 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_55;
  tmpvar_55 = -(tmpvar_54);
  worldBinormal_2 = tmpvar_55;
  highp vec4 tmpvar_56;
  tmpvar_56.x = worldTangent_3.x;
  tmpvar_56.y = worldBinormal_2.x;
  tmpvar_56.z = worldNormal_4.x;
  tmpvar_56.w = tmpvar_48.x;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.y;
  tmpvar_57.y = worldBinormal_2.y;
  tmpvar_57.z = worldNormal_4.y;
  tmpvar_57.w = tmpvar_48.y;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.z;
  tmpvar_58.y = worldBinormal_2.z;
  tmpvar_58.z = worldNormal_4.z;
  tmpvar_58.w = tmpvar_48.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_4;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_56;
  xlv_TEXCOORD1 = tmpvar_57;
  xlv_TEXCOORD2 = tmpvar_58;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_43;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_11;
  x_11 = (tmpvar_5 - _Cutoff);
  if ((x_11 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
mediump float t16_7;
mediump vec3 t16_8;
highp vec3 t10;
highp int ti10;
bool tb10;
highp float t11;
bool tb13;
highp vec2 t19;
bool tb19;
highp vec2 t20;
highp uint tu20;
highp float t28;
bool tb28;
highp float t29;
bool tb30;
void main()
{
    //Instruction 70826
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70827
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70828
    //ADD
    t10.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70829
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 70830
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70831
    //ADD
    t2.x = t0.w + t10.x;
    //Instruction 70832
    //MAD
    t2.y = t0.w * 0.800000 + t10.y;
    //Instruction 70833
    //ADD
    t10.xyz = (-t10.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70834
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70835
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70836
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70837
    //MUL
    t20.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70838
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70839
    //MAD
    t2.xy = t20.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70840
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70841
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70842
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70843
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t11;
    //Instruction 70844
    //DIV
    t11 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70845
    //MUL
    t20.x = in_COLOR0.w * 255.000000;
    //Instruction 70846
    //FTOU
    tu20 = uint(t20.x);
    //Instruction 70847
    //MAD
    t29 = in_TEXCOORD0.y * _TreeSize[int(tu20) + 0].y + _TreeSize[int(tu20) + 0].z;
    //Instruction 70848
    //MUL
    t3.y = t0.y * t29;
    //Instruction 70849
    //MAD
    t11 = (-t11) * 0.250000 + t3.y;
    //Instruction 70850
    //MAX
    t11 = max(t11, 0.0);
    //Instruction 70851
    //MUL
    t11 = t11 * _ST_WindGlobal.z;
    //Instruction 70852
    //LOG
    t29 = log2(t11);
    //Instruction 70853
    //MUL
    t29 = t29 * _ST_WindGlobal.w;
    //Instruction 70854
    //EXP
    t29 = exp2(t29);
    //Instruction 70855
    //NE
    tb30 = t11!=0.0;
    //Instruction 70856
    //MOVC
    t11 = (tb30) ? t29 : t11;
    //Instruction 70857
    //MUL
    t2.x = t11 * t2.x;
    //Instruction 70858
    //ADD
    t11 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70859
    //MUL
    t11 = t11 * _TreeSize[int(tu20) + 0].x;
    //Instruction 70860
    //MUL
    t11 = t0.x * t11;
    //Instruction 70861
    //DP3
    t19.x = dot(t10.xyz, t10.xyz);
    //Instruction 70862
    //RSQ
    t19.x = inversesqrt(t19.x);
    //Instruction 70863
    //MUL
    t4.xy = t19.xx * t10.xz;
    //Instruction 70864
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70865
    //DP2
    t10.x = dot(t4.xz, t4.xw);
    //Instruction 70866
    //MUL
    t19.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70867
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 70868
    //MUL
    t10.xy = t10.xx * t19.xy;
    //Instruction 70869
    //MUL
    t3.xz = t10.xy * vec2(t11);
    //Instruction 70870
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70871
    //MOV
    t4.y = t3.y;
    //Instruction 70872
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 70873
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 70874
    //MUL
    t2.xyw = vec3(t28) * t4.xyz;
    //Instruction 70875
    //DP3
    t28 = dot(t3.xyz, t3.xyz);
    //Instruction 70876
    //SQRT
    t28 = sqrt(t28);
    //Instruction 70877
    //MUL
    t2.xyw = vec3(t28) * t2.xyw;
    //Instruction 70878
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70879
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70880
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70881
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70882
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70883
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70884
    //MUL
    t3.x = t10.y * _World2Object[0].x;
    //Instruction 70885
    //MUL
    t3.y = t10.y * _World2Object[1].x;
    //Instruction 70886
    //MUL
    t3.zw = t10.yy * _World2Object[2].xx;
    //Instruction 70887
    //MUL
    t4.x = (-t10.x) * _World2Object[0].z;
    //Instruction 70888
    //MUL
    t4.y = (-t10.x) * _World2Object[1].z;
    //Instruction 70889
    //MUL
    t4.zw = (-t10.xx) * _World2Object[2].zz;
    //Instruction 70890
    //ADD
    t3 = t3 + t4;
    //Instruction 70891
    //DP3
    t1.x = dot(t3.xyw, t3.xyw);
    //Instruction 70892
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70893
    //MUL
    t3 = t1.xxxx * t3;
    //Instruction 70894
    //MUL
    t4.xyz = t10.yyy * _Object2World[2].yzx;
    //Instruction 70895
    //MAD
    t4.xyz = _Object2World[0].yzx * t10.xxx + t4.xyz;
    //Instruction 70896
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 70897
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70898
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 70899
    //MUL
    t10_5.xyz = t3.wxy * t4.xyz;
    //Instruction 70900
    //MAD
    t10_5.xyz = t3.ywx * t4.yzx + (-t10_5.xyz);
    //Instruction 70901
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 70902
    //MUL
    t6.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70903
    //MAD
    t6.xyz = _Object2World[0].xyz * t2.xxx + t6.xyz;
    //Instruction 70904
    //MAD
    t6.xyz = _Object2World[2].xyz * t2.www + t6.xyz;
    //Instruction 70905
    //ADD
    t6.xyz = t6.xyz + _Object2World[3].xyz;
    //Instruction 70906
    //MOV
    vs_TEXCOORD0.w = t6.x;
    //Instruction 70907
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 70908
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 70909
    //MOV
    vs_TEXCOORD1.w = t6.y;
    //Instruction 70910
    //MOV
    vs_TEXCOORD2.w = t6.z;
    //Instruction 70911
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 70912
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 70913
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 70914
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 70915
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 70916
    //MOV
    vs_TEXCOORD2.z = t3.w;
    //Instruction 70917
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70918
    //MAX
    t1.x = max(abs(t10.y), abs(t10.x));
    //Instruction 70919
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70920
    //MIN
    t28 = min(abs(t10.y), abs(t10.x));
    //Instruction 70921
    //MUL
    t1.x = t1.x * t28;
    //Instruction 70922
    //MUL
    t28 = t1.x * t1.x;
    //Instruction 70923
    //MAD
    t4.x = t28 * 0.020835 + -0.085133;
    //Instruction 70924
    //MAD
    t4.x = t28 * t4.x + 0.180141;
    //Instruction 70925
    //MAD
    t4.x = t28 * t4.x + -0.330299;
    //Instruction 70926
    //MAD
    t28 = t28 * t4.x + 0.999866;
    //Instruction 70927
    //MUL
    t4.x = t28 * t1.x;
    //Instruction 70928
    //MAD
    t4.x = t4.x * -2.000000 + 1.570796;
    //Instruction 70929
    //LT
    tb13 = abs(t10.y)<abs(t10.x);
    //Instruction 70930
    //AND
    t4.x = tb13 ? t4.x : float(0.0);
    //Instruction 70931
    //MAD
    t1.x = t1.x * t28 + t4.x;
    //Instruction 70932
    //LT
    tb28 = t10.y<(-t10.y);
    //Instruction 70933
    //AND
    t28 = tb28 ? -3.141593 : float(0.0);
    //Instruction 70934
    //ADD
    t1.x = t28 + t1.x;
    //Instruction 70935
    //MIN
    t28 = min(t10.y, (-t10.x));
    //Instruction 70936
    //MAX
    t10.x = max(t10.y, (-t10.x));
    //Instruction 70937
    //GE
    tb10 = t10.x>=(-t10.x);
    //Instruction 70938
    //LT
    tb19 = t28<(-t28);
    //Instruction 70939
    //AND
    ti10 = int(uint(tb10) & uint(tb19));
    //Instruction 70940
    //MOVC
    t1.x = (ti10 != 0) ? (-t1.x) : t1.x;
    //Instruction 70941
    //LT
    tb10 = t1.x<0.0;
    //Instruction 70942
    //AND
    t10.x = tb10 ? 6.283185 : float(0.0);
    //Instruction 70943
    //ADD
    t1.x = t10.x + t1.x;
    //Instruction 70944
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70945
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].y + 0.500000;
    //Instruction 70946
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70947
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu20) + 0].x;
    //Instruction 70948
    //GE
    tb10 = t1.x>=(-t1.x);
    //Instruction 70949
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70950
    //MOVC
    t1.x = (tb10) ? t1.x : (-t1.x);
    //Instruction 70951
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu20) + 0].x + _TreeInfo[int(tu20) + 0].z;
    //Instruction 70952
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70953
    //LT
    tb10 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70954
    //MAD
    t19.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70955
    //MAD
    t4.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70956
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb10)) ? t19.xy : t4.xy;
    //Instruction 70957
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 70958
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70959
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70960
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70961
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70962
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70963
    //MUL
    t28 = t1.y * _ProjectionParams.x;
    //Instruction 70964
    //MUL
    t2.w = t28 * 0.500000;
    //Instruction 70965
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70966
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70967
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70968
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 70969
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70970
    //MUL
    t16_7 = t3.y * t3.y;
    //Instruction 70971
    //MAD
    t16_7 = t3.x * t3.x + (-t16_7);
    //Instruction 70972
    //MUL
    t16_0 = t3.ywzx * t3;
    //Instruction 70973
    //DP4
    t16_8.x = dot(unity_SHBr, t16_0);
    //Instruction 70974
    //DP4
    t16_8.y = dot(unity_SHBg, t16_0);
    //Instruction 70975
    //DP4
    t16_8.z = dot(unity_SHBb, t16_0);
    //Instruction 70976
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_7) + t16_8.xyz;
    //Instruction 70977
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
void main()
{
    //Instruction 70794
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70795
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70796
    //MOV
    t1.x = t16_0.x;
    //Instruction 70797
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70798
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70799
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70800
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70801
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70802
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70803
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70804
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70805
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70806
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70807
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70808
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70809
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70810
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70811
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70812
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70813
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70814
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70815
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70816
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70817
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70818
    //MOV
    t0.w = 1.0;
    //Instruction 70819
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70820
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70821
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70822
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70823
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70824
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70825
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_18));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_12;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_6 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_15);
  worldN_3.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_15);
  worldN_3.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_15);
  worldN_3.z = tmpvar_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = worldN_3;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_19;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  mediump vec4 outDiffuseOcclusion_22;
  mediump vec4 outNormal_23;
  mediump vec4 emission_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = tmpvar_5;
  outDiffuseOcclusion_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_23 = tmpvar_26;
  lowp vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = vec3(0.0, 0.0, 0.0);
  emission_24 = tmpvar_27;
  emission_24.xyz = (emission_24.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_21)));
  outDiffuse_1.xyz = outDiffuseOcclusion_22.xyz;
  outEmission_2.w = emission_24.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_24.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_23;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump float t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
highp float t31;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 72155
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 72156
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 72157
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 72158
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 72159
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 72160
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 72161
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 72162
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 72163
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 72164
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 72165
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 72166
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 72167
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 72168
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 72169
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 72170
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 72171
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 72172
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 72173
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 72174
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 72175
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 72176
    //MUL
    t3.y = t0.y * t32;
    //Instruction 72177
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 72178
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 72179
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 72180
    //LOG
    t32 = log2(t12);
    //Instruction 72181
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 72182
    //EXP
    t32 = exp2(t32);
    //Instruction 72183
    //NE
    tb33 = t12!=0.0;
    //Instruction 72184
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 72185
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 72186
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72187
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 72188
    //MUL
    t12 = t0.x * t12;
    //Instruction 72189
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 72190
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 72191
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 72192
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 72193
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 72194
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 72195
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 72196
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 72197
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 72198
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 72199
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 72200
    //MOV
    t5.y = t3.y;
    //Instruction 72201
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 72202
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 72203
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 72204
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 72205
    //SQRT
    t33 = sqrt(t33);
    //Instruction 72206
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 72207
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 72208
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 72209
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 72210
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 72211
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 72212
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 72213
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 72214
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 72215
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 72216
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 72217
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 72218
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 72219
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 72220
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 72221
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 72222
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 72223
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 72224
    //ADD
    t5 = t5 + t6;
    //Instruction 72225
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 72226
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 72227
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 72228
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 72229
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 72230
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 72231
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 72232
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 72233
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 72234
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 72235
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 72236
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 72237
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 72238
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 72239
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 72240
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 72241
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 72242
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 72243
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 72244
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 72245
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 72246
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 72247
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 72248
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 72249
    //FRC
    t1.x = fract(t1.x);
    //Instruction 72250
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 72251
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 72252
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 72253
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 72254
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 72255
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 72256
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 72257
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 72258
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 72259
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 72260
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 72261
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 72262
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 72263
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 72264
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 72265
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 72266
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 72267
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 72268
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 72269
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 72270
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 72271
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 72272
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 72273
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 72274
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 72275
    //LT
    tb11 = t1.x<0.0;
    //Instruction 72276
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 72277
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 72278
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 72279
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 72280
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 72281
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 72282
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 72283
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 72284
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 72285
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 72286
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72287
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 72288
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 72289
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 72290
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t3.xy;
    //Instruction 72291
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 72292
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 72293
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 72294
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 72295
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 72296
    //MUL
    t31 = t1.y * _ProjectionParams.x;
    //Instruction 72297
    //MUL
    t2.w = t31 * 0.500000;
    //Instruction 72298
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 72299
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 72300
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 72301
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 72302
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 72303
    //MUL
    t16_8 = t5.y * t5.y;
    //Instruction 72304
    //MAD
    t16_8 = t5.x * t5.x + (-t16_8);
    //Instruction 72305
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 72306
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 72307
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 72308
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 72309
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_8) + t16_9.xyz;
    //Instruction 72310
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 72113
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 72114
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 72115
    //MOV
    t1.x = t16_0.x;
    //Instruction 72116
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 72117
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 72118
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 72119
    //LT
    tb1 = t16_1<0.0;
    //Instruction 72120
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72121
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 72122
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72123
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 72124
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72125
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 72126
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 72127
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 72128
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 72129
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 72130
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 72131
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 72132
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 72133
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 72134
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 72135
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 72136
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 72137
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 72138
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 72139
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 72140
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 72141
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 72142
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 72143
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 72144
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 72145
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 72146
    //MOV
    t0.w = 1.0;
    //Instruction 72147
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 72148
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 72149
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 72150
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 72151
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 72152
    //EXP
    SV_Target3.xyz = exp2((-t16_3.xyz));
    //Instruction 72153
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 72154
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp vec3 angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_glesVertex.xyz + tmpvar_14);
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize((_WorldSpaceCameraPos - tmpvar_15));
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = -(tmpvar_16.z);
  tmpvar_17.z = tmpvar_16.x;
  highp vec3 tmpvar_18;
  tmpvar_18 = normalize(tmpvar_17);
  highp vec3 tmpvar_19;
  tmpvar_19.y = 0.0;
  tmpvar_19.x = tmpvar_18.z;
  tmpvar_19.z = -(tmpvar_18.x);
  highp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = (min (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0) / max (abs(
    (tmpvar_19.z / tmpvar_18.z)
  ), 1.0));
  highp float tmpvar_22;
  tmpvar_22 = (tmpvar_21 * tmpvar_21);
  tmpvar_22 = (((
    ((((
      ((((-0.01213232 * tmpvar_22) + 0.05368138) * tmpvar_22) - 0.1173503)
     * tmpvar_22) + 0.1938925) * tmpvar_22) - 0.3326756)
   * tmpvar_22) + 0.9999793) * tmpvar_21);
  tmpvar_22 = (tmpvar_22 + (float(
    (abs((tmpvar_19.z / tmpvar_18.z)) > 1.0)
  ) * (
    (tmpvar_22 * -2.0)
   + 1.570796)));
  tmpvar_20 = (tmpvar_22 * sign((tmpvar_19.z / tmpvar_18.z)));
  if ((abs(tmpvar_18.z) > (1e-08 * abs(tmpvar_19.z)))) {
    if ((tmpvar_18.z < 0.0)) {
      if ((tmpvar_19.z >= 0.0)) {
        tmpvar_20 += 3.141593;
      } else {
        tmpvar_20 = (tmpvar_20 - 3.141593);
      };
    };
  } else {
    tmpvar_20 = (sign(tmpvar_19.z) * 1.570796);
  };
  angle_10 = vec3(tmpvar_20);
  bvec3 tmpvar_23;
  tmpvar_23 = lessThan (vec3(tmpvar_20), vec3(0.0, 0.0, 0.0));
  float tmpvar_24;
  if (tmpvar_23.x) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_23.y) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  float tmpvar_26;
  if (tmpvar_23.z) {
    tmpvar_26 = 6.283185;
  } else {
    tmpvar_26 = 0.0;
  };
  vec3 tmpvar_27;
  tmpvar_27.x = tmpvar_24;
  tmpvar_27.y = tmpvar_25;
  tmpvar_27.z = tmpvar_26;
  angle_10 = (vec3(tmpvar_20) + tmpvar_27);
  highp vec4 tmpvar_28;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_28 = _InstanceData;
  } else {
    tmpvar_28 = tmpvar_1;
  };
  highp vec3 tmpvar_29;
  tmpvar_29 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_28.x) * tmpvar_18);
  billboardPos_9.xz = tmpvar_29.xz;
  billboardPos_9.y = (tmpvar_29.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_28.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_30;
    vPos_30 = billboardPos_9;
    highp float fMoveAmount_31;
    highp float fAdjust_32;
    highp float fLength_33;
    fLength_33 = sqrt(dot (billboardPos_9, billboardPos_9));
    highp float tmpvar_34;
    tmpvar_34 = (max ((billboardPos_9.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_32 = tmpvar_34;
    if ((tmpvar_34 != 0.0)) {
      fAdjust_32 = pow (tmpvar_34, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_35;
    tmpvar_35.zw = vec2(0.0, 0.0);
    tmpvar_35.x = (tmpvar_15.x + tmpvar_28.w);
    tmpvar_35.y = (tmpvar_15.y + (tmpvar_28.w * 0.8));
    highp vec4 tmpvar_36;
    highp vec4 tmpvar_37;
    tmpvar_37 = abs(((
      fract((tmpvar_35 + 0.5))
     * 2.0) - 1.0));
    tmpvar_36 = (((
      (tmpvar_37 * tmpvar_37)
     * 
      (3.0 - (2.0 * tmpvar_37))
    ) - 0.5) * 2.0);
    fMoveAmount_31 = ((_ST_WindGlobal.y * (tmpvar_36.x + 
      (tmpvar_36.y * tmpvar_36.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_31 = (fMoveAmount_31 * fAdjust_32);
    vPos_30.xz = (tmpvar_29.xz + (_ST_WindVector.xz * fMoveAmount_31));
    vPos_30 = (normalize(vPos_30) * fLength_33);
    billboardPos_9 = vPos_30;
  };
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (angle_10 + tmpvar_28.z);
  highp vec3 tmpvar_38;
  tmpvar_38 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.xxx);
  highp vec3 tmpvar_39;
  tmpvar_39 = (fract(abs(tmpvar_38)) * tmpvar_12.xxx);
  highp float tmpvar_40;
  if ((tmpvar_38.x >= 0.0)) {
    tmpvar_40 = tmpvar_39.x;
  } else {
    tmpvar_40 = -(tmpvar_39.x);
  };
  highp vec4 tmpvar_41;
  tmpvar_41 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_40))];
  if ((tmpvar_41.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_41.xy - (tmpvar_41.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_41.xy + (tmpvar_41.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_42;
  tmpvar_42 = clamp ((fract(
    ((tmpvar_15.x + tmpvar_15.y) + tmpvar_15.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_42;
  highp vec4 hPos_43;
  hPos_43 = (glstate_matrix_mvp * tmpvar_7);
  mediump vec3 screenPos_44;
  highp vec4 o_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (hPos_43 * 0.5);
  highp vec2 tmpvar_47;
  tmpvar_47.x = tmpvar_46.x;
  tmpvar_47.y = (tmpvar_46.y * _ProjectionParams.x);
  o_45.xy = (tmpvar_47 + tmpvar_46.w);
  o_45.zw = hPos_43.zw;
  highp vec3 tmpvar_48;
  tmpvar_48 = o_45.xyw;
  screenPos_44 = tmpvar_48;
  screenPos_44.xy = (screenPos_44.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec3 tmpvar_49;
  tmpvar_49 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_50;
  v_50.x = _World2Object[0].x;
  v_50.y = _World2Object[1].x;
  v_50.z = _World2Object[2].x;
  v_50.w = _World2Object[3].x;
  highp vec4 v_51;
  v_51.x = _World2Object[0].z;
  v_51.y = _World2Object[1].z;
  v_51.z = _World2Object[2].z;
  v_51.w = _World2Object[3].z;
  highp vec3 tmpvar_52;
  tmpvar_52 = normalize(((v_50.xyz * tmpvar_18.z) + (v_51.xyz * tmpvar_19.z)));
  worldNormal_4 = tmpvar_52;
  highp mat3 tmpvar_53;
  tmpvar_53[0] = _Object2World[0].xyz;
  tmpvar_53[1] = _Object2World[1].xyz;
  tmpvar_53[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize((tmpvar_53 * tmpvar_18));
  worldTangent_3 = tmpvar_54;
  lowp vec3 tmpvar_55;
  tmpvar_55 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_56;
  tmpvar_56 = -(tmpvar_55);
  worldBinormal_2 = tmpvar_56;
  highp vec4 tmpvar_57;
  tmpvar_57.x = worldTangent_3.x;
  tmpvar_57.y = worldBinormal_2.x;
  tmpvar_57.z = worldNormal_4.x;
  tmpvar_57.w = tmpvar_49.x;
  highp vec4 tmpvar_58;
  tmpvar_58.x = worldTangent_3.y;
  tmpvar_58.y = worldBinormal_2.y;
  tmpvar_58.z = worldNormal_4.y;
  tmpvar_58.w = tmpvar_49.y;
  highp vec4 tmpvar_59;
  tmpvar_59.x = worldTangent_3.z;
  tmpvar_59.y = worldBinormal_2.z;
  tmpvar_59.z = worldNormal_4.z;
  tmpvar_59.w = tmpvar_49.z;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_60;
  tmpvar_60.w = 1.0;
  tmpvar_60.xyz = worldNormal_4;
  mediump vec4 normal_61;
  normal_61 = tmpvar_60;
  mediump vec3 x2_62;
  mediump vec4 tmpvar_63;
  tmpvar_63 = (normal_61.xyzz * normal_61.yzzx);
  x2_62.x = dot (unity_SHBr, tmpvar_63);
  x2_62.y = dot (unity_SHBg, tmpvar_63);
  x2_62.z = dot (unity_SHBb, tmpvar_63);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_57;
  xlv_TEXCOORD1 = tmpvar_58;
  xlv_TEXCOORD2 = tmpvar_59;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_44;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_62 + (unity_SHC.xyz * (
    (normal_61.x * normal_61.x)
   - 
    (normal_61.y * normal_61.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_5 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_2.x = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_2.y = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_2.z = tmpvar_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = worldN_2;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_18;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  mediump vec4 outDiffuseOcclusion_21;
  mediump vec4 outNormal_22;
  mediump vec4 emission_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = tmpvar_4;
  outDiffuseOcclusion_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_22 = tmpvar_25;
  lowp vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = vec3(0.0, 0.0, 0.0);
  emission_23 = tmpvar_26;
  emission_23.xyz = (emission_23.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_20)));
  outDiffuse_1.xyz = outDiffuseOcclusion_21.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_22;
  gl_FragData[3] = emission_23;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
lowp vec3 t10_7;
mediump float t16_8;
mediump vec3 t16_9;
highp vec3 t11;
highp int ti11;
bool tb11;
highp float t12;
highp vec2 t21;
bool tb21;
highp vec2 t22;
highp uint tu22;
highp float t31;
bool tb31;
highp float t32;
highp float t33;
bool tb33;
void main()
{
    //Instruction 70770
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 70771
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 70772
    //LT
    tb11 = 0.0<_InstanceData.x;
    //Instruction 70773
    //MOVC
    t0 = (bool(tb11)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70774
    //ADD
    t11.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70775
    //ADD
    t2.x = t0.w + t11.x;
    //Instruction 70776
    //MAD
    t2.y = t0.w * 0.800000 + t11.y;
    //Instruction 70777
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 70778
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 70779
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70780
    //MUL
    t22.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 70781
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70782
    //MAD
    t2.xy = t22.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 70783
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 70784
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 70785
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70786
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t12;
    //Instruction 70787
    //DIV
    t12 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70788
    //MUL
    t22.x = in_COLOR0.w * 255.000000;
    //Instruction 70789
    //FTOU
    tu22 = uint(t22.x);
    //Instruction 70790
    //MAD
    t32 = in_TEXCOORD0.y * _TreeSize[int(tu22) + 0].y + _TreeSize[int(tu22) + 0].z;
    //Instruction 70791
    //MUL
    t3.y = t0.y * t32;
    //Instruction 70792
    //MAD
    t12 = (-t12) * 0.250000 + t3.y;
    //Instruction 70793
    //MAX
    t12 = max(t12, 0.0);
    //Instruction 70794
    //MUL
    t12 = t12 * _ST_WindGlobal.z;
    //Instruction 70795
    //LOG
    t32 = log2(t12);
    //Instruction 70796
    //MUL
    t32 = t32 * _ST_WindGlobal.w;
    //Instruction 70797
    //EXP
    t32 = exp2(t32);
    //Instruction 70798
    //NE
    tb33 = t12!=0.0;
    //Instruction 70799
    //MOVC
    t12 = (tb33) ? t32 : t12;
    //Instruction 70800
    //MUL
    t2.x = t12 * t2.x;
    //Instruction 70801
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70802
    //MUL
    t12 = t12 * _TreeSize[int(tu22) + 0].x;
    //Instruction 70803
    //MUL
    t12 = t0.x * t12;
    //Instruction 70804
    //ADD
    t4.xyz = (-t11.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70805
    //DP3
    t32 = dot(t4.xyz, t4.xyz);
    //Instruction 70806
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 70807
    //MUL
    t4.xy = vec2(t32) * t4.xz;
    //Instruction 70808
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 70809
    //DP2
    t32 = dot(t4.xz, t4.xw);
    //Instruction 70810
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 70811
    //RSQ
    t32 = inversesqrt(t32);
    //Instruction 70812
    //MUL
    t4.xy = vec2(t32) * t4.xy;
    //Instruction 70813
    //MUL
    t3.xz = vec2(t12) * t4.xy;
    //Instruction 70814
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 70815
    //MOV
    t5.y = t3.y;
    //Instruction 70816
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 70817
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 70818
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 70819
    //DP3
    t33 = dot(t3.xyz, t3.xyz);
    //Instruction 70820
    //SQRT
    t33 = sqrt(t33);
    //Instruction 70821
    //MUL
    t2.xyw = t2.xyw * vec3(t33);
    //Instruction 70822
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 70823
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 70824
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 70825
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 70826
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 70827
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 70828
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 70829
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 70830
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 70831
    //ADD
    t3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 70832
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 70833
    //MUL
    t5.x = t4.y * _World2Object[0].x;
    //Instruction 70834
    //MUL
    t5.y = t4.y * _World2Object[1].x;
    //Instruction 70835
    //MUL
    t5.zw = t4.yy * _World2Object[2].xx;
    //Instruction 70836
    //MUL
    t6.x = (-t4.x) * _World2Object[0].z;
    //Instruction 70837
    //MUL
    t6.y = (-t4.x) * _World2Object[1].z;
    //Instruction 70838
    //MUL
    t6.zw = (-t4.xx) * _World2Object[2].zz;
    //Instruction 70839
    //ADD
    t5 = t5 + t6;
    //Instruction 70840
    //DP3
    t1.x = dot(t5.xyw, t5.xyw);
    //Instruction 70841
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70842
    //MUL
    t5 = t1.xxxx * t5;
    //Instruction 70843
    //MUL
    t6.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 70844
    //MAD
    t6.xyz = _Object2World[0].yzx * t4.xxx + t6.xyz;
    //Instruction 70845
    //DP3
    t1.x = dot(t6.xyz, t6.xyz);
    //Instruction 70846
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 70847
    //MUL
    t6.xyz = t1.xxx * t6.xyz;
    //Instruction 70848
    //MUL
    t10_7.xyz = t5.wxy * t6.xyz;
    //Instruction 70849
    //MAD
    t10_7.xyz = t5.ywx * t6.yzx + (-t10_7.xyz);
    //Instruction 70850
    //MOV
    vs_TEXCOORD0.y = (-t10_7.x);
    //Instruction 70851
    //MOV
    vs_TEXCOORD0.z = t5.x;
    //Instruction 70852
    //MOV
    vs_TEXCOORD0.x = t6.z;
    //Instruction 70853
    //MOV
    vs_TEXCOORD1.w = t3.y;
    //Instruction 70854
    //MOV
    vs_TEXCOORD2.w = t3.z;
    //Instruction 70855
    //MOV
    vs_TEXCOORD1.x = t6.x;
    //Instruction 70856
    //MOV
    vs_TEXCOORD2.x = t6.y;
    //Instruction 70857
    //MOV
    vs_TEXCOORD1.z = t5.y;
    //Instruction 70858
    //MOV
    vs_TEXCOORD1.y = (-t10_7.y);
    //Instruction 70859
    //MOV
    vs_TEXCOORD2.y = (-t10_7.z);
    //Instruction 70860
    //MOV
    vs_TEXCOORD2.z = t5.w;
    //Instruction 70861
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 70862
    //ADD
    t1.x = t11.y + t11.x;
    //Instruction 70863
    //ADD
    t1.x = t11.z + t1.x;
    //Instruction 70864
    //FRC
    t1.x = fract(t1.x);
    //Instruction 70865
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 70866
    //MOV
    vs_TEXCOORD4.z = t1.x;
    //Instruction 70867
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 70868
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 70869
    //MIN
    t11.x = min(abs(t4.y), abs(t4.x));
    //Instruction 70870
    //MUL
    t1.x = t1.x * t11.x;
    //Instruction 70871
    //MUL
    t11.x = t1.x * t1.x;
    //Instruction 70872
    //MAD
    t21.x = t11.x * 0.020835 + -0.085133;
    //Instruction 70873
    //MAD
    t21.x = t11.x * t21.x + 0.180141;
    //Instruction 70874
    //MAD
    t21.x = t11.x * t21.x + -0.330299;
    //Instruction 70875
    //MAD
    t11.x = t11.x * t21.x + 0.999866;
    //Instruction 70876
    //MUL
    t21.x = t11.x * t1.x;
    //Instruction 70877
    //MAD
    t21.x = t21.x * -2.000000 + 1.570796;
    //Instruction 70878
    //LT
    tb31 = abs(t4.y)<abs(t4.x);
    //Instruction 70879
    //AND
    t21.x = tb31 ? t21.x : float(0.0);
    //Instruction 70880
    //MAD
    t1.x = t1.x * t11.x + t21.x;
    //Instruction 70881
    //LT
    tb11 = t4.y<(-t4.y);
    //Instruction 70882
    //AND
    t11.x = tb11 ? -3.141593 : float(0.0);
    //Instruction 70883
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 70884
    //MIN
    t11.x = min(t4.y, (-t4.x));
    //Instruction 70885
    //MAX
    t21.x = max(t4.y, (-t4.x));
    //Instruction 70886
    //GE
    tb21 = t21.x>=(-t21.x);
    //Instruction 70887
    //LT
    tb11 = t11.x<(-t11.x);
    //Instruction 70888
    //AND
    ti11 = int(uint(tb21) & uint(tb11));
    //Instruction 70889
    //MOVC
    t1.x = (ti11 != 0) ? (-t1.x) : t1.x;
    //Instruction 70890
    //LT
    tb11 = t1.x<0.0;
    //Instruction 70891
    //AND
    t11.x = tb11 ? 6.283185 : float(0.0);
    //Instruction 70892
    //ADD
    t1.x = t11.x + t1.x;
    //Instruction 70893
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 70894
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].y + 0.500000;
    //Instruction 70895
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70896
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu22) + 0].x;
    //Instruction 70897
    //GE
    tb11 = t1.x>=(-t1.x);
    //Instruction 70898
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70899
    //MOVC
    t1.x = (tb11) ? t1.x : (-t1.x);
    //Instruction 70900
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu22) + 0].x + _TreeInfo[int(tu22) + 0].z;
    //Instruction 70901
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 70902
    //LT
    tb11 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 70903
    //MAD
    t21.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70904
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 70905
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb11)) ? t21.xy : t3.xy;
    //Instruction 70906
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 70907
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 70908
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 70909
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 70910
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 70911
    //MUL
    t31 = t1.y * _ProjectionParams.x;
    //Instruction 70912
    //MUL
    t2.w = t31 * 0.500000;
    //Instruction 70913
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 70914
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 70915
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 70916
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 70917
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70918
    //MUL
    t16_8 = t5.y * t5.y;
    //Instruction 70919
    //MAD
    t16_8 = t5.x * t5.x + (-t16_8);
    //Instruction 70920
    //MUL
    t16_0 = t5.ywzx * t5;
    //Instruction 70921
    //DP4
    t16_9.x = dot(unity_SHBr, t16_0);
    //Instruction 70922
    //DP4
    t16_9.y = dot(unity_SHBg, t16_0);
    //Instruction 70923
    //DP4
    t16_9.z = dot(unity_SHBb, t16_0);
    //Instruction 70924
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_8) + t16_9.xyz;
    //Instruction 70925
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 70729
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 70730
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 70731
    //MOV
    t1.x = t16_0.x;
    //Instruction 70732
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 70733
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 70734
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 70735
    //LT
    tb1 = t16_1<0.0;
    //Instruction 70736
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70737
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 70738
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70739
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 70740
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 70741
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 70742
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 70743
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 70744
    //MAD
    t16_8.xyz = vs_TEXCOORD4.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 70745
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 70746
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 70747
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 70748
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 70749
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 70750
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD3.xyz;
    //Instruction 70751
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 70752
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 70753
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 70754
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 70755
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 70756
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 70757
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 70758
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 70759
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 70760
    //MAD
    t10_2.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 70761
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 70762
    //MOV
    t0.w = 1.0;
    //Instruction 70763
    //DP4
    t16_4.x = dot(unity_SHAr, t0);
    //Instruction 70764
    //DP4
    t16_4.y = dot(unity_SHAg, t0);
    //Instruction 70765
    //DP4
    t16_4.z = dot(unity_SHAb, t0);
    //Instruction 70766
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 70767
    //MUL
    SV_Target3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 70768
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 70769
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "HDR_LIGHT_PREPASS_OFF" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
 Pass {
  Tags { "LIGHTMODE"="Vertex" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "DisableBatching"="LodFading" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 335026
Program "vp" {
SubProgram "gles " {
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp float angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  angle_6 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_5.xz = tmpvar_13.xz;
  billboardPos_5.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_12.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_5;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_11.x + tmpvar_12.w);
    tmpvar_19.y = (tmpvar_11.y + (tmpvar_12.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_5 = vPos_14;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_8.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_26;
  highp vec3 viewN_27;
  highp vec3 viewpos_28;
  viewpos_28 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_29;
  tmpvar_29[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_29[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_29[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_27 = normalize((tmpvar_29 * _BillboardNormal));
  lowp vec3 tmpvar_30;
  tmpvar_30 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_26 = tmpvar_30;
  highp vec3 toLight_31;
  highp vec3 tmpvar_32;
  tmpvar_32 = (unity_LightPosition[0].xyz - (viewpos_28 * unity_LightPosition[0].w));
  highp float tmpvar_33;
  tmpvar_33 = dot (tmpvar_32, tmpvar_32);
  toLight_31 = (tmpvar_32 * inversesqrt(tmpvar_33));
  lightColor_26 = (lightColor_26 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_27, toLight_31))
   * 
    ((1.0/((1.0 + (tmpvar_33 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_31, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_34;
  highp vec3 tmpvar_35;
  tmpvar_35 = (unity_LightPosition[1].xyz - (viewpos_28 * unity_LightPosition[1].w));
  highp float tmpvar_36;
  tmpvar_36 = dot (tmpvar_35, tmpvar_35);
  toLight_34 = (tmpvar_35 * inversesqrt(tmpvar_36));
  lightColor_26 = (lightColor_26 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_27, toLight_34))
   * 
    ((1.0/((1.0 + (tmpvar_36 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_34, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_LightPosition[2].xyz - (viewpos_28 * unity_LightPosition[2].w));
  highp float tmpvar_39;
  tmpvar_39 = dot (tmpvar_38, tmpvar_38);
  toLight_37 = (tmpvar_38 * inversesqrt(tmpvar_39));
  lightColor_26 = (lightColor_26 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_27, toLight_37))
   * 
    ((1.0/((1.0 + (tmpvar_39 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_37, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (unity_LightPosition[3].xyz - (viewpos_28 * unity_LightPosition[3].w));
  highp float tmpvar_42;
  tmpvar_42 = dot (tmpvar_41, tmpvar_41);
  toLight_40 = (tmpvar_41 * inversesqrt(tmpvar_42));
  lightColor_26 = (lightColor_26 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_27, toLight_40))
   * 
    ((1.0/((1.0 + (tmpvar_42 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_40, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_26);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec4 t0;
highp int ti0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec2 t8;
bool tb8;
bool tb9;
highp float t14;
highp float t21;
bool tb21;
highp float t22;
bool tb22;
highp float t23;
void main()
{
    //Instruction 70934
    //MUL
    t0.x = in_COLOR0.w * 255.000000;
    //Instruction 70935
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70936
    //ADD
    t7.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 70937
    //LT
    tb21 = 0.0<_InstanceData.x;
    //Instruction 70938
    //MOVC
    t1 = (bool(tb21)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 70939
    //ADD
    t21 = in_TEXCOORD0.x + -0.500000;
    //Instruction 70940
    //MUL
    t21 = t21 * _TreeSize[int(tu0) + 0].x;
    //Instruction 70941
    //MUL
    t21 = t1.x * t21;
    //Instruction 70942
    //MUL
    t2.xyz = vec3(t21) * _BillboardTangent.xyzx.xyz;
    //Instruction 70943
    //MAD
    t21 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 70944
    //MAD
    t2.w = t21 * t1.y + t2.y;
    //Instruction 70945
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 70946
    //LT
    tb21 = 0.0<t16_3;
    //Instruction 70947
    //DP3
    t1.x = dot(t2.xzw, t2.xzw);
    //Instruction 70948
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 70949
    //DIV
    t8.x = float(1.0) / _ST_WindGlobal.z;
    //Instruction 70950
    //MAD
    t8.x = (-t8.x) * 0.250000 + t2.w;
    //Instruction 70951
    //MAX
    t8.x = max(t8.x, 0.0);
    //Instruction 70952
    //MUL
    t8.x = t8.x * _ST_WindGlobal.z;
    //Instruction 70953
    //NE
    tb9 = t8.x!=0.0;
    //Instruction 70954
    //LOG
    t4.x = log2(t8.x);
    //Instruction 70955
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 70956
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 70957
    //MOVC
    t8.x = (tb9) ? t4.x : t8.x;
    //Instruction 70958
    //ADD
    t4.x = t7.x + t1.w;
    //Instruction 70959
    //MAD
    t4.y = t1.w * 0.800000 + t7.y;
    //Instruction 70960
    //ADD
    t7.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 70961
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 70962
    //MAD
    t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 70963
    //MUL
    t4.xy = abs(t7.xy) * abs(t7.xy);
    //Instruction 70964
    //MAD
    t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 70965
    //MAD
    t7.xy = t4.xy * t7.xy + vec2(-0.500000, -0.500000);
    //Instruction 70966
    //ADD
    t7.xy = t7.xy + t7.xy;
    //Instruction 70967
    //MAD
    t7.x = t7.y * t7.y + t7.x;
    //Instruction 70968
    //DIV
    t14 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 70969
    //MAD
    t7.x = _ST_WindGlobal.y * t7.x + t14;
    //Instruction 70970
    //MUL
    t7.x = t8.x * t7.x;
    //Instruction 70971
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t2.xz;
    //Instruction 70972
    //MOV
    t4.y = t2.w;
    //Instruction 70973
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 70974
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 70975
    //MUL
    t4.xyz = t7.xxx * t4.xyz;
    //Instruction 70976
    //MUL
    t1.xyw = t1.xxx * t4.xyz;
    //Instruction 70977
    //MOVC
    t7.xyz = (bool(tb21)) ? t1.xyw : t2.xwz;
    //Instruction 70978
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 70979
    //ADD
    t1.x = t1.z + _CameraXZAngle;
    //Instruction 70980
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 70981
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 70982
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu0) + 0].x;
    //Instruction 70983
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 70984
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 70985
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 70986
    //MAD
    t0.x = t1.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 70987
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70988
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 70989
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70990
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 70991
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 70992
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 70993
    //MAD
    t1.xyz = glstate_matrix_modelview0[0].xyz * t7.xxx + t1.xyz;
    //Instruction 70994
    //MAD
    t1.xyz = glstate_matrix_modelview0[2].xyz * t7.zzz + t1.xyz;
    //Instruction 70995
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 70996
    //MUL
    t2.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    //Instruction 70997
    //MAD
    t2.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t2.xyz;
    //Instruction 70998
    //MAD
    t2.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t2.xyz;
    //Instruction 70999
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 71000
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71001
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 71002
    //MUL
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71003
    //MOV
    t4.xyz = t10_5.xyz;
    //Instruction 71004
    //MOV
    ti0 = 0x0;
    //Instruction 71005
    //LOOP
    while(true){
        //Instruction 71006
        //IGE
        tb22 = ti0>=0x4;
        //Instruction 71007
        //BREAKC
        if(tb22){break;}
        //Instruction 71008
        //MAD
        t6.xyz = (-t1.xyz) * unity_LightPosition[ti0 + 0].www + unity_LightPosition[ti0 + 0].xyz;
        //Instruction 71009
        //DP3
        t22 = dot(t6.xyz, t6.xyz);
        //Instruction 71010
        //RSQ
        t23 = inversesqrt(t22);
        //Instruction 71011
        //MUL
        t6.xyz = vec3(t23) * t6.xyz;
        //Instruction 71012
        //MAD
        t22 = t22 * unity_LightAtten[ti0 + 0].z + 1.0;
        //Instruction 71013
        //DIV
        t22 = float(1.0) / t22;
        //Instruction 71014
        //DP3
        t23 = dot(t6.xyz, unity_SpotDirection[ti0 + 0].xyz);
        //Instruction 71015
        //MAX
        t23 = max(t23, 0.0);
        //Instruction 71016
        //ADD
        t23 = t23 + (-unity_LightAtten[ti0 + 0].x);
        //Instruction 71017
        //MUL
        t23 = t23 * unity_LightAtten[ti0 + 0].y;
        t23 = clamp(t23, 0.0, 1.0);
        //Instruction 71018
        //MUL
        t22 = t22 * t23;
        //Instruction 71019
        //DP3
        t23 = dot(t2.xyz, t6.xyz);
        //Instruction 71020
        //MAX
        t23 = max(t23, 0.0);
        //Instruction 71021
        //MUL
        t22 = t22 * t23;
        //Instruction 71022
        //MAD
        t4.xyz = unity_LightColor[ti0 + 0].xyz * vec3(t22) + t4.xyz;
        //Instruction 71023
        //IADD
        ti0 = ti0 + 0x1;
        //Instruction 71024
    //ENDLOOP
    }
    //Instruction 71025
    //MUL
    t1.xyz = t4.xyz * _Color.xyz;
    //Instruction 71026
    //MUL
    t2 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 71027
    //MAD
    t2 = glstate_matrix_mvp[0] * t7.xxxx + t2;
    //Instruction 71028
    //MAD
    t0 = glstate_matrix_mvp[2] * t7.zzzz + t2;
    //Instruction 71029
    //ADD
    gl_Position = t0 + glstate_matrix_mvp[3];
    //Instruction 71030
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 71031
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71032
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 71033
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 70926
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70927
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70928
    //LT
    tb2 = t10_1<0.0;
    //Instruction 70929
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 70930
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 70931
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70932
    //MOV
    SV_Target0 = t16_1;
    //Instruction 70933
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp float angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  angle_6 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_5.xz = tmpvar_13.xz;
  billboardPos_5.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_12.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_5;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_11.x + tmpvar_12.w);
    tmpvar_19.y = (tmpvar_11.y + (tmpvar_12.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_5 = vPos_14;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_8.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_11.x + tmpvar_11.y) + tmpvar_11.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_26;
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_27;
  highp vec3 viewN_28;
  highp vec3 viewpos_29;
  viewpos_29 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_30;
  tmpvar_30[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_30[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_30[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_28 = normalize((tmpvar_30 * _BillboardNormal));
  lowp vec3 tmpvar_31;
  tmpvar_31 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_27 = tmpvar_31;
  highp vec3 toLight_32;
  highp vec3 tmpvar_33;
  tmpvar_33 = (unity_LightPosition[0].xyz - (viewpos_29 * unity_LightPosition[0].w));
  highp float tmpvar_34;
  tmpvar_34 = dot (tmpvar_33, tmpvar_33);
  toLight_32 = (tmpvar_33 * inversesqrt(tmpvar_34));
  lightColor_27 = (lightColor_27 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_28, toLight_32))
   * 
    ((1.0/((1.0 + (tmpvar_34 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_32, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_35;
  highp vec3 tmpvar_36;
  tmpvar_36 = (unity_LightPosition[1].xyz - (viewpos_29 * unity_LightPosition[1].w));
  highp float tmpvar_37;
  tmpvar_37 = dot (tmpvar_36, tmpvar_36);
  toLight_35 = (tmpvar_36 * inversesqrt(tmpvar_37));
  lightColor_27 = (lightColor_27 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_28, toLight_35))
   * 
    ((1.0/((1.0 + (tmpvar_37 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_35, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (unity_LightPosition[2].xyz - (viewpos_29 * unity_LightPosition[2].w));
  highp float tmpvar_40;
  tmpvar_40 = dot (tmpvar_39, tmpvar_39);
  toLight_38 = (tmpvar_39 * inversesqrt(tmpvar_40));
  lightColor_27 = (lightColor_27 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_28, toLight_38))
   * 
    ((1.0/((1.0 + (tmpvar_40 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_38, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (unity_LightPosition[3].xyz - (viewpos_29 * unity_LightPosition[3].w));
  highp float tmpvar_43;
  tmpvar_43 = dot (tmpvar_42, tmpvar_42);
  toLight_41 = (tmpvar_42 * inversesqrt(tmpvar_43));
  lightColor_27 = (lightColor_27 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_28, toLight_41))
   * 
    ((1.0/((1.0 + (tmpvar_43 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_41, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_27);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp float t0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
bool tb2;
mediump float t16_3;
highp vec3 t4;
bool tb4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp float t8;
highp float t9;
highp float t11;
highp float t15;
highp int ti15;
bool tb15;
highp vec2 t16;
highp vec2 t18;
highp float t22;
highp float t23;
bool tb23;
highp float t25;
void main()
{
    //Instruction 71051
    //MUL
    t0 = in_COLOR0.w * 255.000000;
    //Instruction 71052
    //FTOU
    tu0 = uint(t0);
    //Instruction 71053
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71054
    //LT
    tb1 = 0.0<_InstanceData.x;
    //Instruction 71055
    //MOVC
    t1 = (bool(tb1)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71056
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71057
    //MUL
    t2.x = t2.x * _TreeSize[int(tu0) + 0].x;
    //Instruction 71058
    //MUL
    t1.x = t1.x * t2.x;
    //Instruction 71059
    //MUL
    t2.xyz = t1.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71060
    //MAD
    t1.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 71061
    //MAD
    t2.w = t1.x * t1.y + t2.y;
    //Instruction 71062
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 71063
    //LT
    tb1 = 0.0<t16_3;
    //Instruction 71064
    //DP3
    t8 = dot(t2.xzw, t2.xzw);
    //Instruction 71065
    //SQRT
    t8 = sqrt(t8);
    //Instruction 71066
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71067
    //MAD
    t9 = (-t9) * 0.250000 + t2.w;
    //Instruction 71068
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 71069
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 71070
    //NE
    tb4 = t9!=0.0;
    //Instruction 71071
    //LOG
    t11 = log2(t9);
    //Instruction 71072
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 71073
    //EXP
    t11 = exp2(t11);
    //Instruction 71074
    //MOVC
    t9 = (tb4) ? t11 : t9;
    //Instruction 71075
    //ADD
    t4.x = t7.x + t1.w;
    //Instruction 71076
    //MAD
    t4.y = t1.w * 0.800000 + t7.y;
    //Instruction 71077
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 71078
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 71079
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71080
    //MUL
    t18.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 71081
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71082
    //MAD
    t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 71083
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 71084
    //MAD
    t22 = t4.y * t4.y + t4.x;
    //Instruction 71085
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71086
    //MAD
    t22 = _ST_WindGlobal.y * t22 + t4.x;
    //Instruction 71087
    //MUL
    t22 = t9 * t22;
    //Instruction 71088
    //MAD
    t4.xz = _ST_WindVector.xz * vec2(t22) + t2.xz;
    //Instruction 71089
    //MOV
    t4.y = t2.w;
    //Instruction 71090
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 71091
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 71092
    //MUL
    t4.xyz = vec3(t22) * t4.xyz;
    //Instruction 71093
    //MUL
    t4.xyz = vec3(t8) * t4.xyz;
    //Instruction 71094
    //MOVC
    t1.xyw = (bool(tb1)) ? t4.xyz : t2.xwz;
    //Instruction 71095
    //ADD
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    //Instruction 71096
    //ADD
    t15 = t1.z + _CameraXZAngle;
    //Instruction 71097
    //MAD
    t15 = t15 * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 71098
    //ROUND_NI
    t15 = floor(t15);
    //Instruction 71099
    //DIV
    t15 = t15 / _TreeInfo[int(tu0) + 0].x;
    //Instruction 71100
    //GE
    tb2 = t15>=(-t15);
    //Instruction 71101
    //FRC
    t15 = fract(abs(t15));
    //Instruction 71102
    //MOVC
    t15 = (tb2) ? t15 : (-t15);
    //Instruction 71103
    //MAD
    t0 = t15 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 71104
    //FTOU
    tu0 = uint(t0);
    //Instruction 71105
    //LT
    tb15 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71106
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71107
    //MAD
    t16.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71108
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb15)) ? t2.xy : t16.xy;
    //Instruction 71109
    //ADD
    t0 = t7.y + t7.x;
    //Instruction 71110
    //ADD
    t0 = t7.z + t0;
    //Instruction 71111
    //FRC
    t0 = fract(t0);
    //Instruction 71112
    //MUL
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    //Instruction 71113
    //MUL
    t7.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 71114
    //MAD
    t7.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t7.xyz;
    //Instruction 71115
    //MAD
    t7.xyz = glstate_matrix_modelview0[2].xyz * t1.www + t7.xyz;
    //Instruction 71116
    //ADD
    t7.xyz = t7.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 71117
    //MUL
    t2.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    //Instruction 71118
    //MAD
    t2.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t2.xyz;
    //Instruction 71119
    //MAD
    t2.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t2.xyz;
    //Instruction 71120
    //DP3
    t15 = dot(t2.xyz, t2.xyz);
    //Instruction 71121
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 71122
    //MUL
    t2.xyz = vec3(t15) * t2.xyz;
    //Instruction 71123
    //MUL
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71124
    //MOV
    t4.xyz = t10_5.xyz;
    //Instruction 71125
    //MOV
    ti15 = 0x0;
    //Instruction 71126
    //LOOP
    while(true){
        //Instruction 71127
        //IGE
        tb23 = ti15>=0x4;
        //Instruction 71128
        //BREAKC
        if(tb23){break;}
        //Instruction 71129
        //MAD
        t6.xyz = (-t7.xyz) * unity_LightPosition[ti15 + 0].www + unity_LightPosition[ti15 + 0].xyz;
        //Instruction 71130
        //DP3
        t23 = dot(t6.xyz, t6.xyz);
        //Instruction 71131
        //RSQ
        t25 = inversesqrt(t23);
        //Instruction 71132
        //MUL
        t6.xyz = vec3(t25) * t6.xyz;
        //Instruction 71133
        //MAD
        t23 = t23 * unity_LightAtten[ti15 + 0].z + 1.0;
        //Instruction 71134
        //DIV
        t23 = float(1.0) / t23;
        //Instruction 71135
        //DP3
        t25 = dot(t6.xyz, unity_SpotDirection[ti15 + 0].xyz);
        //Instruction 71136
        //MAX
        t25 = max(t25, 0.0);
        //Instruction 71137
        //ADD
        t25 = t25 + (-unity_LightAtten[ti15 + 0].x);
        //Instruction 71138
        //MUL
        t25 = t25 * unity_LightAtten[ti15 + 0].y;
        t25 = clamp(t25, 0.0, 1.0);
        //Instruction 71139
        //MUL
        t23 = t23 * t25;
        //Instruction 71140
        //DP3
        t25 = dot(t2.xyz, t6.xyz);
        //Instruction 71141
        //MAX
        t25 = max(t25, 0.0);
        //Instruction 71142
        //MUL
        t23 = t23 * t25;
        //Instruction 71143
        //MAD
        t4.xyz = unity_LightColor[ti15 + 0].xyz * vec3(t23) + t4.xyz;
        //Instruction 71144
        //IADD
        ti15 = ti15 + 0x1;
        //Instruction 71145
    //ENDLOOP
    }
    //Instruction 71146
    //MUL
    t7.xyz = t4.xyz * _Color.xyz;
    //Instruction 71147
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 71148
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 71149
    //MAD
    t1 = glstate_matrix_mvp[2] * t1.wwww + t2;
    //Instruction 71150
    //ADD
    gl_Position = t1 + glstate_matrix_mvp[3];
    //Instruction 71151
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 71152
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71153
    //MOV
    vs_TEXCOORD2.z = t0;
    //Instruction 71154
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 71034
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 71035
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71036
    //LT
    tb2 = t10_1<0.0;
    //Instruction 71037
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 71038
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71039
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71040
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71041
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71042
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 71043
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 71044
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 71045
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 71046
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71047
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71048
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 71049
    //MOV
    SV_Target0 = t16_0;
    //Instruction 71050
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp vec3 angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - tmpvar_11));
  highp vec3 tmpvar_13;
  tmpvar_13.y = 0.0;
  tmpvar_13.x = -(tmpvar_12.z);
  tmpvar_13.z = tmpvar_12.x;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14.z;
  tmpvar_15.z = -(tmpvar_14.x);
  highp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (min (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0) / max (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0));
  highp float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  tmpvar_18 = (((
    ((((
      ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
     * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
   * tmpvar_18) + 0.9999793) * tmpvar_17);
  tmpvar_18 = (tmpvar_18 + (float(
    (abs((tmpvar_15.z / tmpvar_14.z)) > 1.0)
  ) * (
    (tmpvar_18 * -2.0)
   + 1.570796)));
  tmpvar_16 = (tmpvar_18 * sign((tmpvar_15.z / tmpvar_14.z)));
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_15.z)))) {
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_15.z >= 0.0)) {
        tmpvar_16 += 3.141593;
      } else {
        tmpvar_16 = (tmpvar_16 - 3.141593);
      };
    };
  } else {
    tmpvar_16 = (sign(tmpvar_15.z) * 1.570796);
  };
  angle_6 = vec3(tmpvar_16);
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_16), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  angle_6 = (vec3(tmpvar_16) + tmpvar_23);
  highp vec4 tmpvar_24;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_24 = _InstanceData;
  } else {
    tmpvar_24 = tmpvar_1;
  };
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_24.x) * tmpvar_14);
  billboardPos_5.xz = tmpvar_25.xz;
  billboardPos_5.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_24.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_5;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_11.x + tmpvar_24.w);
    tmpvar_31.y = (tmpvar_11.y + (tmpvar_24.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_5 = vPos_26;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (angle_6 + tmpvar_24.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_8.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_38;
  highp vec3 viewN_39;
  highp vec3 viewpos_40;
  viewpos_40 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_41;
  tmpvar_41[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_41[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_41[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_39 = normalize((tmpvar_41 * tmpvar_15));
  lowp vec3 tmpvar_42;
  tmpvar_42 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_38 = tmpvar_42;
  highp vec3 toLight_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (unity_LightPosition[0].xyz - (viewpos_40 * unity_LightPosition[0].w));
  highp float tmpvar_45;
  tmpvar_45 = dot (tmpvar_44, tmpvar_44);
  toLight_43 = (tmpvar_44 * inversesqrt(tmpvar_45));
  lightColor_38 = (lightColor_38 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_39, toLight_43))
   * 
    ((1.0/((1.0 + (tmpvar_45 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_43, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (unity_LightPosition[1].xyz - (viewpos_40 * unity_LightPosition[1].w));
  highp float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_47);
  toLight_46 = (tmpvar_47 * inversesqrt(tmpvar_48));
  lightColor_38 = (lightColor_38 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_39, toLight_46))
   * 
    ((1.0/((1.0 + (tmpvar_48 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_46, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (unity_LightPosition[2].xyz - (viewpos_40 * unity_LightPosition[2].w));
  highp float tmpvar_51;
  tmpvar_51 = dot (tmpvar_50, tmpvar_50);
  toLight_49 = (tmpvar_50 * inversesqrt(tmpvar_51));
  lightColor_38 = (lightColor_38 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_39, toLight_49))
   * 
    ((1.0/((1.0 + (tmpvar_51 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_49, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (unity_LightPosition[3].xyz - (viewpos_40 * unity_LightPosition[3].w));
  highp float tmpvar_54;
  tmpvar_54 = dot (tmpvar_53, tmpvar_53);
  toLight_52 = (tmpvar_53 * inversesqrt(tmpvar_54));
  lightColor_38 = (lightColor_38 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_39, toLight_52))
   * 
    ((1.0/((1.0 + (tmpvar_54 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_52, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_38);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_4;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_5;
  x_5 = (tmpvar_2 - _Cutoff);
  if ((x_5 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_6;
  tmpvar_6.xyz = tmpvar_1;
  tmpvar_6.w = tmpvar_2;
  gl_FragData[0] = tmpvar_6;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp vec3 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
bool tb7;
highp vec3 t9;
bool tb9;
highp vec2 t14;
bool tb14;
highp vec2 t15;
highp int ti15;
bool tb15;
highp float t16;
highp float t21;
highp int ti21;
highp float t22;
bool tb22;
highp float t24;
void main()
{
    //Instruction 70986
    //MUL
    t0.x = in_COLOR0.w * 255.000000;
    //Instruction 70987
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 70988
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 70989
    //ADD
    t1.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 70990
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 70991
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 70992
    //MUL
    t1.xy = vec2(t21) * t1.xz;
    //Instruction 70993
    //MOV
    t1.zw = (-t1.yy);
    //Instruction 70994
    //DP2
    t21 = dot(t1.xz, t1.xw);
    //Instruction 70995
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 70996
    //MUL
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    //Instruction 70997
    //MUL
    t1.xy = vec2(t21) * t1.xy;
    //Instruction 70998
    //MIN
    t21 = min(abs(t1.y), abs(t1.x));
    //Instruction 70999
    //MAX
    t15.x = max(abs(t1.y), abs(t1.x));
    //Instruction 71000
    //DIV
    t15.x = float(1.0) / t15.x;
    //Instruction 71001
    //MUL
    t21 = t21 * t15.x;
    //Instruction 71002
    //MUL
    t15.x = t21 * t21;
    //Instruction 71003
    //MAD
    t22 = t15.x * 0.020835 + -0.085133;
    //Instruction 71004
    //MAD
    t22 = t15.x * t22 + 0.180141;
    //Instruction 71005
    //MAD
    t22 = t15.x * t22 + -0.330299;
    //Instruction 71006
    //MAD
    t15.x = t15.x * t22 + 0.999866;
    //Instruction 71007
    //MUL
    t22 = t21 * t15.x;
    //Instruction 71008
    //LT
    tb2 = abs(t1.y)<abs(t1.x);
    //Instruction 71009
    //MAD
    t22 = t22 * -2.000000 + 1.570796;
    //Instruction 71010
    //AND
    t22 = tb2 ? t22 : float(0.0);
    //Instruction 71011
    //MAD
    t21 = t21 * t15.x + t22;
    //Instruction 71012
    //LT
    tb15 = t1.y<(-t1.y);
    //Instruction 71013
    //AND
    t15.x = tb15 ? -3.141593 : float(0.0);
    //Instruction 71014
    //ADD
    t21 = t21 + t15.x;
    //Instruction 71015
    //MIN
    t15.x = min(t1.y, (-t1.x));
    //Instruction 71016
    //MAX
    t22 = max(t1.y, (-t1.x));
    //Instruction 71017
    //LT
    tb15 = t15.x<(-t15.x);
    //Instruction 71018
    //GE
    tb22 = t22>=(-t22);
    //Instruction 71019
    //AND
    ti15 = int(uint(tb22) & uint(tb15));
    //Instruction 71020
    //MOVC
    t21 = (ti15 != 0) ? (-t21) : t21;
    //Instruction 71021
    //LT
    tb15 = t21<0.0;
    //Instruction 71022
    //AND
    t15.x = tb15 ? 6.283185 : float(0.0);
    //Instruction 71023
    //ADD
    t21 = t21 + t15.x;
    //Instruction 71024
    //LT
    tb15 = 0.0<_InstanceData.x;
    //Instruction 71025
    //MOVC
    t2 = (bool(tb15)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71026
    //ADD
    t15.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 71027
    //MUL
    t15.x = t15.x * _TreeSize[int(tu0) + 0].x;
    //Instruction 71028
    //MUL
    t15.x = t2.x * t15.x;
    //Instruction 71029
    //MUL
    t3.xz = t1.xy * t15.xx;
    //Instruction 71030
    //MAD
    t15.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 71031
    //MUL
    t3.y = t2.y * t15.x;
    //Instruction 71032
    //MUL
    t16_4 = _WindEnabled * _WindQuality;
    //Instruction 71033
    //LT
    tb15 = 0.0<t16_4;
    //Instruction 71034
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 71035
    //SQRT
    t22 = sqrt(t22);
    //Instruction 71036
    //DIV
    t2.x = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71037
    //MAD
    t2.x = (-t2.x) * 0.250000 + t3.y;
    //Instruction 71038
    //MAX
    t2.x = max(t2.x, 0.0);
    //Instruction 71039
    //MUL
    t2.x = t2.x * _ST_WindGlobal.z;
    //Instruction 71040
    //NE
    tb9 = t2.x!=0.0;
    //Instruction 71041
    //LOG
    t24 = log2(t2.x);
    //Instruction 71042
    //MUL
    t24 = t24 * _ST_WindGlobal.w;
    //Instruction 71043
    //EXP
    t24 = exp2(t24);
    //Instruction 71044
    //MOVC
    t2.x = (tb9) ? t24 : t2.x;
    //Instruction 71045
    //ADD
    t5.x = t7.x + t2.w;
    //Instruction 71046
    //MAD
    t5.y = t2.w * 0.800000 + t7.y;
    //Instruction 71047
    //ADD
    t7.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 71048
    //FRC
    t7.xy = fract(t7.xy);
    //Instruction 71049
    //MAD
    t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71050
    //MUL
    t9.xz = abs(t7.xy) * abs(t7.xy);
    //Instruction 71051
    //MAD
    t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71052
    //MAD
    t7.xy = t9.xz * t7.xy + vec2(-0.500000, -0.500000);
    //Instruction 71053
    //ADD
    t7.xy = t7.xy + t7.xy;
    //Instruction 71054
    //MAD
    t7.x = t7.y * t7.y + t7.x;
    //Instruction 71055
    //DIV
    t14.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71056
    //MAD
    t7.x = _ST_WindGlobal.y * t7.x + t14.x;
    //Instruction 71057
    //MUL
    t7.x = t2.x * t7.x;
    //Instruction 71058
    //MAD
    t5.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 71059
    //MOV
    t5.y = t3.y;
    //Instruction 71060
    //DP3
    t7.x = dot(t5.xyz, t5.xyz);
    //Instruction 71061
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 71062
    //MUL
    t2.xyw = t7.xxx * t5.xyz;
    //Instruction 71063
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 71064
    //MOVC
    t2.xyw = (bool(tb15)) ? t2.xyw : t3.xyz;
    //Instruction 71065
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 71066
    //ADD
    t7.x = t21 + t2.z;
    //Instruction 71067
    //MAD
    t7.x = t7.x * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 71068
    //ROUND_NI
    t7.x = floor(t7.x);
    //Instruction 71069
    //DIV
    t7.x = t7.x / _TreeInfo[int(tu0) + 0].x;
    //Instruction 71070
    //GE
    tb14 = t7.x>=(-t7.x);
    //Instruction 71071
    //FRC
    t7.x = fract(abs(t7.x));
    //Instruction 71072
    //MOVC
    t7.x = (tb14) ? t7.x : (-t7.x);
    //Instruction 71073
    //MAD
    t0.x = t7.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 71074
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71075
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71076
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71077
    //MAD
    t15.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71078
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb7)) ? t14.xy : t15.xy;
    //Instruction 71079
    //MUL
    t0.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 71080
    //MAD
    t0.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t0.xyz;
    //Instruction 71081
    //MAD
    t0.xyz = glstate_matrix_modelview0[2].xyz * t2.www + t0.xyz;
    //Instruction 71082
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 71083
    //MUL
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    //Instruction 71084
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    //Instruction 71085
    //DP3
    t21 = dot(t1.xyz, t1.xyz);
    //Instruction 71086
    //RSQ
    t21 = inversesqrt(t21);
    //Instruction 71087
    //MUL
    t1.xyz = vec3(t21) * t1.xyz;
    //Instruction 71088
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71089
    //MOV
    t3.xyz = t10_6.xyz;
    //Instruction 71090
    //MOV
    ti21 = 0x0;
    //Instruction 71091
    //LOOP
    while(true){
        //Instruction 71092
        //IGE
        tb22 = ti21>=0x4;
        //Instruction 71093
        //BREAKC
        if(tb22){break;}
        //Instruction 71094
        //MAD
        t5.xyz = (-t0.xyz) * unity_LightPosition[ti21 + 0].www + unity_LightPosition[ti21 + 0].xyz;
        //Instruction 71095
        //DP3
        t22 = dot(t5.xyz, t5.xyz);
        //Instruction 71096
        //RSQ
        t16 = inversesqrt(t22);
        //Instruction 71097
        //MUL
        t5.xyz = vec3(t16) * t5.xyz;
        //Instruction 71098
        //MAD
        t22 = t22 * unity_LightAtten[ti21 + 0].z + 1.0;
        //Instruction 71099
        //DIV
        t22 = float(1.0) / t22;
        //Instruction 71100
        //DP3
        t16 = dot(t5.xyz, unity_SpotDirection[ti21 + 0].xyz);
        //Instruction 71101
        //MAX
        t16 = max(t16, 0.0);
        //Instruction 71102
        //ADD
        t16 = t16 + (-unity_LightAtten[ti21 + 0].x);
        //Instruction 71103
        //MUL
        t16 = t16 * unity_LightAtten[ti21 + 0].y;
        t16 = clamp(t16, 0.0, 1.0);
        //Instruction 71104
        //MUL
        t22 = t22 * t16;
        //Instruction 71105
        //DP3
        t16 = dot(t1.xyz, t5.xyz);
        //Instruction 71106
        //MAX
        t16 = max(t16, 0.0);
        //Instruction 71107
        //MUL
        t22 = t22 * t16;
        //Instruction 71108
        //MAD
        t3.xyz = unity_LightColor[ti21 + 0].xyz * vec3(t22) + t3.xyz;
        //Instruction 71109
        //IADD
        ti21 = ti21 + 0x1;
        //Instruction 71110
    //ENDLOOP
    }
    //Instruction 71111
    //MUL
    t0.xyz = t3.xyz * _Color.xyz;
    //Instruction 71112
    //MUL
    t1 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 71113
    //MAD
    t1 = glstate_matrix_mvp[0] * t2.xxxx + t1;
    //Instruction 71114
    //MAD
    t1 = glstate_matrix_mvp[2] * t2.wwww + t1;
    //Instruction 71115
    //ADD
    gl_Position = t1 + glstate_matrix_mvp[3];
    //Instruction 71116
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 71117
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71118
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 71119
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
mediump vec4 t16_1;
lowp float t10_1;
bool tb2;
void main()
{
    //Instruction 70978
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 70979
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 70980
    //LT
    tb2 = t10_1<0.0;
    //Instruction 70981
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 70982
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 70983
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 70984
    //MOV
    SV_Target0 = t16_1;
    //Instruction 70985
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp vec3 angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - tmpvar_11));
  highp vec3 tmpvar_13;
  tmpvar_13.y = 0.0;
  tmpvar_13.x = -(tmpvar_12.z);
  tmpvar_13.z = tmpvar_12.x;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14.z;
  tmpvar_15.z = -(tmpvar_14.x);
  highp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (min (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0) / max (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0));
  highp float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  tmpvar_18 = (((
    ((((
      ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
     * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
   * tmpvar_18) + 0.9999793) * tmpvar_17);
  tmpvar_18 = (tmpvar_18 + (float(
    (abs((tmpvar_15.z / tmpvar_14.z)) > 1.0)
  ) * (
    (tmpvar_18 * -2.0)
   + 1.570796)));
  tmpvar_16 = (tmpvar_18 * sign((tmpvar_15.z / tmpvar_14.z)));
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_15.z)))) {
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_15.z >= 0.0)) {
        tmpvar_16 += 3.141593;
      } else {
        tmpvar_16 = (tmpvar_16 - 3.141593);
      };
    };
  } else {
    tmpvar_16 = (sign(tmpvar_15.z) * 1.570796);
  };
  angle_6 = vec3(tmpvar_16);
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_16), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  angle_6 = (vec3(tmpvar_16) + tmpvar_23);
  highp vec4 tmpvar_24;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_24 = _InstanceData;
  } else {
    tmpvar_24 = tmpvar_1;
  };
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_24.x) * tmpvar_14);
  billboardPos_5.xz = tmpvar_25.xz;
  billboardPos_5.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_24.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_5;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_11.x + tmpvar_24.w);
    tmpvar_31.y = (tmpvar_11.y + (tmpvar_24.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_5 = vPos_26;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (angle_6 + tmpvar_24.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_8.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_11.x + tmpvar_11.y) + tmpvar_11.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_38;
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_39;
  highp vec3 viewN_40;
  highp vec3 viewpos_41;
  viewpos_41 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_42;
  tmpvar_42[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_42[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_42[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_40 = normalize((tmpvar_42 * tmpvar_15));
  lowp vec3 tmpvar_43;
  tmpvar_43 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_39 = tmpvar_43;
  highp vec3 toLight_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (unity_LightPosition[0].xyz - (viewpos_41 * unity_LightPosition[0].w));
  highp float tmpvar_46;
  tmpvar_46 = dot (tmpvar_45, tmpvar_45);
  toLight_44 = (tmpvar_45 * inversesqrt(tmpvar_46));
  lightColor_39 = (lightColor_39 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_40, toLight_44))
   * 
    ((1.0/((1.0 + (tmpvar_46 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_44, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (unity_LightPosition[1].xyz - (viewpos_41 * unity_LightPosition[1].w));
  highp float tmpvar_49;
  tmpvar_49 = dot (tmpvar_48, tmpvar_48);
  toLight_47 = (tmpvar_48 * inversesqrt(tmpvar_49));
  lightColor_39 = (lightColor_39 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_40, toLight_47))
   * 
    ((1.0/((1.0 + (tmpvar_49 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_47, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (unity_LightPosition[2].xyz - (viewpos_41 * unity_LightPosition[2].w));
  highp float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_51);
  toLight_50 = (tmpvar_51 * inversesqrt(tmpvar_52));
  lightColor_39 = (lightColor_39 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_40, toLight_50))
   * 
    ((1.0/((1.0 + (tmpvar_52 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_50, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[3].xyz - (viewpos_41 * unity_LightPosition[3].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_39 = (lightColor_39 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_40, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_39);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
}


#endif
#ifdef FRAGMENT
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  lowp vec4 tmpvar_5;
  tmpvar_5 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_5;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_6;
  x_6 = (tmpvar_2 - _Cutoff);
  if ((x_6 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_7;
  tmpvar_7 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_7.x, max (tmpvar_7.y, tmpvar_7.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_7 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_8;
  tmpvar_8.xyz = tmpvar_1;
  tmpvar_8.w = tmpvar_2;
  gl_FragData[0] = tmpvar_8;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec3 t3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp float t8;
highp float t9;
bool tb9;
highp float t15;
bool tb15;
highp float t16;
bool tb16;
highp vec2 t17;
highp vec2 t19;
highp float t22;
highp int ti22;
bool tb22;
highp float t23;
highp float t24;
bool tb24;
void main()
{
    //Instruction 71137
    //MUL
    t0 = in_COLOR0.w * 255.000000;
    //Instruction 71138
    //FTOU
    tu0 = uint(t0);
    //Instruction 71139
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71140
    //ADD
    t1.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 71141
    //DP3
    t8 = dot(t1.xyz, t1.xyz);
    //Instruction 71142
    //RSQ
    t8 = inversesqrt(t8);
    //Instruction 71143
    //MUL
    t1.xy = vec2(t8) * t1.xz;
    //Instruction 71144
    //MOV
    t1.zw = (-t1.yy);
    //Instruction 71145
    //DP2
    t15 = dot(t1.xz, t1.xw);
    //Instruction 71146
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 71147
    //MUL
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    //Instruction 71148
    //MUL
    t1.xy = vec2(t15) * t1.xy;
    //Instruction 71149
    //MIN
    t15 = min(abs(t1.y), abs(t1.x));
    //Instruction 71150
    //MAX
    t22 = max(abs(t1.y), abs(t1.x));
    //Instruction 71151
    //DIV
    t22 = float(1.0) / t22;
    //Instruction 71152
    //MUL
    t15 = t22 * t15;
    //Instruction 71153
    //MUL
    t22 = t15 * t15;
    //Instruction 71154
    //MAD
    t2.x = t22 * 0.020835 + -0.085133;
    //Instruction 71155
    //MAD
    t2.x = t22 * t2.x + 0.180141;
    //Instruction 71156
    //MAD
    t2.x = t22 * t2.x + -0.330299;
    //Instruction 71157
    //MAD
    t22 = t22 * t2.x + 0.999866;
    //Instruction 71158
    //MUL
    t2.x = t22 * t15;
    //Instruction 71159
    //LT
    tb9 = abs(t1.y)<abs(t1.x);
    //Instruction 71160
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 71161
    //AND
    t2.x = tb9 ? t2.x : float(0.0);
    //Instruction 71162
    //MAD
    t15 = t15 * t22 + t2.x;
    //Instruction 71163
    //LT
    tb22 = t1.y<(-t1.y);
    //Instruction 71164
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 71165
    //ADD
    t15 = t22 + t15;
    //Instruction 71166
    //MIN
    t22 = min(t1.y, (-t1.x));
    //Instruction 71167
    //MAX
    t2.x = max(t1.y, (-t1.x));
    //Instruction 71168
    //LT
    tb22 = t22<(-t22);
    //Instruction 71169
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 71170
    //AND
    ti22 = int(uint(tb22) & uint(tb2));
    //Instruction 71171
    //MOVC
    t15 = (ti22 != 0) ? (-t15) : t15;
    //Instruction 71172
    //LT
    tb22 = t15<0.0;
    //Instruction 71173
    //AND
    t22 = tb22 ? 6.283185 : float(0.0);
    //Instruction 71174
    //ADD
    t15 = t22 + t15;
    //Instruction 71175
    //LT
    tb22 = 0.0<_InstanceData.x;
    //Instruction 71176
    //MOVC
    t2 = (bool(tb22)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71177
    //ADD
    t22 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71178
    //MUL
    t22 = t22 * _TreeSize[int(tu0) + 0].x;
    //Instruction 71179
    //MUL
    t22 = t2.x * t22;
    //Instruction 71180
    //MUL
    t3.xz = t1.xy * vec2(t22);
    //Instruction 71181
    //MAD
    t22 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 71182
    //MUL
    t3.y = t2.y * t22;
    //Instruction 71183
    //MUL
    t16_4 = _WindEnabled * _WindQuality;
    //Instruction 71184
    //LT
    tb22 = 0.0<t16_4;
    //Instruction 71185
    //DP3
    t2.x = dot(t3.xyz, t3.xyz);
    //Instruction 71186
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 71187
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71188
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 71189
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 71190
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 71191
    //NE
    tb24 = t9!=0.0;
    //Instruction 71192
    //LOG
    t5.x = log2(t9);
    //Instruction 71193
    //MUL
    t5.x = t5.x * _ST_WindGlobal.w;
    //Instruction 71194
    //EXP
    t5.x = exp2(t5.x);
    //Instruction 71195
    //MOVC
    t9 = (tb24) ? t5.x : t9;
    //Instruction 71196
    //ADD
    t5.x = t7.x + t2.w;
    //Instruction 71197
    //MAD
    t5.y = t2.w * 0.800000 + t7.y;
    //Instruction 71198
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 71199
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 71200
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71201
    //MUL
    t19.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 71202
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71203
    //MAD
    t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 71204
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 71205
    //MAD
    t23 = t5.y * t5.y + t5.x;
    //Instruction 71206
    //DIV
    t24 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71207
    //MAD
    t23 = _ST_WindGlobal.y * t23 + t24;
    //Instruction 71208
    //MUL
    t9 = t9 * t23;
    //Instruction 71209
    //MAD
    t5.xz = _ST_WindVector.xz * vec2(t9) + t3.xz;
    //Instruction 71210
    //MOV
    t5.y = t3.y;
    //Instruction 71211
    //DP3
    t9 = dot(t5.xyz, t5.xyz);
    //Instruction 71212
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 71213
    //MUL
    t5.xyz = vec3(t9) * t5.xyz;
    //Instruction 71214
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 71215
    //MOVC
    t2.xyw = (bool(tb22)) ? t2.xyw : t3.xyz;
    //Instruction 71216
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 71217
    //ADD
    t15 = t15 + t2.z;
    //Instruction 71218
    //MAD
    t15 = t15 * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 71219
    //ROUND_NI
    t15 = floor(t15);
    //Instruction 71220
    //DIV
    t15 = t15 / _TreeInfo[int(tu0) + 0].x;
    //Instruction 71221
    //GE
    tb22 = t15>=(-t15);
    //Instruction 71222
    //FRC
    t15 = fract(abs(t15));
    //Instruction 71223
    //MOVC
    t15 = (tb22) ? t15 : (-t15);
    //Instruction 71224
    //MAD
    t0 = t15 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 71225
    //FTOU
    tu0 = uint(t0);
    //Instruction 71226
    //LT
    tb15 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71227
    //MAD
    t3.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71228
    //MAD
    t17.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71229
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb15)) ? t3.xy : t17.xy;
    //Instruction 71230
    //ADD
    t0 = t7.y + t7.x;
    //Instruction 71231
    //ADD
    t0 = t7.z + t0;
    //Instruction 71232
    //FRC
    t0 = fract(t0);
    //Instruction 71233
    //MUL
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    //Instruction 71234
    //MUL
    t7.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 71235
    //MAD
    t7.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t7.xyz;
    //Instruction 71236
    //MAD
    t7.xyz = glstate_matrix_modelview0[2].xyz * t2.www + t7.xyz;
    //Instruction 71237
    //ADD
    t7.xyz = t7.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 71238
    //MUL
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    //Instruction 71239
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    //Instruction 71240
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 71241
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 71242
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 71243
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71244
    //MOV
    t3.xyz = t10_6.xyz;
    //Instruction 71245
    //MOV
    ti22 = 0x0;
    //Instruction 71246
    //LOOP
    while(true){
        //Instruction 71247
        //IGE
        tb16 = ti22>=0x4;
        //Instruction 71248
        //BREAKC
        if(tb16){break;}
        //Instruction 71249
        //MAD
        t5.xyz = (-t7.xyz) * unity_LightPosition[ti22 + 0].www + unity_LightPosition[ti22 + 0].xyz;
        //Instruction 71250
        //DP3
        t16 = dot(t5.xyz, t5.xyz);
        //Instruction 71251
        //RSQ
        t24 = inversesqrt(t16);
        //Instruction 71252
        //MUL
        t5.xyz = vec3(t24) * t5.xyz;
        //Instruction 71253
        //MAD
        t16 = t16 * unity_LightAtten[ti22 + 0].z + 1.0;
        //Instruction 71254
        //DIV
        t16 = float(1.0) / t16;
        //Instruction 71255
        //DP3
        t24 = dot(t5.xyz, unity_SpotDirection[ti22 + 0].xyz);
        //Instruction 71256
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 71257
        //ADD
        t24 = t24 + (-unity_LightAtten[ti22 + 0].x);
        //Instruction 71258
        //MUL
        t24 = t24 * unity_LightAtten[ti22 + 0].y;
        t24 = clamp(t24, 0.0, 1.0);
        //Instruction 71259
        //MUL
        t16 = t16 * t24;
        //Instruction 71260
        //DP3
        t24 = dot(t1.xyz, t5.xyz);
        //Instruction 71261
        //MAX
        t24 = max(t24, 0.0);
        //Instruction 71262
        //MUL
        t16 = t16 * t24;
        //Instruction 71263
        //MAD
        t3.xyz = unity_LightColor[ti22 + 0].xyz * vec3(t16) + t3.xyz;
        //Instruction 71264
        //IADD
        ti22 = ti22 + 0x1;
        //Instruction 71265
    //ENDLOOP
    }
    //Instruction 71266
    //MUL
    t7.xyz = t3.xyz * _Color.xyz;
    //Instruction 71267
    //MUL
    t1 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 71268
    //MAD
    t1 = glstate_matrix_mvp[0] * t2.xxxx + t1;
    //Instruction 71269
    //MAD
    t1 = glstate_matrix_mvp[2] * t2.wwww + t1;
    //Instruction 71270
    //ADD
    gl_Position = t1 + glstate_matrix_mvp[3];
    //Instruction 71271
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 71272
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71273
    //MOV
    vs_TEXCOORD2.z = t0;
    //Instruction 71274
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp float t10_1;
mediump float t16_2;
bool tb2;
mediump vec3 t16_3;
mediump float t16_4;
mediump vec3 t16_8;
void main()
{
    //Instruction 71120
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 71121
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71122
    //LT
    tb2 = t10_1<0.0;
    //Instruction 71123
    //DISCARD
    if((int(tb2))!=0){discard;}
    //Instruction 71124
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71125
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71126
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71127
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71128
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 71129
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 71130
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 71131
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 71132
    //MAD
    t16_2 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71133
    //MUL
    t16_3.xyz = vec3(t16_2) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71134
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 71135
    //MOV
    SV_Target0 = t16_0;
    //Instruction 71136
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp float angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  angle_6 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_5.xz = tmpvar_13.xz;
  billboardPos_5.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_12.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_5;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_11.x + tmpvar_12.w);
    tmpvar_19.y = (tmpvar_11.y + (tmpvar_12.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_5 = vPos_14;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_8.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_26;
  hPos_26 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_27;
  highp vec4 o_28;
  highp vec4 tmpvar_29;
  tmpvar_29 = (hPos_26 * 0.5);
  highp vec2 tmpvar_30;
  tmpvar_30.x = tmpvar_29.x;
  tmpvar_30.y = (tmpvar_29.y * _ProjectionParams.x);
  o_28.xy = (tmpvar_30 + tmpvar_29.w);
  o_28.zw = hPos_26.zw;
  highp vec3 tmpvar_31;
  tmpvar_31 = o_28.xyw;
  screenPos_27 = tmpvar_31;
  screenPos_27.xy = (screenPos_27.xy * (_ScreenParams.xy * 0.25));
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_32;
  highp vec3 viewN_33;
  highp vec3 viewpos_34;
  viewpos_34 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_35;
  tmpvar_35[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_35[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_35[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_33 = normalize((tmpvar_35 * _BillboardNormal));
  lowp vec3 tmpvar_36;
  tmpvar_36 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_32 = tmpvar_36;
  highp vec3 toLight_37;
  highp vec3 tmpvar_38;
  tmpvar_38 = (unity_LightPosition[0].xyz - (viewpos_34 * unity_LightPosition[0].w));
  highp float tmpvar_39;
  tmpvar_39 = dot (tmpvar_38, tmpvar_38);
  toLight_37 = (tmpvar_38 * inversesqrt(tmpvar_39));
  lightColor_32 = (lightColor_32 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_33, toLight_37))
   * 
    ((1.0/((1.0 + (tmpvar_39 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_37, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_40;
  highp vec3 tmpvar_41;
  tmpvar_41 = (unity_LightPosition[1].xyz - (viewpos_34 * unity_LightPosition[1].w));
  highp float tmpvar_42;
  tmpvar_42 = dot (tmpvar_41, tmpvar_41);
  toLight_40 = (tmpvar_41 * inversesqrt(tmpvar_42));
  lightColor_32 = (lightColor_32 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_33, toLight_40))
   * 
    ((1.0/((1.0 + (tmpvar_42 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_40, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_43;
  highp vec3 tmpvar_44;
  tmpvar_44 = (unity_LightPosition[2].xyz - (viewpos_34 * unity_LightPosition[2].w));
  highp float tmpvar_45;
  tmpvar_45 = dot (tmpvar_44, tmpvar_44);
  toLight_43 = (tmpvar_44 * inversesqrt(tmpvar_45));
  lightColor_32 = (lightColor_32 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_33, toLight_43))
   * 
    ((1.0/((1.0 + (tmpvar_45 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_43, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_46;
  highp vec3 tmpvar_47;
  tmpvar_47 = (unity_LightPosition[3].xyz - (viewpos_34 * unity_LightPosition[3].w));
  highp float tmpvar_48;
  tmpvar_48 = dot (tmpvar_47, tmpvar_47);
  toLight_46 = (tmpvar_47 * inversesqrt(tmpvar_48));
  lightColor_32 = (lightColor_32 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_33, toLight_46))
   * 
    ((1.0/((1.0 + (tmpvar_48 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_46, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_32);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_ditherScreenPos = screenPos_27;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp int ti0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec3 t8;
highp vec2 t9;
bool tb9;
bool tb10;
highp float t16;
highp float t24;
bool tb24;
highp float t25;
bool tb25;
highp float t26;
void main()
{
    //Instruction 71171
    //MUL
    t0.x = in_COLOR0.w * 255.000000;
    //Instruction 71172
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71173
    //ADD
    t8.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 71174
    //LT
    tb24 = 0.0<_InstanceData.x;
    //Instruction 71175
    //MOVC
    t1 = (bool(tb24)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71176
    //ADD
    t24 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71177
    //MUL
    t24 = t24 * _TreeSize[int(tu0) + 0].x;
    //Instruction 71178
    //MUL
    t24 = t1.x * t24;
    //Instruction 71179
    //MUL
    t2.xyz = vec3(t24) * _BillboardTangent.xyzx.xyz;
    //Instruction 71180
    //MAD
    t24 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 71181
    //MAD
    t2.w = t24 * t1.y + t2.y;
    //Instruction 71182
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 71183
    //LT
    tb24 = 0.0<t16_3;
    //Instruction 71184
    //DP3
    t1.x = dot(t2.xzw, t2.xzw);
    //Instruction 71185
    //SQRT
    t1.x = sqrt(t1.x);
    //Instruction 71186
    //DIV
    t9.x = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71187
    //MAD
    t9.x = (-t9.x) * 0.250000 + t2.w;
    //Instruction 71188
    //MAX
    t9.x = max(t9.x, 0.0);
    //Instruction 71189
    //MUL
    t9.x = t9.x * _ST_WindGlobal.z;
    //Instruction 71190
    //NE
    tb10 = t9.x!=0.0;
    //Instruction 71191
    //LOG
    t4.x = log2(t9.x);
    //Instruction 71192
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 71193
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 71194
    //MOVC
    t9.x = (tb10) ? t4.x : t9.x;
    //Instruction 71195
    //ADD
    t4.x = t8.x + t1.w;
    //Instruction 71196
    //MAD
    t4.y = t1.w * 0.800000 + t8.y;
    //Instruction 71197
    //ADD
    t8.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 71198
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 71199
    //MAD
    t8.xy = t8.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71200
    //MUL
    t4.xy = abs(t8.xy) * abs(t8.xy);
    //Instruction 71201
    //MAD
    t8.xy = -abs(t8.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71202
    //MAD
    t8.xy = t4.xy * t8.xy + vec2(-0.500000, -0.500000);
    //Instruction 71203
    //ADD
    t8.xy = t8.xy + t8.xy;
    //Instruction 71204
    //MAD
    t8.x = t8.y * t8.y + t8.x;
    //Instruction 71205
    //DIV
    t16 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71206
    //MAD
    t8.x = _ST_WindGlobal.y * t8.x + t16;
    //Instruction 71207
    //MUL
    t8.x = t9.x * t8.x;
    //Instruction 71208
    //MAD
    t4.xz = _ST_WindVector.xz * t8.xx + t2.xz;
    //Instruction 71209
    //MOV
    t4.y = t2.w;
    //Instruction 71210
    //DP3
    t8.x = dot(t4.xyz, t4.xyz);
    //Instruction 71211
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 71212
    //MUL
    t4.xyz = t8.xxx * t4.xyz;
    //Instruction 71213
    //MUL
    t1.xyw = t1.xxx * t4.xyz;
    //Instruction 71214
    //MOVC
    t8.xyz = (bool(tb24)) ? t1.xyw : t2.xwz;
    //Instruction 71215
    //ADD
    t8.xyz = t8.xyz + in_POSITION0.xyz;
    //Instruction 71216
    //ADD
    t1.x = t1.z + _CameraXZAngle;
    //Instruction 71217
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 71218
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 71219
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu0) + 0].x;
    //Instruction 71220
    //GE
    tb9 = t1.x>=(-t1.x);
    //Instruction 71221
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 71222
    //MOVC
    t1.x = (tb9) ? t1.x : (-t1.x);
    //Instruction 71223
    //MAD
    t0.x = t1.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 71224
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71225
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71226
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71227
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71228
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 71229
    //MUL
    t1.xyz = t8.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71230
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t8.xxx + t1.xyz;
    //Instruction 71231
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t8.zzz + t1.xyz;
    //Instruction 71232
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71233
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 71234
    //MUL
    t0.x = t1.y * _ProjectionParams.x;
    //Instruction 71235
    //MUL
    t2.w = t0.x * 0.500000;
    //Instruction 71236
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 71237
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 71238
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 71239
    //MUL
    t2.xyz = t8.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 71240
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t8.xxx + t2.xyz;
    //Instruction 71241
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t8.zzz + t2.xyz;
    //Instruction 71242
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 71243
    //MUL
    t4.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    //Instruction 71244
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t4.xyz;
    //Instruction 71245
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t4.xyz;
    //Instruction 71246
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 71247
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71248
    //MUL
    t4.xyz = t0.xxx * t4.xyz;
    //Instruction 71249
    //MUL
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71250
    //MOV
    t6.xyz = t10_5.xyz;
    //Instruction 71251
    //MOV
    ti0 = 0x0;
    //Instruction 71252
    //LOOP
    while(true){
        //Instruction 71253
        //IGE
        tb25 = ti0>=0x4;
        //Instruction 71254
        //BREAKC
        if(tb25){break;}
        //Instruction 71255
        //MAD
        t7.xyz = (-t2.xyz) * unity_LightPosition[ti0 + 0].www + unity_LightPosition[ti0 + 0].xyz;
        //Instruction 71256
        //DP3
        t25 = dot(t7.xyz, t7.xyz);
        //Instruction 71257
        //RSQ
        t26 = inversesqrt(t25);
        //Instruction 71258
        //MUL
        t7.xyz = vec3(t26) * t7.xyz;
        //Instruction 71259
        //MAD
        t25 = t25 * unity_LightAtten[ti0 + 0].z + 1.0;
        //Instruction 71260
        //DIV
        t25 = float(1.0) / t25;
        //Instruction 71261
        //DP3
        t26 = dot(t7.xyz, unity_SpotDirection[ti0 + 0].xyz);
        //Instruction 71262
        //MAX
        t26 = max(t26, 0.0);
        //Instruction 71263
        //ADD
        t26 = t26 + (-unity_LightAtten[ti0 + 0].x);
        //Instruction 71264
        //MUL
        t26 = t26 * unity_LightAtten[ti0 + 0].y;
        t26 = clamp(t26, 0.0, 1.0);
        //Instruction 71265
        //MUL
        t25 = t25 * t26;
        //Instruction 71266
        //DP3
        t26 = dot(t4.xyz, t7.xyz);
        //Instruction 71267
        //MAX
        t26 = max(t26, 0.0);
        //Instruction 71268
        //MUL
        t25 = t25 * t26;
        //Instruction 71269
        //MAD
        t6.xyz = unity_LightColor[ti0 + 0].xyz * vec3(t25) + t6.xyz;
        //Instruction 71270
        //IADD
        ti0 = ti0 + 0x1;
        //Instruction 71271
    //ENDLOOP
    }
    //Instruction 71272
    //MUL
    t2.xyz = t6.xyz * _Color.xyz;
    //Instruction 71273
    //MUL
    t3 = t8.yyyy * glstate_matrix_mvp[1];
    //Instruction 71274
    //MAD
    t3 = glstate_matrix_mvp[0] * t8.xxxx + t3;
    //Instruction 71275
    //MAD
    t0 = glstate_matrix_mvp[2] * t8.zzzz + t3;
    //Instruction 71276
    //ADD
    gl_Position = t0 + glstate_matrix_mvp[3];
    //Instruction 71277
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 71278
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71279
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 71280
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 71281
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 71155
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 71156
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 71157
    //MOV
    t1.x = t16_0.x;
    //Instruction 71158
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 71159
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71160
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 71161
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 71162
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71163
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 71164
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71165
    //LT
    tb1 = t10_2<0.0;
    //Instruction 71166
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71167
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 71168
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 71169
    //MOV
    SV_Target0 = t16_1;
    //Instruction 71170
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp float angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  angle_6 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_5.xz = tmpvar_13.xz;
  billboardPos_5.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_12.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_14;
    vPos_14 = billboardPos_5;
    highp float fMoveAmount_15;
    highp float fAdjust_16;
    highp float fLength_17;
    fLength_17 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_18;
    tmpvar_18 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_16 = tmpvar_18;
    if ((tmpvar_18 != 0.0)) {
      fAdjust_16 = pow (tmpvar_18, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_19;
    tmpvar_19.zw = vec2(0.0, 0.0);
    tmpvar_19.x = (tmpvar_11.x + tmpvar_12.w);
    tmpvar_19.y = (tmpvar_11.y + (tmpvar_12.w * 0.8));
    highp vec4 tmpvar_20;
    highp vec4 tmpvar_21;
    tmpvar_21 = abs(((
      fract((tmpvar_19 + 0.5))
     * 2.0) - 1.0));
    tmpvar_20 = (((
      (tmpvar_21 * tmpvar_21)
     * 
      (3.0 - (2.0 * tmpvar_21))
    ) - 0.5) * 2.0);
    fMoveAmount_15 = ((_ST_WindGlobal.y * (tmpvar_20.x + 
      (tmpvar_20.y * tmpvar_20.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_15 = (fMoveAmount_15 * fAdjust_16);
    vPos_14.xz = (tmpvar_13.xz + (_ST_WindVector.xz * fMoveAmount_15));
    vPos_14 = (normalize(vPos_14) * fLength_17);
    billboardPos_5 = vPos_14;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_22;
  tmpvar_22 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.x);
  highp float tmpvar_23;
  tmpvar_23 = (fract(abs(tmpvar_22)) * tmpvar_8.x);
  highp float tmpvar_24;
  if ((tmpvar_22 >= 0.0)) {
    tmpvar_24 = tmpvar_23;
  } else {
    tmpvar_24 = -(tmpvar_23);
  };
  highp vec4 tmpvar_25;
  tmpvar_25 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_24))];
  if ((tmpvar_25.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_25.xy - (tmpvar_25.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_25.xy + (tmpvar_25.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_26;
  tmpvar_26 = clamp ((fract(
    ((tmpvar_11.x + tmpvar_11.y) + tmpvar_11.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_26;
  highp vec4 hPos_27;
  hPos_27 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_28;
  highp vec4 o_29;
  highp vec4 tmpvar_30;
  tmpvar_30 = (hPos_27 * 0.5);
  highp vec2 tmpvar_31;
  tmpvar_31.x = tmpvar_30.x;
  tmpvar_31.y = (tmpvar_30.y * _ProjectionParams.x);
  o_29.xy = (tmpvar_31 + tmpvar_30.w);
  o_29.zw = hPos_27.zw;
  highp vec3 tmpvar_32;
  tmpvar_32 = o_29.xyw;
  screenPos_28 = tmpvar_32;
  screenPos_28.xy = (screenPos_28.xy * (_ScreenParams.xy * 0.25));
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_33;
  highp vec3 viewN_34;
  highp vec3 viewpos_35;
  viewpos_35 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_36;
  tmpvar_36[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_36[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_36[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_34 = normalize((tmpvar_36 * _BillboardNormal));
  lowp vec3 tmpvar_37;
  tmpvar_37 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_33 = tmpvar_37;
  highp vec3 toLight_38;
  highp vec3 tmpvar_39;
  tmpvar_39 = (unity_LightPosition[0].xyz - (viewpos_35 * unity_LightPosition[0].w));
  highp float tmpvar_40;
  tmpvar_40 = dot (tmpvar_39, tmpvar_39);
  toLight_38 = (tmpvar_39 * inversesqrt(tmpvar_40));
  lightColor_33 = (lightColor_33 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_34, toLight_38))
   * 
    ((1.0/((1.0 + (tmpvar_40 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_38, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_41;
  highp vec3 tmpvar_42;
  tmpvar_42 = (unity_LightPosition[1].xyz - (viewpos_35 * unity_LightPosition[1].w));
  highp float tmpvar_43;
  tmpvar_43 = dot (tmpvar_42, tmpvar_42);
  toLight_41 = (tmpvar_42 * inversesqrt(tmpvar_43));
  lightColor_33 = (lightColor_33 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_34, toLight_41))
   * 
    ((1.0/((1.0 + (tmpvar_43 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_41, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_44;
  highp vec3 tmpvar_45;
  tmpvar_45 = (unity_LightPosition[2].xyz - (viewpos_35 * unity_LightPosition[2].w));
  highp float tmpvar_46;
  tmpvar_46 = dot (tmpvar_45, tmpvar_45);
  toLight_44 = (tmpvar_45 * inversesqrt(tmpvar_46));
  lightColor_33 = (lightColor_33 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_34, toLight_44))
   * 
    ((1.0/((1.0 + (tmpvar_46 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_44, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_47;
  highp vec3 tmpvar_48;
  tmpvar_48 = (unity_LightPosition[3].xyz - (viewpos_35 * unity_LightPosition[3].w));
  highp float tmpvar_49;
  tmpvar_49 = dot (tmpvar_48, tmpvar_48);
  toLight_47 = (tmpvar_48 * inversesqrt(tmpvar_49));
  lightColor_33 = (lightColor_33 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_34, toLight_47))
   * 
    ((1.0/((1.0 + (tmpvar_49 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_47, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_33);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_ditherScreenPos = screenPos_28;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp float t0;
highp uint tu0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_3;
highp vec3 t4;
bool tb4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t7;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t12;
highp float t17;
highp int ti17;
bool tb17;
highp vec2 t18;
highp vec2 t20;
highp float t25;
highp float t26;
bool tb26;
highp float t28;
void main()
{
    //Instruction 72336
    //MUL
    t0 = in_COLOR0.w * 255.000000;
    //Instruction 72337
    //FTOU
    tu0 = uint(t0);
    //Instruction 72338
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 72339
    //LT
    tb1 = 0.0<_InstanceData.x;
    //Instruction 72340
    //MOVC
    t1 = (bool(tb1)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 72341
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 72342
    //MUL
    t2.x = t2.x * _TreeSize[int(tu0) + 0].x;
    //Instruction 72343
    //MUL
    t1.x = t1.x * t2.x;
    //Instruction 72344
    //MUL
    t2.xyz = t1.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 72345
    //MAD
    t1.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 72346
    //MAD
    t2.w = t1.x * t1.y + t2.y;
    //Instruction 72347
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 72348
    //LT
    tb1 = 0.0<t16_3;
    //Instruction 72349
    //DP3
    t9 = dot(t2.xzw, t2.xzw);
    //Instruction 72350
    //SQRT
    t9 = sqrt(t9);
    //Instruction 72351
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 72352
    //MAD
    t10 = (-t10) * 0.250000 + t2.w;
    //Instruction 72353
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 72354
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 72355
    //NE
    tb4 = t10!=0.0;
    //Instruction 72356
    //LOG
    t12 = log2(t10);
    //Instruction 72357
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 72358
    //EXP
    t12 = exp2(t12);
    //Instruction 72359
    //MOVC
    t10 = (tb4) ? t12 : t10;
    //Instruction 72360
    //ADD
    t4.x = t8.x + t1.w;
    //Instruction 72361
    //MAD
    t4.y = t1.w * 0.800000 + t8.y;
    //Instruction 72362
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 72363
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 72364
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 72365
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 72366
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 72367
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 72368
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 72369
    //MAD
    t25 = t4.y * t4.y + t4.x;
    //Instruction 72370
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 72371
    //MAD
    t25 = _ST_WindGlobal.y * t25 + t4.x;
    //Instruction 72372
    //MUL
    t25 = t10 * t25;
    //Instruction 72373
    //MAD
    t4.xz = _ST_WindVector.xz * vec2(t25) + t2.xz;
    //Instruction 72374
    //MOV
    t4.y = t2.w;
    //Instruction 72375
    //DP3
    t25 = dot(t4.xyz, t4.xyz);
    //Instruction 72376
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 72377
    //MUL
    t4.xyz = vec3(t25) * t4.xyz;
    //Instruction 72378
    //MUL
    t4.xyz = vec3(t9) * t4.xyz;
    //Instruction 72379
    //MOVC
    t1.xyw = (bool(tb1)) ? t4.xyz : t2.xwz;
    //Instruction 72380
    //ADD
    t1.xyw = t1.xyw + in_POSITION0.xyz;
    //Instruction 72381
    //ADD
    t17 = t1.z + _CameraXZAngle;
    //Instruction 72382
    //MAD
    t17 = t17 * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 72383
    //ROUND_NI
    t17 = floor(t17);
    //Instruction 72384
    //DIV
    t17 = t17 / _TreeInfo[int(tu0) + 0].x;
    //Instruction 72385
    //GE
    tb2 = t17>=(-t17);
    //Instruction 72386
    //FRC
    t17 = fract(abs(t17));
    //Instruction 72387
    //MOVC
    t17 = (tb2) ? t17 : (-t17);
    //Instruction 72388
    //MAD
    t0 = t17 * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 72389
    //FTOU
    tu0 = uint(t0);
    //Instruction 72390
    //LT
    tb17 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 72391
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 72392
    //MAD
    t18.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 72393
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb17)) ? t2.xy : t18.xy;
    //Instruction 72394
    //ADD
    t0 = t8.y + t8.x;
    //Instruction 72395
    //ADD
    t0 = t8.z + t0;
    //Instruction 72396
    //FRC
    t0 = fract(t0);
    //Instruction 72397
    //MUL
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    //Instruction 72398
    //MUL
    t8.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 72399
    //MAD
    t8.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t8.xyz;
    //Instruction 72400
    //MAD
    t8.xyz = glstate_matrix_mvp[2].xyw * t1.www + t8.xyz;
    //Instruction 72401
    //ADD
    t8.xyz = t8.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 72402
    //MUL
    t2.xz = t8.xz * vec2(0.500000, 0.500000);
    //Instruction 72403
    //MUL
    t17 = t8.y * _ProjectionParams.x;
    //Instruction 72404
    //MUL
    t2.w = t17 * 0.500000;
    //Instruction 72405
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 72406
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 72407
    //MUL
    t8.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 72408
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 72409
    //MAD
    t2.xyz = glstate_matrix_modelview0[0].xyz * t1.xxx + t2.xyz;
    //Instruction 72410
    //MAD
    t2.xyz = glstate_matrix_modelview0[2].xyz * t1.www + t2.xyz;
    //Instruction 72411
    //ADD
    t2.xyz = t2.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 72412
    //MUL
    t4.xyz = glstate_matrix_invtrans_modelview0[1].xyz * _BillboardNormal.xyzx.yyy;
    //Instruction 72413
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[0].xyz * _BillboardNormal.xyzx.xxx + t4.xyz;
    //Instruction 72414
    //MAD
    t4.xyz = glstate_matrix_invtrans_modelview0[2].xyz * _BillboardNormal.xyzx.zzz + t4.xyz;
    //Instruction 72415
    //DP3
    t17 = dot(t4.xyz, t4.xyz);
    //Instruction 72416
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 72417
    //MUL
    t4.xyz = vec3(t17) * t4.xyz;
    //Instruction 72418
    //MUL
    t10_5.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 72419
    //MOV
    t6.xyz = t10_5.xyz;
    //Instruction 72420
    //MOV
    ti17 = 0x0;
    //Instruction 72421
    //LOOP
    while(true){
        //Instruction 72422
        //IGE
        tb26 = ti17>=0x4;
        //Instruction 72423
        //BREAKC
        if(tb26){break;}
        //Instruction 72424
        //MAD
        t7.xyz = (-t2.xyz) * unity_LightPosition[ti17 + 0].www + unity_LightPosition[ti17 + 0].xyz;
        //Instruction 72425
        //DP3
        t26 = dot(t7.xyz, t7.xyz);
        //Instruction 72426
        //RSQ
        t28 = inversesqrt(t26);
        //Instruction 72427
        //MUL
        t7.xyz = vec3(t28) * t7.xyz;
        //Instruction 72428
        //MAD
        t26 = t26 * unity_LightAtten[ti17 + 0].z + 1.0;
        //Instruction 72429
        //DIV
        t26 = float(1.0) / t26;
        //Instruction 72430
        //DP3
        t28 = dot(t7.xyz, unity_SpotDirection[ti17 + 0].xyz);
        //Instruction 72431
        //MAX
        t28 = max(t28, 0.0);
        //Instruction 72432
        //ADD
        t28 = t28 + (-unity_LightAtten[ti17 + 0].x);
        //Instruction 72433
        //MUL
        t28 = t28 * unity_LightAtten[ti17 + 0].y;
        t28 = clamp(t28, 0.0, 1.0);
        //Instruction 72434
        //MUL
        t26 = t26 * t28;
        //Instruction 72435
        //DP3
        t28 = dot(t4.xyz, t7.xyz);
        //Instruction 72436
        //MAX
        t28 = max(t28, 0.0);
        //Instruction 72437
        //MUL
        t26 = t26 * t28;
        //Instruction 72438
        //MAD
        t6.xyz = unity_LightColor[ti17 + 0].xyz * vec3(t26) + t6.xyz;
        //Instruction 72439
        //IADD
        ti17 = ti17 + 0x1;
        //Instruction 72440
    //ENDLOOP
    }
    //Instruction 72441
    //MUL
    t2.xyz = t6.xyz * _Color.xyz;
    //Instruction 72442
    //MUL
    t3 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 72443
    //MAD
    t3 = glstate_matrix_mvp[0] * t1.xxxx + t3;
    //Instruction 72444
    //MAD
    t1 = glstate_matrix_mvp[2] * t1.wwww + t3;
    //Instruction 72445
    //ADD
    gl_Position = t1 + glstate_matrix_mvp[3];
    //Instruction 72446
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 72447
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 72448
    //MOV
    vs_TEXCOORD2.z = t0;
    //Instruction 72449
    //MOV
    vs_TEXCOORD3.xyz = t8.xyz;
    //Instruction 72450
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 72311
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 72312
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 72313
    //MOV
    t1.x = t16_0.x;
    //Instruction 72314
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 72315
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 72316
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 72317
    //LT
    tb1 = t16_1<0.0;
    //Instruction 72318
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72319
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 72320
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72321
    //LT
    tb1 = t10_2<0.0;
    //Instruction 72322
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72323
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 72324
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 72325
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 72326
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 72327
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 72328
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 72329
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 72330
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 72331
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 72332
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 72333
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 72334
    //MOV
    SV_Target0 = t16_0;
    //Instruction 72335
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp vec3 angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - tmpvar_11));
  highp vec3 tmpvar_13;
  tmpvar_13.y = 0.0;
  tmpvar_13.x = -(tmpvar_12.z);
  tmpvar_13.z = tmpvar_12.x;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14.z;
  tmpvar_15.z = -(tmpvar_14.x);
  highp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (min (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0) / max (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0));
  highp float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  tmpvar_18 = (((
    ((((
      ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
     * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
   * tmpvar_18) + 0.9999793) * tmpvar_17);
  tmpvar_18 = (tmpvar_18 + (float(
    (abs((tmpvar_15.z / tmpvar_14.z)) > 1.0)
  ) * (
    (tmpvar_18 * -2.0)
   + 1.570796)));
  tmpvar_16 = (tmpvar_18 * sign((tmpvar_15.z / tmpvar_14.z)));
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_15.z)))) {
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_15.z >= 0.0)) {
        tmpvar_16 += 3.141593;
      } else {
        tmpvar_16 = (tmpvar_16 - 3.141593);
      };
    };
  } else {
    tmpvar_16 = (sign(tmpvar_15.z) * 1.570796);
  };
  angle_6 = vec3(tmpvar_16);
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_16), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  angle_6 = (vec3(tmpvar_16) + tmpvar_23);
  highp vec4 tmpvar_24;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_24 = _InstanceData;
  } else {
    tmpvar_24 = tmpvar_1;
  };
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_24.x) * tmpvar_14);
  billboardPos_5.xz = tmpvar_25.xz;
  billboardPos_5.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_24.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_5;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_11.x + tmpvar_24.w);
    tmpvar_31.y = (tmpvar_11.y + (tmpvar_24.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_5 = vPos_26;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (angle_6 + tmpvar_24.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_8.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_38;
  hPos_38 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_39;
  highp vec4 o_40;
  highp vec4 tmpvar_41;
  tmpvar_41 = (hPos_38 * 0.5);
  highp vec2 tmpvar_42;
  tmpvar_42.x = tmpvar_41.x;
  tmpvar_42.y = (tmpvar_41.y * _ProjectionParams.x);
  o_40.xy = (tmpvar_42 + tmpvar_41.w);
  o_40.zw = hPos_38.zw;
  highp vec3 tmpvar_43;
  tmpvar_43 = o_40.xyw;
  screenPos_39 = tmpvar_43;
  screenPos_39.xy = (screenPos_39.xy * (_ScreenParams.xy * 0.25));
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_44;
  highp vec3 viewN_45;
  highp vec3 viewpos_46;
  viewpos_46 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_47;
  tmpvar_47[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_47[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_47[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_45 = normalize((tmpvar_47 * tmpvar_15));
  lowp vec3 tmpvar_48;
  tmpvar_48 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_44 = tmpvar_48;
  highp vec3 toLight_49;
  highp vec3 tmpvar_50;
  tmpvar_50 = (unity_LightPosition[0].xyz - (viewpos_46 * unity_LightPosition[0].w));
  highp float tmpvar_51;
  tmpvar_51 = dot (tmpvar_50, tmpvar_50);
  toLight_49 = (tmpvar_50 * inversesqrt(tmpvar_51));
  lightColor_44 = (lightColor_44 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_45, toLight_49))
   * 
    ((1.0/((1.0 + (tmpvar_51 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_49, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_52;
  highp vec3 tmpvar_53;
  tmpvar_53 = (unity_LightPosition[1].xyz - (viewpos_46 * unity_LightPosition[1].w));
  highp float tmpvar_54;
  tmpvar_54 = dot (tmpvar_53, tmpvar_53);
  toLight_52 = (tmpvar_53 * inversesqrt(tmpvar_54));
  lightColor_44 = (lightColor_44 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_45, toLight_52))
   * 
    ((1.0/((1.0 + (tmpvar_54 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_52, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_55;
  highp vec3 tmpvar_56;
  tmpvar_56 = (unity_LightPosition[2].xyz - (viewpos_46 * unity_LightPosition[2].w));
  highp float tmpvar_57;
  tmpvar_57 = dot (tmpvar_56, tmpvar_56);
  toLight_55 = (tmpvar_56 * inversesqrt(tmpvar_57));
  lightColor_44 = (lightColor_44 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_45, toLight_55))
   * 
    ((1.0/((1.0 + (tmpvar_57 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_55, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_58;
  highp vec3 tmpvar_59;
  tmpvar_59 = (unity_LightPosition[3].xyz - (viewpos_46 * unity_LightPosition[3].w));
  highp float tmpvar_60;
  tmpvar_60 = dot (tmpvar_59, tmpvar_59);
  toLight_58 = (tmpvar_59 * inversesqrt(tmpvar_60));
  lightColor_44 = (lightColor_44 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_45, toLight_58))
   * 
    ((1.0/((1.0 + (tmpvar_60 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_58, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_44);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_ditherScreenPos = screenPos_39;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump vec4 diffuseColor_3;
  mediump vec2 projUV_4;
  mediump vec2 tmpvar_5;
  tmpvar_5 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_4.x = tmpvar_5.x;
  projUV_4.y = ((fract(tmpvar_5.y) * 0.0625) + unity_LODFade.y);
  lowp float x_6;
  x_6 = (texture2D (_DitherMaskLOD2D, projUV_4).w - 0.5);
  if ((x_6 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_3 = tmpvar_7;
  tmpvar_2 = (diffuseColor_3.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_2 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_1 = (diffuseColor_3.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_9;
  tmpvar_9.xyz = tmpvar_1;
  tmpvar_9.w = tmpvar_2;
  gl_FragData[0] = tmpvar_9;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t8;
bool tb8;
highp vec3 t10;
bool tb10;
highp vec2 t16;
bool tb16;
highp vec2 t17;
highp int ti17;
bool tb17;
highp float t18;
highp float t24;
highp int ti24;
highp float t25;
bool tb25;
highp float t27;
void main()
{
    //Instruction 72467
    //MUL
    t0.x = in_COLOR0.w * 255.000000;
    //Instruction 72468
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 72469
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 72470
    //ADD
    t1.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 72471
    //DP3
    t24 = dot(t1.xyz, t1.xyz);
    //Instruction 72472
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 72473
    //MUL
    t1.xy = vec2(t24) * t1.xz;
    //Instruction 72474
    //MOV
    t1.zw = (-t1.yy);
    //Instruction 72475
    //DP2
    t24 = dot(t1.xz, t1.xw);
    //Instruction 72476
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 72477
    //MUL
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    //Instruction 72478
    //MUL
    t1.xy = vec2(t24) * t1.xy;
    //Instruction 72479
    //MIN
    t24 = min(abs(t1.y), abs(t1.x));
    //Instruction 72480
    //MAX
    t17.x = max(abs(t1.y), abs(t1.x));
    //Instruction 72481
    //DIV
    t17.x = float(1.0) / t17.x;
    //Instruction 72482
    //MUL
    t24 = t24 * t17.x;
    //Instruction 72483
    //MUL
    t17.x = t24 * t24;
    //Instruction 72484
    //MAD
    t25 = t17.x * 0.020835 + -0.085133;
    //Instruction 72485
    //MAD
    t25 = t17.x * t25 + 0.180141;
    //Instruction 72486
    //MAD
    t25 = t17.x * t25 + -0.330299;
    //Instruction 72487
    //MAD
    t17.x = t17.x * t25 + 0.999866;
    //Instruction 72488
    //MUL
    t25 = t24 * t17.x;
    //Instruction 72489
    //LT
    tb2 = abs(t1.y)<abs(t1.x);
    //Instruction 72490
    //MAD
    t25 = t25 * -2.000000 + 1.570796;
    //Instruction 72491
    //AND
    t25 = tb2 ? t25 : float(0.0);
    //Instruction 72492
    //MAD
    t24 = t24 * t17.x + t25;
    //Instruction 72493
    //LT
    tb17 = t1.y<(-t1.y);
    //Instruction 72494
    //AND
    t17.x = tb17 ? -3.141593 : float(0.0);
    //Instruction 72495
    //ADD
    t24 = t24 + t17.x;
    //Instruction 72496
    //MIN
    t17.x = min(t1.y, (-t1.x));
    //Instruction 72497
    //MAX
    t25 = max(t1.y, (-t1.x));
    //Instruction 72498
    //LT
    tb17 = t17.x<(-t17.x);
    //Instruction 72499
    //GE
    tb25 = t25>=(-t25);
    //Instruction 72500
    //AND
    ti17 = int(uint(tb25) & uint(tb17));
    //Instruction 72501
    //MOVC
    t24 = (ti17 != 0) ? (-t24) : t24;
    //Instruction 72502
    //LT
    tb17 = t24<0.0;
    //Instruction 72503
    //AND
    t17.x = tb17 ? 6.283185 : float(0.0);
    //Instruction 72504
    //ADD
    t24 = t24 + t17.x;
    //Instruction 72505
    //LT
    tb17 = 0.0<_InstanceData.x;
    //Instruction 72506
    //MOVC
    t2 = (bool(tb17)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 72507
    //ADD
    t17.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 72508
    //MUL
    t17.x = t17.x * _TreeSize[int(tu0) + 0].x;
    //Instruction 72509
    //MUL
    t17.x = t2.x * t17.x;
    //Instruction 72510
    //MUL
    t3.xz = t1.xy * t17.xx;
    //Instruction 72511
    //MAD
    t17.x = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 72512
    //MUL
    t3.y = t2.y * t17.x;
    //Instruction 72513
    //MUL
    t16_4 = _WindEnabled * _WindQuality;
    //Instruction 72514
    //LT
    tb17 = 0.0<t16_4;
    //Instruction 72515
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 72516
    //SQRT
    t25 = sqrt(t25);
    //Instruction 72517
    //DIV
    t2.x = float(1.0) / _ST_WindGlobal.z;
    //Instruction 72518
    //MAD
    t2.x = (-t2.x) * 0.250000 + t3.y;
    //Instruction 72519
    //MAX
    t2.x = max(t2.x, 0.0);
    //Instruction 72520
    //MUL
    t2.x = t2.x * _ST_WindGlobal.z;
    //Instruction 72521
    //NE
    tb10 = t2.x!=0.0;
    //Instruction 72522
    //LOG
    t27 = log2(t2.x);
    //Instruction 72523
    //MUL
    t27 = t27 * _ST_WindGlobal.w;
    //Instruction 72524
    //EXP
    t27 = exp2(t27);
    //Instruction 72525
    //MOVC
    t2.x = (tb10) ? t27 : t2.x;
    //Instruction 72526
    //ADD
    t5.x = t8.x + t2.w;
    //Instruction 72527
    //MAD
    t5.y = t2.w * 0.800000 + t8.y;
    //Instruction 72528
    //ADD
    t8.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 72529
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 72530
    //MAD
    t8.xy = t8.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 72531
    //MUL
    t10.xz = abs(t8.xy) * abs(t8.xy);
    //Instruction 72532
    //MAD
    t8.xy = -abs(t8.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 72533
    //MAD
    t8.xy = t10.xz * t8.xy + vec2(-0.500000, -0.500000);
    //Instruction 72534
    //ADD
    t8.xy = t8.xy + t8.xy;
    //Instruction 72535
    //MAD
    t8.x = t8.y * t8.y + t8.x;
    //Instruction 72536
    //DIV
    t16.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 72537
    //MAD
    t8.x = _ST_WindGlobal.y * t8.x + t16.x;
    //Instruction 72538
    //MUL
    t8.x = t2.x * t8.x;
    //Instruction 72539
    //MAD
    t5.xz = _ST_WindVector.xz * t8.xx + t3.xz;
    //Instruction 72540
    //MOV
    t5.y = t3.y;
    //Instruction 72541
    //DP3
    t8.x = dot(t5.xyz, t5.xyz);
    //Instruction 72542
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 72543
    //MUL
    t2.xyw = t8.xxx * t5.xyz;
    //Instruction 72544
    //MUL
    t2.xyw = vec3(t25) * t2.xyw;
    //Instruction 72545
    //MOVC
    t2.xyw = (bool(tb17)) ? t2.xyw : t3.xyz;
    //Instruction 72546
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 72547
    //ADD
    t8.x = t24 + t2.z;
    //Instruction 72548
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 72549
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 72550
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu0) + 0].x;
    //Instruction 72551
    //GE
    tb16 = t8.x>=(-t8.x);
    //Instruction 72552
    //FRC
    t8.x = fract(abs(t8.x));
    //Instruction 72553
    //MOVC
    t8.x = (tb16) ? t8.x : (-t8.x);
    //Instruction 72554
    //MAD
    t0.x = t8.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 72555
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 72556
    //LT
    tb8 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 72557
    //MAD
    t16.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 72558
    //MAD
    t17.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 72559
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb8)) ? t16.xy : t17.xy;
    //Instruction 72560
    //MUL
    t0.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 72561
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t0.xyz;
    //Instruction 72562
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t2.www + t0.xyz;
    //Instruction 72563
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 72564
    //MUL
    t0.w = t0.y * _ProjectionParams.x;
    //Instruction 72565
    //MUL
    t3.xzw = t0.xzw * vec3(0.500000, 0.500000, 0.500000);
    //Instruction 72566
    //ADD
    t17.xy = t3.zz + t3.xw;
    //Instruction 72567
    //MUL
    t17.xy = t17.xy * _ScreenParams.xy;
    //Instruction 72568
    //MUL
    t0.xy = t17.xy * vec2(0.250000, 0.250000);
    //Instruction 72569
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 72570
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 72571
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t2.www + t3.xyz;
    //Instruction 72572
    //ADD
    t3.xyz = t3.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 72573
    //MUL
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    //Instruction 72574
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    //Instruction 72575
    //DP3
    t24 = dot(t1.xyz, t1.xyz);
    //Instruction 72576
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 72577
    //MUL
    t1.xyz = vec3(t24) * t1.xyz;
    //Instruction 72578
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 72579
    //MOV
    t5.xyz = t10_6.xyz;
    //Instruction 72580
    //MOV
    ti24 = 0x0;
    //Instruction 72581
    //LOOP
    while(true){
        //Instruction 72582
        //IGE
        tb25 = ti24>=0x4;
        //Instruction 72583
        //BREAKC
        if(tb25){break;}
        //Instruction 72584
        //MAD
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti24 + 0].www + unity_LightPosition[ti24 + 0].xyz;
        //Instruction 72585
        //DP3
        t25 = dot(t7.xyz, t7.xyz);
        //Instruction 72586
        //RSQ
        t18 = inversesqrt(t25);
        //Instruction 72587
        //MUL
        t7.xyz = vec3(t18) * t7.xyz;
        //Instruction 72588
        //MAD
        t25 = t25 * unity_LightAtten[ti24 + 0].z + 1.0;
        //Instruction 72589
        //DIV
        t25 = float(1.0) / t25;
        //Instruction 72590
        //DP3
        t18 = dot(t7.xyz, unity_SpotDirection[ti24 + 0].xyz);
        //Instruction 72591
        //MAX
        t18 = max(t18, 0.0);
        //Instruction 72592
        //ADD
        t18 = t18 + (-unity_LightAtten[ti24 + 0].x);
        //Instruction 72593
        //MUL
        t18 = t18 * unity_LightAtten[ti24 + 0].y;
        t18 = clamp(t18, 0.0, 1.0);
        //Instruction 72594
        //MUL
        t25 = t25 * t18;
        //Instruction 72595
        //DP3
        t18 = dot(t1.xyz, t7.xyz);
        //Instruction 72596
        //MAX
        t18 = max(t18, 0.0);
        //Instruction 72597
        //MUL
        t25 = t25 * t18;
        //Instruction 72598
        //MAD
        t5.xyz = unity_LightColor[ti24 + 0].xyz * vec3(t25) + t5.xyz;
        //Instruction 72599
        //IADD
        ti24 = ti24 + 0x1;
        //Instruction 72600
    //ENDLOOP
    }
    //Instruction 72601
    //MUL
    t1.xyz = t5.xyz * _Color.xyz;
    //Instruction 72602
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 72603
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 72604
    //MAD
    t2 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 72605
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 72606
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 72607
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 72608
    //MOV
    vs_TEXCOORD2.z = 0.0;
    //Instruction 72609
    //MOV
    vs_TEXCOORD3.xyz = t0.xyz;
    //Instruction 72610
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump float t16_3;
void main()
{
    //Instruction 72451
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 72452
    //FRC
    t16_3 = fract(t16_0.y);
    //Instruction 72453
    //MOV
    t1.x = t16_0.x;
    //Instruction 72454
    //MAD
    t1.y = t16_3 * 0.062500 + unity_LODFade.y;
    //Instruction 72455
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 72456
    //ADD
    t16_1.x = t10_1 + -0.500000;
    //Instruction 72457
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 72458
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72459
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 72460
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72461
    //LT
    tb1 = t10_2<0.0;
    //Instruction 72462
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 72463
    //MUL
    t16_1.w = t10_0.w * _Color.w;
    //Instruction 72464
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD1.xyz;
    //Instruction 72465
    //MOV
    SV_Target0 = t16_1;
    //Instruction 72466
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_LightColor[8];
uniform highp vec4 unity_LightPosition[8];
uniform mediump vec4 unity_LightAtten[8];
uniform highp vec4 unity_SpotDirection[8];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 glstate_matrix_modelview0;
uniform highp mat4 glstate_matrix_invtrans_modelview0;
uniform highp mat4 _Object2World;
uniform lowp vec4 glstate_lightmodel_ambient;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec4 tmpvar_2;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesVertex;
  mediump vec3 tmpvar_4;
  highp vec3 billboardPos_5;
  highp vec3 angle_6;
  highp float tmpvar_7;
  tmpvar_7 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_8;
  tmpvar_8 = _TreeInfo[int(tmpvar_7)];
  highp vec4 tmpvar_9;
  tmpvar_9 = _TreeSize[int(tmpvar_7)];
  highp vec3 tmpvar_10;
  tmpvar_10.x = _Object2World[3].x;
  tmpvar_10.y = _Object2World[3].y;
  tmpvar_10.z = _Object2World[3].z;
  highp vec3 tmpvar_11;
  tmpvar_11 = (_glesVertex.xyz + tmpvar_10);
  highp vec3 tmpvar_12;
  tmpvar_12 = normalize((_WorldSpaceCameraPos - tmpvar_11));
  highp vec3 tmpvar_13;
  tmpvar_13.y = 0.0;
  tmpvar_13.x = -(tmpvar_12.z);
  tmpvar_13.z = tmpvar_12.x;
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize(tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = tmpvar_14.z;
  tmpvar_15.z = -(tmpvar_14.x);
  highp float tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = (min (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0) / max (abs(
    (tmpvar_15.z / tmpvar_14.z)
  ), 1.0));
  highp float tmpvar_18;
  tmpvar_18 = (tmpvar_17 * tmpvar_17);
  tmpvar_18 = (((
    ((((
      ((((-0.01213232 * tmpvar_18) + 0.05368138) * tmpvar_18) - 0.1173503)
     * tmpvar_18) + 0.1938925) * tmpvar_18) - 0.3326756)
   * tmpvar_18) + 0.9999793) * tmpvar_17);
  tmpvar_18 = (tmpvar_18 + (float(
    (abs((tmpvar_15.z / tmpvar_14.z)) > 1.0)
  ) * (
    (tmpvar_18 * -2.0)
   + 1.570796)));
  tmpvar_16 = (tmpvar_18 * sign((tmpvar_15.z / tmpvar_14.z)));
  if ((abs(tmpvar_14.z) > (1e-08 * abs(tmpvar_15.z)))) {
    if ((tmpvar_14.z < 0.0)) {
      if ((tmpvar_15.z >= 0.0)) {
        tmpvar_16 += 3.141593;
      } else {
        tmpvar_16 = (tmpvar_16 - 3.141593);
      };
    };
  } else {
    tmpvar_16 = (sign(tmpvar_15.z) * 1.570796);
  };
  angle_6 = vec3(tmpvar_16);
  bvec3 tmpvar_19;
  tmpvar_19 = lessThan (vec3(tmpvar_16), vec3(0.0, 0.0, 0.0));
  float tmpvar_20;
  if (tmpvar_19.x) {
    tmpvar_20 = 6.283185;
  } else {
    tmpvar_20 = 0.0;
  };
  float tmpvar_21;
  if (tmpvar_19.y) {
    tmpvar_21 = 6.283185;
  } else {
    tmpvar_21 = 0.0;
  };
  float tmpvar_22;
  if (tmpvar_19.z) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_20;
  tmpvar_23.y = tmpvar_21;
  tmpvar_23.z = tmpvar_22;
  angle_6 = (vec3(tmpvar_16) + tmpvar_23);
  highp vec4 tmpvar_24;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_24 = _InstanceData;
  } else {
    tmpvar_24 = tmpvar_1;
  };
  highp vec3 tmpvar_25;
  tmpvar_25 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_9.x) * tmpvar_24.x) * tmpvar_14);
  billboardPos_5.xz = tmpvar_25.xz;
  billboardPos_5.y = (tmpvar_25.y + ((
    (_glesMultiTexCoord0.y * tmpvar_9.y)
   + tmpvar_9.z) * tmpvar_24.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_26;
    vPos_26 = billboardPos_5;
    highp float fMoveAmount_27;
    highp float fAdjust_28;
    highp float fLength_29;
    fLength_29 = sqrt(dot (billboardPos_5, billboardPos_5));
    highp float tmpvar_30;
    tmpvar_30 = (max ((billboardPos_5.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_28 = tmpvar_30;
    if ((tmpvar_30 != 0.0)) {
      fAdjust_28 = pow (tmpvar_30, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_31;
    tmpvar_31.zw = vec2(0.0, 0.0);
    tmpvar_31.x = (tmpvar_11.x + tmpvar_24.w);
    tmpvar_31.y = (tmpvar_11.y + (tmpvar_24.w * 0.8));
    highp vec4 tmpvar_32;
    highp vec4 tmpvar_33;
    tmpvar_33 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    tmpvar_32 = (((
      (tmpvar_33 * tmpvar_33)
     * 
      (3.0 - (2.0 * tmpvar_33))
    ) - 0.5) * 2.0);
    fMoveAmount_27 = ((_ST_WindGlobal.y * (tmpvar_32.x + 
      (tmpvar_32.y * tmpvar_32.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_27 = (fMoveAmount_27 * fAdjust_28);
    vPos_26.xz = (tmpvar_25.xz + (_ST_WindVector.xz * fMoveAmount_27));
    vPos_26 = (normalize(vPos_26) * fLength_29);
    billboardPos_5 = vPos_26;
  };
  tmpvar_3.xyz = (_glesVertex.xyz + billboardPos_5);
  tmpvar_3.w = 1.0;
  angle_6 = (angle_6 + tmpvar_24.z);
  highp vec3 tmpvar_34;
  tmpvar_34 = (floor((
    (angle_6 * tmpvar_8.y)
   + 0.5)) / tmpvar_8.xxx);
  highp vec3 tmpvar_35;
  tmpvar_35 = (fract(abs(tmpvar_34)) * tmpvar_8.xxx);
  highp float tmpvar_36;
  if ((tmpvar_34.x >= 0.0)) {
    tmpvar_36 = tmpvar_35.x;
  } else {
    tmpvar_36 = -(tmpvar_35.x);
  };
  highp vec4 tmpvar_37;
  tmpvar_37 = _ImageTexCoords[int((tmpvar_8.z + tmpvar_36))];
  if ((tmpvar_37.w < 0.0)) {
    tmpvar_4.xy = (tmpvar_37.xy - (tmpvar_37.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_4.xy = (tmpvar_37.xy + (tmpvar_37.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_38;
  tmpvar_38 = clamp ((fract(
    ((tmpvar_11.x + tmpvar_11.y) + tmpvar_11.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_4.z = tmpvar_38;
  highp vec4 hPos_39;
  hPos_39 = (glstate_matrix_mvp * tmpvar_3);
  mediump vec3 screenPos_40;
  highp vec4 o_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (hPos_39 * 0.5);
  highp vec2 tmpvar_43;
  tmpvar_43.x = tmpvar_42.x;
  tmpvar_43.y = (tmpvar_42.y * _ProjectionParams.x);
  o_41.xy = (tmpvar_43 + tmpvar_42.w);
  o_41.zw = hPos_39.zw;
  highp vec3 tmpvar_44;
  tmpvar_44 = o_41.xyw;
  screenPos_40 = tmpvar_44;
  screenPos_40.xy = (screenPos_40.xy * (_ScreenParams.xy * 0.25));
  tmpvar_2.w = _Color.w;
  highp vec3 lightColor_45;
  highp vec3 viewN_46;
  highp vec3 viewpos_47;
  viewpos_47 = (glstate_matrix_modelview0 * tmpvar_3).xyz;
  highp mat3 tmpvar_48;
  tmpvar_48[0] = glstate_matrix_invtrans_modelview0[0].xyz;
  tmpvar_48[1] = glstate_matrix_invtrans_modelview0[1].xyz;
  tmpvar_48[2] = glstate_matrix_invtrans_modelview0[2].xyz;
  viewN_46 = normalize((tmpvar_48 * tmpvar_15));
  lowp vec3 tmpvar_49;
  tmpvar_49 = (glstate_lightmodel_ambient * 2.0).xyz;
  lightColor_45 = tmpvar_49;
  highp vec3 toLight_50;
  highp vec3 tmpvar_51;
  tmpvar_51 = (unity_LightPosition[0].xyz - (viewpos_47 * unity_LightPosition[0].w));
  highp float tmpvar_52;
  tmpvar_52 = dot (tmpvar_51, tmpvar_51);
  toLight_50 = (tmpvar_51 * inversesqrt(tmpvar_52));
  lightColor_45 = (lightColor_45 + (unity_LightColor[0].xyz * (
    max (0.0, dot (viewN_46, toLight_50))
   * 
    ((1.0/((1.0 + (tmpvar_52 * unity_LightAtten[0].z)))) * clamp (((
      max (0.0, dot (toLight_50, unity_SpotDirection[0].xyz))
     - unity_LightAtten[0].x) * unity_LightAtten[0].y), 0.0, 1.0))
  )));
  highp vec3 toLight_53;
  highp vec3 tmpvar_54;
  tmpvar_54 = (unity_LightPosition[1].xyz - (viewpos_47 * unity_LightPosition[1].w));
  highp float tmpvar_55;
  tmpvar_55 = dot (tmpvar_54, tmpvar_54);
  toLight_53 = (tmpvar_54 * inversesqrt(tmpvar_55));
  lightColor_45 = (lightColor_45 + (unity_LightColor[1].xyz * (
    max (0.0, dot (viewN_46, toLight_53))
   * 
    ((1.0/((1.0 + (tmpvar_55 * unity_LightAtten[1].z)))) * clamp (((
      max (0.0, dot (toLight_53, unity_SpotDirection[1].xyz))
     - unity_LightAtten[1].x) * unity_LightAtten[1].y), 0.0, 1.0))
  )));
  highp vec3 toLight_56;
  highp vec3 tmpvar_57;
  tmpvar_57 = (unity_LightPosition[2].xyz - (viewpos_47 * unity_LightPosition[2].w));
  highp float tmpvar_58;
  tmpvar_58 = dot (tmpvar_57, tmpvar_57);
  toLight_56 = (tmpvar_57 * inversesqrt(tmpvar_58));
  lightColor_45 = (lightColor_45 + (unity_LightColor[2].xyz * (
    max (0.0, dot (viewN_46, toLight_56))
   * 
    ((1.0/((1.0 + (tmpvar_58 * unity_LightAtten[2].z)))) * clamp (((
      max (0.0, dot (toLight_56, unity_SpotDirection[2].xyz))
     - unity_LightAtten[2].x) * unity_LightAtten[2].y), 0.0, 1.0))
  )));
  highp vec3 toLight_59;
  highp vec3 tmpvar_60;
  tmpvar_60 = (unity_LightPosition[3].xyz - (viewpos_47 * unity_LightPosition[3].w));
  highp float tmpvar_61;
  tmpvar_61 = dot (tmpvar_60, tmpvar_60);
  toLight_59 = (tmpvar_60 * inversesqrt(tmpvar_61));
  lightColor_45 = (lightColor_45 + (unity_LightColor[3].xyz * (
    max (0.0, dot (viewN_46, toLight_59))
   * 
    ((1.0/((1.0 + (tmpvar_61 * unity_LightAtten[3].z)))) * clamp (((
      max (0.0, dot (toLight_59, unity_SpotDirection[3].xyz))
     - unity_LightAtten[3].x) * unity_LightAtten[3].y), 0.0, 1.0))
  )));
  tmpvar_2.xyz = (_Color.xyz * lightColor_45);
  gl_Position = (glstate_matrix_mvp * tmpvar_3);
  xlv_Input_color = tmpvar_2;
  xlv_Input_interpolator1 = tmpvar_4;
  xlv_Input_ditherScreenPos = screenPos_40;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 unity_LODFade;
uniform lowp float _Cutoff;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying lowp vec4 xlv_Input_color;
varying mediump vec3 xlv_Input_interpolator1;
varying mediump vec3 xlv_Input_ditherScreenPos;
void main ()
{
  lowp vec3 tmpvar_1;
  lowp float tmpvar_2;
  mediump float maxBase_3;
  mediump vec4 diffuseColor_4;
  mediump vec2 projUV_5;
  mediump vec2 tmpvar_6;
  tmpvar_6 = (xlv_Input_ditherScreenPos.xy / xlv_Input_ditherScreenPos.z);
  projUV_5.x = tmpvar_6.x;
  projUV_5.y = ((fract(tmpvar_6.y) * 0.0625) + unity_LODFade.y);
  lowp float x_7;
  x_7 = (texture2D (_DitherMaskLOD2D, projUV_5).w - 0.5);
  if ((x_7 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_Input_interpolator1.xy);
  diffuseColor_4 = tmpvar_8;
  tmpvar_2 = (diffuseColor_4.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_2 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_4.xyz, _HueVariation.xyz, xlv_Input_interpolator1.zzz);
  maxBase_3 = (max (diffuseColor_4.x, max (diffuseColor_4.y, diffuseColor_4.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_3 = ((maxBase_3 * 0.5) + 0.5);
  diffuseColor_4.xyz = clamp ((tmpvar_10 * maxBase_3), 0.0, 1.0);
  tmpvar_1 = (diffuseColor_4.xyz * xlv_Input_color.xyz);
  lowp vec4 tmpvar_11;
  tmpvar_11.xyz = tmpvar_1;
  tmpvar_11.w = tmpvar_2;
  gl_FragData[0] = tmpvar_11;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec4 vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp float t0;
highp uint tu0;
highp vec4 t1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
mediump float t16_4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t8;
highp float t9;
highp float t10;
bool tb10;
highp vec2 t17;
bool tb17;
highp float t18;
bool tb18;
highp vec2 t19;
highp vec2 t21;
highp float t25;
highp int ti25;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 71307
    //MUL
    t0 = in_COLOR0.w * 255.000000;
    //Instruction 71308
    //FTOU
    tu0 = uint(t0);
    //Instruction 71309
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 71310
    //ADD
    t1.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 71311
    //DP3
    t9 = dot(t1.xyz, t1.xyz);
    //Instruction 71312
    //RSQ
    t9 = inversesqrt(t9);
    //Instruction 71313
    //MUL
    t1.xy = vec2(t9) * t1.xz;
    //Instruction 71314
    //MOV
    t1.zw = (-t1.yy);
    //Instruction 71315
    //DP2
    t17.x = dot(t1.xz, t1.xw);
    //Instruction 71316
    //RSQ
    t17.x = inversesqrt(t17.x);
    //Instruction 71317
    //MUL
    t1.xy = t1.yx * vec2(-1.0, 1.0);
    //Instruction 71318
    //MUL
    t1.xy = t17.xx * t1.xy;
    //Instruction 71319
    //MIN
    t17.x = min(abs(t1.y), abs(t1.x));
    //Instruction 71320
    //MAX
    t25 = max(abs(t1.y), abs(t1.x));
    //Instruction 71321
    //DIV
    t25 = float(1.0) / t25;
    //Instruction 71322
    //MUL
    t17.x = t25 * t17.x;
    //Instruction 71323
    //MUL
    t25 = t17.x * t17.x;
    //Instruction 71324
    //MAD
    t2.x = t25 * 0.020835 + -0.085133;
    //Instruction 71325
    //MAD
    t2.x = t25 * t2.x + 0.180141;
    //Instruction 71326
    //MAD
    t2.x = t25 * t2.x + -0.330299;
    //Instruction 71327
    //MAD
    t25 = t25 * t2.x + 0.999866;
    //Instruction 71328
    //MUL
    t2.x = t25 * t17.x;
    //Instruction 71329
    //LT
    tb10 = abs(t1.y)<abs(t1.x);
    //Instruction 71330
    //MAD
    t2.x = t2.x * -2.000000 + 1.570796;
    //Instruction 71331
    //AND
    t2.x = tb10 ? t2.x : float(0.0);
    //Instruction 71332
    //MAD
    t17.x = t17.x * t25 + t2.x;
    //Instruction 71333
    //LT
    tb25 = t1.y<(-t1.y);
    //Instruction 71334
    //AND
    t25 = tb25 ? -3.141593 : float(0.0);
    //Instruction 71335
    //ADD
    t17.x = t25 + t17.x;
    //Instruction 71336
    //MIN
    t25 = min(t1.y, (-t1.x));
    //Instruction 71337
    //MAX
    t2.x = max(t1.y, (-t1.x));
    //Instruction 71338
    //LT
    tb25 = t25<(-t25);
    //Instruction 71339
    //GE
    tb2 = t2.x>=(-t2.x);
    //Instruction 71340
    //AND
    ti25 = int(uint(tb25) & uint(tb2));
    //Instruction 71341
    //MOVC
    t17.x = (ti25 != 0) ? (-t17.x) : t17.x;
    //Instruction 71342
    //LT
    tb25 = t17.x<0.0;
    //Instruction 71343
    //AND
    t25 = tb25 ? 6.283185 : float(0.0);
    //Instruction 71344
    //ADD
    t17.x = t25 + t17.x;
    //Instruction 71345
    //LT
    tb25 = 0.0<_InstanceData.x;
    //Instruction 71346
    //MOVC
    t2 = (bool(tb25)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 71347
    //ADD
    t25 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71348
    //MUL
    t25 = t25 * _TreeSize[int(tu0) + 0].x;
    //Instruction 71349
    //MUL
    t25 = t2.x * t25;
    //Instruction 71350
    //MUL
    t3.xz = t1.xy * vec2(t25);
    //Instruction 71351
    //MAD
    t25 = in_TEXCOORD0.y * _TreeSize[int(tu0) + 0].y + _TreeSize[int(tu0) + 0].z;
    //Instruction 71352
    //MUL
    t3.y = t2.y * t25;
    //Instruction 71353
    //MUL
    t16_4 = _WindEnabled * _WindQuality;
    //Instruction 71354
    //LT
    tb25 = 0.0<t16_4;
    //Instruction 71355
    //DP3
    t2.x = dot(t3.xyz, t3.xyz);
    //Instruction 71356
    //SQRT
    t2.x = sqrt(t2.x);
    //Instruction 71357
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 71358
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 71359
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 71360
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 71361
    //NE
    tb27 = t10!=0.0;
    //Instruction 71362
    //LOG
    t5.x = log2(t10);
    //Instruction 71363
    //MUL
    t5.x = t5.x * _ST_WindGlobal.w;
    //Instruction 71364
    //EXP
    t5.x = exp2(t5.x);
    //Instruction 71365
    //MOVC
    t10 = (tb27) ? t5.x : t10;
    //Instruction 71366
    //ADD
    t5.x = t8.x + t2.w;
    //Instruction 71367
    //MAD
    t5.y = t2.w * 0.800000 + t8.y;
    //Instruction 71368
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 71369
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 71370
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 71371
    //MUL
    t21.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 71372
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 71373
    //MAD
    t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 71374
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 71375
    //MAD
    t26 = t5.y * t5.y + t5.x;
    //Instruction 71376
    //DIV
    t27 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 71377
    //MAD
    t26 = _ST_WindGlobal.y * t26 + t27;
    //Instruction 71378
    //MUL
    t10 = t10 * t26;
    //Instruction 71379
    //MAD
    t5.xz = _ST_WindVector.xz * vec2(t10) + t3.xz;
    //Instruction 71380
    //MOV
    t5.y = t3.y;
    //Instruction 71381
    //DP3
    t10 = dot(t5.xyz, t5.xyz);
    //Instruction 71382
    //RSQ
    t10 = inversesqrt(t10);
    //Instruction 71383
    //MUL
    t5.xyz = vec3(t10) * t5.xyz;
    //Instruction 71384
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 71385
    //MOVC
    t2.xyw = (bool(tb25)) ? t2.xyw : t3.xyz;
    //Instruction 71386
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 71387
    //ADD
    t17.x = t17.x + t2.z;
    //Instruction 71388
    //MAD
    t17.x = t17.x * _TreeInfo[int(tu0) + 0].y + 0.500000;
    //Instruction 71389
    //ROUND_NI
    t17.x = floor(t17.x);
    //Instruction 71390
    //DIV
    t17.x = t17.x / _TreeInfo[int(tu0) + 0].x;
    //Instruction 71391
    //GE
    tb25 = t17.x>=(-t17.x);
    //Instruction 71392
    //FRC
    t17.x = fract(abs(t17.x));
    //Instruction 71393
    //MOVC
    t17.x = (tb25) ? t17.x : (-t17.x);
    //Instruction 71394
    //MAD
    t0 = t17.x * _TreeInfo[int(tu0) + 0].x + _TreeInfo[int(tu0) + 0].z;
    //Instruction 71395
    //FTOU
    tu0 = uint(t0);
    //Instruction 71396
    //LT
    tb17 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71397
    //MAD
    t3.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71398
    //MAD
    t19.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71399
    //MOVC
    vs_TEXCOORD2.xy = (bool(tb17)) ? t3.xy : t19.xy;
    //Instruction 71400
    //ADD
    t0 = t8.y + t8.x;
    //Instruction 71401
    //ADD
    t0 = t8.z + t0;
    //Instruction 71402
    //FRC
    t0 = fract(t0);
    //Instruction 71403
    //MUL
    t0 = t0 * _HueVariation.w;
    t0 = clamp(t0, 0.0, 1.0);
    //Instruction 71404
    //MUL
    t8.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 71405
    //MAD
    t8.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t8.xyz;
    //Instruction 71406
    //MAD
    t8.xyz = glstate_matrix_mvp[2].xyw * t2.www + t8.xyz;
    //Instruction 71407
    //ADD
    t8.xyz = t8.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 71408
    //MUL
    t3.xz = t8.xz * vec2(0.500000, 0.500000);
    //Instruction 71409
    //MUL
    t17.x = t8.y * _ProjectionParams.x;
    //Instruction 71410
    //MUL
    t3.w = t17.x * 0.500000;
    //Instruction 71411
    //ADD
    t17.xy = t3.zz + t3.xw;
    //Instruction 71412
    //MUL
    t17.xy = t17.xy * _ScreenParams.xy;
    //Instruction 71413
    //MUL
    t8.xy = t17.xy * vec2(0.250000, 0.250000);
    //Instruction 71414
    //MUL
    t3.xyz = t2.yyy * glstate_matrix_modelview0[1].xyz;
    //Instruction 71415
    //MAD
    t3.xyz = glstate_matrix_modelview0[0].xyz * t2.xxx + t3.xyz;
    //Instruction 71416
    //MAD
    t3.xyz = glstate_matrix_modelview0[2].xyz * t2.www + t3.xyz;
    //Instruction 71417
    //ADD
    t3.xyz = t3.xyz + glstate_matrix_modelview0[3].xyz;
    //Instruction 71418
    //MUL
    t1.xzw = (-t1.xxx) * glstate_matrix_invtrans_modelview0[2].xyz;
    //Instruction 71419
    //MAD
    t1.xyz = glstate_matrix_invtrans_modelview0[0].xyz * t1.yyy + t1.xzw;
    //Instruction 71420
    //DP3
    t25 = dot(t1.xyz, t1.xyz);
    //Instruction 71421
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 71422
    //MUL
    t1.xyz = vec3(t25) * t1.xyz;
    //Instruction 71423
    //MUL
    t10_6.xyz = glstate_lightmodel_ambient.xyz * vec3(2.000000, 2.000000, 2.000000);
    //Instruction 71424
    //MOV
    t5.xyz = t10_6.xyz;
    //Instruction 71425
    //MOV
    ti25 = 0x0;
    //Instruction 71426
    //LOOP
    while(true){
        //Instruction 71427
        //IGE
        tb18 = ti25>=0x4;
        //Instruction 71428
        //BREAKC
        if(tb18){break;}
        //Instruction 71429
        //MAD
        t7.xyz = (-t3.xyz) * unity_LightPosition[ti25 + 0].www + unity_LightPosition[ti25 + 0].xyz;
        //Instruction 71430
        //DP3
        t18 = dot(t7.xyz, t7.xyz);
        //Instruction 71431
        //RSQ
        t27 = inversesqrt(t18);
        //Instruction 71432
        //MUL
        t7.xyz = vec3(t27) * t7.xyz;
        //Instruction 71433
        //MAD
        t18 = t18 * unity_LightAtten[ti25 + 0].z + 1.0;
        //Instruction 71434
        //DIV
        t18 = float(1.0) / t18;
        //Instruction 71435
        //DP3
        t27 = dot(t7.xyz, unity_SpotDirection[ti25 + 0].xyz);
        //Instruction 71436
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 71437
        //ADD
        t27 = t27 + (-unity_LightAtten[ti25 + 0].x);
        //Instruction 71438
        //MUL
        t27 = t27 * unity_LightAtten[ti25 + 0].y;
        t27 = clamp(t27, 0.0, 1.0);
        //Instruction 71439
        //MUL
        t18 = t18 * t27;
        //Instruction 71440
        //DP3
        t27 = dot(t1.xyz, t7.xyz);
        //Instruction 71441
        //MAX
        t27 = max(t27, 0.0);
        //Instruction 71442
        //MUL
        t18 = t18 * t27;
        //Instruction 71443
        //MAD
        t5.xyz = unity_LightColor[ti25 + 0].xyz * vec3(t18) + t5.xyz;
        //Instruction 71444
        //IADD
        ti25 = ti25 + 0x1;
        //Instruction 71445
    //ENDLOOP
    }
    //Instruction 71446
    //MUL
    t1.xyz = t5.xyz * _Color.xyz;
    //Instruction 71447
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 71448
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 71449
    //MAD
    t2 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 71450
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71451
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 71452
    //MOV
    vs_TEXCOORD1.w = _Color.w;
    //Instruction 71453
    //MOV
    vs_TEXCOORD2.z = t0;
    //Instruction 71454
    //MOV
    vs_TEXCOORD3.xyz = t8.xyz;
    //Instruction 71455
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in lowp vec4 vs_TEXCOORD1;
in mediump vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
void main()
{
    //Instruction 71282
    //DIV
    t16_0.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.zz;
    //Instruction 71283
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 71284
    //MOV
    t1.x = t16_0.x;
    //Instruction 71285
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 71286
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 71287
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 71288
    //LT
    tb1 = t16_1<0.0;
    //Instruction 71289
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71290
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD2.xy);
    //Instruction 71291
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71292
    //LT
    tb1 = t10_2<0.0;
    //Instruction 71293
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 71294
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 71295
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 71296
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 71297
    //MAD
    t16_8.xyz = vs_TEXCOORD2.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 71298
    //MUL
    t16_0.w = t10_0.w * _Color.w;
    //Instruction 71299
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 71300
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 71301
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 71302
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 71303
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 71304
    //MUL
    t16_0.xyz = t16_3.xyz * vs_TEXCOORD1.xyz;
    //Instruction 71305
    //MOV
    SV_Target0 = t16_0;
    //Instruction 71306
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
"!!GLES"
}
SubProgram "gles3 " {
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3"
}
}
 }
}
SubShader { 
 LOD 400
 Tags { "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardBase" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "SHADOWSUPPORT"="true" "RenderType"="TransparentCutout" }
  Cull Off
  GpuProgramID 396431
Program "vp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = worldNormal_2;
  mediump vec4 normal_23;
  normal_23 = tmpvar_22;
  mediump vec3 x2_24;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, normal_23);
  x1_25.y = dot (unity_SHAg, normal_23);
  x1_25.z = dot (unity_SHAb, normal_23);
  mediump vec4 tmpvar_26;
  tmpvar_26 = (normal_23.xyzz * normal_23.yzzx);
  x2_24.x = dot (unity_SHBr, tmpvar_26);
  x2_24.y = dot (unity_SHBg, tmpvar_26);
  x2_24.z = dot (unity_SHBb, tmpvar_26);
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = ((x2_24 + (unity_SHC.xyz * 
    ((normal_23.x * normal_23.x) - (normal_23.y * normal_23.y))
  )) + x1_25);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp float t6;
bool tb6;
highp vec3 t7;
highp vec2 t12;
highp float t18;
void main()
{
    //Instruction 71469
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71470
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71471
    //ADD
    t18 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71472
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71473
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71474
    //MUL
    t18 = t18 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71475
    //MUL
    t0.x = t0.x * t18;
    //Instruction 71476
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71477
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71478
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71479
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71480
    //ADD
    t12.x = t0.z + _CameraXZAngle;
    //Instruction 71481
    //MAD
    t12.x = t12.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71482
    //ROUND_NI
    t12.x = floor(t12.x);
    //Instruction 71483
    //DIV
    t12.x = t12.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71484
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71485
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71486
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71487
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71488
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71489
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71490
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71491
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71492
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71493
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71494
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 71495
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71496
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71497
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71498
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 71499
    //DP3
    t2.x = dot(t7.xyz, t7.xyz);
    //Instruction 71500
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71501
    //MUL
    t2.xyz = t7.xyz * t2.xxx;
    //Instruction 71502
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 71503
    //MUL
    t7.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71504
    //MAD
    t7.xyz = _Object2World[0].xyz * t0.xxx + t7.xyz;
    //Instruction 71505
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t7.xyz;
    //Instruction 71506
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71507
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71508
    //GE
    tb0 = t12.x>=(-t12.x);
    //Instruction 71509
    //FRC
    t6 = fract(abs(t12.x));
    //Instruction 71510
    //MOVC
    t0.x = (tb0) ? t6 : (-t6);
    //Instruction 71511
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71512
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71513
    //LT
    tb6 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71514
    //MAD
    t12.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71515
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71516
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t12.xy : t1.xy;
    //Instruction 71517
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71518
    //MUL
    t16_4.x = t2.y * t2.y;
    //Instruction 71519
    //MAD
    t16_4.x = t2.x * t2.x + (-t16_4.x);
    //Instruction 71520
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 71521
    //DP4
    t16_5.x = dot(unity_SHBr, t16_0);
    //Instruction 71522
    //DP4
    t16_5.y = dot(unity_SHBg, t16_0);
    //Instruction 71523
    //DP4
    t16_5.z = dot(unity_SHBb, t16_0);
    //Instruction 71524
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 71525
    //MOV
    t2.w = 1.0;
    //Instruction 71526
    //DP4
    t16_5.x = dot(unity_SHAr, t2);
    //Instruction 71527
    //DP4
    t16_5.y = dot(unity_SHAg, t2);
    //Instruction 71528
    //DP4
    t16_5.z = dot(unity_SHAb, t2);
    //Instruction 71529
    //ADD
    vs_TEXCOORD4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 71530
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71456
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71457
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71458
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71459
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71460
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71461
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 71462
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 71463
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71464
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71465
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 71466
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71467
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71468
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_22;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = worldNormal_2;
  mediump vec4 normal_24;
  normal_24 = tmpvar_23;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _BillboardNormal.x)
   + 
    (v_21.xyz * _BillboardNormal.y)
  ) + (v_22.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_23;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = worldNormal_2;
  mediump vec4 normal_25;
  normal_25 = tmpvar_24;
  mediump vec3 x2_26;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, normal_25);
  x1_27.y = dot (unity_SHAg, normal_25);
  x1_27.z = dot (unity_SHAb, normal_25);
  mediump vec4 tmpvar_28;
  tmpvar_28 = (normal_25.xyzz * normal_25.yzzx);
  x2_26.x = dot (unity_SHBr, tmpvar_28);
  x2_26.y = dot (unity_SHBg, tmpvar_28);
  x2_26.z = dot (unity_SHBb, tmpvar_28);
  highp vec3 lightColor0_29;
  lightColor0_29 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_30;
  lightColor1_30 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_31;
  lightColor2_31 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_32;
  lightColor3_32 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_33;
  lightAttenSq_33 = unity_4LightAtten0;
  highp vec3 normal_34;
  normal_34 = worldNormal_2;
  highp vec3 col_35;
  highp vec4 ndotl_36;
  highp vec4 lengthSq_37;
  highp vec4 tmpvar_38;
  tmpvar_38 = (unity_4LightPosX0 - tmpvar_19.x);
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosY0 - tmpvar_19.y);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosZ0 - tmpvar_19.z);
  lengthSq_37 = (tmpvar_38 * tmpvar_38);
  lengthSq_37 = (lengthSq_37 + (tmpvar_39 * tmpvar_39));
  lengthSq_37 = (lengthSq_37 + (tmpvar_40 * tmpvar_40));
  ndotl_36 = (tmpvar_38 * normal_34.x);
  ndotl_36 = (ndotl_36 + (tmpvar_39 * normal_34.y));
  ndotl_36 = (ndotl_36 + (tmpvar_40 * normal_34.z));
  highp vec4 tmpvar_41;
  tmpvar_41 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_36 * inversesqrt(lengthSq_37)));
  ndotl_36 = tmpvar_41;
  highp vec4 tmpvar_42;
  tmpvar_42 = (tmpvar_41 * (1.0/((1.0 + 
    (lengthSq_37 * lightAttenSq_33)
  ))));
  col_35 = (lightColor0_29 * tmpvar_42.x);
  col_35 = (col_35 + (lightColor1_30 * tmpvar_42.y));
  col_35 = (col_35 + (lightColor2_31 * tmpvar_42.z));
  col_35 = (col_35 + (lightColor3_32 * tmpvar_42.w));
  tmpvar_5 = (((x2_26 + 
    (unity_SHC.xyz * ((normal_25.x * normal_25.x) - (normal_25.y * normal_25.y)))
  ) + x1_27) + col_35);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_19;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = (c_14.xyz + (tmpvar_8 * xlv_TEXCOORD4));
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
mediump vec3 t16_4;
highp vec4 t5;
mediump vec3 t16_5;
highp vec3 t7;
bool tb7;
highp float t12;
highp uint tu12;
highp float t18;
void main()
{
    //Instruction 72624
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 72625
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 72626
    //ADD
    t18 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72627
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 72628
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72629
    //MUL
    t18 = t18 * _TreeSize[int(tu1) + 0].x;
    //Instruction 72630
    //MUL
    t0.x = t0.x * t18;
    //Instruction 72631
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 72632
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 72633
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 72634
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 72635
    //ADD
    t12 = t0.z + _CameraXZAngle;
    //Instruction 72636
    //MAD
    t12 = t12 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 72637
    //ROUND_NI
    t12 = floor(t12);
    //Instruction 72638
    //DIV
    t12 = t12 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 72639
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 72640
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 72641
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 72642
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 72643
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 72644
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 72645
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 72646
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 72647
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 72648
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 72649
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 72650
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 72651
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 72652
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 72653
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 72654
    //DP3
    t2.x = dot(t7.xyz, t7.xyz);
    //Instruction 72655
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 72656
    //MUL
    t2.xyz = t7.xyz * t2.xxx;
    //Instruction 72657
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 72658
    //MUL
    t7.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 72659
    //MAD
    t7.xyz = _Object2World[0].xyz * t0.xxx + t7.xyz;
    //Instruction 72660
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t7.xyz;
    //Instruction 72661
    //ADD
    t0.xyw = t0.xyw + _Object2World[3].xyz;
    //Instruction 72662
    //MOV
    vs_TEXCOORD1.xyz = t0.xyw;
    //Instruction 72663
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 72664
    //GE
    tb7 = t12>=(-t12);
    //Instruction 72665
    //FRC
    t12 = fract(abs(t12));
    //Instruction 72666
    //MOVC
    t12 = (tb7) ? t12 : (-t12);
    //Instruction 72667
    //MAD
    t12 = t12 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 72668
    //FTOU
    tu12 = uint(t12);
    //Instruction 72669
    //LT
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    //Instruction 72670
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    //Instruction 72671
    //MAD
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    //Instruction 72672
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t3.xy;
    //Instruction 72673
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 72674
    //MUL
    t16_4.x = t2.y * t2.y;
    //Instruction 72675
    //MAD
    t16_4.x = t2.x * t2.x + (-t16_4.x);
    //Instruction 72676
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 72677
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 72678
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 72679
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 72680
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 72681
    //MOV
    t2.w = 1.0;
    //Instruction 72682
    //DP4
    t16_5.x = dot(unity_SHAr, t2);
    //Instruction 72683
    //DP4
    t16_5.y = dot(unity_SHAg, t2);
    //Instruction 72684
    //DP4
    t16_5.z = dot(unity_SHAb, t2);
    //Instruction 72685
    //ADD
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 72686
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 72687
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 72688
    //MUL
    t1 = t1 * t1;
    //Instruction 72689
    //ADD
    t5 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 72690
    //ADD
    t0 = (-t0.wwww) + unity_4LightPosZ0;
    //Instruction 72691
    //MAD
    t3 = t5 * t2.xxxx + t3;
    //Instruction 72692
    //MAD
    t1 = t5 * t5 + t1;
    //Instruction 72693
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 72694
    //MAD
    t0 = t0 * t2.zzzz + t3;
    //Instruction 72695
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 72696
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 72697
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 72698
    //MUL
    t0 = t0 * t2;
    //Instruction 72699
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 72700
    //MUL
    t0 = t1 * t0;
    //Instruction 72701
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 72702
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 72703
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 72704
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 72705
    //ADD
    t0.xyz = t0.xyz + t16_4.xyz;
    //Instruction 72706
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 72707
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 72611
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 72612
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72613
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 72614
    //LT
    tb0 = t10_1<0.0;
    //Instruction 72615
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 72616
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 72617
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 72618
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 72619
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 72620
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 72621
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 72622
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 72623
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_15.xz;
  billboardPos_9.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_14.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_16;
  tmpvar_16 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_17;
  tmpvar_17 = (fract(abs(tmpvar_16)) * tmpvar_12.x);
  highp float tmpvar_18;
  if ((tmpvar_16 >= 0.0)) {
    tmpvar_18 = tmpvar_17;
  } else {
    tmpvar_18 = -(tmpvar_17);
  };
  highp vec4 tmpvar_19;
  tmpvar_19 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_18))];
  if ((tmpvar_19.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_19.xy - (tmpvar_19.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_19.xy + (tmpvar_19.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _BillboardNormal.x)
   + 
    (v_22.xyz * _BillboardNormal.y)
  ) + (v_23.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_24;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = worldNormal_2;
  mediump vec4 normal_26;
  normal_26 = tmpvar_25;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, normal_26);
  x1_28.y = dot (unity_SHAg, normal_26);
  x1_28.z = dot (unity_SHAb, normal_26);
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_26.xyzz * normal_26.yzzx);
  x2_27.x = dot (unity_SHBr, tmpvar_29);
  x2_27.y = dot (unity_SHBg, tmpvar_29);
  x2_27.z = dot (unity_SHBb, tmpvar_29);
  highp vec3 lightColor0_30;
  lightColor0_30 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_31;
  lightColor1_31 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_32;
  lightColor2_32 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_33;
  lightColor3_33 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_34;
  lightAttenSq_34 = unity_4LightAtten0;
  highp vec3 normal_35;
  normal_35 = worldNormal_2;
  highp vec3 col_36;
  highp vec4 ndotl_37;
  highp vec4 lengthSq_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_20.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_20.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_20.z);
  lengthSq_38 = (tmpvar_39 * tmpvar_39);
  lengthSq_38 = (lengthSq_38 + (tmpvar_40 * tmpvar_40));
  lengthSq_38 = (lengthSq_38 + (tmpvar_41 * tmpvar_41));
  ndotl_37 = (tmpvar_39 * normal_35.x);
  ndotl_37 = (ndotl_37 + (tmpvar_40 * normal_35.y));
  ndotl_37 = (ndotl_37 + (tmpvar_41 * normal_35.z));
  highp vec4 tmpvar_42;
  tmpvar_42 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_37 * inversesqrt(lengthSq_38)));
  ndotl_37 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_42 * (1.0/((1.0 + 
    (lengthSq_38 * lightAttenSq_34)
  ))));
  col_36 = (lightColor0_30 * tmpvar_43.x);
  col_36 = (col_36 + (lightColor1_31 * tmpvar_43.y));
  col_36 = (col_36 + (lightColor2_32 * tmpvar_43.z));
  col_36 = (col_36 + (lightColor3_33 * tmpvar_43.w));
  tmpvar_5 = (((x2_27 + 
    (unity_SHC.xyz * ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y)))
  ) + x1_28) + col_36);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_20;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD5).x > 
    (xlv_TEXCOORD5.z / xlv_TEXCOORD5.w)
  )), _LightShadowData.x);
  tmpvar_14 = tmpvar_15;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_14;
  mediump vec3 tmpvar_16;
  tmpvar_16 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_16;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_9 * tmpvar_16) * diff_19);
  c_18.w = tmpvar_10;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_22;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = worldNormal_2;
  mediump vec4 normal_24;
  normal_24 = tmpvar_23;
  mediump vec3 x2_25;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, normal_24);
  x1_26.y = dot (unity_SHAg, normal_24);
  x1_26.z = dot (unity_SHAb, normal_24);
  mediump vec4 tmpvar_27;
  tmpvar_27 = (normal_24.xyzz * normal_24.yzzx);
  x2_25.x = dot (unity_SHBr, tmpvar_27);
  x2_25.y = dot (unity_SHBg, tmpvar_27);
  x2_25.z = dot (unity_SHBb, tmpvar_27);
  tmpvar_5 = (unity_World2Shadow[0] * (_Object2World * tmpvar_6));
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = ((x2_25 + (unity_SHC.xyz * 
    ((normal_24.x * normal_24.x) - (normal_24.y * normal_24.y))
  )) + x1_26);
  xlv_TEXCOORD5 = tmpvar_5;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec3 t3;
mediump vec3 t16_4;
mediump vec3 t16_5;
highp vec3 t7;
bool tb7;
highp float t12;
highp uint tu12;
highp float t18;
void main()
{
    //Instruction 71548
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71549
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71550
    //ADD
    t18 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71551
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71552
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71553
    //MUL
    t18 = t18 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71554
    //MUL
    t0.x = t0.x * t18;
    //Instruction 71555
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71556
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71557
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71558
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71559
    //ADD
    t12 = t0.z + _CameraXZAngle;
    //Instruction 71560
    //MAD
    t12 = t12 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71561
    //ROUND_NI
    t12 = floor(t12);
    //Instruction 71562
    //DIV
    t12 = t12 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71563
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71564
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71565
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71566
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71567
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71568
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71569
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71570
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71571
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71572
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71573
    //ADD
    t7.xyz = t2.xyz + t3.xyz;
    //Instruction 71574
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71575
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71576
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71577
    //ADD
    t7.xyz = t7.xyz + t2.xyz;
    //Instruction 71578
    //DP3
    t2.x = dot(t7.xyz, t7.xyz);
    //Instruction 71579
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71580
    //MUL
    t2.xyz = t7.xyz * t2.xxx;
    //Instruction 71581
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 71582
    //MUL
    t7.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71583
    //MAD
    t7.xyz = _Object2World[0].xyz * t0.xxx + t7.xyz;
    //Instruction 71584
    //MAD
    t7.xyz = _Object2World[2].xyz * t0.www + t7.xyz;
    //Instruction 71585
    //ADD
    vs_TEXCOORD1.xyz = t7.xyz + _Object2World[3].xyz;
    //Instruction 71586
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71587
    //GE
    tb7 = t12>=(-t12);
    //Instruction 71588
    //FRC
    t12 = fract(abs(t12));
    //Instruction 71589
    //MOVC
    t12 = (tb7) ? t12 : (-t12);
    //Instruction 71590
    //MAD
    t12 = t12 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71591
    //FTOU
    tu12 = uint(t12);
    //Instruction 71592
    //LT
    tb1 = _ImageTexCoords[int(tu12) + 0].w<0.0;
    //Instruction 71593
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu12) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu12) + 0].xy;
    //Instruction 71594
    //MAD
    t3.xy = _ImageTexCoords[int(tu12) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu12) + 0].xy;
    //Instruction 71595
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t3.xy;
    //Instruction 71596
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71597
    //MUL
    t16_4.x = t2.y * t2.y;
    //Instruction 71598
    //MAD
    t16_4.x = t2.x * t2.x + (-t16_4.x);
    //Instruction 71599
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 71600
    //DP4
    t16_5.x = dot(unity_SHBr, t16_1);
    //Instruction 71601
    //DP4
    t16_5.y = dot(unity_SHBg, t16_1);
    //Instruction 71602
    //DP4
    t16_5.z = dot(unity_SHBb, t16_1);
    //Instruction 71603
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 71604
    //MOV
    t2.w = 1.0;
    //Instruction 71605
    //DP4
    t16_5.x = dot(unity_SHAr, t2);
    //Instruction 71606
    //DP4
    t16_5.y = dot(unity_SHAg, t2);
    //Instruction 71607
    //DP4
    t16_5.z = dot(unity_SHAb, t2);
    //Instruction 71608
    //ADD
    vs_TEXCOORD4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 71609
    //MUL
    t1 = t0.yyyy * _Object2World[1];
    //Instruction 71610
    //MAD
    t1 = _Object2World[0] * t0.xxxx + t1;
    //Instruction 71611
    //MAD
    t0 = _Object2World[2] * t0.wwww + t1;
    //Instruction 71612
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 71613
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 71614
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 71615
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 71616
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 71617
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 71618
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71531
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71532
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71533
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71534
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71535
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71536
    //SAMPLE_C_LZ
    vec3 txVec60 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec60, 0.0);
    //Instruction 71537
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 71538
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 71539
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 71540
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71541
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 71542
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71543
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71544
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 71545
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71546
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71547
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_15.xz;
  billboardPos_9.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_14.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_16;
  tmpvar_16 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_17;
  tmpvar_17 = (fract(abs(tmpvar_16)) * tmpvar_12.x);
  highp float tmpvar_18;
  if ((tmpvar_16 >= 0.0)) {
    tmpvar_18 = tmpvar_17;
  } else {
    tmpvar_18 = -(tmpvar_17);
  };
  highp vec4 tmpvar_19;
  tmpvar_19 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_18))];
  if ((tmpvar_19.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_19.xy - (tmpvar_19.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_19.xy + (tmpvar_19.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _BillboardNormal.x)
   + 
    (v_22.xyz * _BillboardNormal.y)
  ) + (v_23.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_24;
  tmpvar_3 = worldNormal_2;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = worldNormal_2;
  mediump vec4 normal_26;
  normal_26 = tmpvar_25;
  mediump vec3 x2_27;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, normal_26);
  x1_28.y = dot (unity_SHAg, normal_26);
  x1_28.z = dot (unity_SHAb, normal_26);
  mediump vec4 tmpvar_29;
  tmpvar_29 = (normal_26.xyzz * normal_26.yzzx);
  x2_27.x = dot (unity_SHBr, tmpvar_29);
  x2_27.y = dot (unity_SHBg, tmpvar_29);
  x2_27.z = dot (unity_SHBb, tmpvar_29);
  highp vec3 lightColor0_30;
  lightColor0_30 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_31;
  lightColor1_31 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_32;
  lightColor2_32 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_33;
  lightColor3_33 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_34;
  lightAttenSq_34 = unity_4LightAtten0;
  highp vec3 normal_35;
  normal_35 = worldNormal_2;
  highp vec3 col_36;
  highp vec4 ndotl_37;
  highp vec4 lengthSq_38;
  highp vec4 tmpvar_39;
  tmpvar_39 = (unity_4LightPosX0 - tmpvar_20.x);
  highp vec4 tmpvar_40;
  tmpvar_40 = (unity_4LightPosY0 - tmpvar_20.y);
  highp vec4 tmpvar_41;
  tmpvar_41 = (unity_4LightPosZ0 - tmpvar_20.z);
  lengthSq_38 = (tmpvar_39 * tmpvar_39);
  lengthSq_38 = (lengthSq_38 + (tmpvar_40 * tmpvar_40));
  lengthSq_38 = (lengthSq_38 + (tmpvar_41 * tmpvar_41));
  ndotl_37 = (tmpvar_39 * normal_35.x);
  ndotl_37 = (ndotl_37 + (tmpvar_40 * normal_35.y));
  ndotl_37 = (ndotl_37 + (tmpvar_41 * normal_35.z));
  highp vec4 tmpvar_42;
  tmpvar_42 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_37 * inversesqrt(lengthSq_38)));
  ndotl_37 = tmpvar_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (tmpvar_42 * (1.0/((1.0 + 
    (lengthSq_38 * lightAttenSq_34)
  ))));
  col_36 = (lightColor0_30 * tmpvar_43.x);
  col_36 = (col_36 + (lightColor1_31 * tmpvar_43.y));
  col_36 = (col_36 + (lightColor2_32 * tmpvar_43.z));
  col_36 = (col_36 + (lightColor3_33 * tmpvar_43.w));
  tmpvar_5 = (((x2_27 + 
    (unity_SHC.xyz * ((normal_26.x * normal_26.x) - (normal_26.y * normal_26.y)))
  ) + x1_28) + col_36);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = tmpvar_20;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec4 xlv_TEXCOORD5;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_14;
  shadow_14 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD5.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_14;
  mediump vec3 tmpvar_15;
  tmpvar_15 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_15;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_9 * tmpvar_15) * diff_18);
  c_17.w = tmpvar_10;
  c_16.w = c_17.w;
  c_16.xyz = (c_17.xyz + (tmpvar_9 * xlv_TEXCOORD4));
  c_4.xyz = c_16.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec4 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
mediump vec4 t16_3;
bool tb3;
mediump vec3 t16_4;
highp vec4 t5;
mediump vec3 t16_5;
highp vec4 t6;
highp vec3 t8;
highp float t14;
highp uint tu14;
highp vec2 t17;
highp float t21;
void main()
{
    //Instruction 71636
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71637
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71638
    //ADD
    t21 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71639
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71640
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71641
    //MUL
    t21 = t21 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71642
    //MUL
    t0.x = t0.x * t21;
    //Instruction 71643
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71644
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71645
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71646
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71647
    //ADD
    t14 = t0.z + _CameraXZAngle;
    //Instruction 71648
    //MAD
    t14 = t14 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71649
    //ROUND_NI
    t14 = floor(t14);
    //Instruction 71650
    //DIV
    t14 = t14 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71651
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71652
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71653
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71654
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71655
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71656
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71657
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71658
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71659
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71660
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71661
    //ADD
    t8.xyz = t2.xyz + t3.xyz;
    //Instruction 71662
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71663
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71664
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71665
    //ADD
    t8.xyz = t8.xyz + t2.xyz;
    //Instruction 71666
    //DP3
    t2.x = dot(t8.xyz, t8.xyz);
    //Instruction 71667
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71668
    //MUL
    t2.xyz = t8.xyz * t2.xxx;
    //Instruction 71669
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 71670
    //MUL
    t8.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71671
    //MAD
    t8.xyz = _Object2World[0].xyz * t0.xxx + t8.xyz;
    //Instruction 71672
    //MAD
    t8.xyz = _Object2World[2].xyz * t0.www + t8.xyz;
    //Instruction 71673
    //ADD
    t8.xyz = t8.xyz + _Object2World[3].xyz;
    //Instruction 71674
    //MOV
    vs_TEXCOORD1.xyz = t8.xyz;
    //Instruction 71675
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71676
    //GE
    tb3 = t14>=(-t14);
    //Instruction 71677
    //FRC
    t14 = fract(abs(t14));
    //Instruction 71678
    //MOVC
    t14 = (tb3) ? t14 : (-t14);
    //Instruction 71679
    //MAD
    t14 = t14 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71680
    //FTOU
    tu14 = uint(t14);
    //Instruction 71681
    //LT
    tb1 = _ImageTexCoords[int(tu14) + 0].w<0.0;
    //Instruction 71682
    //MAD
    t3.xy = (-_ImageTexCoords[int(tu14) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu14) + 0].xy;
    //Instruction 71683
    //MAD
    t17.xy = _ImageTexCoords[int(tu14) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu14) + 0].xy;
    //Instruction 71684
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t3.xy : t17.xy;
    //Instruction 71685
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71686
    //MUL
    t16_4.x = t2.y * t2.y;
    //Instruction 71687
    //MAD
    t16_4.x = t2.x * t2.x + (-t16_4.x);
    //Instruction 71688
    //MUL
    t16_3 = t2.yzzx * t2.xyzz;
    //Instruction 71689
    //DP4
    t16_5.x = dot(unity_SHBr, t16_3);
    //Instruction 71690
    //DP4
    t16_5.y = dot(unity_SHBg, t16_3);
    //Instruction 71691
    //DP4
    t16_5.z = dot(unity_SHBb, t16_3);
    //Instruction 71692
    //MAD
    t16_4.xyz = unity_SHC.xyz * t16_4.xxx + t16_5.xyz;
    //Instruction 71693
    //MOV
    t2.w = 1.0;
    //Instruction 71694
    //DP4
    t16_5.x = dot(unity_SHAr, t2);
    //Instruction 71695
    //DP4
    t16_5.y = dot(unity_SHAg, t2);
    //Instruction 71696
    //DP4
    t16_5.z = dot(unity_SHAb, t2);
    //Instruction 71697
    //ADD
    t16_4.xyz = t16_4.xyz + t16_5.xyz;
    //Instruction 71698
    //ADD
    t3 = (-t8.yyyy) + unity_4LightPosY0;
    //Instruction 71699
    //MUL
    t5 = t2.yyyy * t3;
    //Instruction 71700
    //MUL
    t3 = t3 * t3;
    //Instruction 71701
    //ADD
    t6 = (-t8.xxxx) + unity_4LightPosX0;
    //Instruction 71702
    //ADD
    t1 = (-t8.zzzz) + unity_4LightPosZ0;
    //Instruction 71703
    //MAD
    t5 = t6 * t2.xxxx + t5;
    //Instruction 71704
    //MAD
    t2 = t1 * t2.zzzz + t5;
    //Instruction 71705
    //MAD
    t3 = t6 * t6 + t3;
    //Instruction 71706
    //MAD
    t1 = t1 * t1 + t3;
    //Instruction 71707
    //RSQ
    t3 = inversesqrt(t1);
    //Instruction 71708
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 71709
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 71710
    //MUL
    t2 = t2 * t3;
    //Instruction 71711
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 71712
    //MUL
    t1 = t1 * t2;
    //Instruction 71713
    //MUL
    t2.xyz = t1.yyy * unity_LightColor[1].xyz;
    //Instruction 71714
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t1.xxx + t2.xyz;
    //Instruction 71715
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t2.xyz;
    //Instruction 71716
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    //Instruction 71717
    //ADD
    t1.xyz = t1.xyz + t16_4.xyz;
    //Instruction 71718
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 71719
    //MUL
    t1 = t0.yyyy * _Object2World[1];
    //Instruction 71720
    //MAD
    t1 = _Object2World[0] * t0.xxxx + t1;
    //Instruction 71721
    //MAD
    t0 = _Object2World[2] * t0.wwww + t1;
    //Instruction 71722
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 71723
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 71724
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 71725
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 71726
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 71727
    //MOV
    vs_TEXCOORD5 = t0;
    //Instruction 71728
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec4 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71619
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71620
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71621
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71622
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71623
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71624
    //SAMPLE_C_LZ
    vec3 txVec61 = vec3(vs_TEXCOORD5.xy,vs_TEXCOORD5.z);
    t16_14 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec61, 0.0);
    //Instruction 71625
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 71626
    //MAD
    t16_14 = t16_14 * t16_3.x + _LightShadowData.x;
    //Instruction 71627
    //MUL
    t16_3.xyz = vec3(t16_14) * _LightColor0.xyz;
    //Instruction 71628
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71629
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 71630
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71631
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71632
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 71633
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71634
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71635
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_Object2World * tmpvar_6).xyz;
  highp vec4 v_20;
  v_20.x = _World2Object[0].x;
  v_20.y = _World2Object[1].x;
  v_20.z = _World2Object[2].x;
  v_20.w = _World2Object[3].x;
  highp vec4 v_21;
  v_21.x = _World2Object[0].y;
  v_21.y = _World2Object[1].y;
  v_21.z = _World2Object[2].y;
  v_21.w = _World2Object[3].y;
  highp vec4 v_22;
  v_22.x = _World2Object[0].z;
  v_22.y = _World2Object[1].z;
  v_22.z = _World2Object[2].z;
  v_22.w = _World2Object[3].z;
  highp vec3 tmpvar_23;
  tmpvar_23 = normalize(((
    (v_20.xyz * _BillboardNormal.x)
   + 
    (v_21.xyz * _BillboardNormal.y)
  ) + (v_22.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_23;
  highp mat3 tmpvar_24;
  tmpvar_24[0] = _Object2World[0].xyz;
  tmpvar_24[1] = _Object2World[1].xyz;
  tmpvar_24[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize((tmpvar_24 * _BillboardTangent));
  worldTangent_3 = tmpvar_25;
  lowp vec3 tmpvar_26;
  tmpvar_26 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_27;
  tmpvar_27 = -(tmpvar_26);
  worldBinormal_2 = tmpvar_27;
  highp vec4 tmpvar_28;
  tmpvar_28.x = worldTangent_3.x;
  tmpvar_28.y = worldBinormal_2.x;
  tmpvar_28.z = worldNormal_4.x;
  tmpvar_28.w = tmpvar_19.x;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_3.y;
  tmpvar_29.y = worldBinormal_2.y;
  tmpvar_29.z = worldNormal_4.y;
  tmpvar_29.w = tmpvar_19.y;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.z;
  tmpvar_30.y = worldBinormal_2.z;
  tmpvar_30.z = worldNormal_4.z;
  tmpvar_30.w = tmpvar_19.z;
  lowp vec4 tmpvar_31;
  tmpvar_31.w = 1.0;
  tmpvar_31.xyz = worldNormal_4;
  mediump vec4 normal_32;
  normal_32 = tmpvar_31;
  mediump vec3 x2_33;
  mediump vec3 x1_34;
  x1_34.x = dot (unity_SHAr, normal_32);
  x1_34.y = dot (unity_SHAg, normal_32);
  x1_34.z = dot (unity_SHAb, normal_32);
  mediump vec4 tmpvar_35;
  tmpvar_35 = (normal_32.xyzz * normal_32.yzzx);
  x2_33.x = dot (unity_SHBr, tmpvar_35);
  x2_33.y = dot (unity_SHBg, tmpvar_35);
  x2_33.z = dot (unity_SHBb, tmpvar_35);
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_28;
  xlv_TEXCOORD1 = tmpvar_29;
  xlv_TEXCOORD2 = tmpvar_30;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_7;
  xlv_TEXCOORD5 = ((x2_33 + (unity_SHC.xyz * 
    ((normal_32.x * normal_32.x) - (normal_32.y * normal_32.y))
  )) + x1_34);
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp float t7;
bool tb7;
highp vec3 t8;
highp vec2 t14;
highp float t21;
void main()
{
    //Instruction 71293
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71294
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71295
    //ADD
    t21 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71296
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71297
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71298
    //MUL
    t21 = t21 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71299
    //MUL
    t0.x = t0.x * t21;
    //Instruction 71300
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71301
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71302
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71303
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71304
    //ADD
    t14.x = t0.z + _CameraXZAngle;
    //Instruction 71305
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71306
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 71307
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71308
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71309
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71310
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71311
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71312
    //MUL
    t8.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71313
    //MAD
    t8.xyz = _Object2World[0].xyz * t0.xxx + t8.xyz;
    //Instruction 71314
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t8.xyz;
    //Instruction 71315
    //ADD
    t0.xyw = t0.xyw + _Object2World[3].xyz;
    //Instruction 71316
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 71317
    //MUL
    t8.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 71318
    //MAD
    t8.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t8.xyz;
    //Instruction 71319
    //MAD
    t8.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t8.xyz;
    //Instruction 71320
    //DP3
    t0.x = dot(t8.xyz, t8.xyz);
    //Instruction 71321
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71322
    //MUL
    t8.xyz = t0.xxx * t8.xyz;
    //Instruction 71323
    //MOV
    vs_TEXCOORD0.x = t8.z;
    //Instruction 71324
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71325
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71326
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71327
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71328
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71329
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71330
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 71331
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71332
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71333
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71334
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 71335
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 71336
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 71337
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 71338
    //MUL
    t10_4.xyz = t8.xyz * t2.zxy;
    //Instruction 71339
    //MAD
    t10_4.xyz = t2.yzx * t8.yzx + (-t10_4.xyz);
    //Instruction 71340
    //MOV
    vs_TEXCOORD0.y = (-t10_4.x);
    //Instruction 71341
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 71342
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 71343
    //MOV
    vs_TEXCOORD2.w = t0.w;
    //Instruction 71344
    //MOV
    vs_TEXCOORD1.x = t8.x;
    //Instruction 71345
    //MOV
    vs_TEXCOORD2.x = t8.y;
    //Instruction 71346
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 71347
    //MOV
    vs_TEXCOORD1.y = (-t10_4.y);
    //Instruction 71348
    //MOV
    vs_TEXCOORD2.y = (-t10_4.z);
    //Instruction 71349
    //MOV
    vs_TEXCOORD2.z = t2.z;
    //Instruction 71350
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 71351
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 71352
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 71353
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 71354
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71355
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71356
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71357
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71358
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71359
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb7)) ? t14.xy : t1.xy;
    //Instruction 71360
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 71361
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 71362
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 71363
    //MUL
    t16_0 = t2.yzzx * t2.xyzz;
    //Instruction 71364
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 71365
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 71366
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 71367
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 71368
    //MOV
    t2.w = 1.0;
    //Instruction 71369
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 71370
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 71371
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 71372
    //ADD
    vs_TEXCOORD5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 71373
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71275
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 71276
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71277
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 71278
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 71279
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71280
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 71281
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 71282
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 71283
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 71284
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 71285
    //DP3
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71286
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71287
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 71288
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    //Instruction 71289
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 71290
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71291
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71292
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_15.xz;
  billboardPos_9.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_14.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_16;
  tmpvar_16 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_17;
  tmpvar_17 = (fract(abs(tmpvar_16)) * tmpvar_12.x);
  highp float tmpvar_18;
  if ((tmpvar_16 >= 0.0)) {
    tmpvar_18 = tmpvar_17;
  } else {
    tmpvar_18 = -(tmpvar_17);
  };
  highp vec4 tmpvar_19;
  tmpvar_19 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_18))];
  if ((tmpvar_19.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_19.xy - (tmpvar_19.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_19.xy + (tmpvar_19.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _BillboardNormal.x)
   + 
    (v_22.xyz * _BillboardNormal.y)
  ) + (v_23.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_24;
  highp mat3 tmpvar_25;
  tmpvar_25[0] = _Object2World[0].xyz;
  tmpvar_25[1] = _Object2World[1].xyz;
  tmpvar_25[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((tmpvar_25 * _BillboardTangent));
  worldTangent_3 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_28;
  tmpvar_28 = -(tmpvar_27);
  worldBinormal_2 = tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_3.x;
  tmpvar_29.y = worldBinormal_2.x;
  tmpvar_29.z = worldNormal_4.x;
  tmpvar_29.w = tmpvar_20.x;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.y;
  tmpvar_30.y = worldBinormal_2.y;
  tmpvar_30.z = worldNormal_4.y;
  tmpvar_30.w = tmpvar_20.y;
  highp vec4 tmpvar_31;
  tmpvar_31.x = worldTangent_3.z;
  tmpvar_31.y = worldBinormal_2.z;
  tmpvar_31.z = worldNormal_4.z;
  tmpvar_31.w = tmpvar_20.z;
  lowp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = worldNormal_4;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_29;
  xlv_TEXCOORD1 = tmpvar_30;
  xlv_TEXCOORD2 = tmpvar_31;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_21.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_15.xz;
  billboardPos_9.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_14.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_16;
  tmpvar_16 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_17;
  tmpvar_17 = (fract(abs(tmpvar_16)) * tmpvar_12.x);
  highp float tmpvar_18;
  if ((tmpvar_16 >= 0.0)) {
    tmpvar_18 = tmpvar_17;
  } else {
    tmpvar_18 = -(tmpvar_17);
  };
  highp vec4 tmpvar_19;
  tmpvar_19 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_18))];
  if ((tmpvar_19.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_19.xy - (tmpvar_19.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_19.xy + (tmpvar_19.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _BillboardNormal.x)
   + 
    (v_22.xyz * _BillboardNormal.y)
  ) + (v_23.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_24;
  highp mat3 tmpvar_25;
  tmpvar_25[0] = _Object2World[0].xyz;
  tmpvar_25[1] = _Object2World[1].xyz;
  tmpvar_25[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((tmpvar_25 * _BillboardTangent));
  worldTangent_3 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_28;
  tmpvar_28 = -(tmpvar_27);
  worldBinormal_2 = tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_3.x;
  tmpvar_29.y = worldBinormal_2.x;
  tmpvar_29.z = worldNormal_4.x;
  tmpvar_29.w = tmpvar_20.x;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.y;
  tmpvar_30.y = worldBinormal_2.y;
  tmpvar_30.z = worldNormal_4.y;
  tmpvar_30.w = tmpvar_20.y;
  highp vec4 tmpvar_31;
  tmpvar_31.x = worldTangent_3.z;
  tmpvar_31.y = worldBinormal_2.z;
  tmpvar_31.z = worldNormal_4.z;
  tmpvar_31.w = tmpvar_20.z;
  lowp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = worldNormal_4;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  highp vec3 lightColor0_37;
  lightColor0_37 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_38;
  lightColor1_38 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_39;
  lightColor2_39 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_40;
  lightColor3_40 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_41;
  lightAttenSq_41 = unity_4LightAtten0;
  highp vec3 normal_42;
  normal_42 = worldNormal_4;
  highp vec3 col_43;
  highp vec4 ndotl_44;
  highp vec4 lengthSq_45;
  highp vec4 tmpvar_46;
  tmpvar_46 = (unity_4LightPosX0 - tmpvar_20.x);
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosY0 - tmpvar_20.y);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosZ0 - tmpvar_20.z);
  lengthSq_45 = (tmpvar_46 * tmpvar_46);
  lengthSq_45 = (lengthSq_45 + (tmpvar_47 * tmpvar_47));
  lengthSq_45 = (lengthSq_45 + (tmpvar_48 * tmpvar_48));
  ndotl_44 = (tmpvar_46 * normal_42.x);
  ndotl_44 = (ndotl_44 + (tmpvar_47 * normal_42.y));
  ndotl_44 = (ndotl_44 + (tmpvar_48 * normal_42.z));
  highp vec4 tmpvar_49;
  tmpvar_49 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_44 * inversesqrt(lengthSq_45)));
  ndotl_44 = tmpvar_49;
  highp vec4 tmpvar_50;
  tmpvar_50 = (tmpvar_49 * (1.0/((1.0 + 
    (lengthSq_45 * lightAttenSq_41)
  ))));
  col_43 = (lightColor0_37 * tmpvar_50.x);
  col_43 = (col_43 + (lightColor1_38 * tmpvar_50.y));
  col_43 = (col_43 + (lightColor2_39 * tmpvar_50.z));
  col_43 = (col_43 + (lightColor3_40 * tmpvar_50.w));
  tmpvar_6 = (((x2_34 + 
    (unity_SHC.xyz * ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y)))
  ) + x1_35) + col_43);
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_29;
  xlv_TEXCOORD1 = tmpvar_30;
  xlv_TEXCOORD2 = tmpvar_31;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = (c_18.xyz + (tmpvar_8 * xlv_TEXCOORD5));
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
highp vec3 t8;
bool tb8;
highp float t14;
highp uint tu14;
highp float t21;
highp float t23;
void main()
{
    //Instruction 71392
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71393
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71394
    //ADD
    t21 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71395
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71396
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71397
    //MUL
    t21 = t21 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71398
    //MUL
    t0.x = t0.x * t21;
    //Instruction 71399
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71400
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71401
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71402
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71403
    //ADD
    t14 = t0.z + _CameraXZAngle;
    //Instruction 71404
    //MAD
    t14 = t14 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71405
    //ROUND_NI
    t14 = floor(t14);
    //Instruction 71406
    //DIV
    t14 = t14 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71407
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71408
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71409
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71410
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71411
    //MUL
    t8.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71412
    //MAD
    t8.xyz = _Object2World[0].xyz * t0.xxx + t8.xyz;
    //Instruction 71413
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t8.xyz;
    //Instruction 71414
    //ADD
    t0.xyw = t0.xyw + _Object2World[3].xyz;
    //Instruction 71415
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 71416
    //MUL
    t8.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 71417
    //MAD
    t8.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t8.xyz;
    //Instruction 71418
    //MAD
    t8.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t8.xyz;
    //Instruction 71419
    //DP3
    t2.x = dot(t8.xyz, t8.xyz);
    //Instruction 71420
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71421
    //MUL
    t8.xyz = t8.xyz * t2.xxx;
    //Instruction 71422
    //MOV
    vs_TEXCOORD0.x = t8.z;
    //Instruction 71423
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71424
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71425
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71426
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71427
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71428
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71429
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 71430
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71431
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71432
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71433
    //ADD
    t2.xyz = t2.xyz + t3.xyz;
    //Instruction 71434
    //DP3
    t23 = dot(t2.xyz, t2.xyz);
    //Instruction 71435
    //RSQ
    t23 = inversesqrt(t23);
    //Instruction 71436
    //MUL
    t2.xyz = vec3(t23) * t2.xyz;
    //Instruction 71437
    //MUL
    t10_4.xyz = t8.xyz * t2.zxy;
    //Instruction 71438
    //MAD
    t10_4.xyz = t2.yzx * t8.yzx + (-t10_4.xyz);
    //Instruction 71439
    //MOV
    vs_TEXCOORD0.y = (-t10_4.x);
    //Instruction 71440
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 71441
    //MOV
    vs_TEXCOORD1.x = t8.x;
    //Instruction 71442
    //MOV
    vs_TEXCOORD2.x = t8.y;
    //Instruction 71443
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 71444
    //MOV
    vs_TEXCOORD1.y = (-t10_4.y);
    //Instruction 71445
    //MOV
    vs_TEXCOORD2.y = (-t10_4.z);
    //Instruction 71446
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 71447
    //MOV
    vs_TEXCOORD2.w = t0.w;
    //Instruction 71448
    //MOV
    vs_TEXCOORD2.z = t2.z;
    //Instruction 71449
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 71450
    //GE
    tb8 = t14>=(-t14);
    //Instruction 71451
    //FRC
    t14 = fract(abs(t14));
    //Instruction 71452
    //MOVC
    t14 = (tb8) ? t14 : (-t14);
    //Instruction 71453
    //MAD
    t14 = t14 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71454
    //FTOU
    tu14 = uint(t14);
    //Instruction 71455
    //LT
    tb1 = _ImageTexCoords[int(tu14) + 0].w<0.0;
    //Instruction 71456
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu14) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu14) + 0].xy;
    //Instruction 71457
    //MAD
    t3.xy = _ImageTexCoords[int(tu14) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu14) + 0].xy;
    //Instruction 71458
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t8.xy : t3.xy;
    //Instruction 71459
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 71460
    //MUL
    t16_5.x = t2.y * t2.y;
    //Instruction 71461
    //MAD
    t16_5.x = t2.x * t2.x + (-t16_5.x);
    //Instruction 71462
    //MUL
    t16_1 = t2.yzzx * t2.xyzz;
    //Instruction 71463
    //DP4
    t16_6.x = dot(unity_SHBr, t16_1);
    //Instruction 71464
    //DP4
    t16_6.y = dot(unity_SHBg, t16_1);
    //Instruction 71465
    //DP4
    t16_6.z = dot(unity_SHBb, t16_1);
    //Instruction 71466
    //MAD
    t16_5.xyz = unity_SHC.xyz * t16_5.xxx + t16_6.xyz;
    //Instruction 71467
    //MOV
    t2.w = 1.0;
    //Instruction 71468
    //DP4
    t16_6.x = dot(unity_SHAr, t2);
    //Instruction 71469
    //DP4
    t16_6.y = dot(unity_SHAg, t2);
    //Instruction 71470
    //DP4
    t16_6.z = dot(unity_SHAb, t2);
    //Instruction 71471
    //ADD
    t16_5.xyz = t16_5.xyz + t16_6.xyz;
    //Instruction 71472
    //ADD
    t1 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 71473
    //MUL
    t3 = t2.yyyy * t1;
    //Instruction 71474
    //MUL
    t1 = t1 * t1;
    //Instruction 71475
    //ADD
    t4 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 71476
    //ADD
    t0 = (-t0.wwww) + unity_4LightPosZ0;
    //Instruction 71477
    //MAD
    t3 = t4 * t2.xxxx + t3;
    //Instruction 71478
    //MAD
    t1 = t4 * t4 + t1;
    //Instruction 71479
    //MAD
    t1 = t0 * t0 + t1;
    //Instruction 71480
    //MAD
    t0 = t0 * t2.zzzz + t3;
    //Instruction 71481
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 71482
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 71483
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 71484
    //MUL
    t0 = t0 * t2;
    //Instruction 71485
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 71486
    //MUL
    t0 = t1 * t0;
    //Instruction 71487
    //MUL
    t2.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 71488
    //MAD
    t2.xyz = unity_LightColor[0].xyz * t0.xxx + t2.xyz;
    //Instruction 71489
    //MAD
    t0.xyz = unity_LightColor[2].xyz * t0.zzz + t2.xyz;
    //Instruction 71490
    //MAD
    t0.xyz = unity_LightColor[3].xyz * t0.www + t0.xyz;
    //Instruction 71491
    //ADD
    t0.xyz = t0.xyz + t16_5.xyz;
    //Instruction 71492
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 71493
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71374
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 71375
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71376
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 71377
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 71378
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71379
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 71380
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 71381
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 71382
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 71383
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 71384
    //DP3
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71385
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71386
    //MUL
    t16_3.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 71387
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    //Instruction 71388
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 71389
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71390
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71391
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_16.xz;
  billboardPos_10.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_15.y));
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_17;
  tmpvar_17 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_18;
  tmpvar_18 = (fract(abs(tmpvar_17)) * tmpvar_13.x);
  highp float tmpvar_19;
  if ((tmpvar_17 >= 0.0)) {
    tmpvar_19 = tmpvar_18;
  } else {
    tmpvar_19 = -(tmpvar_18);
  };
  highp vec4 tmpvar_20;
  tmpvar_20 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_19))];
  if ((tmpvar_20.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_20.xy - (tmpvar_20.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_20.xy + (tmpvar_20.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _BillboardNormal.x)
   + 
    (v_23.xyz * _BillboardNormal.y)
  ) + (v_24.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = _Object2World[0].xyz;
  tmpvar_26[1] = _Object2World[1].xyz;
  tmpvar_26[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((tmpvar_26 * _BillboardTangent));
  worldTangent_3 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_29;
  tmpvar_29 = -(tmpvar_28);
  worldBinormal_2 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.x;
  tmpvar_30.y = worldBinormal_2.x;
  tmpvar_30.z = worldNormal_4.x;
  tmpvar_30.w = tmpvar_21.x;
  highp vec4 tmpvar_31;
  tmpvar_31.x = worldTangent_3.y;
  tmpvar_31.y = worldBinormal_2.y;
  tmpvar_31.z = worldNormal_4.y;
  tmpvar_31.w = tmpvar_21.y;
  highp vec4 tmpvar_32;
  tmpvar_32.x = worldTangent_3.z;
  tmpvar_32.y = worldBinormal_2.z;
  tmpvar_32.z = worldNormal_4.z;
  tmpvar_32.w = tmpvar_21.z;
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_4;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 normal_43;
  normal_43 = worldNormal_4;
  highp vec3 col_44;
  highp vec4 ndotl_45;
  highp vec4 lengthSq_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosX0 - tmpvar_21.x);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosY0 - tmpvar_21.y);
  highp vec4 tmpvar_49;
  tmpvar_49 = (unity_4LightPosZ0 - tmpvar_21.z);
  lengthSq_46 = (tmpvar_47 * tmpvar_47);
  lengthSq_46 = (lengthSq_46 + (tmpvar_48 * tmpvar_48));
  lengthSq_46 = (lengthSq_46 + (tmpvar_49 * tmpvar_49));
  ndotl_45 = (tmpvar_47 * normal_43.x);
  ndotl_45 = (ndotl_45 + (tmpvar_48 * normal_43.y));
  ndotl_45 = (ndotl_45 + (tmpvar_49 * normal_43.z));
  highp vec4 tmpvar_50;
  tmpvar_50 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_45 * inversesqrt(lengthSq_46)));
  ndotl_45 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_50 * (1.0/((1.0 + 
    (lengthSq_46 * lightAttenSq_42)
  ))));
  col_44 = (lightColor0_38 * tmpvar_51.x);
  col_44 = (col_44 + (lightColor1_39 * tmpvar_51.y));
  col_44 = (col_44 + (lightColor2_40 * tmpvar_51.z));
  col_44 = (col_44 + (lightColor3_41 * tmpvar_51.w));
  tmpvar_6 = (((x2_35 + 
    (unity_SHC.xyz * ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y)))
  ) + x1_36) + col_44);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_30;
  xlv_TEXCOORD1 = tmpvar_31;
  xlv_TEXCOORD2 = tmpvar_32;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_15 = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_15;
  mediump vec3 tmpvar_20;
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_9 * tmpvar_20) * diff_23);
  c_22.w = tmpvar_10;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_21.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  tmpvar_7 = _glesVertex;
  mediump vec3 tmpvar_8;
  highp vec3 billboardPos_9;
  highp float angle_10;
  highp float tmpvar_11;
  tmpvar_11 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeInfo[int(tmpvar_11)];
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeSize[int(tmpvar_11)];
  angle_10 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_13.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_9.xz = tmpvar_15.xz;
  billboardPos_9.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_13.y)
   + tmpvar_13.z) * tmpvar_14.y));
  tmpvar_7.xyz = (_glesVertex.xyz + billboardPos_9);
  tmpvar_7.w = 1.0;
  angle_10 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_16;
  tmpvar_16 = (floor((
    (angle_10 * tmpvar_12.y)
   + 0.5)) / tmpvar_12.x);
  highp float tmpvar_17;
  tmpvar_17 = (fract(abs(tmpvar_16)) * tmpvar_12.x);
  highp float tmpvar_18;
  if ((tmpvar_16 >= 0.0)) {
    tmpvar_18 = tmpvar_17;
  } else {
    tmpvar_18 = -(tmpvar_17);
  };
  highp vec4 tmpvar_19;
  tmpvar_19 = _ImageTexCoords[int((tmpvar_12.z + tmpvar_18))];
  if ((tmpvar_19.w < 0.0)) {
    tmpvar_8.xy = (tmpvar_19.xy - (tmpvar_19.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_8.xy = (tmpvar_19.xy + (tmpvar_19.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_Object2World * tmpvar_7).xyz;
  highp vec4 v_21;
  v_21.x = _World2Object[0].x;
  v_21.y = _World2Object[1].x;
  v_21.z = _World2Object[2].x;
  v_21.w = _World2Object[3].x;
  highp vec4 v_22;
  v_22.x = _World2Object[0].y;
  v_22.y = _World2Object[1].y;
  v_22.z = _World2Object[2].y;
  v_22.w = _World2Object[3].y;
  highp vec4 v_23;
  v_23.x = _World2Object[0].z;
  v_23.y = _World2Object[1].z;
  v_23.z = _World2Object[2].z;
  v_23.w = _World2Object[3].z;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize(((
    (v_21.xyz * _BillboardNormal.x)
   + 
    (v_22.xyz * _BillboardNormal.y)
  ) + (v_23.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_24;
  highp mat3 tmpvar_25;
  tmpvar_25[0] = _Object2World[0].xyz;
  tmpvar_25[1] = _Object2World[1].xyz;
  tmpvar_25[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_26;
  tmpvar_26 = normalize((tmpvar_25 * _BillboardTangent));
  worldTangent_3 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_28;
  tmpvar_28 = -(tmpvar_27);
  worldBinormal_2 = tmpvar_28;
  highp vec4 tmpvar_29;
  tmpvar_29.x = worldTangent_3.x;
  tmpvar_29.y = worldBinormal_2.x;
  tmpvar_29.z = worldNormal_4.x;
  tmpvar_29.w = tmpvar_20.x;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.y;
  tmpvar_30.y = worldBinormal_2.y;
  tmpvar_30.z = worldNormal_4.y;
  tmpvar_30.w = tmpvar_20.y;
  highp vec4 tmpvar_31;
  tmpvar_31.x = worldTangent_3.z;
  tmpvar_31.y = worldBinormal_2.z;
  tmpvar_31.z = worldNormal_4.z;
  tmpvar_31.w = tmpvar_20.z;
  lowp vec4 tmpvar_32;
  tmpvar_32.w = 1.0;
  tmpvar_32.xyz = worldNormal_4;
  mediump vec4 normal_33;
  normal_33 = tmpvar_32;
  mediump vec3 x2_34;
  mediump vec3 x1_35;
  x1_35.x = dot (unity_SHAr, normal_33);
  x1_35.y = dot (unity_SHAg, normal_33);
  x1_35.z = dot (unity_SHAb, normal_33);
  mediump vec4 tmpvar_36;
  tmpvar_36 = (normal_33.xyzz * normal_33.yzzx);
  x2_34.x = dot (unity_SHBr, tmpvar_36);
  x2_34.y = dot (unity_SHBg, tmpvar_36);
  x2_34.z = dot (unity_SHBb, tmpvar_36);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_7));
  gl_Position = (glstate_matrix_mvp * tmpvar_7);
  xlv_TEXCOORD0 = tmpvar_29;
  xlv_TEXCOORD1 = tmpvar_30;
  xlv_TEXCOORD2 = tmpvar_31;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = ((x2_34 + (unity_SHC.xyz * 
    ((normal_33.x * normal_33.x) - (normal_33.y * normal_33.y))
  )) + x1_35);
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_20.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
mediump vec4 t16_1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
bool tb9;
highp float t16;
highp uint tu16;
highp float t24;
void main()
{
    //Instruction 72730
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 72731
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 72732
    //ADD
    t24 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72733
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 72734
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72735
    //MUL
    t24 = t24 * _TreeSize[int(tu1) + 0].x;
    //Instruction 72736
    //MUL
    t0.x = t0.x * t24;
    //Instruction 72737
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 72738
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 72739
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 72740
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 72741
    //ADD
    t16 = t0.z + _CameraXZAngle;
    //Instruction 72742
    //MAD
    t16 = t16 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 72743
    //ROUND_NI
    t16 = floor(t16);
    //Instruction 72744
    //DIV
    t16 = t16 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 72745
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 72746
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 72747
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 72748
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 72749
    //MUL
    t9.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 72750
    //MAD
    t9.xyz = _Object2World[0].xyz * t0.xxx + t9.xyz;
    //Instruction 72751
    //MAD
    t9.xyz = _Object2World[2].xyz * t0.www + t9.xyz;
    //Instruction 72752
    //ADD
    t9.xyz = t9.xyz + _Object2World[3].xyz;
    //Instruction 72753
    //MOV
    vs_TEXCOORD0.w = t9.x;
    //Instruction 72754
    //MUL
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 72755
    //MAD
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    //Instruction 72756
    //MAD
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    //Instruction 72757
    //DP3
    t9.x = dot(t2.xyz, t2.xyz);
    //Instruction 72758
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 72759
    //MUL
    t2.xyz = t9.xxx * t2.xyz;
    //Instruction 72760
    //MOV
    vs_TEXCOORD0.x = t2.z;
    //Instruction 72761
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 72762
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 72763
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 72764
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 72765
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 72766
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 72767
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 72768
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 72769
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 72770
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 72771
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 72772
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 72773
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 72774
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 72775
    //MUL
    t10_5.xyz = t2.xyz * t3.zxy;
    //Instruction 72776
    //MAD
    t10_5.xyz = t3.yzx * t2.yzx + (-t10_5.xyz);
    //Instruction 72777
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 72778
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 72779
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 72780
    //MOV
    vs_TEXCOORD2.x = t2.y;
    //Instruction 72781
    //MOV
    vs_TEXCOORD1.w = t9.y;
    //Instruction 72782
    //MOV
    vs_TEXCOORD2.w = t9.z;
    //Instruction 72783
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 72784
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 72785
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 72786
    //MOV
    vs_TEXCOORD2.z = t3.z;
    //Instruction 72787
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 72788
    //GE
    tb9 = t16>=(-t16);
    //Instruction 72789
    //FRC
    t16 = fract(abs(t16));
    //Instruction 72790
    //MOVC
    t16 = (tb9) ? t16 : (-t16);
    //Instruction 72791
    //MAD
    t16 = t16 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 72792
    //FTOU
    tu16 = uint(t16);
    //Instruction 72793
    //LT
    tb1 = _ImageTexCoords[int(tu16) + 0].w<0.0;
    //Instruction 72794
    //MAD
    t9.xy = (-_ImageTexCoords[int(tu16) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu16) + 0].xy;
    //Instruction 72795
    //MAD
    t2.xy = _ImageTexCoords[int(tu16) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu16) + 0].xy;
    //Instruction 72796
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t9.xy : t2.xy;
    //Instruction 72797
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 72798
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 72799
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 72800
    //MUL
    t16_1 = t3.yzzx * t3.xyzz;
    //Instruction 72801
    //DP4
    t16_7.x = dot(unity_SHBr, t16_1);
    //Instruction 72802
    //DP4
    t16_7.y = dot(unity_SHBg, t16_1);
    //Instruction 72803
    //DP4
    t16_7.z = dot(unity_SHBb, t16_1);
    //Instruction 72804
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 72805
    //MOV
    t3.w = 1.0;
    //Instruction 72806
    //DP4
    t16_7.x = dot(unity_SHAr, t3);
    //Instruction 72807
    //DP4
    t16_7.y = dot(unity_SHAg, t3);
    //Instruction 72808
    //DP4
    t16_7.z = dot(unity_SHAb, t3);
    //Instruction 72809
    //ADD
    vs_TEXCOORD5.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 72810
    //MUL
    t1 = t0.yyyy * _Object2World[1];
    //Instruction 72811
    //MAD
    t1 = _Object2World[0] * t0.xxxx + t1;
    //Instruction 72812
    //MAD
    t0 = _Object2World[2] * t0.wwww + t1;
    //Instruction 72813
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 72814
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 72815
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 72816
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 72817
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 72818
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 72819
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_7;
mediump float t16_14;
void main()
{
    //Instruction 72708
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 72709
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72710
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 72711
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 72712
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 72713
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 72714
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 72715
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 72716
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 72717
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 72718
    //DP3
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 72719
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 72720
    //SAMPLE_C_LZ
    vec3 txVec75 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec75, 0.0);
    //Instruction 72721
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 72722
    //MAD
    t16_3.x = t16_3.x * t16_7 + _LightShadowData.x;
    //Instruction 72723
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 72724
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 72725
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    //Instruction 72726
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 72727
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 72728
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 72729
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  tmpvar_8 = _glesVertex;
  mediump vec3 tmpvar_9;
  highp vec3 billboardPos_10;
  highp float angle_11;
  highp float tmpvar_12;
  tmpvar_12 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_13;
  tmpvar_13 = _TreeInfo[int(tmpvar_12)];
  highp vec4 tmpvar_14;
  tmpvar_14 = _TreeSize[int(tmpvar_12)];
  angle_11 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_14.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_10.xz = tmpvar_16.xz;
  billboardPos_10.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_14.y)
   + tmpvar_14.z) * tmpvar_15.y));
  tmpvar_8.xyz = (_glesVertex.xyz + billboardPos_10);
  tmpvar_8.w = 1.0;
  angle_11 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_17;
  tmpvar_17 = (floor((
    (angle_11 * tmpvar_13.y)
   + 0.5)) / tmpvar_13.x);
  highp float tmpvar_18;
  tmpvar_18 = (fract(abs(tmpvar_17)) * tmpvar_13.x);
  highp float tmpvar_19;
  if ((tmpvar_17 >= 0.0)) {
    tmpvar_19 = tmpvar_18;
  } else {
    tmpvar_19 = -(tmpvar_18);
  };
  highp vec4 tmpvar_20;
  tmpvar_20 = _ImageTexCoords[int((tmpvar_13.z + tmpvar_19))];
  if ((tmpvar_20.w < 0.0)) {
    tmpvar_9.xy = (tmpvar_20.xy - (tmpvar_20.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_9.xy = (tmpvar_20.xy + (tmpvar_20.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec3 tmpvar_21;
  tmpvar_21 = (_Object2World * tmpvar_8).xyz;
  highp vec4 v_22;
  v_22.x = _World2Object[0].x;
  v_22.y = _World2Object[1].x;
  v_22.z = _World2Object[2].x;
  v_22.w = _World2Object[3].x;
  highp vec4 v_23;
  v_23.x = _World2Object[0].y;
  v_23.y = _World2Object[1].y;
  v_23.z = _World2Object[2].y;
  v_23.w = _World2Object[3].y;
  highp vec4 v_24;
  v_24.x = _World2Object[0].z;
  v_24.y = _World2Object[1].z;
  v_24.z = _World2Object[2].z;
  v_24.w = _World2Object[3].z;
  highp vec3 tmpvar_25;
  tmpvar_25 = normalize(((
    (v_22.xyz * _BillboardNormal.x)
   + 
    (v_23.xyz * _BillboardNormal.y)
  ) + (v_24.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_25;
  highp mat3 tmpvar_26;
  tmpvar_26[0] = _Object2World[0].xyz;
  tmpvar_26[1] = _Object2World[1].xyz;
  tmpvar_26[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_27;
  tmpvar_27 = normalize((tmpvar_26 * _BillboardTangent));
  worldTangent_3 = tmpvar_27;
  lowp vec3 tmpvar_28;
  tmpvar_28 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_29;
  tmpvar_29 = -(tmpvar_28);
  worldBinormal_2 = tmpvar_29;
  highp vec4 tmpvar_30;
  tmpvar_30.x = worldTangent_3.x;
  tmpvar_30.y = worldBinormal_2.x;
  tmpvar_30.z = worldNormal_4.x;
  tmpvar_30.w = tmpvar_21.x;
  highp vec4 tmpvar_31;
  tmpvar_31.x = worldTangent_3.y;
  tmpvar_31.y = worldBinormal_2.y;
  tmpvar_31.z = worldNormal_4.y;
  tmpvar_31.w = tmpvar_21.y;
  highp vec4 tmpvar_32;
  tmpvar_32.x = worldTangent_3.z;
  tmpvar_32.y = worldBinormal_2.z;
  tmpvar_32.z = worldNormal_4.z;
  tmpvar_32.w = tmpvar_21.z;
  lowp vec4 tmpvar_33;
  tmpvar_33.w = 1.0;
  tmpvar_33.xyz = worldNormal_4;
  mediump vec4 normal_34;
  normal_34 = tmpvar_33;
  mediump vec3 x2_35;
  mediump vec3 x1_36;
  x1_36.x = dot (unity_SHAr, normal_34);
  x1_36.y = dot (unity_SHAg, normal_34);
  x1_36.z = dot (unity_SHAb, normal_34);
  mediump vec4 tmpvar_37;
  tmpvar_37 = (normal_34.xyzz * normal_34.yzzx);
  x2_35.x = dot (unity_SHBr, tmpvar_37);
  x2_35.y = dot (unity_SHBg, tmpvar_37);
  x2_35.z = dot (unity_SHBb, tmpvar_37);
  highp vec3 lightColor0_38;
  lightColor0_38 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_39;
  lightColor1_39 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_40;
  lightColor2_40 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_41;
  lightColor3_41 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_42;
  lightAttenSq_42 = unity_4LightAtten0;
  highp vec3 normal_43;
  normal_43 = worldNormal_4;
  highp vec3 col_44;
  highp vec4 ndotl_45;
  highp vec4 lengthSq_46;
  highp vec4 tmpvar_47;
  tmpvar_47 = (unity_4LightPosX0 - tmpvar_21.x);
  highp vec4 tmpvar_48;
  tmpvar_48 = (unity_4LightPosY0 - tmpvar_21.y);
  highp vec4 tmpvar_49;
  tmpvar_49 = (unity_4LightPosZ0 - tmpvar_21.z);
  lengthSq_46 = (tmpvar_47 * tmpvar_47);
  lengthSq_46 = (lengthSq_46 + (tmpvar_48 * tmpvar_48));
  lengthSq_46 = (lengthSq_46 + (tmpvar_49 * tmpvar_49));
  ndotl_45 = (tmpvar_47 * normal_43.x);
  ndotl_45 = (ndotl_45 + (tmpvar_48 * normal_43.y));
  ndotl_45 = (ndotl_45 + (tmpvar_49 * normal_43.z));
  highp vec4 tmpvar_50;
  tmpvar_50 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_45 * inversesqrt(lengthSq_46)));
  ndotl_45 = tmpvar_50;
  highp vec4 tmpvar_51;
  tmpvar_51 = (tmpvar_50 * (1.0/((1.0 + 
    (lengthSq_46 * lightAttenSq_42)
  ))));
  col_44 = (lightColor0_38 * tmpvar_51.x);
  col_44 = (col_44 + (lightColor1_39 * tmpvar_51.y));
  col_44 = (col_44 + (lightColor2_40 * tmpvar_51.z));
  col_44 = (col_44 + (lightColor3_41 * tmpvar_51.w));
  tmpvar_6 = (((x2_35 + 
    (unity_SHC.xyz * ((normal_34.x * normal_34.x) - (normal_34.y * normal_34.y)))
  ) + x1_36) + col_44);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_8));
  gl_Position = (glstate_matrix_mvp * tmpvar_8);
  xlv_TEXCOORD0 = tmpvar_30;
  xlv_TEXCOORD1 = tmpvar_31;
  xlv_TEXCOORD2 = tmpvar_32;
  xlv_TEXCOORD3 = tmpvar_5;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 _LightShadowData;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_10 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_14;
  tmpvar_14 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_15;
  shadow_15 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD0.xyz, tmpvar_14);
  worldN_4.x = tmpvar_16;
  highp float tmpvar_17;
  tmpvar_17 = dot (xlv_TEXCOORD1.xyz, tmpvar_14);
  worldN_4.y = tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = dot (xlv_TEXCOORD2.xyz, tmpvar_14);
  worldN_4.z = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_15;
  mediump vec3 tmpvar_19;
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_9 * tmpvar_19) * diff_22);
  c_21.w = tmpvar_10;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_9 * xlv_TEXCOORD5));
  c_5.xyz = c_20.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec4 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
mediump vec4 t16_2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
lowp vec3 t10_5;
mediump vec3 t16_6;
mediump vec3 t16_7;
highp vec3 t9;
highp float t16;
highp uint tu16;
highp vec2 t18;
highp float t24;
highp float t26;
void main()
{
    //Instruction 72842
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 72843
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 72844
    //ADD
    t24 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72845
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 72846
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72847
    //MUL
    t24 = t24 * _TreeSize[int(tu1) + 0].x;
    //Instruction 72848
    //MUL
    t0.x = t0.x * t24;
    //Instruction 72849
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 72850
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 72851
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 72852
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 72853
    //ADD
    t16 = t0.z + _CameraXZAngle;
    //Instruction 72854
    //MAD
    t16 = t16 * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 72855
    //ROUND_NI
    t16 = floor(t16);
    //Instruction 72856
    //DIV
    t16 = t16 / _TreeInfo[int(tu1) + 0].x;
    //Instruction 72857
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 72858
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 72859
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 72860
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 72861
    //MUL
    t9.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 72862
    //MAD
    t9.xyz = _Object2World[0].xyz * t0.xxx + t9.xyz;
    //Instruction 72863
    //MAD
    t9.xyz = _Object2World[2].xyz * t0.www + t9.xyz;
    //Instruction 72864
    //ADD
    t9.xyz = t9.xyz + _Object2World[3].xyz;
    //Instruction 72865
    //MOV
    vs_TEXCOORD0.w = t9.x;
    //Instruction 72866
    //MUL
    t2.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 72867
    //MAD
    t2.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t2.xyz;
    //Instruction 72868
    //MAD
    t2.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t2.xyz;
    //Instruction 72869
    //DP3
    t26 = dot(t2.xyz, t2.xyz);
    //Instruction 72870
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 72871
    //MUL
    t2.xyz = vec3(t26) * t2.xyz;
    //Instruction 72872
    //MOV
    vs_TEXCOORD0.x = t2.z;
    //Instruction 72873
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 72874
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 72875
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 72876
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 72877
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 72878
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 72879
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 72880
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 72881
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 72882
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 72883
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 72884
    //DP3
    t26 = dot(t3.xyz, t3.xyz);
    //Instruction 72885
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 72886
    //MUL
    t3.xyz = vec3(t26) * t3.xyz;
    //Instruction 72887
    //MUL
    t10_5.xyz = t2.xyz * t3.zxy;
    //Instruction 72888
    //MAD
    t10_5.xyz = t3.yzx * t2.yzx + (-t10_5.xyz);
    //Instruction 72889
    //MOV
    vs_TEXCOORD0.y = (-t10_5.x);
    //Instruction 72890
    //MOV
    vs_TEXCOORD0.z = t3.x;
    //Instruction 72891
    //MOV
    vs_TEXCOORD1.x = t2.x;
    //Instruction 72892
    //MOV
    vs_TEXCOORD2.x = t2.y;
    //Instruction 72893
    //MOV
    vs_TEXCOORD1.w = t9.y;
    //Instruction 72894
    //MOV
    vs_TEXCOORD1.y = (-t10_5.y);
    //Instruction 72895
    //MOV
    vs_TEXCOORD2.y = (-t10_5.z);
    //Instruction 72896
    //MOV
    vs_TEXCOORD1.z = t3.y;
    //Instruction 72897
    //MOV
    vs_TEXCOORD2.w = t9.z;
    //Instruction 72898
    //MOV
    vs_TEXCOORD2.z = t3.z;
    //Instruction 72899
    //MOV
    vs_TEXCOORD3 = _Color;
    //Instruction 72900
    //GE
    tb2 = t16>=(-t16);
    //Instruction 72901
    //FRC
    t16 = fract(abs(t16));
    //Instruction 72902
    //MOVC
    t16 = (tb2) ? t16 : (-t16);
    //Instruction 72903
    //MAD
    t16 = t16 * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 72904
    //FTOU
    tu16 = uint(t16);
    //Instruction 72905
    //LT
    tb1 = _ImageTexCoords[int(tu16) + 0].w<0.0;
    //Instruction 72906
    //MAD
    t2.xy = (-_ImageTexCoords[int(tu16) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu16) + 0].xy;
    //Instruction 72907
    //MAD
    t18.xy = _ImageTexCoords[int(tu16) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu16) + 0].xy;
    //Instruction 72908
    //MOVC
    vs_TEXCOORD4.xy = (bool(tb1)) ? t2.xy : t18.xy;
    //Instruction 72909
    //MOV
    vs_TEXCOORD4.z = 0.0;
    //Instruction 72910
    //MUL
    t16_6.x = t3.y * t3.y;
    //Instruction 72911
    //MAD
    t16_6.x = t3.x * t3.x + (-t16_6.x);
    //Instruction 72912
    //MUL
    t16_2 = t3.yzzx * t3.xyzz;
    //Instruction 72913
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 72914
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 72915
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 72916
    //MAD
    t16_6.xyz = unity_SHC.xyz * t16_6.xxx + t16_7.xyz;
    //Instruction 72917
    //MOV
    t3.w = 1.0;
    //Instruction 72918
    //DP4
    t16_7.x = dot(unity_SHAr, t3);
    //Instruction 72919
    //DP4
    t16_7.y = dot(unity_SHAg, t3);
    //Instruction 72920
    //DP4
    t16_7.z = dot(unity_SHAb, t3);
    //Instruction 72921
    //ADD
    t16_6.xyz = t16_6.xyz + t16_7.xyz;
    //Instruction 72922
    //ADD
    t2 = (-t9.yyyy) + unity_4LightPosY0;
    //Instruction 72923
    //MUL
    t4 = t3.yyyy * t2;
    //Instruction 72924
    //MUL
    t2 = t2 * t2;
    //Instruction 72925
    //ADD
    t5 = (-t9.xxxx) + unity_4LightPosX0;
    //Instruction 72926
    //ADD
    t1 = (-t9.zzzz) + unity_4LightPosZ0;
    //Instruction 72927
    //MAD
    t4 = t5 * t3.xxxx + t4;
    //Instruction 72928
    //MAD
    t3 = t1 * t3.zzzz + t4;
    //Instruction 72929
    //MAD
    t2 = t5 * t5 + t2;
    //Instruction 72930
    //MAD
    t1 = t1 * t1 + t2;
    //Instruction 72931
    //RSQ
    t2 = inversesqrt(t1);
    //Instruction 72932
    //MAD
    t1 = t1 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 72933
    //DIV
    t1 = vec4(1.0, 1.0, 1.0, 1.0) / t1;
    //Instruction 72934
    //MUL
    t2 = t2 * t3;
    //Instruction 72935
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 72936
    //MUL
    t1 = t1 * t2;
    //Instruction 72937
    //MUL
    t3.xyz = t1.yyy * unity_LightColor[1].xyz;
    //Instruction 72938
    //MAD
    t3.xyz = unity_LightColor[0].xyz * t1.xxx + t3.xyz;
    //Instruction 72939
    //MAD
    t1.xyz = unity_LightColor[2].xyz * t1.zzz + t3.xyz;
    //Instruction 72940
    //MAD
    t1.xyz = unity_LightColor[3].xyz * t1.www + t1.xyz;
    //Instruction 72941
    //ADD
    t1.xyz = t1.xyz + t16_6.xyz;
    //Instruction 72942
    //MOV
    vs_TEXCOORD5.xyz = t1.xyz;
    //Instruction 72943
    //MUL
    t1 = t0.yyyy * _Object2World[1];
    //Instruction 72944
    //MAD
    t1 = _Object2World[0] * t0.xxxx + t1;
    //Instruction 72945
    //MAD
    t0 = _Object2World[2] * t0.wwww + t1;
    //Instruction 72946
    //ADD
    t0 = t0 + _Object2World[3];
    //Instruction 72947
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 72948
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 72949
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 72950
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 72951
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 72952
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_7;
mediump float t16_14;
void main()
{
    //Instruction 72820
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 72821
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72822
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 72823
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 72824
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 72825
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 72826
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 72827
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 72828
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 72829
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 72830
    //DP3
    t16_14 = dot(t0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 72831
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 72832
    //SAMPLE_C_LZ
    vec3 txVec76 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_3.x = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec76, 0.0);
    //Instruction 72833
    //ADD
    t16_7 = (-_LightShadowData.x) + 1.0;
    //Instruction 72834
    //MAD
    t16_3.x = t16_3.x * t16_7 + _LightShadowData.x;
    //Instruction 72835
    //MUL
    t16_3.xyz = t16_3.xxx * _LightColor0.xyz;
    //Instruction 72836
    //MUL
    t16_3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 72837
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD5.xyz;
    //Instruction 72838
    //MAD
    t16_2.xyz = t16_3.xyz * vec3(t16_14) + t16_2.xyz;
    //Instruction 72839
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 72840
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 72841
    //RET
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" }
"!!GLES3"
}
}
 }
 Pass {
  Name "FORWARD"
  Tags { "LIGHTMODE"="ForwardAdd" "QUEUE"="AlphaTest" "IGNOREPROJECTOR"="true" "RenderType"="TransparentCutout" }
  ZWrite Off
  Cull Off
  Blend One One
  GpuProgramID 512369
Program "vp" {
SubProgram "gles " {
Keywords { "POINT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = texture2D (_LightTexture0, vec2(tmpvar_15)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
highp float t4;
bool tb4;
highp vec3 t5;
highp vec2 t8;
highp float t12;
void main()
{
    //Instruction 71517
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71518
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71519
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71520
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71521
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71522
    //MUL
    t12 = t12 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71523
    //MUL
    t0.x = t0.x * t12;
    //Instruction 71524
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71525
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71526
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71527
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71528
    //ADD
    t8.x = t0.z + _CameraXZAngle;
    //Instruction 71529
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71530
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 71531
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71532
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71533
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71534
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71535
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71536
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71537
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71538
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71539
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71540
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71541
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71542
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 71543
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71544
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71545
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71546
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 71547
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71548
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71549
    //MUL
    t5.xyz = t5.xyz * t2.xxx;
    //Instruction 71550
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 71551
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71552
    //MAD
    t5.xyz = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 71553
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t5.xyz;
    //Instruction 71554
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71555
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71556
    //GE
    tb0 = t8.x>=(-t8.x);
    //Instruction 71557
    //FRC
    t4 = fract(abs(t8.x));
    //Instruction 71558
    //MOVC
    t0.x = (tb0) ? t4 : (-t4);
    //Instruction 71559
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71560
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71561
    //LT
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71562
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71563
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71564
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb4)) ? t8.xy : t1.xy;
    //Instruction 71565
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71566
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 71494
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71495
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71496
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71497
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71498
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71499
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 71500
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 71501
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 71502
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 71503
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 71504
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 71505
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 71506
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71507
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 71508
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 71509
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 71510
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 71511
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 71512
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71513
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 71514
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71515
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71516
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_13;
  lowp vec4 c_14;
  lowp float diff_15;
  mediump float tmpvar_16;
  tmpvar_16 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_15 = tmpvar_16;
  c_14.xyz = ((tmpvar_8 * tmpvar_1) * diff_15);
  c_14.w = tmpvar_9;
  c_13.w = c_14.w;
  c_13.xyz = c_14.xyz;
  c_3.xyz = c_13.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
highp float t4;
bool tb4;
highp vec3 t5;
highp vec2 t8;
highp float t12;
void main()
{
    //Instruction 71579
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71580
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71581
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71582
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71583
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71584
    //MUL
    t12 = t12 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71585
    //MUL
    t0.x = t0.x * t12;
    //Instruction 71586
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71587
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71588
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71589
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71590
    //ADD
    t8.x = t0.z + _CameraXZAngle;
    //Instruction 71591
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71592
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 71593
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71594
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71595
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71596
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71597
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71598
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71599
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71600
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71601
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71602
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71603
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71604
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 71605
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71606
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71607
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71608
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 71609
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71610
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71611
    //MUL
    t5.xyz = t5.xyz * t2.xxx;
    //Instruction 71612
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 71613
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71614
    //MAD
    t5.xyz = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 71615
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t5.xyz;
    //Instruction 71616
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71617
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71618
    //GE
    tb0 = t8.x>=(-t8.x);
    //Instruction 71619
    //FRC
    t4 = fract(abs(t8.x));
    //Instruction 71620
    //MOVC
    t0.x = (tb0) ? t4 : (-t4);
    //Instruction 71621
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71622
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71623
    //LT
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71624
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71625
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71626
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb4)) ? t8.xy : t1.xy;
    //Instruction 71627
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71628
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump float t16_11;
void main()
{
    //Instruction 71567
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71568
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71569
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71570
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 71571
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71572
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71573
    //DP3
    t16_11 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71574
    //MAX
    t16_11 = max(t16_11, 0.0);
    //Instruction 71575
    //MUL
    t16_2.xyz = vec3(t16_11) * t16_2.xyz;
    //Instruction 71576
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71577
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71578
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_13;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_14;
  x_14 = (tmpvar_11 - _Cutoff);
  if ((x_14 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_16;
  tmpvar_16 = (_LightMatrix0 * tmpvar_15);
  lightCoord_5 = tmpvar_16;
  lowp vec4 tmpvar_17;
  mediump vec2 P_18;
  P_18 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_17 = texture2D (_LightTexture0, P_18);
  highp vec3 LightCoord_19;
  LightCoord_19 = lightCoord_5.xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (LightCoord_19, LightCoord_19);
  lowp vec4 tmpvar_21;
  tmpvar_21 = texture2D (_LightTextureB0, vec2(tmpvar_20));
  mediump float tmpvar_22;
  tmpvar_22 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_17.w) * tmpvar_21.w);
  atten_4 = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_10 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_11;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
highp float t4;
bool tb4;
highp vec3 t5;
highp vec2 t8;
highp float t12;
void main()
{
    //Instruction 71759
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71760
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71761
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71762
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71763
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71764
    //MUL
    t12 = t12 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71765
    //MUL
    t0.x = t0.x * t12;
    //Instruction 71766
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71767
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71768
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71769
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71770
    //ADD
    t8.x = t0.z + _CameraXZAngle;
    //Instruction 71771
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71772
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 71773
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71774
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71775
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71776
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71777
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71778
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71779
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71780
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71781
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71782
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71783
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71784
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 71785
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71786
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71787
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71788
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 71789
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71790
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71791
    //MUL
    t5.xyz = t5.xyz * t2.xxx;
    //Instruction 71792
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 71793
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71794
    //MAD
    t5.xyz = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 71795
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t5.xyz;
    //Instruction 71796
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71797
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71798
    //GE
    tb0 = t8.x>=(-t8.x);
    //Instruction 71799
    //FRC
    t4 = fract(abs(t8.x));
    //Instruction 71800
    //MOVC
    t0.x = (tb0) ? t4 : (-t4);
    //Instruction 71801
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71802
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71803
    //LT
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71804
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71805
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71806
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb4)) ? t8.xy : t1.xy;
    //Instruction 71807
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71808
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
highp vec3 t4;
lowp float t10_4;
bool tb9;
mediump float t16_14;
lowp float t10_14;
mediump float t16_17;
highp float t19;
void main()
{
    //Instruction 71729
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71730
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71731
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71732
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71733
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71734
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 71735
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 71736
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 71737
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 71738
    //DIV
    t16_3.xy = t16_0.xy / t16_0.ww;
    //Instruction 71739
    //ADD
    t16_3.xy = t16_3.xy + vec2(0.500000, 0.500000);
    //Instruction 71740
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 71741
    //LT
    tb9 = 0.0<t16_0.z;
    //Instruction 71742
    //DP3
    t16_14 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 71743
    //SAMPLE
    t10_14 = texture(_LightTextureB0, vec2(t16_14)).w;
    //Instruction 71744
    //MOVC
    t10_1 = (tb9) ? 1.0 : 0.0;
    //Instruction 71745
    //MUL
    t10_1 = t10_4 * t10_1;
    //Instruction 71746
    //MUL
    t10_1 = t10_14 * t10_1;
    //Instruction 71747
    //MUL
    t16_3.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 71748
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71749
    //ADD
    t4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 71750
    //DP3
    t19 = dot(t4.xyz, t4.xyz);
    //Instruction 71751
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 71752
    //MUL
    t4.xyz = vec3(t19) * t4.xyz;
    //Instruction 71753
    //DP3
    t16_17 = dot(vs_TEXCOORD0.xyz, t4.xyz);
    //Instruction 71754
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 71755
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 71756
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71757
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71758
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xyz;
  highp float tmpvar_15;
  tmpvar_15 = dot (tmpvar_14, tmpvar_14);
  lowp float tmpvar_16;
  tmpvar_16 = (texture2D (_LightTextureB0, vec2(tmpvar_15)).w * textureCube (_LightTexture0, tmpvar_14).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_16);
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_3.xyz = c_17.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
highp float t4;
bool tb4;
highp vec3 t5;
highp vec2 t8;
highp float t12;
void main()
{
    //Instruction 71834
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71835
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71836
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71837
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71838
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71839
    //MUL
    t12 = t12 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71840
    //MUL
    t0.x = t0.x * t12;
    //Instruction 71841
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71842
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71843
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71844
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71845
    //ADD
    t8.x = t0.z + _CameraXZAngle;
    //Instruction 71846
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71847
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 71848
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71849
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71850
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71851
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71852
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71853
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71854
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71855
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71856
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71857
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71858
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71859
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 71860
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71861
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71862
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71863
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 71864
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71865
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71866
    //MUL
    t5.xyz = t5.xyz * t2.xxx;
    //Instruction 71867
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 71868
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71869
    //MAD
    t5.xyz = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 71870
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t5.xyz;
    //Instruction 71871
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71872
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71873
    //GE
    tb0 = t8.x>=(-t8.x);
    //Instruction 71874
    //FRC
    t4 = fract(abs(t8.x));
    //Instruction 71875
    //MOVC
    t0.x = (tb0) ? t4 : (-t4);
    //Instruction 71876
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71877
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71878
    //LT
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71879
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71880
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71881
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb4)) ? t8.xy : t1.xy;
    //Instruction 71882
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71883
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp float t10_4;
highp float t12;
mediump float t16_14;
void main()
{
    //Instruction 71809
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71810
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71811
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71812
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71813
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71814
    //MUL
    t16_3.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 71815
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_3.xyz;
    //Instruction 71816
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_3.xyz;
    //Instruction 71817
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 71818
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 71819
    //SAMPLE
    t10_4 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 71820
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 71821
    //MUL
    t16_0 = t10_4 * t10_0.x;
    //Instruction 71822
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 71823
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71824
    //ADD
    t0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 71825
    //DP3
    t12 = dot(t0.xyz, t0.xyz);
    //Instruction 71826
    //RSQ
    t12 = inversesqrt(t12);
    //Instruction 71827
    //MUL
    t0.xyz = vec3(t12) * t0.xyz;
    //Instruction 71828
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, t0.xyz);
    //Instruction 71829
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71830
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 71831
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71832
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71833
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_12;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_12 = _InstanceData;
  } else {
    tmpvar_12 = tmpvar_1;
  };
  highp vec3 tmpvar_13;
  tmpvar_13 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_12.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_13.xz;
  billboardPos_7.y = (tmpvar_13.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_12.y));
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_12.z);
  highp float tmpvar_14;
  tmpvar_14 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_15;
  tmpvar_15 = (fract(abs(tmpvar_14)) * tmpvar_10.x);
  highp float tmpvar_16;
  if ((tmpvar_14 >= 0.0)) {
    tmpvar_16 = tmpvar_15;
  } else {
    tmpvar_16 = -(tmpvar_15);
  };
  highp vec4 tmpvar_17;
  tmpvar_17 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_16))];
  if ((tmpvar_17.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_17.xy - (tmpvar_17.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_17.xy + (tmpvar_17.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_4 = _Color;
  highp vec4 v_18;
  v_18.x = _World2Object[0].x;
  v_18.y = _World2Object[1].x;
  v_18.z = _World2Object[2].x;
  v_18.w = _World2Object[3].x;
  highp vec4 v_19;
  v_19.x = _World2Object[0].y;
  v_19.y = _World2Object[1].y;
  v_19.z = _World2Object[2].y;
  v_19.w = _World2Object[3].y;
  highp vec4 v_20;
  v_20.x = _World2Object[0].z;
  v_20.y = _World2Object[1].z;
  v_20.z = _World2Object[2].z;
  v_20.w = _World2Object[3].z;
  highp vec3 tmpvar_21;
  tmpvar_21 = normalize(((
    (v_18.xyz * _BillboardNormal.x)
   + 
    (v_19.xyz * _BillboardNormal.y)
  ) + (v_20.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_21;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_14;
  tmpvar_14 = (_LightMatrix0 * tmpvar_13).xy;
  lowp float tmpvar_15;
  tmpvar_15 = texture2D (_LightTexture0, tmpvar_14).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_15);
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
highp float t4;
bool tb4;
highp vec3 t5;
highp vec2 t8;
highp float t12;
void main()
{
    //Instruction 71647
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 71648
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 71649
    //ADD
    t12 = in_TEXCOORD0.x + -0.500000;
    //Instruction 71650
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 71651
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 71652
    //MUL
    t12 = t12 * _TreeSize[int(tu1) + 0].x;
    //Instruction 71653
    //MUL
    t0.x = t0.x * t12;
    //Instruction 71654
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 71655
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 71656
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 71657
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 71658
    //ADD
    t8.x = t0.z + _CameraXZAngle;
    //Instruction 71659
    //MAD
    t8.x = t8.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 71660
    //ROUND_NI
    t8.x = floor(t8.x);
    //Instruction 71661
    //DIV
    t8.x = t8.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 71662
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 71663
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 71664
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 71665
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 71666
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 71667
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 71668
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 71669
    //MUL
    t3.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 71670
    //MUL
    t3.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 71671
    //MUL
    t3.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 71672
    //ADD
    t5.xyz = t2.xyz + t3.xyz;
    //Instruction 71673
    //MUL
    t2.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 71674
    //MUL
    t2.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 71675
    //MUL
    t2.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 71676
    //ADD
    t5.xyz = t5.xyz + t2.xyz;
    //Instruction 71677
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 71678
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 71679
    //MUL
    t5.xyz = t5.xyz * t2.xxx;
    //Instruction 71680
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 71681
    //MUL
    t5.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 71682
    //MAD
    t5.xyz = _Object2World[0].xyz * t0.xxx + t5.xyz;
    //Instruction 71683
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t5.xyz;
    //Instruction 71684
    //ADD
    vs_TEXCOORD1.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 71685
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 71686
    //GE
    tb0 = t8.x>=(-t8.x);
    //Instruction 71687
    //FRC
    t4 = fract(abs(t8.x));
    //Instruction 71688
    //MOVC
    t0.x = (tb0) ? t4 : (-t4);
    //Instruction 71689
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 71690
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 71691
    //LT
    tb4 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 71692
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71693
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 71694
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb4)) ? t8.xy : t1.xy;
    //Instruction 71695
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 71696
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
layout(location = 0) out lowp vec4 SV_Target0;
lowp vec4 t10_0;
bool tb0;
lowp float t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump float t16_14;
void main()
{
    //Instruction 71629
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 71630
    //MAD
    t10_1 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 71631
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 71632
    //LT
    tb0 = t10_1<0.0;
    //Instruction 71633
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 71634
    //MUL
    t16_3.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 71635
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_3.xy;
    //Instruction 71636
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_3.xy;
    //Instruction 71637
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 71638
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 71639
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 71640
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 71641
    //DP3
    t16_14 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 71642
    //MAX
    t16_14 = max(t16_14, 0.0);
    //Instruction 71643
    //MUL
    t16_2.xyz = vec3(t16_14) * t16_2.xyz;
    //Instruction 71644
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 71645
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 71646
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_22;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((tmpvar_23 * _BillboardTangent));
  worldTangent_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_26;
  tmpvar_26 = -(tmpvar_25);
  worldBinormal_2 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27.x = worldTangent_3.x;
  tmpvar_27.y = worldBinormal_2.x;
  tmpvar_27.z = worldNormal_4.x;
  lowp vec3 tmpvar_28;
  tmpvar_28.x = worldTangent_3.y;
  tmpvar_28.y = worldBinormal_2.y;
  tmpvar_28.z = worldNormal_4.y;
  lowp vec3 tmpvar_29;
  tmpvar_29.x = worldTangent_3.z;
  tmpvar_29.y = worldBinormal_2.z;
  tmpvar_29.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_27;
  xlv_TEXCOORD1 = tmpvar_28;
  xlv_TEXCOORD2 = tmpvar_29;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_11;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_12;
  x_12 = (tmpvar_9 - _Cutoff);
  if ((x_12 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_15;
  tmpvar_15 = (_LightMatrix0 * tmpvar_14).xyz;
  highp float tmpvar_16;
  tmpvar_16 = dot (tmpvar_15, tmpvar_15);
  lowp float tmpvar_17;
  tmpvar_17 = texture2D (_LightTexture0, vec2(tmpvar_16)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_13);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_13);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_13);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_17);
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_4.xyz = c_18.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec2 t1;
highp uint tu1;
highp vec4 t2;
highp vec3 t3;
lowp vec3 t10_4;
highp float t5;
bool tb5;
highp vec3 t6;
highp vec2 t10;
highp float t15;
highp float t17;
void main()
{
    //Instruction 72981
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 72982
    //MOVC
    t0.xyz = (bool(tb0)) ? _InstanceData.xyz : in_TEXCOORD1.xyz;
    //Instruction 72983
    //ADD
    t15 = in_TEXCOORD0.x + -0.500000;
    //Instruction 72984
    //MUL
    t1.x = in_COLOR0.w * 255.000000;
    //Instruction 72985
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 72986
    //MUL
    t15 = t15 * _TreeSize[int(tu1) + 0].x;
    //Instruction 72987
    //MUL
    t0.x = t0.x * t15;
    //Instruction 72988
    //MUL
    t2.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 72989
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu1) + 0].y + _TreeSize[int(tu1) + 0].z;
    //Instruction 72990
    //MAD
    t2.w = t0.x * t0.y + t2.y;
    //Instruction 72991
    //ADD
    t0.xyw = t2.xwz + in_POSITION0.xyz;
    //Instruction 72992
    //ADD
    t10.x = t0.z + _CameraXZAngle;
    //Instruction 72993
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu1) + 0].y + 0.500000;
    //Instruction 72994
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 72995
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu1) + 0].x;
    //Instruction 72996
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 72997
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 72998
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.wwww + t2;
    //Instruction 72999
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 73000
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 73001
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 73002
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 73003
    //MUL
    t3.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 73004
    //MUL
    t3.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 73005
    //MUL
    t3.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 73006
    //ADD
    t6.xyz = t2.xyz + t3.xyz;
    //Instruction 73007
    //MUL
    t2.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 73008
    //MUL
    t2.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 73009
    //MUL
    t2.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 73010
    //ADD
    t6.xyz = t6.xyz + t2.xyz;
    //Instruction 73011
    //DP3
    t2.x = dot(t6.xyz, t6.xyz);
    //Instruction 73012
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 73013
    //MUL
    t6.xyz = t6.xyz * t2.xxx;
    //Instruction 73014
    //MOV
    t2.z = t6.y;
    //Instruction 73015
    //MUL
    t3.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 73016
    //MAD
    t3.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t3.xyz;
    //Instruction 73017
    //MAD
    t3.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t3.xyz;
    //Instruction 73018
    //DP3
    t17 = dot(t3.xyz, t3.xyz);
    //Instruction 73019
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 73020
    //MUL
    t3.xyz = vec3(t17) * t3.yxz;
    //Instruction 73021
    //MUL
    t10_4.xyz = t6.xyz * t3.yxz;
    //Instruction 73022
    //MAD
    t10_4.xyz = t6.zxy * t3.xzy + (-t10_4.xyz);
    //Instruction 73023
    //MOV
    t2.y = (-t10_4.x);
    //Instruction 73024
    //MOV
    t2.x = t3.z;
    //Instruction 73025
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 73026
    //MOV
    t3.z = t6.x;
    //Instruction 73027
    //MOV
    t6.x = t3.y;
    //Instruction 73028
    //MOV
    t6.y = (-t10_4.y);
    //Instruction 73029
    //MOV
    t3.y = (-t10_4.z);
    //Instruction 73030
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 73031
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 73032
    //MUL
    t6.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 73033
    //MAD
    t6.xyz = _Object2World[0].xyz * t0.xxx + t6.xyz;
    //Instruction 73034
    //MAD
    t0.xyw = _Object2World[2].xyz * t0.www + t6.xyz;
    //Instruction 73035
    //ADD
    vs_TEXCOORD3.xyz = t0.xyw + _Object2World[3].xyz;
    //Instruction 73036
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 73037
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 73038
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 73039
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 73040
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu1) + 0].x + _TreeInfo[int(tu1) + 0].z;
    //Instruction 73041
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 73042
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 73043
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 73044
    //MAD
    t1.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 73045
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb5)) ? t10.xy : t1.xy;
    //Instruction 73046
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 73047
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
highp float t18;
mediump float t16_20;
void main()
{
    //Instruction 72953
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 72954
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 72955
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 72956
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 72957
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 72958
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 72959
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 72960
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 72961
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 72962
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 72963
    //SAMPLE
    t10_0.x = texture(_LightTexture0, vec2(t16_0)).w;
    //Instruction 72964
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 72965
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 72966
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 72967
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 72968
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 72969
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 72970
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 72971
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 72972
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 72973
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 72974
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 72975
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 72976
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 72977
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 72978
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 72979
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 72980
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_13;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_13 = _InstanceData;
  } else {
    tmpvar_13 = tmpvar_1;
  };
  highp vec3 tmpvar_14;
  tmpvar_14 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_13.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_14.xz;
  billboardPos_8.y = (tmpvar_14.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_13.y));
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_13.z);
  highp float tmpvar_15;
  tmpvar_15 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_16;
  tmpvar_16 = (fract(abs(tmpvar_15)) * tmpvar_11.x);
  highp float tmpvar_17;
  if ((tmpvar_15 >= 0.0)) {
    tmpvar_17 = tmpvar_16;
  } else {
    tmpvar_17 = -(tmpvar_16);
  };
  highp vec4 tmpvar_18;
  tmpvar_18 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_17))];
  if ((tmpvar_18.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_18.xy - (tmpvar_18.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_18.xy + (tmpvar_18.zw * _glesMultiTexCoord0.xy));
  };
  tmpvar_5 = _Color;
  highp vec4 v_19;
  v_19.x = _World2Object[0].x;
  v_19.y = _World2Object[1].x;
  v_19.z = _World2Object[2].x;
  v_19.w = _World2Object[3].x;
  highp vec4 v_20;
  v_20.x = _World2Object[0].y;
  v_20.y = _World2Object[1].y;
  v_20.z = _World2Object[2].y;
  v_20.w = _World2Object[3].y;
  highp vec4 v_21;
  v_21.x = _World2Object[0].z;
  v_21.y = _World2Object[1].z;
  v_21.z = _World2Object[2].z;
  v_21.w = _World2Object[3].z;
  highp vec3 tmpvar_22;
  tmpvar_22 = normalize(((
    (v_19.xyz * _BillboardNormal.x)
   + 
    (v_20.xyz * _BillboardNormal.y)
  ) + (v_21.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_22;
  highp mat3 tmpvar_23;
  tmpvar_23[0] = _Object2World[0].xyz;
  tmpvar_23[1] = _Object2World[1].xyz;
  tmpvar_23[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_24;
  tmpvar_24 = normalize((tmpvar_23 * _BillboardTangent));
  worldTangent_3 = tmpvar_24;
  lowp vec3 tmpvar_25;
  tmpvar_25 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_26;
  tmpvar_26 = -(tmpvar_25);
  worldBinormal_2 = tmpvar_26;
  lowp vec3 tmpvar_27;
  tmpvar_27.x = worldTangent_3.x;
  tmpvar_27.y = worldBinormal_2.x;
  tmpvar_27.z = worldNormal_4.x;
  lowp vec3 tmpvar_28;
  tmpvar_28.x = worldTangent_3.y;
  tmpvar_28.y = worldBinormal_2.y;
  tmpvar_28.z = worldNormal_4.y;
  lowp vec3 tmpvar_29;
  tmpvar_29.x = worldTangent_3.z;
  tmpvar_29.y = worldBinormal_2.z;
  tmpvar_29.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_27;
  xlv_TEXCOORD1 = tmpvar_28;
  xlv_TEXCOORD2 = tmpvar_29;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOO