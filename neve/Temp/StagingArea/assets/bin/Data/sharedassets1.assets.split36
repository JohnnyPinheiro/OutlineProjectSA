885
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48886
            //MUL
            t24 = t24 * t4.x;
            //Instruction 48887
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 48888
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48889
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 48890
        //ENDIF
        }
        //Instruction 48891
    //ENDIF
    }
    //Instruction 48892
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 48893
    //SQRT
    t22 = sqrt(t22);
    //Instruction 48894
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48895
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 48896
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 48897
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 48898
    //NE
    tb3 = t23!=0.0;
    //Instruction 48899
    //LOG
    t10 = log2(t23);
    //Instruction 48900
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 48901
    //EXP
    t10 = exp2(t10);
    //Instruction 48902
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 48903
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48904
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48905
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 48906
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 48907
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48908
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 48909
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48910
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 48911
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 48912
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 48913
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48914
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 48915
    //MUL
    t23 = t23 * t3.x;
    //Instruction 48916
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 48917
    //MOV
    t3.y = t2.y;
    //Instruction 48918
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 48919
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 48920
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 48921
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 48922
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 48923
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 48924
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 48925
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 48926
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 48927
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 48928
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 48929
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 48930
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 48931
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 48932
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 48933
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 48934
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 48935
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 48936
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 48937
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 48938
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 48939
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 48940
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 48941
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 48942
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 48943
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 48944
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 48945
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 48946
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 48947
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 48948
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 48949
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 48950
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 48951
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 48952
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 48953
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 48954
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48955
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 48956
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 48957
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48958
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 48746
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 48747
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48748
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48749
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 48750
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 48751
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48752
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48753
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48754
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48755
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48756
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48757
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48758
    //MOV
    t16_0.w = 1.0;
    //Instruction 48759
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 48760
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 48761
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 48762
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48763
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48764
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 48765
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48766
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 48355
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48356
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 48357
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 48358
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48359
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 48360
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 48361
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 48362
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 48363
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 48364
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 48365
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 48366
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 48367
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 48368
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 48369
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 48370
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 48371
    //FRC
    t2.x = fract(t2.x);
    //Instruction 48372
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 48373
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 48374
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 48375
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 48376
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 48377
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 48378
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 48379
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 48380
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 48381
    //IF
    if(tb23){
        //Instruction 48382
        //IF
        if(tb22){
            //Instruction 48383
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48384
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 48385
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 48386
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 48387
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 48388
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48389
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48390
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48391
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48392
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48393
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48394
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48395
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 48396
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48397
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 48398
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 48399
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 48400
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48401
            //FRC
            t0 = fract(t0);
            //Instruction 48402
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48403
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 48404
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48405
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48406
            //ADD
            t0 = t0 + t0;
            //Instruction 48407
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 48408
            //LT
            tb23 = t5.w<0.0;
            //Instruction 48409
            //MOV
            t5.y = (-t5.w);
            //Instruction 48410
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 48411
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 48412
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 48413
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 48414
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 48415
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 48416
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 48417
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48418
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48419
            //MUL
            t25 = t0.x * t25;
            //Instruction 48420
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 48421
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48422
            //MUL
            t23 = t23 * t24;
            //Instruction 48423
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 48424
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 48425
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48426
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48427
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48428
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 48429
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 48430
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48431
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 48432
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48433
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 48434
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 48435
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 48436
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 48437
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48438
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 48439
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 48440
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 48441
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48442
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48443
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 48444
        //ELSE
        } else {
            //Instruction 48445
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48446
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 48447
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48448
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 48449
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48450
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 48451
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 48452
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48453
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 48454
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 48455
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48456
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48457
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48458
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 48459
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48460
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48461
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 48462
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 48463
            //LT
            tb22 = t0.w<0.0;
            //Instruction 48464
            //MOV
            t0.y = (-t0.w);
            //Instruction 48465
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 48466
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 48467
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 48468
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 48469
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 48470
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 48471
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 48472
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48473
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48474
            //MUL
            t24 = t24 * t4.x;
            //Instruction 48475
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 48476
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 48477
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 48478
        //ENDIF
        }
        //Instruction 48479
    //ENDIF
    }
    //Instruction 48480
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 48481
    //SQRT
    t22 = sqrt(t22);
    //Instruction 48482
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48483
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 48484
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 48485
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 48486
    //NE
    tb3 = t23!=0.0;
    //Instruction 48487
    //LOG
    t10 = log2(t23);
    //Instruction 48488
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 48489
    //EXP
    t10 = exp2(t10);
    //Instruction 48490
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 48491
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48492
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48493
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 48494
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 48495
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48496
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 48497
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48498
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 48499
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 48500
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 48501
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48502
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 48503
    //MUL
    t23 = t23 * t3.x;
    //Instruction 48504
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 48505
    //MOV
    t3.y = t2.y;
    //Instruction 48506
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 48507
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 48508
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 48509
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 48510
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 48511
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 48512
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 48513
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 48514
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 48515
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 48516
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 48517
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 48518
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 48519
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 48520
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 48521
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 48522
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 48523
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 48524
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 48525
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 48526
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 48527
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 48528
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 48529
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 48530
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 48531
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 48532
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 48533
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 48534
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 48535
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 48536
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 48537
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 48538
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 48539
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 48540
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 48541
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 48542
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48543
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 48544
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 48545
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48546
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 48335
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 48336
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48337
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48338
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 48339
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 48340
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48341
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48342
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48343
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48344
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48345
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48346
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48347
    //MOV
    t16_0.w = 1.0;
    //Instruction 48348
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 48349
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 48350
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 48351
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48352
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48353
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48354
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 47731
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47732
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47733
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 47734
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47735
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 47736
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 47737
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 47738
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 47739
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47740
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 47741
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 47742
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47743
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47744
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47745
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 47746
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 47747
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 47748
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 47749
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 47750
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 47751
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 47752
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 47753
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 47754
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 47755
    //FRC
    t3.x = fract(t3.x);
    //Instruction 47756
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 47757
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 47758
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 47759
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 47760
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 47761
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 47762
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 47763
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 47764
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 47765
    //IF
    if(tb27){
        //Instruction 47766
        //IF
        if(tb25){
            //Instruction 47767
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47768
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 47769
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 47770
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 47771
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 47772
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 47773
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47774
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47775
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47776
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 47777
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 47778
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 47779
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47780
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 47781
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 47782
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 47783
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 47784
            //FRC
            t2 = fract(t2);
            //Instruction 47785
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 47786
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 47787
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 47788
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 47789
            //ADD
            t2 = t2 + t2;
            //Instruction 47790
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 47791
            //LT
            tb27 = t6.w<0.0;
            //Instruction 47792
            //MOV
            t6.y = (-t6.w);
            //Instruction 47793
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 47794
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 47795
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 47796
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 47797
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 47798
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 47799
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 47800
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47801
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47802
            //MUL
            t29 = t2.x * t29;
            //Instruction 47803
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 47804
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 47805
            //MUL
            t27 = t27 * t28;
            //Instruction 47806
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 47807
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47808
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47809
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 47810
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 47811
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 47812
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 47813
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 47814
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 47815
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 47816
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 47817
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 47818
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 47819
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 47820
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 47821
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 47822
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 47823
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 47824
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 47825
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 47826
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 47827
        //ELSE
        } else {
            //Instruction 47828
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 47829
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 47830
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47831
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 47832
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 47833
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 47834
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 47835
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 47836
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 47837
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 47838
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 47839
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 47840
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 47841
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 47842
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 47843
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 47844
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 47845
            //LT
            tb0 = t2.w<0.0;
            //Instruction 47846
            //MOV
            t2.y = (-t2.w);
            //Instruction 47847
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 47848
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 47849
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 47850
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 47851
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 47852
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 47853
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 47854
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 47855
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 47856
            //MUL
            t27 = t27 * t5.x;
            //Instruction 47857
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 47858
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 47859
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 47860
        //ENDIF
        }
        //Instruction 47861
    //ENDIF
    }
    //Instruction 47862
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 47863
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 47864
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 47865
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 47866
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 47867
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 47868
    //NE
    tb27 = t25!=0.0;
    //Instruction 47869
    //LOG
    t4.x = log2(t25);
    //Instruction 47870
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 47871
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 47872
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 47873
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 47874
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 47875
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 47876
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 47877
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 47878
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 47879
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 47880
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 47881
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 47882
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 47883
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 47884
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 47885
    //MUL
    t25 = t25 * t27;
    //Instruction 47886
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 47887
    //MOV
    t4.y = t3.y;
    //Instruction 47888
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 47889
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 47890
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 47891
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 47892
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 47893
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 47894
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 47895
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 47896
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 47897
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 47898
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 47899
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 47900
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 47901
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 47902
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 47903
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 47904
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 47905
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 47906
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 47907
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 47908
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 47909
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 47910
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 47911
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 47912
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 47913
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 47914
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 47915
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 47916
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 47917
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 47918
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 47919
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 47920
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 47921
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 47922
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 47923
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 47924
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 47925
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 47926
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 47927
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47928
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 47701
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 47702
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 47703
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 47704
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 47705
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 47706
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 47707
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47708
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 47709
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 47710
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 47711
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 47712
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 47713
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 47714
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 47715
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 47716
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47717
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47718
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47719
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 47720
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47721
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 47722
    //MOV
    t16_0.w = 1.0;
    //Instruction 47723
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 47724
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 47725
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 47726
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 47727
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 47728
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 47729
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47730
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 48988
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48989
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48990
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 48991
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48992
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 48993
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 48994
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 48995
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 48996
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48997
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48998
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 48999
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49000
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49001
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49002
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 49003
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49004
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 49005
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 49006
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 49007
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 49008
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 49009
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 49010
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 49011
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 49012
    //FRC
    t3.x = fract(t3.x);
    //Instruction 49013
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 49014
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 49015
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 49016
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 49017
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 49018
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 49019
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 49020
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 49021
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 49022
    //IF
    if(tb27){
        //Instruction 49023
        //IF
        if(tb25){
            //Instruction 49024
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49025
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49026
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49027
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 49028
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 49029
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49030
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49031
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49032
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49033
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49034
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 49035
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 49036
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49037
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49038
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 49039
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49040
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49041
            //FRC
            t2 = fract(t2);
            //Instruction 49042
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49043
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49044
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49045
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49046
            //ADD
            t2 = t2 + t2;
            //Instruction 49047
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49048
            //LT
            tb27 = t6.w<0.0;
            //Instruction 49049
            //MOV
            t6.y = (-t6.w);
            //Instruction 49050
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49051
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 49052
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 49053
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 49054
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 49055
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 49056
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 49057
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49058
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49059
            //MUL
            t29 = t2.x * t29;
            //Instruction 49060
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 49061
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49062
            //MUL
            t27 = t27 * t28;
            //Instruction 49063
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 49064
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49065
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49066
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49067
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49068
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49069
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49070
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49071
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49072
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49073
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49074
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49075
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49076
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 49077
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49078
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 49079
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 49080
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49081
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49082
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49083
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49084
        //ELSE
        } else {
            //Instruction 49085
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49086
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49087
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49088
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49089
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49090
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49091
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49092
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49093
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49094
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49095
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49096
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49097
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49098
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49099
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49100
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49101
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49102
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49103
            //MOV
            t2.y = (-t2.w);
            //Instruction 49104
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49105
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49106
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49107
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49108
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 49109
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 49110
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49111
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49112
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49113
            //MUL
            t27 = t27 * t5.x;
            //Instruction 49114
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 49115
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49116
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49117
        //ENDIF
        }
        //Instruction 49118
    //ENDIF
    }
    //Instruction 49119
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49120
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49121
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49122
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 49123
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 49124
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 49125
    //NE
    tb27 = t25!=0.0;
    //Instruction 49126
    //LOG
    t4.x = log2(t25);
    //Instruction 49127
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49128
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49129
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 49130
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49131
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49132
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49133
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49134
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49135
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49136
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49137
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49138
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49139
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 49140
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49141
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 49142
    //MUL
    t25 = t25 * t27;
    //Instruction 49143
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 49144
    //MOV
    t4.y = t3.y;
    //Instruction 49145
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 49146
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49147
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 49148
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49149
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 49150
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49151
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49152
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49153
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49154
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49155
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49156
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49157
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49158
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 49159
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 49160
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 49161
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49162
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49163
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 49164
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 49165
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 49166
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49167
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49168
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 49169
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 49170
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 49171
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 49172
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 49173
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 49174
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 49175
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 49176
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 49177
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 49178
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 49179
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 49180
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 49181
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49182
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49183
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 49184
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49185
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 48959
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 48960
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48961
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 48962
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 48963
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48964
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48965
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48966
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 48967
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 48968
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 48969
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 48970
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 48971
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 48972
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48973
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48974
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48975
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48976
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48977
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48978
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48979
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48980
    //MOV
    t16_0.w = 1.0;
    //Instruction 48981
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 48982
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 48983
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 48984
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48985
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48986
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48987
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 48581
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48582
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48583
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 48584
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48585
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 48586
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 48587
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 48588
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 48589
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48590
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 48591
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 48592
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48593
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48594
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48595
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 48596
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 48597
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 48598
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 48599
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 48600
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 48601
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 48602
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 48603
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 48604
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 48605
    //FRC
    t3.x = fract(t3.x);
    //Instruction 48606
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 48607
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 48608
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 48609
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 48610
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 48611
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 48612
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 48613
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 48614
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 48615
    //IF
    if(tb30){
        //Instruction 48616
        //IF
        if(tb28){
            //Instruction 48617
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48618
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 48619
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 48620
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 48621
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 48622
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 48623
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48624
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48625
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48626
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48627
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 48628
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 48629
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48630
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48631
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 48632
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48633
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48634
            //FRC
            t2 = fract(t2);
            //Instruction 48635
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48636
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 48637
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48638
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48639
            //ADD
            t2 = t2 + t2;
            //Instruction 48640
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 48641
            //LT
            tb30 = t6.w<0.0;
            //Instruction 48642
            //MOV
            t6.y = (-t6.w);
            //Instruction 48643
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 48644
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 48645
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 48646
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 48647
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 48648
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 48649
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 48650
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48651
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48652
            //MUL
            t32 = t2.x * t32;
            //Instruction 48653
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 48654
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48655
            //MUL
            t30 = t30 * t31;
            //Instruction 48656
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 48657
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 48658
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48659
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48660
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48661
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 48662
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 48663
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48664
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 48665
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48666
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 48667
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 48668
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 48669
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 48670
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48671
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 48672
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 48673
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 48674
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48675
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 48676
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 48677
        //ELSE
        } else {
            //Instruction 48678
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48679
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48680
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48681
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48682
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48683
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48684
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48685
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48686
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48687
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48688
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48689
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48690
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48691
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48692
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48693
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48694
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48695
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48696
            //MOV
            t2.y = (-t2.w);
            //Instruction 48697
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48698
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48699
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48700
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48701
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 48702
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 48703
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48704
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48705
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48706
            //MUL
            t30 = t30 * t5.x;
            //Instruction 48707
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 48708
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48709
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 48710
        //ENDIF
        }
        //Instruction 48711
    //ENDIF
    }
    //Instruction 48712
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48713
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48714
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48715
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 48716
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 48717
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 48718
    //NE
    tb30 = t28!=0.0;
    //Instruction 48719
    //LOG
    t4.x = log2(t28);
    //Instruction 48720
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48721
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48722
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 48723
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48724
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48725
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48726
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48727
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48728
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48729
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48730
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48731
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48732
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 48733
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48734
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 48735
    //MUL
    t28 = t28 * t30;
    //Instruction 48736
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 48737
    //MOV
    t4.y = t3.y;
    //Instruction 48738
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 48739
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 48740
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 48741
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48742
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 48743
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48744
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48745
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48746
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48747
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48748
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48749
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48750
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48751
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 48752
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 48753
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 48754
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48755
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48756
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 48757
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 48758
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 48759
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48760
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48761
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 48762
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 48763
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 48764
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48765
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 48766
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 48767
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 48768
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 48769
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 48770
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48771
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 48772
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 48773
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 48774
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 48775
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 48776
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 48777
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 48778
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 48779
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 48780
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 48781
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 48782
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 48783
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 48784
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 48785
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 48786
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 48787
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 48788
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 48789
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 48790
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 48791
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 48792
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 48793
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 48794
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 48795
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48796
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48797
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48798
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 48547
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 48548
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48549
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 48550
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 48551
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48552
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48553
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48554
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 48555
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 48556
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 48557
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 48558
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 48559
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 48560
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 48561
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48562
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48563
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48564
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48565
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 48566
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 48567
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 48568
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 48569
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 48570
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48571
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48572
    //MOV
    t0.w = 1.0;
    //Instruction 48573
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 48574
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 48575
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 48576
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 48577
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48578
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 48579
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48580
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 47962
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 47963
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 47964
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 47965
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 47966
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 47967
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 47968
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 47969
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 47970
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 47971
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 47972
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 47973
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 47974
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 47975
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 47976
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 47977
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 47978
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 47979
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 47980
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 47981
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 47982
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 47983
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 47984
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 47985
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 47986
    //FRC
    t3.x = fract(t3.x);
    //Instruction 47987
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 47988
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 47989
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 47990
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 47991
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 47992
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 47993
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 47994
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 47995
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 47996
    //IF
    if(tb30){
        //Instruction 47997
        //IF
        if(tb28){
            //Instruction 47998
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 47999
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 48000
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 48001
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 48002
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 48003
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 48004
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48005
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48006
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48007
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48008
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 48009
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 48010
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48011
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48012
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 48013
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48014
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48015
            //FRC
            t2 = fract(t2);
            //Instruction 48016
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48017
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 48018
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48019
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48020
            //ADD
            t2 = t2 + t2;
            //Instruction 48021
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 48022
            //LT
            tb30 = t6.w<0.0;
            //Instruction 48023
            //MOV
            t6.y = (-t6.w);
            //Instruction 48024
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 48025
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 48026
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 48027
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 48028
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 48029
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 48030
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 48031
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48032
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48033
            //MUL
            t32 = t2.x * t32;
            //Instruction 48034
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 48035
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48036
            //MUL
            t30 = t30 * t31;
            //Instruction 48037
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 48038
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 48039
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48040
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48041
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48042
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 48043
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 48044
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48045
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 48046
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48047
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 48048
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 48049
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 48050
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 48051
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48052
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 48053
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 48054
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 48055
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48056
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 48057
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 48058
        //ELSE
        } else {
            //Instruction 48059
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48060
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 48061
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48062
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 48063
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48064
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48065
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48066
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 48067
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 48068
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48069
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48070
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48071
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 48072
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48073
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48074
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 48075
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 48076
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48077
            //MOV
            t2.y = (-t2.w);
            //Instruction 48078
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48079
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48080
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 48081
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 48082
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 48083
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 48084
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48085
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48086
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48087
            //MUL
            t30 = t30 * t5.x;
            //Instruction 48088
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 48089
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 48090
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 48091
        //ENDIF
        }
        //Instruction 48092
    //ENDIF
    }
    //Instruction 48093
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 48094
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48095
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48096
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 48097
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 48098
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 48099
    //NE
    tb30 = t28!=0.0;
    //Instruction 48100
    //LOG
    t4.x = log2(t28);
    //Instruction 48101
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 48102
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 48103
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 48104
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48105
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48106
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 48107
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 48108
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48109
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 48110
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48111
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 48112
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 48113
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 48114
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48115
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 48116
    //MUL
    t28 = t28 * t30;
    //Instruction 48117
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 48118
    //MOV
    t4.y = t3.y;
    //Instruction 48119
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 48120
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 48121
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 48122
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 48123
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 48124
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 48125
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 48126
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 48127
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48128
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 48129
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 48130
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 48131
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 48132
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 48133
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 48134
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 48135
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 48136
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 48137
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 48138
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 48139
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 48140
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 48141
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 48142
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 48143
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 48144
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 48145
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48146
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 48147
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 48148
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 48149
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 48150
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 48151
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 48152
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 48153
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 48154
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 48155
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 48156
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 48157
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 48158
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 48159
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 48160
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 48161
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 48162
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 48163
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 48164
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 48165
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 48166
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 48167
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 48168
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 48169
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 48170
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 48171
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 48172
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 48173
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 48174
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 48175
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 48176
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48177
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48178
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48179
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 47929
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 47930
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 47931
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 47932
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 47933
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 47934
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 47935
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 47936
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 47937
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 47938
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 47939
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 47940
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 47941
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 47942
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 47943
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 47944
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 47945
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 47946
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 47947
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 47948
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 47949
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 47950
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 47951
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 47952
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 47953
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 47954
    //MOV
    t0.w = 1.0;
    //Instruction 47955
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 47956
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 47957
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 47958
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 47959
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 47960
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 47961
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_11.x)
   + 
    (v_97.xyz * tmpvar_11.y)
  ) + (v_98.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_99;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_4;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 49207
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49208
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 49209
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 49210
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49211
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 49212
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 49213
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 49214
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 49215
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 49216
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 49217
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 49218
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 49219
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 49220
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 49221
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 49222
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 49223
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 49224
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 49225
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 49226
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 49227
        //FRC
        t16.x = fract(t16.x);
        //Instruction 49228
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 49229
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 49230
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 49231
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 49232
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 49233
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 49234
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 49235
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 49236
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 49237
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 49238
        //IF
        if(tb31){
            //Instruction 49239
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 49240
            //FRC
            t4 = fract(t4);
            //Instruction 49241
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49242
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 49243
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 49244
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 49245
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 49246
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 49247
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49248
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49249
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49250
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49251
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49252
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49253
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49254
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 49255
            //SQRT
            t47 = sqrt(t47);
            //Instruction 49256
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 49257
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 49258
            //MUL
            t48 = t48 * t5.x;
            //Instruction 49259
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 49260
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 49261
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 49262
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 49263
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 49264
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 49265
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 49266
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 49267
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 49268
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 49269
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 49270
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 49271
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 49272
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 49273
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 49274
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 49275
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 49276
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 49277
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 49278
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 49279
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 49280
            //SQRT
            t48 = sqrt(t48);
            //Instruction 49281
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 49282
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 49283
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 49284
            //MUL
            t35 = t48 * t5.x;
            //Instruction 49285
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 49286
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 49287
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 49288
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 49289
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 49290
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 49291
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 49292
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49293
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 49294
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49295
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 49296
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49297
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 49298
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 49299
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 49300
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 49301
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 49302
            //LOG
            t46 = log2(t46);
            //Instruction 49303
            //MUL
            t31 = t46 * t16.y;
            //Instruction 49304
            //EXP
            t31 = exp2(t31);
            //Instruction 49305
            //MUL
            t46 = t5.y * t48;
            //Instruction 49306
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 49307
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 49308
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 49309
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 49310
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 49311
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 49312
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 49313
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 49314
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 49315
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 49316
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 49317
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 49318
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 49319
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 49320
            //MOV
            t10.z = t11.x;
            //Instruction 49321
            //MOV
            t10.w = t9.x;
            //Instruction 49322
            //MOV
            t12.z = t8.y;
            //Instruction 49323
            //MOV
            t12.w = t13.y;
            //Instruction 49324
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 49325
            //MOV
            t13.w = t12.y;
            //Instruction 49326
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 49327
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 49328
            //MOV
            t9.w = t10.y;
            //Instruction 49329
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 49330
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 49331
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 49332
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 49333
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 49334
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 49335
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 49336
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 49337
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 49338
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 49339
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 49340
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 49341
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 49342
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 49343
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49344
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 49345
        //ELSE
        } else {
            //Instruction 49346
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 49347
        //ENDIF
        }
        //Instruction 49348
    //ELSE
    } else {
        //Instruction 49349
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 49350
    //ENDIF
    }
    //Instruction 49351
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 49352
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 49353
    //IF
    if(tb17){
        //Instruction 49354
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 49355
        //IF
        if(tb17){
            //Instruction 49356
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49357
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49358
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49359
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 49360
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 49361
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49362
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49363
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49364
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49365
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49366
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49367
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 49368
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 49369
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49370
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 49371
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 49372
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 49373
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49374
            //FRC
            t0 = fract(t0);
            //Instruction 49375
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49376
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 49377
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49378
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49379
            //ADD
            t0 = t0 + t0;
            //Instruction 49380
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 49381
            //LT
            tb47 = t6.w<0.0;
            //Instruction 49382
            //MOV
            t6.y = (-t6.w);
            //Instruction 49383
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49384
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 49385
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 49386
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 49387
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 49388
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 49389
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 49390
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49391
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49392
            //MUL
            t49 = t0.x * t49;
            //Instruction 49393
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 49394
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49395
            //MUL
            t47 = t47 * t48;
            //Instruction 49396
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 49397
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49398
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49399
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49400
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49401
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49402
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 49403
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49404
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 49405
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49406
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 49407
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 49408
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 49409
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 49410
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49411
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 49412
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 49413
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49414
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49415
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49416
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49417
        //ELSE
        } else {
            //Instruction 49418
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49419
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49420
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49421
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49422
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49423
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 49424
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 49425
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49426
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49427
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 49428
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49429
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49430
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49431
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49432
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49433
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49434
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49435
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 49436
            //LT
            tb17 = t0.w<0.0;
            //Instruction 49437
            //MOV
            t0.y = (-t0.w);
            //Instruction 49438
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 49439
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 49440
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 49441
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 49442
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 49443
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 49444
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 49445
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49446
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49447
            //MUL
            t48 = t48 * t5.x;
            //Instruction 49448
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 49449
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49450
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49451
        //ENDIF
        }
        //Instruction 49452
    //ENDIF
    }
    //Instruction 49453
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 49454
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 49455
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49456
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 49457
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 49458
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 49459
    //NE
    tb48 = t47!=0.0;
    //Instruction 49460
    //LOG
    t4.x = log2(t47);
    //Instruction 49461
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49462
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49463
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 49464
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49465
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49466
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49467
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49468
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49469
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49470
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49471
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49472
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49473
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 49474
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49475
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 49476
    //MUL
    t47 = t47 * t48;
    //Instruction 49477
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 49478
    //MOV
    t4.y = t3.y;
    //Instruction 49479
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 49480
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 49481
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 49482
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 49483
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 49484
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 49485
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 49486
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 49487
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 49488
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 49489
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 49490
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 49491
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 49492
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49493
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49494
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 49495
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49496
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49497
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 49498
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 49499
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 49500
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 49501
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 49502
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 49503
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 49504
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 49505
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 49506
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 49507
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 49508
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 49509
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 49510
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 49511
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 49512
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 49513
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 49514
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 49515
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49516
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 49517
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 49518
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49519
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 49186
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 49187
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 49188
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49189
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 49190
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 49191
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 49192
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49193
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49194
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49195
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 49196
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49197
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49198
    //MOV
    t16_0.w = 1.0;
    //Instruction 49199
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 49200
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 49201
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 49202
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 49203
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 49204
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 49205
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49206
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_14 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_16 > 1.0) && (tmpvar_16 < 5.0))) {
    highp float tmpvar_19;
    tmpvar_19 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_20;
    isBestWind_20 = (tmpvar_16 == 4.0);
    bool bLeaf2_21;
    bLeaf2_21 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_22;
    vPos_22 = FinalPosition_14;
    highp vec3 vDirection_23;
    vDirection_23 = tmpvar_2;
    highp float tmpvar_24;
    if (bLeaf2_21) {
      tmpvar_24 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_24 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_25;
    if (bLeaf2_21) {
      tmpvar_25 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_25 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_26;
    highp vec4 tmpvar_27;
    tmpvar_27.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_27.x = (tmpvar_24 + tmpvar_19);
    highp vec4 tmpvar_28;
    tmpvar_28 = abs(((
      fract((tmpvar_27 + 0.5))
     * 2.0) - 1.0));
    vPos_26 = (FinalPosition_14 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_25 * (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_23 = tmpvar_2;
    vPos_22 = vPos_26;
    if (isBestWind_20) {
      highp vec3 tmpvar_29;
      tmpvar_29 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_30;
      if (bLeaf2_21) {
        tmpvar_30 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_30 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_31;
      if (bLeaf2_21) {
        tmpvar_31 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_31 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_32;
      if (bLeaf2_21) {
        tmpvar_32 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_33;
      if (bLeaf2_21) {
        tmpvar_33 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_34;
      if (bLeaf2_21) {
        tmpvar_34 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_34 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_35;
      if (bLeaf2_21) {
        tmpvar_35 = bool(1);
      } else {
        tmpvar_35 = bool(1);
      };
      highp float fTwitch_36;
      highp vec3 vAxis_37;
      highp float fOsc_38;
      highp vec3 vOriginPos_39;
      highp vec3 tmpvar_40;
      tmpvar_40 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_41;
      tmpvar_41 = ((tmpvar_40.x + tmpvar_40.y) + tmpvar_40.z);
      highp vec4 tmpvar_42;
      tmpvar_42.x = (tmpvar_30 + tmpvar_41);
      tmpvar_42.y = ((tmpvar_30 * 0.75) - tmpvar_41);
      tmpvar_42.z = ((tmpvar_30 * 0.01) + tmpvar_41);
      tmpvar_42.w = (tmpvar_30 + tmpvar_41);
      highp vec4 tmpvar_43;
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      tmpvar_43 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      vOriginPos_39 = vPos_26;
      highp float tmpvar_45;
      tmpvar_45 = sqrt(dot (vPos_26, vPos_26));
      highp float fAngle_46;
      fAngle_46 = ((_glesMultiTexCoord2.x * tmpvar_32) * (tmpvar_43.x + (tmpvar_43.y * tmpvar_43.y)));
      highp vec2 vSinCos_47;
      vSinCos_47.x = sin(fAngle_46);
      vSinCos_47.y = cos(fAngle_46);
      highp float tmpvar_48;
      tmpvar_48 = (1.0 - vSinCos_47.y);
      highp mat3 tmpvar_49;
      tmpvar_49[0].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.x) + vSinCos_47.y);
      tmpvar_49[0].y = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) + (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[0].z = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[1].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.y) - (vSinCos_47.x * tmpvar_29.z));
      tmpvar_49[1].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.y) + vSinCos_47.y);
      tmpvar_49[1].z = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].x = (((tmpvar_48 * tmpvar_29.x) * tmpvar_29.z) + (vSinCos_47.x * tmpvar_29.y));
      tmpvar_49[2].y = (((tmpvar_48 * tmpvar_29.y) * tmpvar_29.z) - (vSinCos_47.x * tmpvar_29.x));
      tmpvar_49[2].z = (((tmpvar_48 * tmpvar_29.z) * tmpvar_29.z) + vSinCos_47.y);
      highp vec3 tmpvar_50;
      tmpvar_50 = ((tmpvar_29.yzx * vRotatedWindVector_13.zxy) - (tmpvar_29.zxy * vRotatedWindVector_13.yzx));
      vAxis_37.xz = tmpvar_50.xz;
      highp float tmpvar_51;
      tmpvar_51 = clamp (dot (vRotatedWindVector_13, tmpvar_29), -1.0, 1.0);
      vAxis_37.y = (tmpvar_50.y + tmpvar_51);
      highp vec3 tmpvar_52;
      tmpvar_52 = normalize(vAxis_37);
      vAxis_37 = tmpvar_52;
      highp float tmpvar_53;
      tmpvar_53 = (1.570796 - (sign(tmpvar_51) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_51))) * (1.570796 + (abs(tmpvar_51) * (-0.2146018 + 
          (abs(tmpvar_51) * (0.08656672 + (abs(tmpvar_51) * -0.03102955)))
        ))))
      )));
      fOsc_38 = (tmpvar_43.y - (tmpvar_43.x * tmpvar_43.x));
      fTwitch_36 = 0.0;
      if (tmpvar_35) {
        highp float fTime_54;
        fTime_54 = (tmpvar_34.z + tmpvar_41);
        highp vec4 tmpvar_55;
        tmpvar_55.zw = vec2(0.0, 0.0);
        tmpvar_55.x = fTime_54;
        tmpvar_55.y = (0.87 * fTime_54);
        highp vec4 tmpvar_56;
        highp vec4 tmpvar_57;
        tmpvar_57 = abs(((
          fract((tmpvar_55 + 0.5))
         * 2.0) - 1.0));
        tmpvar_56 = (((
          (tmpvar_57 * tmpvar_57)
         * 
          (3.0 - (2.0 * tmpvar_57))
        ) - 0.5) * 2.0);
        fTwitch_36 = (tmpvar_34.x * pow (clamp (
          ((((tmpvar_56.x * tmpvar_56.y) * tmpvar_56.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_34.y));
      };
      highp float fAngle_58;
      fAngle_58 = (_glesMultiTexCoord2.x * ((
        (tmpvar_53 * tmpvar_33)
       + 
        (fOsc_38 * tmpvar_31)
      ) + fTwitch_36));
      highp vec2 vSinCos_59;
      vSinCos_59.x = sin(fAngle_58);
      vSinCos_59.y = cos(fAngle_58);
      highp float tmpvar_60;
      tmpvar_60 = (1.0 - vSinCos_59.y);
      highp mat3 tmpvar_61;
      tmpvar_61[0].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.x) + vSinCos_59.y);
      tmpvar_61[0].y = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) + (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[0].z = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[1].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.y) - (vSinCos_59.x * tmpvar_52.z));
      tmpvar_61[1].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.y) + vSinCos_59.y);
      tmpvar_61[1].z = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].x = (((tmpvar_60 * tmpvar_52.x) * tmpvar_52.z) + (vSinCos_59.x * tmpvar_52.y));
      tmpvar_61[2].y = (((tmpvar_60 * tmpvar_52.y) * tmpvar_52.z) - (vSinCos_59.x * tmpvar_52.x));
      tmpvar_61[2].z = (((tmpvar_60 * tmpvar_52.z) * tmpvar_52.z) + vSinCos_59.y);
      highp mat3 tmpvar_62;
      tmpvar_62 = (tmpvar_49 * tmpvar_61);
      vOriginPos_39 = (normalize((tmpvar_62 * vPos_26)) * tmpvar_45);
      vDirection_23 = (tmpvar_62 * _glesNormal);
      vPos_22 = vOriginPos_39;
    };
    tmpvar_11 = vDirection_23;
    FinalPosition_14 = vPos_22;
  };
  FinalPosition_14 = (FinalPosition_14 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_63;
    vPos_63 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_64;
      vPos_64 = FinalPosition_14;
      highp float fTime_65;
      highp float fAdherenceScale_66;
      highp vec3 vWindVector_67;
      vWindVector_67 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_65 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_68;
      highp float fOscillation_69;
      fOscillation_69 = 1.0;
      highp float fAmount_70;
      highp float fTarget_71;
      highp vec4 tmpvar_72;
      tmpvar_72.x = (fTime_65 + _glesMultiTexCoord0.w);
      tmpvar_72.y = ((fTime_65 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_72.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_65 + _glesMultiTexCoord0.w));
      tmpvar_72.w = ((fTime_65 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_73;
      tmpvar_73 = abs(((
        fract((tmpvar_72 + 0.5))
       * 2.0) - 1.0));
      vOscillations_68 = (((
        (tmpvar_73 * tmpvar_73)
       * 
        (3.0 - (2.0 * tmpvar_73))
      ) - 0.5) * 2.0);
      highp float tmpvar_74;
      tmpvar_74 = (vOscillations_68.y * vOscillations_68.z);
      fTarget_71 = 1.0;
      fAmount_70 = tmpvar_74;
      if ((tmpvar_74 < 0.0)) {
        fTarget_71 = -1.0;
        fAmount_70 = -(tmpvar_74);
      };
      fOscillation_69 = (((
        mix (mix (tmpvar_74, fTarget_71, fAmount_70), fTarget_71, fAmount_70)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_68.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_69 = (fOscillation_69 * (1.0 + (vOscillations_68.w * _ST_WindBranchWhip.x)));
      vPos_64 = (FinalPosition_14 + ((vWindVector_67 * fOscillation_69) * _ST_WindBranch.y));
      highp vec4 tmpvar_75;
      tmpvar_75.zw = vec2(0.0, 0.0);
      tmpvar_75.x = ((fTime_65 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_75.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_76;
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      tmpvar_76 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      fAdherenceScale_66 = (1.0 - ((tmpvar_76.x * tmpvar_76.y) * (
        (tmpvar_76.x * tmpvar_76.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_66 = (fAdherenceScale_66 + ((vOscillations_68.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_64 = (vPos_64 + ((
        ((vRotatedBranchAnchor_12 - vPos_64) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_66) * _glesMultiTexCoord0.z));
      vPos_63 = vPos_64;
    } else {
      highp vec3 vPos_78;
      vPos_78 = vPos_63;
      highp float fTime_79;
      highp vec3 vWindVector_80;
      vWindVector_80 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_79 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_81;
      highp float fOscillation_82;
      fOscillation_82 = 1.0;
      highp float fAmount_83;
      highp float fTarget_84;
      highp vec4 tmpvar_85;
      tmpvar_85.w = 0.0;
      tmpvar_85.x = (fTime_79 + _glesMultiTexCoord0.w);
      tmpvar_85.y = ((fTime_79 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_85.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_79 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_86;
      tmpvar_86 = abs(((
        fract((tmpvar_85 + 0.5))
       * 2.0) - 1.0));
      vOscillations_81 = (((
        (tmpvar_86 * tmpvar_86)
       * 
        (3.0 - (2.0 * tmpvar_86))
      ) - 0.5) * 2.0);
      highp float tmpvar_87;
      tmpvar_87 = (vOscillations_81.y * vOscillations_81.z);
      fTarget_84 = 1.0;
      fAmount_83 = tmpvar_87;
      if ((tmpvar_87 < 0.0)) {
        fTarget_84 = -1.0;
        fAmount_83 = -(tmpvar_87);
      };
      fOscillation_82 = (((
        mix (mix (tmpvar_87, fTarget_84, fAmount_83), fTarget_84, fAmount_83)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_81.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_78 = (vPos_63 + ((vWindVector_80 * fOscillation_82) * _ST_WindBranch.y));
      vPos_63 = vPos_78;
    };
    FinalPosition_14 = vPos_63;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_88;
    vPos_88 = FinalPosition_14;
    highp float fMoveAmount_89;
    highp float fAdjust_90;
    highp float fLength_91;
    fLength_91 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_92;
    tmpvar_92 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_90 = tmpvar_92;
    if ((tmpvar_92 != 0.0)) {
      fAdjust_90 = pow (tmpvar_92, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_93;
    tmpvar_93.zw = vec2(0.0, 0.0);
    tmpvar_93.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_93.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_94;
    highp vec4 tmpvar_95;
    tmpvar_95 = abs(((
      fract((tmpvar_93 + 0.5))
     * 2.0) - 1.0));
    tmpvar_94 = (((
      (tmpvar_95 * tmpvar_95)
     * 
      (3.0 - (2.0 * tmpvar_95))
    ) - 0.5) * 2.0);
    fMoveAmount_89 = ((_ST_WindGlobal.y * (tmpvar_94.x + 
      (tmpvar_94.y * tmpvar_94.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_89 = (fMoveAmount_89 * fAdjust_90);
    vPos_88.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_89));
    vPos_88 = (normalize(vPos_88) * fLength_91);
    FinalPosition_14 = vPos_88;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_96;
  v_96.x = _World2Object[0].x;
  v_96.y = _World2Object[1].x;
  v_96.z = _World2Object[2].x;
  v_96.w = _World2Object[3].x;
  highp vec4 v_97;
  v_97.x = _World2Object[0].y;
  v_97.y = _World2Object[1].y;
  v_97.z = _World2Object[2].y;
  v_97.w = _World2Object[3].y;
  highp vec4 v_98;
  v_98.x = _World2Object[0].z;
  v_98.y = _World2Object[1].z;
  v_98.z = _World2Object[2].z;
  v_98.w = _World2Object[3].z;
  highp vec3 tmpvar_99;
  tmpvar_99 = normalize(((
    (v_96.xyz * tmpvar_11.x)
   + 
    (v_97.xyz * tmpvar_11.y)
  ) + (v_98.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_99;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_100;
  tmpvar_100.w = 1.0;
  tmpvar_100.xyz = worldNormal_4;
  mediump vec4 normal_101;
  normal_101 = tmpvar_100;
  mediump vec3 x2_102;
  mediump vec4 tmpvar_103;
  tmpvar_103 = (normal_101.xyzz * normal_101.yzzx);
  x2_102.x = dot (unity_SHBr, tmpvar_103);
  x2_102.y = dot (unity_SHBg, tmpvar_103);
  x2_102.z = dot (unity_SHBb, tmpvar_103);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_102 + (unity_SHC.xyz * (
    (normal_101.x * normal_101.x)
   - 
    (normal_101.y * normal_101.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 48819
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48820
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 48821
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 48822
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48823
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 48824
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 48825
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 48826
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 48827
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 48828
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 48829
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 48830
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 48831
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 48832
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 48833
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 48834
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 48835
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 48836
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 48837
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 48838
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 48839
        //FRC
        t16.x = fract(t16.x);
        //Instruction 48840
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 48841
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 48842
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 48843
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 48844
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 48845
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 48846
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 48847
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 48848
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 48849
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 48850
        //IF
        if(tb31){
            //Instruction 48851
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 48852
            //FRC
            t4 = fract(t4);
            //Instruction 48853
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48854
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 48855
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 48856
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 48857
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 48858
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 48859
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 48860
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 48861
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48862
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 48863
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48864
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 48865
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 48866
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 48867
            //SQRT
            t47 = sqrt(t47);
            //Instruction 48868
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 48869
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 48870
            //MUL
            t48 = t48 * t5.x;
            //Instruction 48871
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 48872
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 48873
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 48874
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 48875
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 48876
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 48877
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 48878
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 48879
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 48880
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 48881
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 48882
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 48883
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 48884
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 48885
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 48886
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 48887
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 48888
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 48889
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 48890
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 48891
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 48892
            //SQRT
            t48 = sqrt(t48);
            //Instruction 48893
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 48894
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 48895
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 48896
            //MUL
            t35 = t48 * t5.x;
            //Instruction 48897
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 48898
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 48899
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 48900
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 48901
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 48902
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 48903
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 48904
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 48905
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 48906
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48907
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 48908
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48909
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 48910
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 48911
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 48912
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 48913
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 48914
            //LOG
            t46 = log2(t46);
            //Instruction 48915
            //MUL
            t31 = t46 * t16.y;
            //Instruction 48916
            //EXP
            t31 = exp2(t31);
            //Instruction 48917
            //MUL
            t46 = t5.y * t48;
            //Instruction 48918
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 48919
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 48920
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 48921
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 48922
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 48923
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 48924
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 48925
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 48926
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 48927
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 48928
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 48929
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 48930
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 48931
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 48932
            //MOV
            t10.z = t11.x;
            //Instruction 48933
            //MOV
            t10.w = t9.x;
            //Instruction 48934
            //MOV
            t12.z = t8.y;
            //Instruction 48935
            //MOV
            t12.w = t13.y;
            //Instruction 48936
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 48937
            //MOV
            t13.w = t12.y;
            //Instruction 48938
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 48939
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 48940
            //MOV
            t9.w = t10.y;
            //Instruction 48941
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 48942
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 48943
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 48944
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 48945
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 48946
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 48947
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 48948
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 48949
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 48950
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 48951
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 48952
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 48953
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 48954
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 48955
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 48956
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 48957
        //ELSE
        } else {
            //Instruction 48958
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 48959
        //ENDIF
        }
        //Instruction 48960
    //ELSE
    } else {
        //Instruction 48961
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 48962
    //ENDIF
    }
    //Instruction 48963
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 48964
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 48965
    //IF
    if(tb17){
        //Instruction 48966
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 48967
        //IF
        if(tb17){
            //Instruction 48968
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48969
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 48970
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 48971
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 48972
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 48973
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 48974
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48975
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48976
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48977
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48978
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 48979
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 48980
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 48981
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48982
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 48983
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 48984
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 48985
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48986
            //FRC
            t0 = fract(t0);
            //Instruction 48987
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48988
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 48989
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48990
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48991
            //ADD
            t0 = t0 + t0;
            //Instruction 48992
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 48993
            //LT
            tb47 = t6.w<0.0;
            //Instruction 48994
            //MOV
            t6.y = (-t6.w);
            //Instruction 48995
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 48996
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 48997
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 48998
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 48999
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 49000
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 49001
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 49002
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49003
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49004
            //MUL
            t49 = t0.x * t49;
            //Instruction 49005
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 49006
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49007
            //MUL
            t47 = t47 * t48;
            //Instruction 49008
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 49009
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49010
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49011
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49012
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49013
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49014
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 49015
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49016
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 49017
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49018
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 49019
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 49020
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 49021
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 49022
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49023
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 49024
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 49025
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49026
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49027
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49028
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49029
        //ELSE
        } else {
            //Instruction 49030
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49031
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49032
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49033
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49034
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49035
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 49036
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 49037
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49038
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49039
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 49040
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49041
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49042
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49043
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49044
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49045
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49046
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49047
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 49048
            //LT
            tb17 = t0.w<0.0;
            //Instruction 49049
            //MOV
            t0.y = (-t0.w);
            //Instruction 49050
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 49051
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 49052
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 49053
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 49054
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 49055
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 49056
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 49057
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49058
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49059
            //MUL
            t48 = t48 * t5.x;
            //Instruction 49060
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 49061
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 49062
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49063
        //ENDIF
        }
        //Instruction 49064
    //ENDIF
    }
    //Instruction 49065
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 49066
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 49067
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49068
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 49069
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 49070
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 49071
    //NE
    tb48 = t47!=0.0;
    //Instruction 49072
    //LOG
    t4.x = log2(t47);
    //Instruction 49073
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49074
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49075
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 49076
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49077
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49078
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49079
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49080
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49081
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49082
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49083
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49084
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49085
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 49086
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49087
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 49088
    //MUL
    t47 = t47 * t48;
    //Instruction 49089
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 49090
    //MOV
    t4.y = t3.y;
    //Instruction 49091
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 49092
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 49093
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 49094
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 49095
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 49096
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 49097
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 49098
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 49099
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 49100
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 49101
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 49102
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 49103
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 49104
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49105
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49106
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 49107
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49108
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49109
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 49110
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 49111
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 49112
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 49113
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 49114
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 49115
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 49116
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 49117
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 49118
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 49119
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 49120
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 49121
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 49122
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 49123
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 49124
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 49125
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 49126
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 49127
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49128
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 49129
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 49130
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49131
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 48799
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 48800
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48801
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48802
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 48803
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 48804
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48805
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48806
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48807
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48808
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48809
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48810
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48811
    //MOV
    t16_0.w = 1.0;
    //Instruction 48812
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 48813
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 48814
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 48815
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48816
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48817
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48818
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 48210
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48211
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48212
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 48213
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48214
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 48215
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 48216
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 48217
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 48218
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48219
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48220
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 48221
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48222
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48223
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48224
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 48225
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 48226
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 48227
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 48228
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 48229
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 48230
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 48231
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 48232
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 48233
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 48234
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 48235
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 48236
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 48237
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 48238
        //FRC
        t32.x = fract(t32.x);
        //Instruction 48239
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 48240
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 48241
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 48242
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 48243
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 48244
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 48245
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 48246
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 48247
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 48248
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 48249
        //IF
        if(tb48){
            //Instruction 48250
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 48251
            //FRC
            t5 = fract(t5);
            //Instruction 48252
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48253
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 48254
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 48255
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 48256
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 48257
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 48258
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 48259
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 48260
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48261
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 48262
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48263
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 48264
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 48265
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 48266
            //SQRT
            t49 = sqrt(t49);
            //Instruction 48267
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 48268
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 48269
            //MUL
            t51 = t51 * t52;
            //Instruction 48270
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 48271
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 48272
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 48273
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 48274
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 48275
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 48276
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 48277
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 48278
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 48279
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 48280
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 48281
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 48282
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 48283
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 48284
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 48285
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 48286
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 48287
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 48288
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 48289
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 48290
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 48291
            //SQRT
            t51 = sqrt(t51);
            //Instruction 48292
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 48293
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 48294
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 48295
            //MUL
            t6.x = t51 * t52;
            //Instruction 48296
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 48297
            //LT
            tb19 = t19<(-t19);
            //Instruction 48298
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 48299
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 48300
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 48301
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 48302
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 48303
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 48304
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 48305
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48306
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 48307
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48308
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 48309
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 48310
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 48311
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 48312
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 48313
            //LOG
            t48 = log2(t48);
            //Instruction 48314
            //MUL
            t48 = t48 * t7.y;
            //Instruction 48315
            //EXP
            t48 = exp2(t48);
            //Instruction 48316
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 48317
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 48318
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 48319
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 48320
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 48321
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 48322
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 48323
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 48324
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 48325
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 48326
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 48327
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 48328
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 48329
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 48330
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 48331
            //MOV
            t11.z = t12.x;
            //Instruction 48332
            //MOV
            t11.w = t10.x;
            //Instruction 48333
            //MOV
            t13.z = t9.y;
            //Instruction 48334
            //MOV
            t13.w = t14.y;
            //Instruction 48335
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 48336
            //MOV
            t14.w = t13.y;
            //Instruction 48337
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 48338
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 48339
            //MOV
            t10.w = t11.y;
            //Instruction 48340
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 48341
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 48342
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 48343
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 48344
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 48345
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 48346
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 48347
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 48348
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 48349
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 48350
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 48351
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 48352
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 48353
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 48354
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 48355
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 48356
        //ELSE
        } else {
            //Instruction 48357
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 48358
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 48359
        //ENDIF
        }
        //Instruction 48360
    //ELSE
    } else {
        //Instruction 48361
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 48362
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 48363
    //ENDIF
    }
    //Instruction 48364
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 48365
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 48366
    //IF
    if(tb49){
        //Instruction 48367
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 48368
        //IF
        if(tb49){
            //Instruction 48369
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48370
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 48371
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 48372
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 48373
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 48374
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 48375
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48376
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 48377
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48378
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 48379
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 48380
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 48381
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48382
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48383
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 48384
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48385
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48386
            //FRC
            t2 = fract(t2);
            //Instruction 48387
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48388
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 48389
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48390
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48391
            //ADD
            t2 = t2 + t2;
            //Instruction 48392
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 48393
            //LT
            tb51 = t7.w<0.0;
            //Instruction 48394
            //MOV
            t7.y = (-t7.w);
            //Instruction 48395
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 48396
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 48397
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 48398
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 48399
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 48400
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 48401
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 48402
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48403
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48404
            //MUL
            t53 = t2.x * t53;
            //Instruction 48405
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 48406
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48407
            //MUL
            t51 = t51 * t52;
            //Instruction 48408
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 48409
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 48410
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48411
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48412
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48413
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 48414
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 48415
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48416
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 48417
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48418
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 48419
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 48420
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 48421
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 48422
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48423
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 48424
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 48425
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 48426
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48427
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 48428
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 48429
        //ELSE
        } else {
            //Instruction 48430
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48431
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48432
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48433
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48434
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48435
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48436
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48437
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 48438
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 48439
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48440
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 48441
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48442
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 48443
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48444
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48445
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 48446
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 48447
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48448
            //MOV
            t2.y = (-t2.w);
            //Instruction 48449
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48450
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48451
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 48452
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 48453
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 48454
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 48455
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48456
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48457
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48458
            //MUL
            t51 = t51 * t6.x;
            //Instruction 48459
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 48460
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 48461
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 48462
        //ENDIF
        }
        //Instruction 48463
    //ENDIF
    }
    //Instruction 48464
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 48465
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48466
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48467
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 48468
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 48469
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 48470
    //NE
    tb51 = t49!=0.0;
    //Instruction 48471
    //LOG
    t52 = log2(t49);
    //Instruction 48472
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 48473
    //EXP
    t52 = exp2(t52);
    //Instruction 48474
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 48475
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48476
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48477
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 48478
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 48479
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48480
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 48481
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48482
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 48483
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 48484
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 48485
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48486
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 48487
    //MUL
    t49 = t49 * t51;
    //Instruction 48488
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 48489
    //MOV
    t5.y = t4.y;
    //Instruction 48490
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 48491
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 48492
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 48493
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 48494
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 48495
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 48496
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 48497
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 48498
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48499
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 48500
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 48501
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 48502
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 48503
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 48504
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 48505
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 48506
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 48507
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 48508
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 48509
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 48510
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 48511
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 48512
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 48513
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 48514
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 48515
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 48516
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 48517
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 48518
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 48519
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 48520
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 48521
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 48522
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 48523
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 48524
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 48525
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 48526
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 48527
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48528
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 48529
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48530
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 48180
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 48181
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48182
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 48183
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 48184
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48185
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48186
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48187
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 48188
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 48189
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 48190
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 48191
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 48192
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 48193
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48194
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48195
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48196
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48197
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48198
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48199
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48200
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48201
    //MOV
    t16_0.w = 1.0;
    //Instruction 48202
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 48203
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 48204
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 48205
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48206
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48207
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 48208
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48209
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_17 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_21;
    tmpvar_21 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_22;
    isBestWind_22 = (tmpvar_18 == 4.0);
    bool bLeaf2_23;
    bLeaf2_23 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_17;
    highp vec3 vDirection_25;
    vDirection_25 = tmpvar_2;
    highp float tmpvar_26;
    if (bLeaf2_23) {
      tmpvar_26 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_26 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_27;
    if (bLeaf2_23) {
      tmpvar_27 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_28;
    highp vec4 tmpvar_29;
    tmpvar_29.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_29.x = (tmpvar_26 + tmpvar_21);
    highp vec4 tmpvar_30;
    tmpvar_30 = abs(((
      fract((tmpvar_29 + 0.5))
     * 2.0) - 1.0));
    vPos_28 = (FinalPosition_17 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_27 * (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_25 = tmpvar_2;
    vPos_24 = vPos_28;
    if (isBestWind_22) {
      highp vec3 tmpvar_31;
      tmpvar_31 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_32;
      if (bLeaf2_23) {
        tmpvar_32 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_32 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_33;
      if (bLeaf2_23) {
        tmpvar_33 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_34;
      if (bLeaf2_23) {
        tmpvar_34 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_35;
      if (bLeaf2_23) {
        tmpvar_35 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_36;
      if (bLeaf2_23) {
        tmpvar_36 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_36 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_37;
      if (bLeaf2_23) {
        tmpvar_37 = bool(1);
      } else {
        tmpvar_37 = bool(1);
      };
      highp float fTwitch_38;
      highp vec3 vAxis_39;
      highp float fOsc_40;
      highp vec3 vOriginPos_41;
      highp vec3 tmpvar_42;
      tmpvar_42 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_43;
      tmpvar_43 = ((tmpvar_42.x + tmpvar_42.y) + tmpvar_42.z);
      highp vec4 tmpvar_44;
      tmpvar_44.x = (tmpvar_32 + tmpvar_43);
      tmpvar_44.y = ((tmpvar_32 * 0.75) - tmpvar_43);
      tmpvar_44.z = ((tmpvar_32 * 0.01) + tmpvar_43);
      tmpvar_44.w = (tmpvar_32 + tmpvar_43);
      highp vec4 tmpvar_45;
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      tmpvar_45 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      vOriginPos_41 = vPos_28;
      highp float tmpvar_47;
      tmpvar_47 = sqrt(dot (vPos_28, vPos_28));
      highp float fAngle_48;
      fAngle_48 = ((_glesMultiTexCoord2.x * tmpvar_34) * (tmpvar_45.x + (tmpvar_45.y * tmpvar_45.y)));
      highp vec2 vSinCos_49;
      vSinCos_49.x = sin(fAngle_48);
      vSinCos_49.y = cos(fAngle_48);
      highp float tmpvar_50;
      tmpvar_50 = (1.0 - vSinCos_49.y);
      highp mat3 tmpvar_51;
      tmpvar_51[0].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.x) + vSinCos_49.y);
      tmpvar_51[0].y = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) + (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[0].z = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[1].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.y) - (vSinCos_49.x * tmpvar_31.z));
      tmpvar_51[1].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.y) + vSinCos_49.y);
      tmpvar_51[1].z = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].x = (((tmpvar_50 * tmpvar_31.x) * tmpvar_31.z) + (vSinCos_49.x * tmpvar_31.y));
      tmpvar_51[2].y = (((tmpvar_50 * tmpvar_31.y) * tmpvar_31.z) - (vSinCos_49.x * tmpvar_31.x));
      tmpvar_51[2].z = (((tmpvar_50 * tmpvar_31.z) * tmpvar_31.z) + vSinCos_49.y);
      highp vec3 tmpvar_52;
      tmpvar_52 = ((tmpvar_31.yzx * vRotatedWindVector_16.zxy) - (tmpvar_31.zxy * vRotatedWindVector_16.yzx));
      vAxis_39.xz = tmpvar_52.xz;
      highp float tmpvar_53;
      tmpvar_53 = clamp (dot (vRotatedWindVector_16, tmpvar_31), -1.0, 1.0);
      vAxis_39.y = (tmpvar_52.y + tmpvar_53);
      highp vec3 tmpvar_54;
      tmpvar_54 = normalize(vAxis_39);
      vAxis_39 = tmpvar_54;
      highp float tmpvar_55;
      tmpvar_55 = (1.570796 - (sign(tmpvar_53) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_53))) * (1.570796 + (abs(tmpvar_53) * (-0.2146018 + 
          (abs(tmpvar_53) * (0.08656672 + (abs(tmpvar_53) * -0.03102955)))
        ))))
      )));
      fOsc_40 = (tmpvar_45.y - (tmpvar_45.x * tmpvar_45.x));
      fTwitch_38 = 0.0;
      if (tmpvar_37) {
        highp float fTime_56;
        fTime_56 = (tmpvar_36.z + tmpvar_43);
        highp vec4 tmpvar_57;
        tmpvar_57.zw = vec2(0.0, 0.0);
        tmpvar_57.x = fTime_56;
        tmpvar_57.y = (0.87 * fTime_56);
        highp vec4 tmpvar_58;
        highp vec4 tmpvar_59;
        tmpvar_59 = abs(((
          fract((tmpvar_57 + 0.5))
         * 2.0) - 1.0));
        tmpvar_58 = (((
          (tmpvar_59 * tmpvar_59)
         * 
          (3.0 - (2.0 * tmpvar_59))
        ) - 0.5) * 2.0);
        fTwitch_38 = (tmpvar_36.x * pow (clamp (
          ((((tmpvar_58.x * tmpvar_58.y) * tmpvar_58.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_36.y));
      };
      highp float fAngle_60;
      fAngle_60 = (_glesMultiTexCoord2.x * ((
        (tmpvar_55 * tmpvar_35)
       + 
        (fOsc_40 * tmpvar_33)
      ) + fTwitch_38));
      highp vec2 vSinCos_61;
      vSinCos_61.x = sin(fAngle_60);
      vSinCos_61.y = cos(fAngle_60);
      highp float tmpvar_62;
      tmpvar_62 = (1.0 - vSinCos_61.y);
      highp mat3 tmpvar_63;
      tmpvar_63[0].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.x) + vSinCos_61.y);
      tmpvar_63[0].y = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) + (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[0].z = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[1].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.y) - (vSinCos_61.x * tmpvar_54.z));
      tmpvar_63[1].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.y) + vSinCos_61.y);
      tmpvar_63[1].z = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].x = (((tmpvar_62 * tmpvar_54.x) * tmpvar_54.z) + (vSinCos_61.x * tmpvar_54.y));
      tmpvar_63[2].y = (((tmpvar_62 * tmpvar_54.y) * tmpvar_54.z) - (vSinCos_61.x * tmpvar_54.x));
      tmpvar_63[2].z = (((tmpvar_62 * tmpvar_54.z) * tmpvar_54.z) + vSinCos_61.y);
      highp mat3 tmpvar_64;
      tmpvar_64 = (tmpvar_51 * tmpvar_63);
      vOriginPos_41 = (normalize((tmpvar_64 * vPos_28)) * tmpvar_47);
      vDirection_25 = (tmpvar_64 * _glesNormal);
      vPos_24 = vOriginPos_41;
    };
    tmpvar_14 = vDirection_25;
    FinalPosition_17 = vPos_24;
  };
  FinalPosition_17 = (FinalPosition_17 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_65;
    vPos_65 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_66;
      vPos_66 = FinalPosition_17;
      highp float fTime_67;
      highp float fAdherenceScale_68;
      highp vec3 vWindVector_69;
      vWindVector_69 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_67 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_70;
      highp float fOscillation_71;
      fOscillation_71 = 1.0;
      highp float fAmount_72;
      highp float fTarget_73;
      highp vec4 tmpvar_74;
      tmpvar_74.x = (fTime_67 + _glesMultiTexCoord0.w);
      tmpvar_74.y = ((fTime_67 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_74.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_67 + _glesMultiTexCoord0.w));
      tmpvar_74.w = ((fTime_67 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_75;
      tmpvar_75 = abs(((
        fract((tmpvar_74 + 0.5))
       * 2.0) - 1.0));
      vOscillations_70 = (((
        (tmpvar_75 * tmpvar_75)
       * 
        (3.0 - (2.0 * tmpvar_75))
      ) - 0.5) * 2.0);
      highp float tmpvar_76;
      tmpvar_76 = (vOscillations_70.y * vOscillations_70.z);
      fTarget_73 = 1.0;
      fAmount_72 = tmpvar_76;
      if ((tmpvar_76 < 0.0)) {
        fTarget_73 = -1.0;
        fAmount_72 = -(tmpvar_76);
      };
      fOscillation_71 = (((
        mix (mix (tmpvar_76, fTarget_73, fAmount_72), fTarget_73, fAmount_72)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_70.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_71 = (fOscillation_71 * (1.0 + (vOscillations_70.w * _ST_WindBranchWhip.x)));
      vPos_66 = (FinalPosition_17 + ((vWindVector_69 * fOscillation_71) * _ST_WindBranch.y));
      highp vec4 tmpvar_77;
      tmpvar_77.zw = vec2(0.0, 0.0);
      tmpvar_77.x = ((fTime_67 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_77.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_78;
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_77 + 0.5))
       * 2.0) - 1.0));
      tmpvar_78 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      fAdherenceScale_68 = (1.0 - ((tmpvar_78.x * tmpvar_78.y) * (
        (tmpvar_78.x * tmpvar_78.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_68 = (fAdherenceScale_68 + ((vOscillations_70.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_66 = (vPos_66 + ((
        ((vRotatedBranchAnchor_15 - vPos_66) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_68) * _glesMultiTexCoord0.z));
      vPos_65 = vPos_66;
    } else {
      highp vec3 vPos_80;
      vPos_80 = vPos_65;
      highp float fTime_81;
      highp vec3 vWindVector_82;
      vWindVector_82 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_81 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_83;
      highp float fOscillation_84;
      fOscillation_84 = 1.0;
      highp float fAmount_85;
      highp float fTarget_86;
      highp vec4 tmpvar_87;
      tmpvar_87.w = 0.0;
      tmpvar_87.x = (fTime_81 + _glesMultiTexCoord0.w);
      tmpvar_87.y = ((fTime_81 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_87.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_81 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_88;
      tmpvar_88 = abs(((
        fract((tmpvar_87 + 0.5))
       * 2.0) - 1.0));
      vOscillations_83 = (((
        (tmpvar_88 * tmpvar_88)
       * 
        (3.0 - (2.0 * tmpvar_88))
      ) - 0.5) * 2.0);
      highp float tmpvar_89;
      tmpvar_89 = (vOscillations_83.y * vOscillations_83.z);
      fTarget_86 = 1.0;
      fAmount_85 = tmpvar_89;
      if ((tmpvar_89 < 0.0)) {
        fTarget_86 = -1.0;
        fAmount_85 = -(tmpvar_89);
      };
      fOscillation_84 = (((
        mix (mix (tmpvar_89, fTarget_86, fAmount_85), fTarget_86, fAmount_85)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_83.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_80 = (vPos_65 + ((vWindVector_82 * fOscillation_84) * _ST_WindBranch.y));
      vPos_65 = vPos_80;
    };
    FinalPosition_17 = vPos_65;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_90;
    vPos_90 = FinalPosition_17;
    highp float fMoveAmount_91;
    highp float fAdjust_92;
    highp float fLength_93;
    fLength_93 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_94;
    tmpvar_94 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_92 = tmpvar_94;
    if ((tmpvar_94 != 0.0)) {
      fAdjust_92 = pow (tmpvar_94, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_95;
    tmpvar_95.zw = vec2(0.0, 0.0);
    tmpvar_95.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_95.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_96;
    highp vec4 tmpvar_97;
    tmpvar_97 = abs(((
      fract((tmpvar_95 + 0.5))
     * 2.0) - 1.0));
    tmpvar_96 = (((
      (tmpvar_97 * tmpvar_97)
     * 
      (3.0 - (2.0 * tmpvar_97))
    ) - 0.5) * 2.0);
    fMoveAmount_91 = ((_ST_WindGlobal.y * (tmpvar_96.x + 
      (tmpvar_96.y * tmpvar_96.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_91 = (fMoveAmount_91 * fAdjust_92);
    vPos_90.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_91));
    vPos_90 = (normalize(vPos_90) * fLength_93);
    FinalPosition_17 = vPos_90;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_98;
  v_98.x = _World2Object[0].x;
  v_98.y = _World2Object[1].x;
  v_98.z = _World2Object[2].x;
  v_98.w = _World2Object[3].x;
  highp vec4 v_99;
  v_99.x = _World2Object[0].y;
  v_99.y = _World2Object[1].y;
  v_99.z = _World2Object[2].y;
  v_99.w = _World2Object[3].y;
  highp vec4 v_100;
  v_100.x = _World2Object[0].z;
  v_100.y = _World2Object[1].z;
  v_100.z = _World2Object[2].z;
  v_100.w = _World2Object[3].z;
  highp vec3 tmpvar_101;
  tmpvar_101 = normalize(((
    (v_98.xyz * tmpvar_14.x)
   + 
    (v_99.xyz * tmpvar_14.y)
  ) + (v_100.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_101;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_102;
  tmpvar_102.w = 1.0;
  tmpvar_102.xyz = worldNormal_4;
  mediump vec4 normal_103;
  normal_103 = tmpvar_102;
  mediump vec3 x2_104;
  mediump vec4 tmpvar_105;
  tmpvar_105 = (normal_103.xyzz * normal_103.yzzx);
  x2_104.x = dot (unity_SHBr, tmpvar_105);
  x2_104.y = dot (unity_SHBg, tmpvar_105);
  x2_104.z = dot (unity_SHBb, tmpvar_105);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_104 + (unity_SHC.xyz * (
    (normal_103.x * normal_103.x)
   - 
    (normal_103.y * normal_103.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 49549
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49550
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49551
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 49552
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49553
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 49554
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 49555
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 49556
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 49557
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49558
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 49559
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 49560
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49561
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49562
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49563
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 49564
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 49565
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 49566
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 49567
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 49568
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 49569
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 49570
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 49571
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 49572
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 49573
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 49574
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 49575
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 49576
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 49577
        //FRC
        t32.x = fract(t32.x);
        //Instruction 49578
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 49579
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 49580
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 49581
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 49582
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 49583
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 49584
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 49585
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 49586
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 49587
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 49588
        //IF
        if(tb48){
            //Instruction 49589
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 49590
            //FRC
            t5 = fract(t5);
            //Instruction 49591
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49592
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 49593
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 49594
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 49595
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 49596
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 49597
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 49598
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 49599
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49600
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 49601
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49602
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 49603
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 49604
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 49605
            //SQRT
            t49 = sqrt(t49);
            //Instruction 49606
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 49607
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 49608
            //MUL
            t51 = t51 * t52;
            //Instruction 49609
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 49610
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 49611
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 49612
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 49613
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 49614
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 49615
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 49616
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 49617
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 49618
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 49619
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 49620
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 49621
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 49622
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 49623
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 49624
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 49625
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 49626
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 49627
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 49628
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 49629
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 49630
            //SQRT
            t51 = sqrt(t51);
            //Instruction 49631
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 49632
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 49633
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 49634
            //MUL
            t6.x = t51 * t52;
            //Instruction 49635
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 49636
            //LT
            tb19 = t19<(-t19);
            //Instruction 49637
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 49638
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 49639
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 49640
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 49641
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 49642
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 49643
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 49644
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49645
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 49646
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49647
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 49648
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 49649
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 49650
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 49651
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 49652
            //LOG
            t48 = log2(t48);
            //Instruction 49653
            //MUL
            t48 = t48 * t7.y;
            //Instruction 49654
            //EXP
            t48 = exp2(t48);
            //Instruction 49655
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 49656
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 49657
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 49658
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 49659
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 49660
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 49661
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 49662
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 49663
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 49664
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 49665
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 49666
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 49667
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 49668
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 49669
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 49670
            //MOV
            t11.z = t12.x;
            //Instruction 49671
            //MOV
            t11.w = t10.x;
            //Instruction 49672
            //MOV
            t13.z = t9.y;
            //Instruction 49673
            //MOV
            t13.w = t14.y;
            //Instruction 49674
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 49675
            //MOV
            t14.w = t13.y;
            //Instruction 49676
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 49677
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 49678
            //MOV
            t10.w = t11.y;
            //Instruction 49679
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 49680
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 49681
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 49682
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 49683
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 49684
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 49685
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 49686
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 49687
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 49688
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 49689
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 49690
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 49691
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 49692
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 49693
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 49694
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 49695
        //ELSE
        } else {
            //Instruction 49696
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 49697
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 49698
        //ENDIF
        }
        //Instruction 49699
    //ELSE
    } else {
        //Instruction 49700
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 49701
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 49702
    //ENDIF
    }
    //Instruction 49703
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 49704
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 49705
    //IF
    if(tb49){
        //Instruction 49706
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 49707
        //IF
        if(tb49){
            //Instruction 49708
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49709
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 49710
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 49711
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 49712
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 49713
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 49714
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49715
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 49716
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49717
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 49718
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 49719
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 49720
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49721
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49722
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 49723
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49724
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49725
            //FRC
            t2 = fract(t2);
            //Instruction 49726
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49727
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 49728
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49729
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49730
            //ADD
            t2 = t2 + t2;
            //Instruction 49731
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 49732
            //LT
            tb51 = t7.w<0.0;
            //Instruction 49733
            //MOV
            t7.y = (-t7.w);
            //Instruction 49734
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 49735
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 49736
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 49737
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 49738
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 49739
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 49740
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 49741
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49742
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49743
            //MUL
            t53 = t2.x * t53;
            //Instruction 49744
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 49745
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49746
            //MUL
            t51 = t51 * t52;
            //Instruction 49747
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 49748
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 49749
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49750
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49751
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49752
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 49753
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 49754
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49755
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 49756
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49757
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 49758
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 49759
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 49760
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 49761
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49762
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 49763
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 49764
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 49765
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49766
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 49767
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 49768
        //ELSE
        } else {
            //Instruction 49769
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49770
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49771
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49772
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49773
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49774
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49775
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49776
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 49777
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 49778
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49779
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 49780
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49781
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 49782
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49783
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49784
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 49785
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 49786
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49787
            //MOV
            t2.y = (-t2.w);
            //Instruction 49788
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49789
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49790
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 49791
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 49792
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 49793
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 49794
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49795
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49796
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49797
            //MUL
            t51 = t51 * t6.x;
            //Instruction 49798
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 49799
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 49800
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 49801
        //ENDIF
        }
        //Instruction 49802
    //ENDIF
    }
    //Instruction 49803
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 49804
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49805
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49806
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 49807
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 49808
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 49809
    //NE
    tb51 = t49!=0.0;
    //Instruction 49810
    //LOG
    t52 = log2(t49);
    //Instruction 49811
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 49812
    //EXP
    t52 = exp2(t52);
    //Instruction 49813
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 49814
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49815
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49816
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 49817
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 49818
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49819
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 49820
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49821
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 49822
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 49823
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 49824
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49825
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 49826
    //MUL
    t49 = t49 * t51;
    //Instruction 49827
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 49828
    //MOV
    t5.y = t4.y;
    //Instruction 49829
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 49830
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 49831
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 49832
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 49833
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 49834
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 49835
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 49836
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 49837
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49838
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 49839
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 49840
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 49841
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 49842
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 49843
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 49844
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 49845
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 49846
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 49847
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 49848
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 49849
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 49850
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 49851
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 49852
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 49853
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 49854
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 49855
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 49856
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 49857
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 49858
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 49859
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 49860
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 49861
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 49862
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 49863
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 49864
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 49865
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49866
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49867
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 49868
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49869
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 49520
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 49521
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 49522
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 49523
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 49524
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 49525
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 49526
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 49527
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 49528
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 49529
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 49530
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 49531
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 49532
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 49533
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49534
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 49535
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49536
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49537
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49538
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 49539
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49540
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49541
    //MOV
    t16_0.w = 1.0;
    //Instruction 49542
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 49543
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 49544
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 49545
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 49546
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 49547
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49548
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.x;
  tmpvar_108.y = worldBinormal_4.x;
  tmpvar_108.z = worldNormal_6.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.y;
  tmpvar_109.y = worldBinormal_4.y;
  tmpvar_109.z = worldNormal_6.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.z;
  tmpvar_110.y = worldBinormal_4.z;
  tmpvar_110.z = worldNormal_6.z;
  tmpvar_110.w = tmpvar_99.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_6;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 49166
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49167
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49168
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 49169
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49170
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 49171
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 49172
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 49173
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 49174
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49175
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 49176
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 49177
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49178
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49179
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49180
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 49181
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 49182
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 49183
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 49184
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 49185
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 49186
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 49187
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 49188
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 49189
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 49190
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 49191
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 49192
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 49193
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 49194
        //FRC
        t34.x = fract(t34.x);
        //Instruction 49195
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 49196
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 49197
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 49198
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 49199
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 49200
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 49201
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 49202
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 49203
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 49204
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 49205
        //IF
        if(tb51){
            //Instruction 49206
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 49207
            //FRC
            t5 = fract(t5);
            //Instruction 49208
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49209
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 49210
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 49211
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 49212
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 49213
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 49214
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 49215
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 49216
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49217
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 49218
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49219
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 49220
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 49221
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 49222
            //SQRT
            t52 = sqrt(t52);
            //Instruction 49223
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 49224
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 49225
            //MUL
            t54 = t54 * t55;
            //Instruction 49226
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 49227
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 49228
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 49229
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 49230
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 49231
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 49232
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 49233
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 49234
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 49235
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 49236
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 49237
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 49238
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 49239
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 49240
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 49241
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 49242
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 49243
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 49244
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 49245
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 49246
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 49247
            //SQRT
            t54 = sqrt(t54);
            //Instruction 49248
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 49249
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 49250
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 49251
            //MUL
            t6.x = t54 * t55;
            //Instruction 49252
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 49253
            //LT
            tb20 = t20<(-t20);
            //Instruction 49254
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 49255
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 49256
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 49257
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 49258
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 49259
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 49260
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 49261
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49262
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 49263
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49264
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 49265
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 49266
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 49267
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 49268
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 49269
            //LOG
            t51 = log2(t51);
            //Instruction 49270
            //MUL
            t51 = t51 * t7.y;
            //Instruction 49271
            //EXP
            t51 = exp2(t51);
            //Instruction 49272
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 49273
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 49274
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 49275
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 49276
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 49277
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 49278
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 49279
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 49280
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 49281
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 49282
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 49283
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 49284
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 49285
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 49286
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 49287
            //MOV
            t11.z = t12.x;
            //Instruction 49288
            //MOV
            t11.w = t10.x;
            //Instruction 49289
            //MOV
            t13.z = t9.y;
            //Instruction 49290
            //MOV
            t13.w = t14.y;
            //Instruction 49291
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 49292
            //MOV
            t14.w = t13.y;
            //Instruction 49293
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 49294
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 49295
            //MOV
            t10.w = t11.y;
            //Instruction 49296
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 49297
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 49298
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 49299
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 49300
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 49301
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 49302
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 49303
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 49304
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 49305
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 49306
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 49307
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 49308
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 49309
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 49310
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 49311
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 49312
        //ELSE
        } else {
            //Instruction 49313
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 49314
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 49315
        //ENDIF
        }
        //Instruction 49316
    //ELSE
    } else {
        //Instruction 49317
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 49318
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 49319
    //ENDIF
    }
    //Instruction 49320
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 49321
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 49322
    //IF
    if(tb52){
        //Instruction 49323
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 49324
        //IF
        if(tb52){
            //Instruction 49325
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49326
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 49327
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 49328
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 49329
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 49330
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 49331
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49332
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 49333
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49334
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 49335
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 49336
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 49337
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49338
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49339
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 49340
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49341
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49342
            //FRC
            t2 = fract(t2);
            //Instruction 49343
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49344
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 49345
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49346
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49347
            //ADD
            t2 = t2 + t2;
            //Instruction 49348
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 49349
            //LT
            tb54 = t7.w<0.0;
            //Instruction 49350
            //MOV
            t7.y = (-t7.w);
            //Instruction 49351
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 49352
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 49353
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 49354
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 49355
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 49356
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 49357
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 49358
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49359
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49360
            //MUL
            t56 = t2.x * t56;
            //Instruction 49361
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 49362
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49363
            //MUL
            t54 = t54 * t55;
            //Instruction 49364
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 49365
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 49366
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49367
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49368
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49369
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 49370
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 49371
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49372
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 49373
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49374
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 49375
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 49376
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 49377
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 49378
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49379
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 49380
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 49381
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 49382
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49383
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 49384
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 49385
        //ELSE
        } else {
            //Instruction 49386
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49387
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49388
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49389
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49390
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49391
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49392
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49393
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 49394
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 49395
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49396
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 49397
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49398
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 49399
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49400
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49401
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 49402
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 49403
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49404
            //MOV
            t2.y = (-t2.w);
            //Instruction 49405
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49406
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49407
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 49408
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 49409
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 49410
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 49411
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49412
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49413
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49414
            //MUL
            t54 = t54 * t6.x;
            //Instruction 49415
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 49416
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 49417
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 49418
        //ENDIF
        }
        //Instruction 49419
    //ENDIF
    }
    //Instruction 49420
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 49421
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49422
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49423
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 49424
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 49425
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 49426
    //NE
    tb54 = t52!=0.0;
    //Instruction 49427
    //LOG
    t55 = log2(t52);
    //Instruction 49428
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 49429
    //EXP
    t55 = exp2(t55);
    //Instruction 49430
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 49431
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49432
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49433
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 49434
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 49435
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49436
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 49437
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49438
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 49439
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 49440
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 49441
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49442
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 49443
    //MUL
    t52 = t52 * t54;
    //Instruction 49444
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 49445
    //MOV
    t5.y = t4.y;
    //Instruction 49446
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 49447
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 49448
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 49449
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 49450
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 49451
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 49452
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 49453
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 49454
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49455
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 49456
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 49457
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 49458
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 49459
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49460
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49461
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 49462
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 49463
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 49464
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 49465
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 49466
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 49467
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 49468
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 49469
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 49470
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 49471
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 49472
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 49473
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 49474
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 49475
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 49476
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 49477
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 49478
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 49479
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 49480
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 49481
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 49482
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 49483
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 49484
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 49485
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 49486
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 49487
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 49488
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 49489
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 49490
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 49491
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 49492
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 49493
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 49494
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 49495
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 49496
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 49497
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 49498
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 49499
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 49500
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 49501
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 49502
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 49503
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49504
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 49505
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49506
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 49132
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 49133
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 49134
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 49135
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 49136
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 49137
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 49138
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 49139
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 49140
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 49141
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 49142
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 49143
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 49144
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 49145
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 49146
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 49147
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49148
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49149
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49150
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 49151
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 49152
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 49153
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 49154
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 49155
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49156
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 49157
    //MOV
    t0.w = 1.0;
    //Instruction 49158
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 49159
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 49160
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 49161
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 49162
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 49163
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 49164
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49165
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_18 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  if (((tmpvar_19 > 1.0) && (tmpvar_19 < 5.0))) {
    highp float tmpvar_22;
    tmpvar_22 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_23;
    isBestWind_23 = (tmpvar_19 == 4.0);
    bool bLeaf2_24;
    bLeaf2_24 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_18;
    highp vec3 vDirection_26;
    vDirection_26 = tmpvar_2;
    highp float tmpvar_27;
    if (bLeaf2_24) {
      tmpvar_27 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_27 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_28;
    if (bLeaf2_24) {
      tmpvar_28 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_29;
    highp vec4 tmpvar_30;
    tmpvar_30.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_30.x = (tmpvar_27 + tmpvar_22);
    highp vec4 tmpvar_31;
    tmpvar_31 = abs(((
      fract((tmpvar_30 + 0.5))
     * 2.0) - 1.0));
    vPos_29 = (FinalPosition_18 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_28 * (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_26 = tmpvar_2;
    vPos_25 = vPos_29;
    if (isBestWind_23) {
      highp vec3 tmpvar_32;
      tmpvar_32 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_33;
      if (bLeaf2_24) {
        tmpvar_33 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_33 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_34;
      if (bLeaf2_24) {
        tmpvar_34 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_35;
      if (bLeaf2_24) {
        tmpvar_35 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_36;
      if (bLeaf2_24) {
        tmpvar_36 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_37;
      if (bLeaf2_24) {
        tmpvar_37 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_37 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_38;
      if (bLeaf2_24) {
        tmpvar_38 = bool(1);
      } else {
        tmpvar_38 = bool(1);
      };
      highp float fTwitch_39;
      highp vec3 vAxis_40;
      highp float fOsc_41;
      highp vec3 vOriginPos_42;
      highp vec3 tmpvar_43;
      tmpvar_43 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_44;
      tmpvar_44 = ((tmpvar_43.x + tmpvar_43.y) + tmpvar_43.z);
      highp vec4 tmpvar_45;
      tmpvar_45.x = (tmpvar_33 + tmpvar_44);
      tmpvar_45.y = ((tmpvar_33 * 0.75) - tmpvar_44);
      tmpvar_45.z = ((tmpvar_33 * 0.01) + tmpvar_44);
      tmpvar_45.w = (tmpvar_33 + tmpvar_44);
      highp vec4 tmpvar_46;
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      tmpvar_46 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      vOriginPos_42 = vPos_29;
      highp float tmpvar_48;
      tmpvar_48 = sqrt(dot (vPos_29, vPos_29));
      highp float fAngle_49;
      fAngle_49 = ((_glesMultiTexCoord2.x * tmpvar_35) * (tmpvar_46.x + (tmpvar_46.y * tmpvar_46.y)));
      highp vec2 vSinCos_50;
      vSinCos_50.x = sin(fAngle_49);
      vSinCos_50.y = cos(fAngle_49);
      highp float tmpvar_51;
      tmpvar_51 = (1.0 - vSinCos_50.y);
      highp mat3 tmpvar_52;
      tmpvar_52[0].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.x) + vSinCos_50.y);
      tmpvar_52[0].y = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) + (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[0].z = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[1].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.y) - (vSinCos_50.x * tmpvar_32.z));
      tmpvar_52[1].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.y) + vSinCos_50.y);
      tmpvar_52[1].z = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].x = (((tmpvar_51 * tmpvar_32.x) * tmpvar_32.z) + (vSinCos_50.x * tmpvar_32.y));
      tmpvar_52[2].y = (((tmpvar_51 * tmpvar_32.y) * tmpvar_32.z) - (vSinCos_50.x * tmpvar_32.x));
      tmpvar_52[2].z = (((tmpvar_51 * tmpvar_32.z) * tmpvar_32.z) + vSinCos_50.y);
      highp vec3 tmpvar_53;
      tmpvar_53 = ((tmpvar_32.yzx * vRotatedWindVector_17.zxy) - (tmpvar_32.zxy * vRotatedWindVector_17.yzx));
      vAxis_40.xz = tmpvar_53.xz;
      highp float tmpvar_54;
      tmpvar_54 = clamp (dot (vRotatedWindVector_17, tmpvar_32), -1.0, 1.0);
      vAxis_40.y = (tmpvar_53.y + tmpvar_54);
      highp vec3 tmpvar_55;
      tmpvar_55 = normalize(vAxis_40);
      vAxis_40 = tmpvar_55;
      highp float tmpvar_56;
      tmpvar_56 = (1.570796 - (sign(tmpvar_54) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_54))) * (1.570796 + (abs(tmpvar_54) * (-0.2146018 + 
          (abs(tmpvar_54) * (0.08656672 + (abs(tmpvar_54) * -0.03102955)))
        ))))
      )));
      fOsc_41 = (tmpvar_46.y - (tmpvar_46.x * tmpvar_46.x));
      fTwitch_39 = 0.0;
      if (tmpvar_38) {
        highp float fTime_57;
        fTime_57 = (tmpvar_37.z + tmpvar_44);
        highp vec4 tmpvar_58;
        tmpvar_58.zw = vec2(0.0, 0.0);
        tmpvar_58.x = fTime_57;
        tmpvar_58.y = (0.87 * fTime_57);
        highp vec4 tmpvar_59;
        highp vec4 tmpvar_60;
        tmpvar_60 = abs(((
          fract((tmpvar_58 + 0.5))
         * 2.0) - 1.0));
        tmpvar_59 = (((
          (tmpvar_60 * tmpvar_60)
         * 
          (3.0 - (2.0 * tmpvar_60))
        ) - 0.5) * 2.0);
        fTwitch_39 = (tmpvar_37.x * pow (clamp (
          ((((tmpvar_59.x * tmpvar_59.y) * tmpvar_59.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_37.y));
      };
      highp float fAngle_61;
      fAngle_61 = (_glesMultiTexCoord2.x * ((
        (tmpvar_56 * tmpvar_36)
       + 
        (fOsc_41 * tmpvar_34)
      ) + fTwitch_39));
      highp vec2 vSinCos_62;
      vSinCos_62.x = sin(fAngle_61);
      vSinCos_62.y = cos(fAngle_61);
      highp float tmpvar_63;
      tmpvar_63 = (1.0 - vSinCos_62.y);
      highp mat3 tmpvar_64;
      tmpvar_64[0].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.x) + vSinCos_62.y);
      tmpvar_64[0].y = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) + (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[0].z = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[1].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.y) - (vSinCos_62.x * tmpvar_55.z));
      tmpvar_64[1].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.y) + vSinCos_62.y);
      tmpvar_64[1].z = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].x = (((tmpvar_63 * tmpvar_55.x) * tmpvar_55.z) + (vSinCos_62.x * tmpvar_55.y));
      tmpvar_64[2].y = (((tmpvar_63 * tmpvar_55.y) * tmpvar_55.z) - (vSinCos_62.x * tmpvar_55.x));
      tmpvar_64[2].z = (((tmpvar_63 * tmpvar_55.z) * tmpvar_55.z) + vSinCos_62.y);
      highp mat3 tmpvar_65;
      tmpvar_65 = (tmpvar_52 * tmpvar_64);
      vOriginPos_42 = (normalize((tmpvar_65 * vPos_29)) * tmpvar_48);
      vDirection_26 = (tmpvar_65 * _glesNormal);
      vPos_25 = vOriginPos_42;
    };
    tmpvar_15 = vDirection_26;
    FinalPosition_18 = vPos_25;
  };
  FinalPosition_18 = (FinalPosition_18 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_66;
    vPos_66 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_67;
      vPos_67 = FinalPosition_18;
      highp float fTime_68;
      highp float fAdherenceScale_69;
      highp vec3 vWindVector_70;
      vWindVector_70 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_68 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_71;
      highp float fOscillation_72;
      fOscillation_72 = 1.0;
      highp float fAmount_73;
      highp float fTarget_74;
      highp vec4 tmpvar_75;
      tmpvar_75.x = (fTime_68 + _glesMultiTexCoord0.w);
      tmpvar_75.y = ((fTime_68 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_75.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_68 + _glesMultiTexCoord0.w));
      tmpvar_75.w = ((fTime_68 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_76;
      tmpvar_76 = abs(((
        fract((tmpvar_75 + 0.5))
       * 2.0) - 1.0));
      vOscillations_71 = (((
        (tmpvar_76 * tmpvar_76)
       * 
        (3.0 - (2.0 * tmpvar_76))
      ) - 0.5) * 2.0);
      highp float tmpvar_77;
      tmpvar_77 = (vOscillations_71.y * vOscillations_71.z);
      fTarget_74 = 1.0;
      fAmount_73 = tmpvar_77;
      if ((tmpvar_77 < 0.0)) {
        fTarget_74 = -1.0;
        fAmount_73 = -(tmpvar_77);
      };
      fOscillation_72 = (((
        mix (mix (tmpvar_77, fTarget_74, fAmount_73), fTarget_74, fAmount_73)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_71.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_72 = (fOscillation_72 * (1.0 + (vOscillations_71.w * _ST_WindBranchWhip.x)));
      vPos_67 = (FinalPosition_18 + ((vWindVector_70 * fOscillation_72) * _ST_WindBranch.y));
      highp vec4 tmpvar_78;
      tmpvar_78.zw = vec2(0.0, 0.0);
      tmpvar_78.x = ((fTime_68 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_78.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_79;
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      tmpvar_79 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      fAdherenceScale_69 = (1.0 - ((tmpvar_79.x * tmpvar_79.y) * (
        (tmpvar_79.x * tmpvar_79.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_69 = (fAdherenceScale_69 + ((vOscillations_71.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_67 = (vPos_67 + ((
        ((vRotatedBranchAnchor_16 - vPos_67) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_69) * _glesMultiTexCoord0.z));
      vPos_66 = vPos_67;
    } else {
      highp vec3 vPos_81;
      vPos_81 = vPos_66;
      highp float fTime_82;
      highp vec3 vWindVector_83;
      vWindVector_83 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_82 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_84;
      highp float fOscillation_85;
      fOscillation_85 = 1.0;
      highp float fAmount_86;
      highp float fTarget_87;
      highp vec4 tmpvar_88;
      tmpvar_88.w = 0.0;
      tmpvar_88.x = (fTime_82 + _glesMultiTexCoord0.w);
      tmpvar_88.y = ((fTime_82 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_88.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_82 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_89;
      tmpvar_89 = abs(((
        fract((tmpvar_88 + 0.5))
       * 2.0) - 1.0));
      vOscillations_84 = (((
        (tmpvar_89 * tmpvar_89)
       * 
        (3.0 - (2.0 * tmpvar_89))
      ) - 0.5) * 2.0);
      highp float tmpvar_90;
      tmpvar_90 = (vOscillations_84.y * vOscillations_84.z);
      fTarget_87 = 1.0;
      fAmount_86 = tmpvar_90;
      if ((tmpvar_90 < 0.0)) {
        fTarget_87 = -1.0;
        fAmount_86 = -(tmpvar_90);
      };
      fOscillation_85 = (((
        mix (mix (tmpvar_90, fTarget_87, fAmount_86), fTarget_87, fAmount_86)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_84.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_81 = (vPos_66 + ((vWindVector_83 * fOscillation_85) * _ST_WindBranch.y));
      vPos_66 = vPos_81;
    };
    FinalPosition_18 = vPos_66;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_91;
    vPos_91 = FinalPosition_18;
    highp float fMoveAmount_92;
    highp float fAdjust_93;
    highp float fLength_94;
    fLength_94 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_95;
    tmpvar_95 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_93 = tmpvar_95;
    if ((tmpvar_95 != 0.0)) {
      fAdjust_93 = pow (tmpvar_95, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_96;
    tmpvar_96.zw = vec2(0.0, 0.0);
    tmpvar_96.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_96.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_97;
    highp vec4 tmpvar_98;
    tmpvar_98 = abs(((
      fract((tmpvar_96 + 0.5))
     * 2.0) - 1.0));
    tmpvar_97 = (((
      (tmpvar_98 * tmpvar_98)
     * 
      (3.0 - (2.0 * tmpvar_98))
    ) - 0.5) * 2.0);
    fMoveAmount_92 = ((_ST_WindGlobal.y * (tmpvar_97.x + 
      (tmpvar_97.y * tmpvar_97.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_92 = (fMoveAmount_92 * fAdjust_93);
    vPos_91.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_92));
    vPos_91 = (normalize(vPos_91) * fLength_94);
    FinalPosition_18 = vPos_91;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_99;
  tmpvar_99 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_15.x)
   + 
    (v_101.xyz * tmpvar_15.y)
  ) + (v_102.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_103;
  highp mat3 tmpvar_104;
  tmpvar_104[0] = _Object2World[0].xyz;
  tmpvar_104[1] = _Object2World[1].xyz;
  tmpvar_104[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize((tmpvar_104 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_105;
  lowp vec3 tmpvar_106;
  tmpvar_106 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_107;
  tmpvar_107 = (tmpvar_106 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_107;
  highp vec4 tmpvar_108;
  tmpvar_108.x = worldTangent_5.x;
  tmpvar_108.y = worldBinormal_4.x;
  tmpvar_108.z = worldNormal_6.x;
  tmpvar_108.w = tmpvar_99.x;
  highp vec4 tmpvar_109;
  tmpvar_109.x = worldTangent_5.y;
  tmpvar_109.y = worldBinormal_4.y;
  tmpvar_109.z = worldNormal_6.y;
  tmpvar_109.w = tmpvar_99.y;
  highp vec4 tmpvar_110;
  tmpvar_110.x = worldTangent_5.z;
  tmpvar_110.y = worldBinormal_4.z;
  tmpvar_110.z = worldNormal_6.z;
  tmpvar_110.w = tmpvar_99.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_111;
  tmpvar_111.w = 1.0;
  tmpvar_111.xyz = worldNormal_6;
  mediump vec4 normal_112;
  normal_112 = tmpvar_111;
  mediump vec3 x2_113;
  mediump vec4 tmpvar_114;
  tmpvar_114 = (normal_112.xyzz * normal_112.yzzx);
  x2_113.x = dot (unity_SHBr, tmpvar_114);
  x2_113.y = dot (unity_SHBg, tmpvar_114);
  x2_113.z = dot (unity_SHBb, tmpvar_114);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_108;
  xlv_TEXCOORD1 = tmpvar_109;
  xlv_TEXCOORD2 = tmpvar_110;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_113 + (unity_SHC.xyz * (
    (normal_112.x * normal_112.x)
   - 
    (normal_112.y * normal_112.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 48564
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48565
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48566
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 48567
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48568
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 48569
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 48570
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 48571
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 48572
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48573
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48574
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 48575
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48576
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48577
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48578
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 48579
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 48580
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 48581
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 48582
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 48583
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 48584
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 48585
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 48586
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 48587
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 48588
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 48589
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 48590
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 48591
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 48592
        //FRC
        t34.x = fract(t34.x);
        //Instruction 48593
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 48594
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 48595
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 48596
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 48597
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 48598
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 48599
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 48600
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 48601
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 48602
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 48603
        //IF
        if(tb51){
            //Instruction 48604
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 48605
            //FRC
            t5 = fract(t5);
            //Instruction 48606
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48607
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 48608
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 48609
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 48610
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 48611
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 48612
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 48613
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 48614
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48615
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 48616
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48617
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 48618
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 48619
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 48620
            //SQRT
            t52 = sqrt(t52);
            //Instruction 48621
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 48622
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 48623
            //MUL
            t54 = t54 * t55;
            //Instruction 48624
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 48625
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 48626
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 48627
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 48628
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 48629
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 48630
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 48631
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 48632
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 48633
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 48634
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 48635
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 48636
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 48637
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 48638
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 48639
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 48640
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 48641
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 48642
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 48643
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 48644
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 48645
            //SQRT
            t54 = sqrt(t54);
            //Instruction 48646
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 48647
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 48648
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 48649
            //MUL
            t6.x = t54 * t55;
            //Instruction 48650
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 48651
            //LT
            tb20 = t20<(-t20);
            //Instruction 48652
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 48653
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 48654
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 48655
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 48656
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 48657
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 48658
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 48659
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48660
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 48661
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48662
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 48663
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 48664
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 48665
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 48666
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 48667
            //LOG
            t51 = log2(t51);
            //Instruction 48668
            //MUL
            t51 = t51 * t7.y;
            //Instruction 48669
            //EXP
            t51 = exp2(t51);
            //Instruction 48670
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 48671
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 48672
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 48673
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 48674
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 48675
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 48676
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 48677
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 48678
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 48679
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 48680
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 48681
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 48682
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 48683
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 48684
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 48685
            //MOV
            t11.z = t12.x;
            //Instruction 48686
            //MOV
            t11.w = t10.x;
            //Instruction 48687
            //MOV
            t13.z = t9.y;
            //Instruction 48688
            //MOV
            t13.w = t14.y;
            //Instruction 48689
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 48690
            //MOV
            t14.w = t13.y;
            //Instruction 48691
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 48692
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 48693
            //MOV
            t10.w = t11.y;
            //Instruction 48694
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 48695
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 48696
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 48697
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 48698
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 48699
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 48700
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 48701
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 48702
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 48703
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 48704
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 48705
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 48706
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 48707
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 48708
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 48709
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 48710
        //ELSE
        } else {
            //Instruction 48711
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 48712
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 48713
        //ENDIF
        }
        //Instruction 48714
    //ELSE
    } else {
        //Instruction 48715
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 48716
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 48717
    //ENDIF
    }
    //Instruction 48718
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 48719
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 48720
    //IF
    if(tb52){
        //Instruction 48721
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 48722
        //IF
        if(tb52){
            //Instruction 48723
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48724
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 48725
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 48726
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 48727
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 48728
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 48729
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48730
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 48731
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48732
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 48733
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 48734
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 48735
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48736
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48737
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 48738
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48739
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48740
            //FRC
            t2 = fract(t2);
            //Instruction 48741
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48742
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 48743
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48744
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48745
            //ADD
            t2 = t2 + t2;
            //Instruction 48746
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 48747
            //LT
            tb54 = t7.w<0.0;
            //Instruction 48748
            //MOV
            t7.y = (-t7.w);
            //Instruction 48749
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 48750
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 48751
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 48752
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 48753
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 48754
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 48755
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 48756
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48757
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48758
            //MUL
            t56 = t2.x * t56;
            //Instruction 48759
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 48760
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48761
            //MUL
            t54 = t54 * t55;
            //Instruction 48762
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 48763
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 48764
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48765
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48766
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48767
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 48768
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 48769
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 48770
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 48771
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 48772
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 48773
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 48774
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 48775
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 48776
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 48777
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 48778
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 48779
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 48780
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 48781
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 48782
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 48783
        //ELSE
        } else {
            //Instruction 48784
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48785
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48786
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48787
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48788
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 48789
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 48790
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48791
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 48792
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 48793
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 48794
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 48795
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48796
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 48797
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 48798
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 48799
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 48800
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 48801
            //LT
            tb0 = t2.w<0.0;
            //Instruction 48802
            //MOV
            t2.y = (-t2.w);
            //Instruction 48803
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 48804
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 48805
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 48806
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 48807
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 48808
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 48809
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 48810
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48811
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48812
            //MUL
            t54 = t54 * t6.x;
            //Instruction 48813
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 48814
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 48815
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 48816
        //ENDIF
        }
        //Instruction 48817
    //ENDIF
    }
    //Instruction 48818
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 48819
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 48820
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 48821
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 48822
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 48823
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 48824
    //NE
    tb54 = t52!=0.0;
    //Instruction 48825
    //LOG
    t55 = log2(t52);
    //Instruction 48826
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 48827
    //EXP
    t55 = exp2(t55);
    //Instruction 48828
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 48829
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 48830
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 48831
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 48832
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 48833
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 48834
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 48835
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 48836
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 48837
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 48838
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 48839
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 48840
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 48841
    //MUL
    t52 = t52 * t54;
    //Instruction 48842
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 48843
    //MOV
    t5.y = t4.y;
    //Instruction 48844
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 48845
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 48846
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 48847
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 48848
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 48849
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 48850
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 48851
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 48852
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 48853
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 48854
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 48855
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 48856
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 48857
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 48858
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 48859
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 48860
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 48861
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 48862
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 48863
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 48864
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 48865
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 48866
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 48867
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 48868
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 48869
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 48870
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 48871
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 48872
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 48873
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 48874
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 48875
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 48876
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 48877
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 48878
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 48879
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 48880
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 48881
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 48882
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 48883
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 48884
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 48885
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 48886
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 48887
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 48888
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 48889
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 48890
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 48891
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 48892
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 48893
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 48894
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 48895
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 48896
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 48897
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 48898
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 48899
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 48900
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 48901
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 48902
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 48903
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48904
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 48531
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 48532
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 48533
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 48534
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 48535
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48536
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48537
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48538
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 48539
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 48540
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 48541
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 48542
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 48543
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 48544
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 48545
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 48546
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48547
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48548
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48549
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 48550
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 48551
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 48552
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 48553
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 48554
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48555
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 48556
    //MOV
    t0.w = 1.0;
    //Instruction 48557
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 48558
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 48559
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 48560
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 48561
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 48562
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48563
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_8;
  normalWorld_8 = tmpvar_3;
  mediump vec4 tmpvar_9;
  tmpvar_9.w = 1.0;
  tmpvar_9.xyz = normalWorld_8;
  mediump vec3 x1_10;
  x1_10.x = dot (unity_SHAr, tmpvar_9);
  x1_10.y = dot (unity_SHAg, tmpvar_9);
  x1_10.z = dot (unity_SHAb, tmpvar_9);
  mediump vec4 outDiffuseOcclusion_11;
  mediump vec4 outNormal_12;
  mediump vec4 emission_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = tmpvar_5;
  outDiffuseOcclusion_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = vec3(0.0, 0.0, 0.0);
  emission_13 = tmpvar_16;
  emission_13.xyz = (emission_13.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_10)));
  outDiffuse_1.xyz = outDiffuseOcclusion_11.xyz;
  outEmission_2.w = emission_13.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_13.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_12;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 49888
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49889
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 49890
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 49891
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49892
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 49893
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 49894
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 49895
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 49896
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 49897
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 49898
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49899
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 49900
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 49901
    //IF
    if(tb22){
        //Instruction 49902
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 49903
        //IF
        if(tb22){
            //Instruction 49904
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49905
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 49906
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 49907
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 49908
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 49909
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49910
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49911
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49912
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49913
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49914
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49915
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 49916
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 49917
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49918
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 49919
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 49920
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 49921
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49922
            //FRC
            t0 = fract(t0);
            //Instruction 49923
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49924
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 49925
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49926
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49927
            //ADD
            t0 = t0 + t0;
            //Instruction 49928
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 49929
            //LT
            tb23 = t5.w<0.0;
            //Instruction 49930
            //MOV
            t5.y = (-t5.w);
            //Instruction 49931
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 49932
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 49933
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 49934
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 49935
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 49936
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 49937
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 49938
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49939
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49940
            //MUL
            t25 = t0.x * t25;
            //Instruction 49941
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 49942
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49943
            //MUL
            t23 = t23 * t24;
            //Instruction 49944
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 49945
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 49946
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49947
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49948
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49949
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 49950
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 49951
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49952
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 49953
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49954
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 49955
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 49956
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 49957
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 49958
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49959
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 49960
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 49961
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 49962
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49963
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49964
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 49965
        //ELSE
        } else {
            //Instruction 49966
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49967
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 49968
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49969
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 49970
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49971
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 49972
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 49973
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49974
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 49975
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 49976
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49977
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49978
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49979
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 49980
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49981
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49982
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 49983
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 49984
            //LT
            tb22 = t0.w<0.0;
            //Instruction 49985
            //MOV
            t0.y = (-t0.w);
            //Instruction 49986
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 49987
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 49988
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 49989
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 49990
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 49991
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 49992
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 49993
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49994
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49995
            //MUL
            t24 = t24 * t4.x;
            //Instruction 49996
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 49997
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49998
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 49999
        //ENDIF
        }
        //Instruction 50000
    //ENDIF
    }
    //Instruction 50001
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 50002
    //SQRT
    t22 = sqrt(t22);
    //Instruction 50003
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50004
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 50005
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 50006
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 50007
    //NE
    tb3 = t23!=0.0;
    //Instruction 50008
    //LOG
    t10 = log2(t23);
    //Instruction 50009
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 50010
    //EXP
    t10 = exp2(t10);
    //Instruction 50011
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 50012
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50013
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50014
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 50015
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 50016
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50017
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 50018
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50019
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 50020
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 50021
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 50022
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50023
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 50024
    //MUL
    t23 = t23 * t3.x;
    //Instruction 50025
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 50026
    //MOV
    t3.y = t2.y;
    //Instruction 50027
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 50028
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 50029
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 50030
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 50031
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 50032
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 50033
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 50034
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 50035
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 50036
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 50037
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 50038
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 50039
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 50040
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 50041
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 50042
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 50043
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 50044
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 50045
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 50046
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 50047
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 50048
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50049
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50050
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 50051
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 50052
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 50053
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 50054
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 50055
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 50056
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 50057
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 50058
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 50059
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 50060
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 50061
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 50062
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 50063
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50064
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 50065
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 50066
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50067
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 49870
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 49871
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49872
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 49873
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49874
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49875
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49876
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 49877
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49878
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49879
    //MOV
    t16_0.w = 1.0;
    //Instruction 49880
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 49881
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 49882
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 49883
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 49884
    //MUL
    t16_1.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 49885
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 49886
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49887
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  FinalPosition_12 = tmpvar_1.xyz;
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  mediump float tmpvar_14;
  tmpvar_14 = (_WindQuality * _WindEnabled);
  if ((tmpvar_14 > 0.0)) {
    highp mat3 tmpvar_15;
    tmpvar_15[0] = _World2Object[0].xyz;
    tmpvar_15[1] = _World2Object[1].xyz;
    tmpvar_15[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_15 * _ST_WindVector.xyz));
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_16 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_17;
  tmpvar_17 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_12 = tmpvar_17;
  if ((tmpvar_14 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_17;
    if ((tmpvar_14 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_17;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (tmpvar_17 + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_13.x + tmpvar_13.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_14 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_13.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_13.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_51;
  v_51.x = _World2Object[0].x;
  v_51.y = _World2Object[1].x;
  v_51.z = _World2Object[2].x;
  v_51.w = _World2Object[3].x;
  highp vec4 v_52;
  v_52.x = _World2Object[0].y;
  v_52.y = _World2Object[1].y;
  v_52.z = _World2Object[2].y;
  v_52.w = _World2Object[3].y;
  highp vec4 v_53;
  v_53.x = _World2Object[0].z;
  v_53.y = _World2Object[1].z;
  v_53.z = _World2Object[2].z;
  v_53.w = _World2Object[3].z;
  highp vec3 tmpvar_54;
  tmpvar_54 = normalize(((
    (v_51.xyz * _glesNormal.x)
   + 
    (v_52.xyz * _glesNormal.y)
  ) + (v_53.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_54;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_55;
  tmpvar_55.w = 1.0;
  tmpvar_55.xyz = worldNormal_3;
  mediump vec4 normal_56;
  normal_56 = tmpvar_55;
  mediump vec3 x2_57;
  mediump vec4 tmpvar_58;
  tmpvar_58 = (normal_56.xyzz * normal_56.yzzx);
  x2_57.x = dot (unity_SHBr, tmpvar_58);
  x2_57.y = dot (unity_SHBg, tmpvar_58);
  x2_57.z = dot (unity_SHBb, tmpvar_58);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_57 + (unity_SHC.xyz * (
    (normal_56.x * normal_56.x)
   - 
    (normal_56.y * normal_56.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_6;
  tmpvar_4 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_7;
  normalWorld_7 = tmpvar_2;
  mediump vec4 tmpvar_8;
  tmpvar_8.w = 1.0;
  tmpvar_8.xyz = normalWorld_7;
  mediump vec3 x1_9;
  x1_9.x = dot (unity_SHAr, tmpvar_8);
  x1_9.y = dot (unity_SHAg, tmpvar_8);
  x1_9.z = dot (unity_SHAb, tmpvar_8);
  mediump vec4 outDiffuseOcclusion_10;
  mediump vec4 outNormal_11;
  mediump vec4 emission_12;
  lowp vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = tmpvar_4;
  outDiffuseOcclusion_10 = tmpvar_13;
  lowp vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_11 = tmpvar_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = vec3(0.0, 0.0, 0.0);
  emission_12 = tmpvar_15;
  emission_12.xyz = (emission_12.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_9)));
  outDiffuse_1.xyz = outDiffuseOcclusion_10.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_11;
  gl_FragData[3] = emission_12;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 49524
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49525
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 49526
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 49527
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49528
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 49529
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 49530
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 49531
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 49532
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 49533
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 49534
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49535
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 49536
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 49537
    //IF
    if(tb22){
        //Instruction 49538
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 49539
        //IF
        if(tb22){
            //Instruction 49540
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49541
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 49542
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 49543
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 49544
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 49545
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49546
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49547
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49548
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49549
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49550
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49551
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 49552
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 49553
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49554
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 49555
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 49556
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 49557
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49558
            //FRC
            t0 = fract(t0);
            //Instruction 49559
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49560
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 49561
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49562
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49563
            //ADD
            t0 = t0 + t0;
            //Instruction 49564
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 49565
            //LT
            tb23 = t5.w<0.0;
            //Instruction 49566
            //MOV
            t5.y = (-t5.w);
            //Instruction 49567
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 49568
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 49569
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 49570
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 49571
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 49572
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 49573
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 49574
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49575
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49576
            //MUL
            t25 = t0.x * t25;
            //Instruction 49577
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 49578
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49579
            //MUL
            t23 = t23 * t24;
            //Instruction 49580
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 49581
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 49582
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49583
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49584
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49585
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 49586
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 49587
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49588
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 49589
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49590
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 49591
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 49592
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 49593
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 49594
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49595
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 49596
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 49597
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 49598
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49599
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49600
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 49601
        //ELSE
        } else {
            //Instruction 49602
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49603
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 49604
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49605
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 49606
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49607
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 49608
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 49609
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49610
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 49611
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 49612
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49613
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49614
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49615
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 49616
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49617
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49618
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 49619
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 49620
            //LT
            tb22 = t0.w<0.0;
            //Instruction 49621
            //MOV
            t0.y = (-t0.w);
            //Instruction 49622
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 49623
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 49624
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 49625
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 49626
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 49627
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 49628
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 49629
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49630
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49631
            //MUL
            t24 = t24 * t4.x;
            //Instruction 49632
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 49633
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49634
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 49635
        //ENDIF
        }
        //Instruction 49636
    //ENDIF
    }
    //Instruction 49637
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 49638
    //SQRT
    t22 = sqrt(t22);
    //Instruction 49639
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49640
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 49641
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 49642
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 49643
    //NE
    tb3 = t23!=0.0;
    //Instruction 49644
    //LOG
    t10 = log2(t23);
    //Instruction 49645
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 49646
    //EXP
    t10 = exp2(t10);
    //Instruction 49647
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 49648
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49649
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49650
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 49651
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 49652
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49653
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 49654
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49655
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 49656
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 49657
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 49658
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49659
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 49660
    //MUL
    t23 = t23 * t3.x;
    //Instruction 49661
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 49662
    //MOV
    t3.y = t2.y;
    //Instruction 49663
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 49664
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 49665
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 49666
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 49667
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 49668
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 49669
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 49670
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 49671
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 49672
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 49673
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 49674
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 49675
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 49676
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 49677
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 49678
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 49679
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 49680
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 49681
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 49682
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 49683
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 49684
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 49685
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 49686
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 49687
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 49688
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 49689
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 49690
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 49691
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 49692
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 49693
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 49694
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 49695
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 49696
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 49697
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 49698
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 49699
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49700
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 49701
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 49702
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49703
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 49507
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 49508
    //MUL
    t16_1.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49509
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 49510
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49511
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49512
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49513
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 49514
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49515
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49516
    //MOV
    t16_0.w = 1.0;
    //Instruction 49517
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 49518
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 49519
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 49520
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 49521
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_3.xyz;
    //Instruction 49522
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49523
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 48932
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 48933
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 48934
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 48935
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 48936
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 48937
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 48938
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 48939
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 48940
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 48941
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 48942
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 48943
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 48944
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 48945
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 48946
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 48947
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 48948
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 48949
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 48950
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 48951
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 48952
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 48953
    //IF
    if(tb25){
        //Instruction 48954
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 48955
        //IF
        if(tb25){
            //Instruction 48956
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 48957
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 48958
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 48959
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 48960
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 48961
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 48962
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 48963
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 48964
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 48965
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 48966
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 48967
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 48968
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 48969
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 48970
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 48971
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 48972
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 48973
            //FRC
            t2 = fract(t2);
            //Instruction 48974
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 48975
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 48976
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 48977
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 48978
            //ADD
            t2 = t2 + t2;
            //Instruction 48979
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 48980
            //LT
            tb27 = t6.w<0.0;
            //Instruction 48981
            //MOV
            t6.y = (-t6.w);
            //Instruction 48982
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 48983
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 48984
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 48985
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 48986
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 48987
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 48988
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 48989
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 48990
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 48991
            //MUL
            t29 = t2.x * t29;
            //Instruction 48992
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 48993
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 48994
            //MUL
            t27 = t27 * t28;
            //Instruction 48995
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 48996
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 48997
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 48998
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 48999
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49000
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49001
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49002
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49003
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49004
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49005
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49006
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49007
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49008
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 49009
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49010
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 49011
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 49012
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49013
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49014
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49015
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49016
        //ELSE
        } else {
            //Instruction 49017
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49018
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49019
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49020
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49021
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49022
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49023
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49024
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49025
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49026
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49027
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49028
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49029
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49030
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49031
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49032
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49033
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49034
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49035
            //MOV
            t2.y = (-t2.w);
            //Instruction 49036
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49037
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49038
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49039
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49040
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 49041
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 49042
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49043
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49044
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49045
            //MUL
            t27 = t27 * t5.x;
            //Instruction 49046
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 49047
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49048
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49049
        //ENDIF
        }
        //Instruction 49050
    //ENDIF
    }
    //Instruction 49051
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49052
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49053
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49054
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 49055
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 49056
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 49057
    //NE
    tb27 = t25!=0.0;
    //Instruction 49058
    //LOG
    t4.x = log2(t25);
    //Instruction 49059
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49060
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49061
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 49062
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49063
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49064
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49065
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49066
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49067
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49068
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49069
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49070
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49071
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 49072
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49073
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 49074
    //MUL
    t25 = t25 * t27;
    //Instruction 49075
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 49076
    //MOV
    t4.y = t3.y;
    //Instruction 49077
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 49078
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49079
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 49080
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49081
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 49082
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49083
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49084
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49085
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49086
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49087
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49088
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49089
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49090
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 49091
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 49092
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 49093
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49094
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49095
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 49096
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 49097
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 49098
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49099
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49100
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 49101
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 49102
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 49103
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 49104
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 49105
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 49106
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 49107
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 49108
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 49109
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 49110
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 49111
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 49112
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 49113
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49114
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49115
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 49116
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49117
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 48905
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 48906
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 48907
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 48908
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 48909
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 48910
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 48911
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 48912
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 48913
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 48914
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 48915
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 48916
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 48917
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 48918
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 48919
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 48920
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 48921
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 48922
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 48923
    //MOV
    t16_0.w = 1.0;
    //Instruction 48924
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 48925
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 48926
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 48927
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 48928
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 48929
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 48930
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 48931
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  FinalPosition_15 = tmpvar_1.xyz;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_15 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_6;
  xlv_TEXCOORD6 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 50094
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50095
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50096
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 50097
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50098
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 50099
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 50100
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 50101
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 50102
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50103
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 50104
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 50105
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50106
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50107
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50108
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 50109
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50110
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 50111
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 50112
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50113
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50114
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 50115
    //IF
    if(tb25){
        //Instruction 50116
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 50117
        //IF
        if(tb25){
            //Instruction 50118
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50119
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50120
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50121
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 50122
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 50123
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 50124
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50125
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50126
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50127
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50128
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 50129
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 50130
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50131
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50132
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 50133
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50134
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50135
            //FRC
            t2 = fract(t2);
            //Instruction 50136
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50137
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 50138
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50139
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50140
            //ADD
            t2 = t2 + t2;
            //Instruction 50141
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 50142
            //LT
            tb27 = t6.w<0.0;
            //Instruction 50143
            //MOV
            t6.y = (-t6.w);
            //Instruction 50144
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 50145
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 50146
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 50147
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 50148
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 50149
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 50150
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 50151
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50152
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50153
            //MUL
            t29 = t2.x * t29;
            //Instruction 50154
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 50155
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50156
            //MUL
            t27 = t27 * t28;
            //Instruction 50157
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 50158
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50159
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50160
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50161
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50162
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50163
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50164
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50165
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50166
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50167
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50168
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50169
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 50170
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 50171
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50172
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 50173
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 50174
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 50175
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50176
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 50177
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 50178
        //ELSE
        } else {
            //Instruction 50179
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50180
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50181
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50182
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50183
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50184
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50185
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50186
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 50187
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 50188
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50189
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50190
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50191
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 50192
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50193
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50194
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 50195
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 50196
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50197
            //MOV
            t2.y = (-t2.w);
            //Instruction 50198
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50199
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50200
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 50201
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 50202
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 50203
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 50204
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50205
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50206
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50207
            //MUL
            t27 = t27 * t5.x;
            //Instruction 50208
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 50209
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 50210
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50211
        //ENDIF
        }
        //Instruction 50212
    //ENDIF
    }
    //Instruction 50213
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 50214
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50215
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50216
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 50217
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 50218
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 50219
    //NE
    tb27 = t25!=0.0;
    //Instruction 50220
    //LOG
    t4.x = log2(t25);
    //Instruction 50221
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 50222
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 50223
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 50224
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50225
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50226
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 50227
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 50228
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50229
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 50230
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50231
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 50232
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50233
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 50234
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50235
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 50236
    //MUL
    t25 = t25 * t27;
    //Instruction 50237
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 50238
    //MOV
    t4.y = t3.y;
    //Instruction 50239
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 50240
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50241
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 50242
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50243
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 50244
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50245
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50246
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50247
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50248
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50249
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50250
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50251
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50252
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 50253
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 50254
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 50255
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50256
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50257
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 50258
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 50259
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 50260
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50261
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50262
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 50263
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 50264
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 50265
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 50266
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 50267
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 50268
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 50269
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 50270
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 50271
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 50272
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 50273
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 50274
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 50275
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50276
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50277
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 50278
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50279
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 50068
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 50069
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50070
    //MAD
    t16_1.xyz = vs_TEXCOORD3.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 50071
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 50072
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 50073
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50074
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50075
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 50076
    //MAD
    t16_0.x = t16_13 * 0.500000 + 0.500000;
    //Instruction 50077
    //MUL
    t16_1.xyz = t16_0.xxx * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 50078
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50079
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 50080
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50081
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50082
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50083
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 50084
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50085
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50086
    //MOV
    t16_0.w = 1.0;
    //Instruction 50087
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 50088
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 50089
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 50090
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50091
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 50092
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50093
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_9.x, max (tmpvar_9.y, tmpvar_9.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_9 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_10;
  tmpvar_10 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD0.xyz, tmpvar_10);
  worldN_3.x = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD1.xyz, tmpvar_10);
  worldN_3.y = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD2.xyz, tmpvar_10);
  worldN_3.z = tmpvar_13;
  mediump vec3 normalWorld_14;
  normalWorld_14 = worldN_3;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_5;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outEmission_2.w = emission_19.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_19.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 49735
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49736
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49737
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 49738
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49739
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 49740
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 49741
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 49742
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 49743
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49744
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 49745
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 49746
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49747
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49748
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49749
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 49750
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49751
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 49752
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 49753
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49754
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 49755
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 49756
    //IF
    if(tb28){
        //Instruction 49757
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 49758
        //IF
        if(tb28){
            //Instruction 49759
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49760
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49761
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49762
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 49763
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 49764
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49765
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49766
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49767
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49768
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49769
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 49770
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 49771
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49772
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49773
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 49774
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49775
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49776
            //FRC
            t2 = fract(t2);
            //Instruction 49777
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49778
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49779
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49780
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49781
            //ADD
            t2 = t2 + t2;
            //Instruction 49782
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49783
            //LT
            tb30 = t6.w<0.0;
            //Instruction 49784
            //MOV
            t6.y = (-t6.w);
            //Instruction 49785
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49786
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 49787
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 49788
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 49789
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 49790
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 49791
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 49792
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49793
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49794
            //MUL
            t32 = t2.x * t32;
            //Instruction 49795
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 49796
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49797
            //MUL
            t30 = t30 * t31;
            //Instruction 49798
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 49799
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49800
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49801
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49802
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49803
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49804
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49805
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49806
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49807
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49808
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49809
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49810
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49811
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 49812
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49813
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 49814
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 49815
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49816
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49817
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49818
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49819
        //ELSE
        } else {
            //Instruction 49820
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49821
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49822
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49823
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49824
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49825
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49826
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49827
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49828
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49829
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49830
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49831
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49832
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49833
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49834
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49835
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49836
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49837
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49838
            //MOV
            t2.y = (-t2.w);
            //Instruction 49839
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49840
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49841
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49842
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49843
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 49844
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 49845
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49846
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49847
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49848
            //MUL
            t30 = t30 * t5.x;
            //Instruction 49849
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 49850
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49851
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49852
        //ENDIF
        }
        //Instruction 49853
    //ENDIF
    }
    //Instruction 49854
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49855
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49856
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49857
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 49858
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 49859
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 49860
    //NE
    tb30 = t28!=0.0;
    //Instruction 49861
    //LOG
    t4.x = log2(t28);
    //Instruction 49862
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49863
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49864
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 49865
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49866
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49867
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49868
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49869
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49870
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49871
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49872
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49873
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49874
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 49875
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49876
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 49877
    //MUL
    t28 = t28 * t30;
    //Instruction 49878
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 49879
    //MOV
    t4.y = t3.y;
    //Instruction 49880
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 49881
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49882
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 49883
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49884
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 49885
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49886
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49887
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49888
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49889
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49890
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49891
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49892
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49893
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49894
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49895
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 49896
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49897
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49898
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 49899
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 49900
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 49901
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49902
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49903
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 49904
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 49905
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 49906
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49907
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 49908
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 49909
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 49910
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 49911
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 49912
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49913
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 49914
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 49915
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 49916
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 49917
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 49918
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 49919
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 49920
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 49921
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 49922
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 49923
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 49924
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 49925
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 49926
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 49927
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 49928
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 49929
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 49930
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 49931
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 49932
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 49933
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 49934
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 49935
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 49936
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 49937
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49938
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 49939
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49940
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 49704
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 49705
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 49706
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 49707
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 49708
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 49709
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 49710
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 49711
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 49712
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 49713
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 49714
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 49715
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 49716
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49717
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49718
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49719
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 49720
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 49721
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 49722
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 49723
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 49724
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49725
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 49726
    //MOV
    t0.w = 1.0;
    //Instruction 49727
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 49728
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 49729
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 49730
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 49731
    //MUL
    t16_1.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 49732
    //EXP
    SV_Target3.xyz = exp2((-t16_1.xyz));
    //Instruction 49733
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49734
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_20;
  tmpvar_20 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_20;
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_20;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_20;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (tmpvar_20 + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_54;
  tmpvar_54 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_58;
  highp mat3 tmpvar_59;
  tmpvar_59[0] = _Object2World[0].xyz;
  tmpvar_59[1] = _Object2World[1].xyz;
  tmpvar_59[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize((tmpvar_59 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_60;
  lowp vec3 tmpvar_61;
  tmpvar_61 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_62;
  tmpvar_62 = (tmpvar_61 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_62;
  highp vec4 tmpvar_63;
  tmpvar_63.x = worldTangent_4.x;
  tmpvar_63.y = worldBinormal_3.x;
  tmpvar_63.z = worldNormal_5.x;
  tmpvar_63.w = tmpvar_54.x;
  highp vec4 tmpvar_64;
  tmpvar_64.x = worldTangent_4.y;
  tmpvar_64.y = worldBinormal_3.y;
  tmpvar_64.z = worldNormal_5.y;
  tmpvar_64.w = tmpvar_54.y;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.z;
  tmpvar_65.y = worldBinormal_3.z;
  tmpvar_65.z = worldNormal_5.z;
  tmpvar_65.w = tmpvar_54.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_5;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_63;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_65;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_8.x, max (tmpvar_8.y, tmpvar_8.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_8 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_9;
  tmpvar_9 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_10;
  tmpvar_10 = dot (xlv_TEXCOORD0.xyz, tmpvar_9);
  worldN_2.x = tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = dot (xlv_TEXCOORD1.xyz, tmpvar_9);
  worldN_2.y = tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD2.xyz, tmpvar_9);
  worldN_2.z = tmpvar_12;
  mediump vec3 normalWorld_13;
  normalWorld_13 = worldN_2;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_4;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = emission_18;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 49148
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49149
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49150
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 49151
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49152
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 49153
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 49154
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 49155
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 49156
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49157
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 49158
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 49159
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49160
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49161
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49162
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 49163
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49164
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 49165
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 49166
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49167
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 49168
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 49169
    //IF
    if(tb28){
        //Instruction 49170
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 49171
        //IF
        if(tb28){
            //Instruction 49172
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49173
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49174
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49175
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 49176
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 49177
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49178
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49179
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49180
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49181
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49182
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 49183
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 49184
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49185
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49186
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 49187
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49188
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49189
            //FRC
            t2 = fract(t2);
            //Instruction 49190
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49191
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49192
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49193
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49194
            //ADD
            t2 = t2 + t2;
            //Instruction 49195
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49196
            //LT
            tb30 = t6.w<0.0;
            //Instruction 49197
            //MOV
            t6.y = (-t6.w);
            //Instruction 49198
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49199
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 49200
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 49201
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 49202
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 49203
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 49204
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 49205
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49206
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49207
            //MUL
            t32 = t2.x * t32;
            //Instruction 49208
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 49209
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49210
            //MUL
            t30 = t30 * t31;
            //Instruction 49211
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 49212
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49213
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49214
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49215
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49216
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49217
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49218
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49219
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49220
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49221
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49222
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49223
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49224
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 49225
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49226
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 49227
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 49228
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49229
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49230
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49231
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49232
        //ELSE
        } else {
            //Instruction 49233
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49234
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49235
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49236
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49237
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49238
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49239
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49240
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49241
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49242
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49243
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49244
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49245
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49246
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49247
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49248
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49249
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49250
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49251
            //MOV
            t2.y = (-t2.w);
            //Instruction 49252
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49253
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49254
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49255
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49256
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 49257
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 49258
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49259
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49260
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49261
            //MUL
            t30 = t30 * t5.x;
            //Instruction 49262
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 49263
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49264
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49265
        //ENDIF
        }
        //Instruction 49266
    //ENDIF
    }
    //Instruction 49267
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49268
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49269
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49270
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 49271
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 49272
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 49273
    //NE
    tb30 = t28!=0.0;
    //Instruction 49274
    //LOG
    t4.x = log2(t28);
    //Instruction 49275
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49276
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49277
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 49278
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49279
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49280
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49281
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49282
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49283
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49284
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49285
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49286
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49287
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 49288
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49289
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 49290
    //MUL
    t28 = t28 * t30;
    //Instruction 49291
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 49292
    //MOV
    t4.y = t3.y;
    //Instruction 49293
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 49294
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49295
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 49296
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49297
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 49298
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49299
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49300
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49301
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49302
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49303
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49304
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49305
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49306
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49307
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49308
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 49309
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49310
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49311
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 49312
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 49313
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 49314
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49315
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49316
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 49317
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 49318
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 49319
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49320
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 49321
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 49322
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 49323
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 49324
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 49325
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49326
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 49327
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 49328
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 49329
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 49330
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 49331
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 49332
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 49333
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 49334
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 49335
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 49336
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 49337
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 49338
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 49339
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 49340
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 49341
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 49342
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 49343
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 49344
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 49345
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 49346
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 49347
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 49348
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 49349
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 49350
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49351
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 49352
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49353
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec3 t10_0;
mediump vec3 t16_1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_13;
void main()
{
    //Instruction 49118
    //SAMPLE
    t10_0.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 49119
    //ADD
    t16_1.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 49120
    //MAD
    t16_1.xyz = vs_TEXCOORD4.zzz * t16_1.xyz + t10_0.xyz;
    //Instruction 49121
    //MAX
    t16_13 = max(t16_1.z, t16_1.y);
    //Instruction 49122
    //MAX
    t16_13 = max(t16_13, t16_1.x);
    //Instruction 49123
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 49124
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 49125
    //DIV
    t16_13 = t16_2.x / t16_13;
    //Instruction 49126
    //MAD
    t16_0 = t16_13 * 0.500000 + 0.500000;
    //Instruction 49127
    //MUL
    t16_1.xyz = vec3(t16_0) * t16_1.xyz;
    t16_1.xyz = clamp(t16_1.xyz, 0.0, 1.0);
    //Instruction 49128
    //MUL
    t16_1.xyz = t16_1.xyz * vs_TEXCOORD3.xyz;
    //Instruction 49129
    //MOV
    SV_Target0.xyz = t16_1.xyz;
    //Instruction 49130
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49131
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49132
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49133
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 49134
    //MAD
    t10_3.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 49135
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 49136
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 49137
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 49138
    //MAD
    t10_3.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49139
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 49140
    //MOV
    t0.w = 1.0;
    //Instruction 49141
    //DP4
    t16_2.x = dot(unity_SHAr, t0);
    //Instruction 49142
    //DP4
    t16_2.y = dot(unity_SHAg, t0);
    //Instruction 49143
    //DP4
    t16_2.z = dot(unity_SHAb, t0);
    //Instruction 49144
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 49145
    //MUL
    SV_Target3.xyz = t16_1.xyz * t16_2.xyz;
    //Instruction 49146
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49147
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 50302
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50303
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 50304
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 50305
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50306
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 50307
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 50308
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 50309
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 50310
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 50311
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 50312
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50313
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 50314
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 50315
    //IF
    if(tb22){
        //Instruction 50316
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 50317
        //IF
        if(tb22){
            //Instruction 50318
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50319
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 50320
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 50321
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 50322
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 50323
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50324
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50325
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50326
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50327
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50328
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50329
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50330
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 50331
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50332
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 50333
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 50334
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 50335
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50336
            //FRC
            t0 = fract(t0);
            //Instruction 50337
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50338
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 50339
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50340
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50341
            //ADD
            t0 = t0 + t0;
            //Instruction 50342
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 50343
            //LT
            tb23 = t5.w<0.0;
            //Instruction 50344
            //MOV
            t5.y = (-t5.w);
            //Instruction 50345
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 50346
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 50347
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 50348
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 50349
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 50350
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 50351
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 50352
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50353
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50354
            //MUL
            t25 = t0.x * t25;
            //Instruction 50355
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 50356
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50357
            //MUL
            t23 = t23 * t24;
            //Instruction 50358
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 50359
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50360
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50361
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50362
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50363
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 50364
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 50365
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50366
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 50367
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50368
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 50369
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 50370
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 50371
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 50372
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50373
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 50374
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 50375
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 50376
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50377
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50378
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 50379
        //ELSE
        } else {
            //Instruction 50380
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50381
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 50382
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50383
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 50384
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50385
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50386
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 50387
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50388
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 50389
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 50390
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50391
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50392
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50393
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 50394
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50395
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50396
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 50397
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 50398
            //LT
            tb22 = t0.w<0.0;
            //Instruction 50399
            //MOV
            t0.y = (-t0.w);
            //Instruction 50400
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 50401
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 50402
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 50403
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 50404
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 50405
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 50406
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 50407
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50408
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50409
            //MUL
            t24 = t24 * t4.x;
            //Instruction 50410
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 50411
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50412
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50413
        //ENDIF
        }
        //Instruction 50414
    //ENDIF
    }
    //Instruction 50415
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 50416
    //SQRT
    t22 = sqrt(t22);
    //Instruction 50417
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50418
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 50419
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 50420
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 50421
    //NE
    tb3 = t23!=0.0;
    //Instruction 50422
    //LOG
    t10 = log2(t23);
    //Instruction 50423
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 50424
    //EXP
    t10 = exp2(t10);
    //Instruction 50425
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 50426
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50427
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50428
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 50429
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 50430
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50431
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 50432
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50433
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 50434
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 50435
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 50436
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50437
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 50438
    //MUL
    t23 = t23 * t3.x;
    //Instruction 50439
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 50440
    //MOV
    t3.y = t2.y;
    //Instruction 50441
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 50442
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 50443
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 50444
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 50445
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 50446
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 50447
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 50448
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 50449
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 50450
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 50451
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 50452
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 50453
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 50454
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 50455
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 50456
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 50457
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 50458
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 50459
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 50460
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 50461
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 50462
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50463
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50464
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 50465
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 50466
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 50467
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 50468
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 50469
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 50470
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 50471
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 50472
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 50473
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 50474
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 50475
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 50476
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 50477
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50478
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 50479
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 50480
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 50481
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 50482
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 50483
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50484
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 50280
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 50281
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 50282
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 50283
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 50284
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 50285
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50286
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 50287
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50288
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50289
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50290
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 50291
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50292
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50293
    //MOV
    t16_1.w = 1.0;
    //Instruction 50294
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 50295
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 50296
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 50297
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 50298
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 50299
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 50300
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50301
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_19;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (tmpvar_19 + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_53;
  v_53.x = _World2Object[0].x;
  v_53.y = _World2Object[1].x;
  v_53.z = _World2Object[2].x;
  v_53.w = _World2Object[3].x;
  highp vec4 v_54;
  v_54.x = _World2Object[0].y;
  v_54.y = _World2Object[1].y;
  v_54.z = _World2Object[2].y;
  v_54.w = _World2Object[3].y;
  highp vec4 v_55;
  v_55.x = _World2Object[0].z;
  v_55.y = _World2Object[1].z;
  v_55.z = _World2Object[2].z;
  v_55.w = _World2Object[3].z;
  highp vec3 tmpvar_56;
  tmpvar_56 = normalize(((
    (v_53.xyz * _glesNormal.x)
   + 
    (v_54.xyz * _glesNormal.y)
  ) + (v_55.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_56;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_57;
  tmpvar_57.w = 1.0;
  tmpvar_57.xyz = worldNormal_3;
  mediump vec4 normal_58;
  normal_58 = tmpvar_57;
  mediump vec3 x2_59;
  mediump vec4 tmpvar_60;
  tmpvar_60 = (normal_58.xyzz * normal_58.yzzx);
  x2_59.x = dot (unity_SHBr, tmpvar_60);
  x2_59.y = dot (unity_SHBg, tmpvar_60);
  x2_59.z = dot (unity_SHBb, tmpvar_60);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_59 + (unity_SHC.xyz * (
    (normal_58.x * normal_58.x)
   - 
    (normal_58.y * normal_58.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_8;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 49962
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49963
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 49964
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 49965
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49966
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 49967
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 49968
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 49969
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 49970
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 49971
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 49972
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49973
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 49974
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 49975
    //IF
    if(tb22){
        //Instruction 49976
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 49977
        //IF
        if(tb22){
            //Instruction 49978
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49979
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 49980
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 49981
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 49982
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 49983
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 49984
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49985
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49986
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49987
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49988
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 49989
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 49990
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 49991
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49992
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 49993
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 49994
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 49995
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49996
            //FRC
            t0 = fract(t0);
            //Instruction 49997
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49998
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 49999
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50000
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50001
            //ADD
            t0 = t0 + t0;
            //Instruction 50002
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 50003
            //LT
            tb23 = t5.w<0.0;
            //Instruction 50004
            //MOV
            t5.y = (-t5.w);
            //Instruction 50005
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 50006
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 50007
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 50008
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 50009
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 50010
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 50011
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 50012
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50013
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50014
            //MUL
            t25 = t0.x * t25;
            //Instruction 50015
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 50016
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50017
            //MUL
            t23 = t23 * t24;
            //Instruction 50018
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 50019
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50020
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50021
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50022
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50023
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 50024
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 50025
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50026
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 50027
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50028
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 50029
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 50030
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 50031
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 50032
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50033
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 50034
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 50035
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 50036
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50037
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50038
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 50039
        //ELSE
        } else {
            //Instruction 50040
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50041
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 50042
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50043
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 50044
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50045
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50046
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 50047
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50048
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 50049
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 50050
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50051
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50052
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50053
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 50054
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50055
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50056
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 50057
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 50058
            //LT
            tb22 = t0.w<0.0;
            //Instruction 50059
            //MOV
            t0.y = (-t0.w);
            //Instruction 50060
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 50061
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 50062
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 50063
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 50064
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 50065
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 50066
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 50067
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50068
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50069
            //MUL
            t24 = t24 * t4.x;
            //Instruction 50070
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 50071
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50072
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50073
        //ENDIF
        }
        //Instruction 50074
    //ENDIF
    }
    //Instruction 50075
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 50076
    //SQRT
    t22 = sqrt(t22);
    //Instruction 50077
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50078
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 50079
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 50080
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 50081
    //NE
    tb3 = t23!=0.0;
    //Instruction 50082
    //LOG
    t10 = log2(t23);
    //Instruction 50083
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 50084
    //EXP
    t10 = exp2(t10);
    //Instruction 50085
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 50086
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50087
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50088
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 50089
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 50090
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50091
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 50092
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50093
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 50094
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 50095
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 50096
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50097
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 50098
    //MUL
    t23 = t23 * t3.x;
    //Instruction 50099
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 50100
    //MOV
    t3.y = t2.y;
    //Instruction 50101
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 50102
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 50103
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 50104
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 50105
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 50106
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 50107
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 50108
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 50109
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 50110
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 50111
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 50112
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 50113
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 50114
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 50115
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 50116
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 50117
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 50118
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 50119
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 50120
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 50121
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 50122
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50123
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50124
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 50125
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 50126
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 50127
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 50128
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 50129
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 50130
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 50131
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 50132
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 50133
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 50134
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 50135
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 50136
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 50137
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50138
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 50139
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 50140
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 50141
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 50142
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 50143
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50144
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 49941
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 49942
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 49943
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 49944
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 49945
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 49946
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49947
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 49948
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49949
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49950
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49951
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 49952
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49953
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49954
    //MOV
    t16_1.w = 1.0;
    //Instruction 49955
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 49956
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 49957
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 49958
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD7.xyz;
    //Instruction 49959
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 49960
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49961
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 49385
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49386
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49387
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 49388
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49389
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 49390
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 49391
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 49392
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 49393
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49394
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 49395
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 49396
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49397
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49398
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49399
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 49400
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49401
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 49402
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 49403
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49404
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 49405
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 49406
    //IF
    if(tb25){
        //Instruction 49407
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 49408
        //IF
        if(tb25){
            //Instruction 49409
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49410
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49411
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49412
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 49413
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 49414
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49415
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49416
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49417
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49418
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49419
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 49420
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 49421
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49422
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49423
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 49424
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49425
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49426
            //FRC
            t2 = fract(t2);
            //Instruction 49427
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49428
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49429
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49430
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49431
            //ADD
            t2 = t2 + t2;
            //Instruction 49432
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49433
            //LT
            tb27 = t6.w<0.0;
            //Instruction 49434
            //MOV
            t6.y = (-t6.w);
            //Instruction 49435
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49436
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 49437
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 49438
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 49439
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 49440
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 49441
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 49442
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49443
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49444
            //MUL
            t29 = t2.x * t29;
            //Instruction 49445
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 49446
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49447
            //MUL
            t27 = t27 * t28;
            //Instruction 49448
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 49449
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49450
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49451
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49452
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49453
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49454
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49455
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49456
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49457
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49458
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49459
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49460
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49461
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 49462
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49463
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 49464
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 49465
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49466
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49467
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49468
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49469
        //ELSE
        } else {
            //Instruction 49470
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49471
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49472
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49473
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49474
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49475
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49476
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49477
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49478
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49479
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49480
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49481
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49482
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49483
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49484
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49485
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49486
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49487
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49488
            //MOV
            t2.y = (-t2.w);
            //Instruction 49489
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49490
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49491
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49492
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49493
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 49494
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 49495
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49496
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49497
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49498
            //MUL
            t27 = t27 * t5.x;
            //Instruction 49499
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 49500
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49501
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49502
        //ENDIF
        }
        //Instruction 49503
    //ENDIF
    }
    //Instruction 49504
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49505
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49506
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49507
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 49508
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 49509
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 49510
    //NE
    tb27 = t25!=0.0;
    //Instruction 49511
    //LOG
    t4.x = log2(t25);
    //Instruction 49512
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49513
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49514
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 49515
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49516
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49517
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49518
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49519
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49520
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49521
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49522
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49523
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49524
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 49525
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49526
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 49527
    //MUL
    t25 = t25 * t27;
    //Instruction 49528
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 49529
    //MOV
    t4.y = t3.y;
    //Instruction 49530
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 49531
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49532
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 49533
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49534
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 49535
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49536
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49537
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49538
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49539
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49540
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49541
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49542
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49543
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 49544
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 49545
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 49546
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49547
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49548
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 49549
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 49550
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 49551
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49552
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49553
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 49554
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 49555
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 49556
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 49557
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 49558
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 49559
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 49560
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 49561
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 49562
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 49563
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 49564
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 49565
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 49566
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 49567
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49568
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 49569
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 49570
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 49571
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 49572
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49573
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 49354
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 49355
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 49356
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 49357
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 49358
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 49359
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 49360
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 49361
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 49362
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 49363
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 49364
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 49365
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 49366
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 49367
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 49368
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49369
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 49370
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49371
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49372
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49373
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 49374
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49375
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49376
    //MOV
    t16_1.w = 1.0;
    //Instruction 49377
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 49378
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 49379
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 49380
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 49381
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 49382
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 49383
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49384
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_21;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (tmpvar_21 + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  tmpvar_5 = tmpvar_7;
  highp vec4 v_55;
  v_55.x = _World2Object[0].x;
  v_55.y = _World2Object[1].x;
  v_55.z = _World2Object[2].x;
  v_55.w = _World2Object[3].x;
  highp vec4 v_56;
  v_56.x = _World2Object[0].y;
  v_56.y = _World2Object[1].y;
  v_56.z = _World2Object[2].y;
  v_56.w = _World2Object[3].y;
  highp vec4 v_57;
  v_57.x = _World2Object[0].z;
  v_57.y = _World2Object[1].z;
  v_57.z = _World2Object[2].z;
  v_57.w = _World2Object[3].z;
  highp vec3 tmpvar_58;
  tmpvar_58 = normalize(((
    (v_55.xyz * _glesNormal.x)
   + 
    (v_56.xyz * _glesNormal.y)
  ) + (v_57.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_58;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_59;
  tmpvar_59.w = 1.0;
  tmpvar_59.xyz = worldNormal_3;
  mediump vec4 normal_60;
  normal_60 = tmpvar_59;
  mediump vec3 x2_61;
  mediump vec4 tmpvar_62;
  tmpvar_62 = (normal_60.xyzz * normal_60.yzzx);
  x2_61.x = dot (unity_SHBr, tmpvar_62);
  x2_61.y = dot (unity_SHBg, tmpvar_62);
  x2_61.z = dot (unity_SHBb, tmpvar_62);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_61 + (unity_SHC.xyz * (
    (normal_60.x * normal_60.x)
   - 
    (normal_60.y * normal_60.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 50515
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50516
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50517
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 50518
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50519
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 50520
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 50521
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 50522
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 50523
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50524
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 50525
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 50526
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50527
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50528
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50529
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 50530
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50531
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 50532
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 50533
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50534
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50535
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 50536
    //IF
    if(tb25){
        //Instruction 50537
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 50538
        //IF
        if(tb25){
            //Instruction 50539
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50540
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50541
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50542
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 50543
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 50544
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 50545
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50546
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50547
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50548
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50549
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 50550
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 50551
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50552
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50553
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 50554
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50555
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50556
            //FRC
            t2 = fract(t2);
            //Instruction 50557
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50558
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 50559
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50560
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50561
            //ADD
            t2 = t2 + t2;
            //Instruction 50562
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 50563
            //LT
            tb27 = t6.w<0.0;
            //Instruction 50564
            //MOV
            t6.y = (-t6.w);
            //Instruction 50565
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 50566
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 50567
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 50568
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 50569
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 50570
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 50571
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 50572
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50573
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50574
            //MUL
            t29 = t2.x * t29;
            //Instruction 50575
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 50576
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50577
            //MUL
            t27 = t27 * t28;
            //Instruction 50578
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 50579
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50580
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50581
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50582
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50583
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50584
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50585
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50586
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50587
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50588
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50589
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50590
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 50591
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 50592
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50593
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 50594
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 50595
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 50596
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50597
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 50598
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 50599
        //ELSE
        } else {
            //Instruction 50600
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50601
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50602
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50603
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50604
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50605
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50606
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50607
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 50608
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 50609
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50610
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50611
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50612
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 50613
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50614
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50615
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 50616
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 50617
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50618
            //MOV
            t2.y = (-t2.w);
            //Instruction 50619
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50620
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50621
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 50622
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 50623
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 50624
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 50625
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50626
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50627
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50628
            //MUL
            t27 = t27 * t5.x;
            //Instruction 50629
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 50630
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 50631
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50632
        //ENDIF
        }
        //Instruction 50633
    //ENDIF
    }
    //Instruction 50634
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 50635
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50636
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50637
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 50638
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 50639
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 50640
    //NE
    tb27 = t25!=0.0;
    //Instruction 50641
    //LOG
    t4.x = log2(t25);
    //Instruction 50642
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 50643
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 50644
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 50645
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50646
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50647
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 50648
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 50649
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50650
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 50651
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50652
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 50653
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50654
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 50655
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50656
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 50657
    //MUL
    t25 = t25 * t27;
    //Instruction 50658
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 50659
    //MOV
    t4.y = t3.y;
    //Instruction 50660
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 50661
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50662
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 50663
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50664
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 50665
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50666
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50667
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50668
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50669
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50670
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50671
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50672
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50673
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 50674
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 50675
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 50676
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50677
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50678
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 50679
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 50680
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 50681
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50682
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50683
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 50684
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 50685
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 50686
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 50687
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 50688
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 50689
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 50690
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 50691
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 50692
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 50693
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 50694
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 50695
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 50696
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50697
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50698
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 50699
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 50700
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 50701
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 50702
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50703
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
mediump vec4 t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 50485
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 50486
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 50487
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 50488
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 50489
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 50490
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 50491
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 50492
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 50493
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 50494
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 50495
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 50496
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 50497
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 50498
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 50499
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50500
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 50501
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50502
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50503
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50504
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 50505
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50506
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50507
    //MOV
    t16_1.w = 1.0;
    //Instruction 50508
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 50509
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 50510
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 50511
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 50512
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 50513
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50514
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_7 = tmpvar_10;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 50180
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50181
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50182
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 50183
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50184
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 50185
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 50186
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 50187
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 50188
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50189
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 50190
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 50191
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50192
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50193
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50194
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 50195
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50196
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 50197
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 50198
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50199
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50200
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 50201
    //IF
    if(tb28){
        //Instruction 50202
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 50203
        //IF
        if(tb28){
            //Instruction 50204
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50205
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50206
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50207
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 50208
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 50209
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50210
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50211
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50212
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50213
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50214
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 50215
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 50216
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50217
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50218
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 50219
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50220
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50221
            //FRC
            t2 = fract(t2);
            //Instruction 50222
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50223
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 50224
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50225
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50226
            //ADD
            t2 = t2 + t2;
            //Instruction 50227
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 50228
            //LT
            tb30 = t6.w<0.0;
            //Instruction 50229
            //MOV
            t6.y = (-t6.w);
            //Instruction 50230
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 50231
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 50232
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 50233
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 50234
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 50235
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 50236
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 50237
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50238
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50239
            //MUL
            t32 = t2.x * t32;
            //Instruction 50240
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 50241
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50242
            //MUL
            t30 = t30 * t31;
            //Instruction 50243
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 50244
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50245
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50246
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50247
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50248
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50249
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50250
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50251
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50252
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50253
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50254
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50255
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 50256
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 50257
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50258
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 50259
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 50260
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 50261
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50262
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50263
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 50264
        //ELSE
        } else {
            //Instruction 50265
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50266
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50267
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50268
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50269
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50270
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50271
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50272
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 50273
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 50274
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50275
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50276
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50277
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 50278
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50279
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50280
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 50281
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 50282
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50283
            //MOV
            t2.y = (-t2.w);
            //Instruction 50284
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50285
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50286
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 50287
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 50288
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 50289
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 50290
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50291
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50292
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50293
            //MUL
            t30 = t30 * t5.x;
            //Instruction 50294
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 50295
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 50296
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50297
        //ENDIF
        }
        //Instruction 50298
    //ENDIF
    }
    //Instruction 50299
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 50300
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50301
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50302
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 50303
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 50304
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 50305
    //NE
    tb30 = t28!=0.0;
    //Instruction 50306
    //LOG
    t4.x = log2(t28);
    //Instruction 50307
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 50308
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 50309
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 50310
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50311
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50312
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 50313
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 50314
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50315
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 50316
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50317
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 50318
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50319
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 50320
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50321
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 50322
    //MUL
    t28 = t28 * t30;
    //Instruction 50323
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 50324
    //MOV
    t4.y = t3.y;
    //Instruction 50325
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 50326
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50327
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 50328
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50329
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 50330
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50331
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50332
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50333
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50334
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50335
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50336
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50337
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50338
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 50339
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 50340
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 50341
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50342
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50343
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 50344
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 50345
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 50346
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50347
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50348
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 50349
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 50350
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 50351
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50352
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 50353
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 50354
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 50355
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 50356
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 50357
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50358
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 50359
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 50360
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 50361
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 50362
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 50363
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 50364
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 50365
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 50366
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 50367
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 50368
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 50369
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 50370
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 50371
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 50372
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 50373
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 50374
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 50375
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 50376
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 50377
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 50378
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 50379
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 50380
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 50381
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 50382
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50383
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 50384
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 50385
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 50386
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 50387
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50388
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 50145
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 50146
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 50147
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 50148
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 50149
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 50150
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 50151
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 50152
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 50153
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 50154
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 50155
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 50156
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 50157
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 50158
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 50159
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 50160
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 50161
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50162
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50163
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50164
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 50165
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 50166
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 50167
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 50168
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 50169
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50170
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 50171
    //MOV
    t1.w = 1.0;
    //Instruction 50172
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 50173
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 50174
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 50175
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 50176
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 50177
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 50178
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50179
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_22;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (tmpvar_22 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_56;
  tmpvar_56 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_60;
  highp mat3 tmpvar_61;
  tmpvar_61[0] = _Object2World[0].xyz;
  tmpvar_61[1] = _Object2World[1].xyz;
  tmpvar_61[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize((tmpvar_61 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_62;
  lowp vec3 tmpvar_63;
  tmpvar_63 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_64;
  tmpvar_64 = (tmpvar_63 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_64;
  highp vec4 tmpvar_65;
  tmpvar_65.x = worldTangent_4.x;
  tmpvar_65.y = worldBinormal_3.x;
  tmpvar_65.z = worldNormal_5.x;
  tmpvar_65.w = tmpvar_56.x;
  highp vec4 tmpvar_66;
  tmpvar_66.x = worldTangent_4.y;
  tmpvar_66.y = worldBinormal_3.y;
  tmpvar_66.z = worldNormal_5.y;
  tmpvar_66.w = tmpvar_56.y;
  highp vec4 tmpvar_67;
  tmpvar_67.x = worldTangent_4.z;
  tmpvar_67.y = worldBinormal_3.z;
  tmpvar_67.z = worldNormal_5.z;
  tmpvar_67.w = tmpvar_56.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_5;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_65;
  xlv_TEXCOORD1 = tmpvar_66;
  xlv_TEXCOORD2 = tmpvar_67;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_6 = tmpvar_9;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 49608
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49609
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49610
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 49611
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49612
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 49613
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 49614
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 49615
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 49616
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49617
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 49618
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 49619
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49620
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49621
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49622
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 49623
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49624
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 49625
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 49626
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49627
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 49628
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 49629
    //IF
    if(tb28){
        //Instruction 49630
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 49631
        //IF
        if(tb28){
            //Instruction 49632
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49633
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49634
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49635
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 49636
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 49637
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49638
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49639
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49640
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49641
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49642
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 49643
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 49644
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49645
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49646
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 49647
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49648
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49649
            //FRC
            t2 = fract(t2);
            //Instruction 49650
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49651
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49652
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49653
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49654
            //ADD
            t2 = t2 + t2;
            //Instruction 49655
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49656
            //LT
            tb30 = t6.w<0.0;
            //Instruction 49657
            //MOV
            t6.y = (-t6.w);
            //Instruction 49658
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49659
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 49660
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 49661
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 49662
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 49663
            //MAD
            t30 = t6.y * t31 + t30;
     