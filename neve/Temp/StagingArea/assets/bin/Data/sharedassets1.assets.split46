 highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 64866
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 64867
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 64868
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 64869
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64870
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64871
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 64872
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 64873
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64874
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64875
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64876
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64877
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64878
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64879
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64880
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 64881
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64882
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 64883
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64884
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 64885
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 64886
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 64887
    //MUL
    t3.y = t0.y * t26;
    //Instruction 64888
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 64889
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 64890
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 64891
    //LOG
    t26 = log2(t10);
    //Instruction 64892
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 64893
    //EXP
    t26 = exp2(t26);
    //Instruction 64894
    //NE
    tb27 = t10!=0.0;
    //Instruction 64895
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 64896
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 64897
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 64898
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 64899
    //MUL
    t10 = t0.x * t10;
    //Instruction 64900
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 64901
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 64902
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64903
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 64904
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 64905
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 64906
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 64907
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 64908
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 64909
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 64910
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 64911
    //MOV
    t5.y = t3.y;
    //Instruction 64912
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 64913
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 64914
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 64915
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 64916
    //SQRT
    t27 = sqrt(t27);
    //Instruction 64917
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 64918
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 64919
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 64920
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 64921
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 64922
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 64923
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64924
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 64925
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 64926
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 64927
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 64928
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 64929
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 64930
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 64931
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 64932
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64933
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 64934
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 64935
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 64936
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 64937
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 64938
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 64939
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 64940
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 64941
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 64942
    //MOV
    t7.z = t3.x;
    //Instruction 64943
    //MOV
    t7.x = t5.z;
    //Instruction 64944
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 64945
    //MOV
    t7.z = t3.y;
    //Instruction 64946
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 64947
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 64948
    //MOV
    t7.x = t5.x;
    //Instruction 64949
    //MOV
    t3.x = t5.y;
    //Instruction 64950
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 64951
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 64952
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 64953
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 64954
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 64955
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 64956
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64957
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 64958
    //ADD
    t1 = t9.z + t1;
    //Instruction 64959
    //FRC
    t1 = fract(t1);
    //Instruction 64960
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 64961
    //MOV
    vs_TEXCOORD5.z = t1;
    //Instruction 64962
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 64963
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 64964
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 64965
    //MUL
    t1 = t1 * t9.x;
    //Instruction 64966
    //MUL
    t9.x = t1 * t1;
    //Instruction 64967
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 64968
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 64969
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 64970
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 64971
    //MUL
    t17.x = t9.x * t1;
    //Instruction 64972
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 64973
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 64974
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 64975
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 64976
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 64977
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 64978
    //ADD
    t1 = t9.x + t1;
    //Instruction 64979
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 64980
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 64981
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 64982
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 64983
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 64984
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 64985
    //LT
    tb9 = t1<0.0;
    //Instruction 64986
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 64987
    //ADD
    t1 = t9.x + t1;
    //Instruction 64988
    //ADD
    t1 = t0.z + t1;
    //Instruction 64989
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 64990
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 64991
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 64992
    //GE
    tb9 = t1>=(-t1);
    //Instruction 64993
    //FRC
    t1 = fract(abs(t1));
    //Instruction 64994
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 64995
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 64996
    //FTOU
    tu1 = uint(t1);
    //Instruction 64997
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 64998
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 64999
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65000
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 65001
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
highp vec3 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
lowp vec3 t10_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t18;
bool tb18;
mediump float t16_20;
void main()
{
    //Instruction 64827
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64828
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64829
    //LT
    tb18 = t10_1.x<0.0;
    //Instruction 64830
    //DISCARD
    if((int(tb18))!=0){discard;}
    //Instruction 64831
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 64832
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 64833
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64834
    //MAD
    t16_8.xyz = vs_TEXCOORD5.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 64835
    //MAX
    t16_3.x = max(t16_8.z, t16_8.y);
    //Instruction 64836
    //MAX
    t16_3.x = max(t16_8.x, t16_3.x);
    //Instruction 64837
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 64838
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 64839
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_8.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 64840
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64841
    //MUL
    t16_3.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 64842
    //MAD
    t16_3.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_3.xyz;
    //Instruction 64843
    //MAD
    t16_3.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_3.xyz;
    //Instruction 64844
    //ADD
    t16_3.xyz = t16_3.xyz + _LightMatrix0[3].xyz;
    //Instruction 64845
    //DP3
    t16_0 = dot(t16_3.xyz, t16_3.xyz);
    //Instruction 64846
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_3.xyz).w;
    //Instruction 64847
    //SAMPLE
    t10_0.x = texture(_LightTextureB0, vec2(t16_0)).w;
    //Instruction 64848
    //MUL
    t16_0 = t10_6 * t10_0.x;
    //Instruction 64849
    //MUL
    t16_3.xyz = vec3(t16_0) * _LightColor0.xyz;
    //Instruction 64850
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 64851
    //ADD
    t0.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64852
    //DP3
    t18 = dot(t0.xyz, t0.xyz);
    //Instruction 64853
    //RSQ
    t18 = inversesqrt(t18);
    //Instruction 64854
    //MUL
    t0.xyz = vec3(t18) * t0.xyz;
    //Instruction 64855
    //SAMPLE
    t10_4.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64856
    //MAD
    t10_1.xyz = t10_4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64857
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 64858
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 64859
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 64860
    //DP3
    t16_20 = dot(t10_5.xyz, t0.xyz);
    //Instruction 64861
    //MAX
    t16_20 = max(t16_20, 0.0);
    //Instruction 64862
    //MUL
    t16_2.xyz = vec3(t16_20) * t16_2.xyz;
    //Instruction 64863
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 64864
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64865
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_41;
  tmpvar_41 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_41;
  tmpvar_5 = _Color;
  highp vec4 v_42;
  v_42.x = _World2Object[0].x;
  v_42.y = _World2Object[1].x;
  v_42.z = _World2Object[2].x;
  v_42.w = _World2Object[3].x;
  highp vec4 v_43;
  v_43.x = _World2Object[0].z;
  v_43.y = _World2Object[1].z;
  v_43.z = _World2Object[2].z;
  v_43.w = _World2Object[3].z;
  highp vec3 tmpvar_44;
  tmpvar_44 = normalize(((v_42.xyz * tmpvar_17.z) + (v_43.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_44;
  highp mat3 tmpvar_45;
  tmpvar_45[0] = _Object2World[0].xyz;
  tmpvar_45[1] = _Object2World[1].xyz;
  tmpvar_45[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_46;
  tmpvar_46 = normalize((tmpvar_45 * tmpvar_17));
  worldTangent_3 = tmpvar_46;
  lowp vec3 tmpvar_47;
  tmpvar_47 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_48;
  tmpvar_48 = -(tmpvar_47);
  worldBinormal_2 = tmpvar_48;
  lowp vec3 tmpvar_49;
  tmpvar_49.x = worldTangent_3.x;
  tmpvar_49.y = worldBinormal_2.x;
  tmpvar_49.z = worldNormal_4.x;
  lowp vec3 tmpvar_50;
  tmpvar_50.x = worldTangent_3.y;
  tmpvar_50.y = worldBinormal_2.y;
  tmpvar_50.z = worldNormal_4.y;
  lowp vec3 tmpvar_51;
  tmpvar_51.x = worldTangent_3.z;
  tmpvar_51.y = worldBinormal_2.z;
  tmpvar_51.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_49;
  xlv_TEXCOORD1 = tmpvar_50;
  xlv_TEXCOORD2 = tmpvar_51;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_12;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_13;
  x_13 = (tmpvar_9 - _Cutoff);
  if ((x_13 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_14 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_15;
  tmpvar_15 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_15);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_15);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_15);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump float t16_0;
highp float t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec3 t9;
highp int ti9;
bool tb9;
highp float t10;
highp vec2 t17;
bool tb17;
highp vec2 t18;
highp uint tu18;
bool tb25;
highp float t26;
highp float t27;
bool tb27;
void main()
{
    //Instruction 66652
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66653
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66654
    //LT
    tb9 = 0.0<_InstanceData.x;
    //Instruction 66655
    //MOVC
    t0 = (bool(tb9)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66656
    //ADD
    t9.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66657
    //ADD
    t2.x = t0.w + t9.x;
    //Instruction 66658
    //MAD
    t2.y = t0.w * 0.800000 + t9.y;
    //Instruction 66659
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66660
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66661
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66662
    //MUL
    t18.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66663
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66664
    //MAD
    t2.xy = t18.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66665
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66666
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66667
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66668
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t10;
    //Instruction 66669
    //DIV
    t10 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66670
    //MUL
    t18.x = in_COLOR0.w * 255.000000;
    //Instruction 66671
    //FTOU
    tu18 = uint(t18.x);
    //Instruction 66672
    //MAD
    t26 = in_TEXCOORD0.y * _TreeSize[int(tu18) + 0].y + _TreeSize[int(tu18) + 0].z;
    //Instruction 66673
    //MUL
    t3.y = t0.y * t26;
    //Instruction 66674
    //MAD
    t10 = (-t10) * 0.250000 + t3.y;
    //Instruction 66675
    //MAX
    t10 = max(t10, 0.0);
    //Instruction 66676
    //MUL
    t10 = t10 * _ST_WindGlobal.z;
    //Instruction 66677
    //LOG
    t26 = log2(t10);
    //Instruction 66678
    //MUL
    t26 = t26 * _ST_WindGlobal.w;
    //Instruction 66679
    //EXP
    t26 = exp2(t26);
    //Instruction 66680
    //NE
    tb27 = t10!=0.0;
    //Instruction 66681
    //MOVC
    t10 = (tb27) ? t26 : t10;
    //Instruction 66682
    //MUL
    t2.x = t10 * t2.x;
    //Instruction 66683
    //ADD
    t10 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66684
    //MUL
    t10 = t10 * _TreeSize[int(tu18) + 0].x;
    //Instruction 66685
    //MUL
    t10 = t0.x * t10;
    //Instruction 66686
    //ADD
    t4.xyz = (-t9.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66687
    //DP3
    t26 = dot(t4.xyz, t4.xyz);
    //Instruction 66688
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66689
    //MUL
    t4.xy = vec2(t26) * t4.xz;
    //Instruction 66690
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66691
    //DP2
    t26 = dot(t4.xz, t4.xw);
    //Instruction 66692
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66693
    //RSQ
    t26 = inversesqrt(t26);
    //Instruction 66694
    //MUL
    t4.xy = vec2(t26) * t4.xy;
    //Instruction 66695
    //MUL
    t3.xz = vec2(t10) * t4.xy;
    //Instruction 66696
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66697
    //MOV
    t5.y = t3.y;
    //Instruction 66698
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66699
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66700
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66701
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 66702
    //SQRT
    t27 = sqrt(t27);
    //Instruction 66703
    //MUL
    t2.xyw = t2.xyw * vec3(t27);
    //Instruction 66704
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66705
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66706
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66707
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66708
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66709
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66710
    //MUL
    t3.y = t4.y * _World2Object[0].x;
    //Instruction 66711
    //MUL
    t3.z = t4.y * _World2Object[1].x;
    //Instruction 66712
    //MUL
    t3.x = t4.y * _World2Object[2].x;
    //Instruction 66713
    //MUL
    t5.y = (-t4.x) * _World2Object[0].z;
    //Instruction 66714
    //MUL
    t5.z = (-t4.x) * _World2Object[1].z;
    //Instruction 66715
    //MUL
    t5.x = (-t4.x) * _World2Object[2].z;
    //Instruction 66716
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66717
    //DP3
    t1 = dot(t3.xyz, t3.xyz);
    //Instruction 66718
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66719
    //MUL
    t3.xyz = vec3(t1) * t3.yzx;
    //Instruction 66720
    //MUL
    t5.xyz = t4.yyy * _Object2World[2].yzx;
    //Instruction 66721
    //MAD
    t5.xyz = _Object2World[0].yzx * t4.xxx + t5.xyz;
    //Instruction 66722
    //DP3
    t1 = dot(t5.xyz, t5.xyz);
    //Instruction 66723
    //RSQ
    t1 = inversesqrt(t1);
    //Instruction 66724
    //MUL
    t5.xyz = vec3(t1) * t5.xyz;
    //Instruction 66725
    //MUL
    t10_6.xyz = t3.zxy * t5.xyz;
    //Instruction 66726
    //MAD
    t10_6.xyz = t3.yzx * t5.yzx + (-t10_6.xyz);
    //Instruction 66727
    //MOV
    t7.y = (-t10_6.x);
    //Instruction 66728
    //MOV
    t7.z = t3.x;
    //Instruction 66729
    //MOV
    t7.x = t5.z;
    //Instruction 66730
    //MOV
    vs_TEXCOORD0.xyz = t7.xyz;
    //Instruction 66731
    //MOV
    t7.z = t3.y;
    //Instruction 66732
    //MOV
    t7.y = (-t10_6.y);
    //Instruction 66733
    //MOV
    t3.y = (-t10_6.z);
    //Instruction 66734
    //MOV
    t7.x = t5.x;
    //Instruction 66735
    //MOV
    t3.x = t5.y;
    //Instruction 66736
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66737
    //MOV
    vs_TEXCOORD1.xyz = t7.xyz;
    //Instruction 66738
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66739
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66740
    //MAD
    t2.xyw = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66741
    //ADD
    vs_TEXCOORD3.xyz = t2.xyw + _Object2World[3].xyz;
    //Instruction 66742
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66743
    //ADD
    t1 = t9.y + t9.x;
    //Instruction 66744
    //ADD
    t1 = t9.z + t1;
    //Instruction 66745
    //FRC
    t1 = fract(t1);
    //Instruction 66746
    //MUL
    t1 = t1 * _HueVariation.w;
    t1 = clamp(t1, 0.0, 1.0);
    //Instruction 66747
    //MOV
    vs_TEXCOORD5.z = t1;
    //Instruction 66748
    //MAX
    t1 = max(abs(t4.y), abs(t4.x));
    //Instruction 66749
    //DIV
    t1 = float(1.0) / t1;
    //Instruction 66750
    //MIN
    t9.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66751
    //MUL
    t1 = t1 * t9.x;
    //Instruction 66752
    //MUL
    t9.x = t1 * t1;
    //Instruction 66753
    //MAD
    t17.x = t9.x * 0.020835 + -0.085133;
    //Instruction 66754
    //MAD
    t17.x = t9.x * t17.x + 0.180141;
    //Instruction 66755
    //MAD
    t17.x = t9.x * t17.x + -0.330299;
    //Instruction 66756
    //MAD
    t9.x = t9.x * t17.x + 0.999866;
    //Instruction 66757
    //MUL
    t17.x = t9.x * t1;
    //Instruction 66758
    //MAD
    t17.x = t17.x * -2.000000 + 1.570796;
    //Instruction 66759
    //LT
    tb25 = abs(t4.y)<abs(t4.x);
    //Instruction 66760
    //AND
    t17.x = tb25 ? t17.x : float(0.0);
    //Instruction 66761
    //MAD
    t1 = t1 * t9.x + t17.x;
    //Instruction 66762
    //LT
    tb9 = t4.y<(-t4.y);
    //Instruction 66763
    //AND
    t9.x = tb9 ? -3.141593 : float(0.0);
    //Instruction 66764
    //ADD
    t1 = t9.x + t1;
    //Instruction 66765
    //MIN
    t9.x = min(t4.y, (-t4.x));
    //Instruction 66766
    //MAX
    t17.x = max(t4.y, (-t4.x));
    //Instruction 66767
    //GE
    tb17 = t17.x>=(-t17.x);
    //Instruction 66768
    //LT
    tb9 = t9.x<(-t9.x);
    //Instruction 66769
    //AND
    ti9 = int(uint(tb17) & uint(tb9));
    //Instruction 66770
    //MOVC
    t1 = (ti9 != 0) ? (-t1) : t1;
    //Instruction 66771
    //LT
    tb9 = t1<0.0;
    //Instruction 66772
    //AND
    t9.x = tb9 ? 6.283185 : float(0.0);
    //Instruction 66773
    //ADD
    t1 = t9.x + t1;
    //Instruction 66774
    //ADD
    t1 = t0.z + t1;
    //Instruction 66775
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].y + 0.500000;
    //Instruction 66776
    //ROUND_NI
    t1 = floor(t1);
    //Instruction 66777
    //DIV
    t1 = t1 / _TreeInfo[int(tu18) + 0].x;
    //Instruction 66778
    //GE
    tb9 = t1>=(-t1);
    //Instruction 66779
    //FRC
    t1 = fract(abs(t1));
    //Instruction 66780
    //MOVC
    t1 = (tb9) ? t1 : (-t1);
    //Instruction 66781
    //MAD
    t1 = t1 * _TreeInfo[int(tu18) + 0].x + _TreeInfo[int(tu18) + 0].z;
    //Instruction 66782
    //FTOU
    tu1 = uint(t1);
    //Instruction 66783
    //LT
    tb9 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66784
    //MAD
    t17.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66785
    //MAD
    t2.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66786
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb9)) ? t17.xy : t2.xy;
    //Instruction 66787
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_7;
bool tb15;
mediump float t16_17;
void main()
{
    //Instruction 66620
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66621
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66622
    //LT
    tb15 = t10_1.x<0.0;
    //Instruction 66623
    //DISCARD
    if((int(tb15))!=0){discard;}
    //Instruction 66624
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 66625
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 66626
    //ADD
    t16_7.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66627
    //MAD
    t16_7.xyz = vs_TEXCOORD5.zzz * t16_7.xyz + t10_0.xyz;
    //Instruction 66628
    //MAX
    t16_3.x = max(t16_7.z, t16_7.y);
    //Instruction 66629
    //MAX
    t16_3.x = max(t16_7.x, t16_3.x);
    //Instruction 66630
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 66631
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 66632
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_7.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 66633
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66634
    //MUL
    t16_3.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 66635
    //MAD
    t16_3.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_3.xy;
    //Instruction 66636
    //MAD
    t16_3.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_3.xy;
    //Instruction 66637
    //ADD
    t16_3.xy = t16_3.xy + _LightMatrix0[3].xy;
    //Instruction 66638
    //SAMPLE
    t10_0.x = texture(_LightTexture0, t16_3.xy).w;
    //Instruction 66639
    //MUL
    t16_3.xyz = t10_0.xxx * _LightColor0.xyz;
    //Instruction 66640
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 66641
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66642
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66643
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 66644
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 66645
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 66646
    //DP3
    t16_17 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66647
    //MAX
    t16_17 = max(t16_17, 0.0);
    //Instruction 66648
    //MUL
    t16_2.xyz = vec3(t16_17) * t16_2.xyz;
    //Instruction 66649
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 66650
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66651
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 64372
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 64373
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 64374
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64375
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 64376
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 64377
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64378
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 64379
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64380
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 64381
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64382
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 64383
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 64384
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 64385
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64386
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 64387
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64388
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64389
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 64390
    //FTOU
    tu15 = uint(t15);
    //Instruction 64391
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 64392
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 64393
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64394
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 64395
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 64396
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 64397
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 64398
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 64399
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 64400
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 64401
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 64402
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 64403
    //LOG
    t1.x = log2(t5);
    //Instruction 64404
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 64405
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 64406
    //NE
    tb6 = t5!=0.0;
    //Instruction 64407
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 64408
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 64409
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 64410
    //MOV
    t1.y = t2.w;
    //Instruction 64411
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 64412
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64413
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64414
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 64415
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 64416
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64417
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 64418
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 64419
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 64420
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 64421
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 64422
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 64423
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 64424
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 64425
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64426
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64427
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64428
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64429
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64430
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64431
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64432
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64433
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64434
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64435
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64436
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 64437
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64438
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 64439
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 64440
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 64441
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 64442
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 64443
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 64444
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64445
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 64446
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 64447
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 64448
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 64449
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64450
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64451
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64452
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64453
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 64454
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 64455
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64456
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 64457
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 64458
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64459
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 64460
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 64461
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 64462
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 64463
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 64464
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 64465
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 64466
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 64341
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 64342
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 64343
    //MOV
    t1.x = t16_0.x;
    //Instruction 64344
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 64345
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64346
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 64347
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64348
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64349
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64350
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64351
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64352
    //LT
    tb1 = t10_2<0.0;
    //Instruction 64353
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64354
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 64355
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 64356
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 64357
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 64358
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 64359
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 64360
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 64361
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64362
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64363
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 64364
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 64365
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 64366
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 64367
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 64368
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 64369
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64370
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64371
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 65022
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 65023
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 65024
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65025
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 65026
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 65027
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65028
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 65029
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65030
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 65031
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65032
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 65033
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65034
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65035
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65036
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 65037
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65038
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65039
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 65040
    //FTOU
    tu15 = uint(t15);
    //Instruction 65041
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 65042
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 65043
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65044
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 65045
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 65046
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 65047
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 65048
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 65049
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 65050
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 65051
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 65052
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 65053
    //LOG
    t1.x = log2(t5);
    //Instruction 65054
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65055
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65056
    //NE
    tb6 = t5!=0.0;
    //Instruction 65057
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 65058
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 65059
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65060
    //MOV
    t1.y = t2.w;
    //Instruction 65061
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65062
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65063
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65064
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65065
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65066
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65067
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65068
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65069
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65070
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65071
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65072
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65073
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65074
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65075
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65076
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65077
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65078
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65079
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65080
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65081
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65082
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65083
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65084
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65085
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65086
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65087
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65088
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65089
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 65090
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65091
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65092
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 65093
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 65094
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65095
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 65096
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 65097
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 65098
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 65099
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65100
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65101
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65102
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65103
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 65104
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65105
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65106
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 65107
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 65108
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65109
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65110
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 65111
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 65112
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65113
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65114
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65115
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 65116
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_15;
void main()
{
    //Instruction 65002
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65003
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 65004
    //MOV
    t1.x = t16_0.x;
    //Instruction 65005
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 65006
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65007
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65008
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65009
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65010
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65011
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65012
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65013
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 65014
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65015
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65016
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65017
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 65018
    //MUL
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    //Instruction 65019
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65020
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65021
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 66826
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 66827
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 66828
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66829
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 66830
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 66831
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66832
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 66833
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66834
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 66835
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66836
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 66837
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 66838
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 66839
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66840
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 66841
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66842
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 66843
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 66844
    //FTOU
    tu15 = uint(t15);
    //Instruction 66845
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 66846
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 66847
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 66848
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 66849
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 66850
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 66851
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 66852
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 66853
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 66854
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 66855
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 66856
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 66857
    //LOG
    t1.x = log2(t5);
    //Instruction 66858
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 66859
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 66860
    //NE
    tb6 = t5!=0.0;
    //Instruction 66861
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 66862
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 66863
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 66864
    //MOV
    t1.y = t2.w;
    //Instruction 66865
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 66866
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 66867
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 66868
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 66869
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 66870
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 66871
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 66872
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 66873
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 66874
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 66875
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 66876
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 66877
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 66878
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 66879
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 66880
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 66881
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 66882
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 66883
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 66884
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 66885
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 66886
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 66887
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 66888
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 66889
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 66890
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 66891
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 66892
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 66893
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 66894
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 66895
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 66896
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 66897
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 66898
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 66899
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 66900
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 66901
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 66902
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 66903
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 66904
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 66905
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66906
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 66907
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 66908
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 66909
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66910
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 66911
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 66912
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66913
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 66914
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 66915
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 66916
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 66917
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 66918
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 66919
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 66920
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 66788
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 66789
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 66790
    //MOV
    t1.x = t16_0.x;
    //Instruction 66791
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 66792
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66793
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66794
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66795
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66796
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 66797
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66798
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 66799
    //LT
    tb1 = t10_2<0.0;
    //Instruction 66800
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66801
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 66802
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 66803
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 66804
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 66805
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 66806
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 66807
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66808
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 66809
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 66810
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 66811
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 66812
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 66813
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 66814
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 66815
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66816
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66817
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 66818
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 66819
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 66820
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 66821
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 66822
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 66823
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66824
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66825
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 64500
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 64501
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 64502
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64503
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 64504
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 64505
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64506
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 64507
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64508
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 64509
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64510
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 64511
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 64512
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 64513
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64514
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 64515
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64516
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64517
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 64518
    //FTOU
    tu15 = uint(t15);
    //Instruction 64519
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 64520
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 64521
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64522
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 64523
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 64524
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 64525
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 64526
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 64527
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 64528
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 64529
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 64530
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 64531
    //LOG
    t1.x = log2(t5);
    //Instruction 64532
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 64533
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 64534
    //NE
    tb6 = t5!=0.0;
    //Instruction 64535
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 64536
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 64537
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 64538
    //MOV
    t1.y = t2.w;
    //Instruction 64539
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 64540
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64541
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64542
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 64543
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 64544
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64545
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 64546
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 64547
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 64548
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 64549
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 64550
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 64551
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 64552
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 64553
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64554
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64555
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64556
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64557
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64558
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64559
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64560
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64561
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64562
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64563
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64564
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 64565
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64566
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 64567
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 64568
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 64569
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 64570
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 64571
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 64572
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64573
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 64574
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 64575
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 64576
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 64577
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64578
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64579
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64580
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64581
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 64582
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 64583
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64584
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 64585
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 64586
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64587
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 64588
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 64589
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 64590
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 64591
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 64592
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 64593
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 64594
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 64467
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 64468
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 64469
    //MOV
    t1.x = t16_0.x;
    //Instruction 64470
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 64471
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64472
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 64473
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64474
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64475
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64476
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64477
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64478
    //LT
    tb1 = t10_2<0.0;
    //Instruction 64479
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64480
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 64481
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 64482
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 64483
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 64484
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 64485
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 64486
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 64487
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 64488
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 64489
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64490
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64491
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 64492
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 64493
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 64494
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 64495
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 64496
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 64497
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64498
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64499
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_28;
  hPos_28 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_29;
  highp vec4 o_30;
  highp vec4 tmpvar_31;
  tmpvar_31 = (hPos_28 * 0.5);
  highp vec2 tmpvar_32;
  tmpvar_32.x = tmpvar_31.x;
  tmpvar_32.y = (tmpvar_31.y * _ProjectionParams.x);
  o_30.xy = (tmpvar_32 + tmpvar_31.w);
  o_30.zw = hPos_28.zw;
  highp vec3 tmpvar_33;
  tmpvar_33 = o_30.xyw;
  screenPos_29 = tmpvar_33;
  screenPos_29.xy = (screenPos_29.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_34;
  v_34.x = _World2Object[0].x;
  v_34.y = _World2Object[1].x;
  v_34.z = _World2Object[2].x;
  v_34.w = _World2Object[3].x;
  highp vec4 v_35;
  v_35.x = _World2Object[0].y;
  v_35.y = _World2Object[1].y;
  v_35.z = _World2Object[2].y;
  v_35.w = _World2Object[3].y;
  highp vec4 v_36;
  v_36.x = _World2Object[0].z;
  v_36.y = _World2Object[1].z;
  v_36.z = _World2Object[2].z;
  v_36.w = _World2Object[3].z;
  highp vec3 tmpvar_37;
  tmpvar_37 = normalize(((
    (v_34.xyz * _BillboardNormal.x)
   + 
    (v_35.xyz * _BillboardNormal.y)
  ) + (v_36.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_37;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_29;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp float t5;
bool tb5;
bool tb6;
highp vec2 t10;
bool tb10;
highp float t15;
highp uint tu15;
void main()
{
    //Instruction 65143
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 65144
    //LT
    tb10 = 0.0<_InstanceData.x;
    //Instruction 65145
    //MOVC
    t1 = (bool(tb10)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65146
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 65147
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 65148
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65149
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 65150
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65151
    //MUL
    t10.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 65152
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65153
    //MAD
    t0.xy = t10.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 65154
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65155
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65156
    //DIV
    t5 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65157
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t5;
    //Instruction 65158
    //DIV
    t5 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65159
    //ADD
    t10.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65160
    //MUL
    t15 = in_COLOR0.w * 255.000000;
    //Instruction 65161
    //FTOU
    tu15 = uint(t15);
    //Instruction 65162
    //MUL
    t10.x = t10.x * _TreeSize[int(tu15) + 0].x;
    //Instruction 65163
    //MUL
    t10.x = t1.x * t10.x;
    //Instruction 65164
    //MUL
    t2.xyz = t10.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65165
    //MAD
    t10.x = in_TEXCOORD0.y * _TreeSize[int(tu15) + 0].y + _TreeSize[int(tu15) + 0].z;
    //Instruction 65166
    //MAD
    t2.w = t10.x * t1.y + t2.y;
    //Instruction 65167
    //ADD
    t10.x = t1.z + _CameraXZAngle;
    //Instruction 65168
    //MAD
    t10.x = t10.x * _TreeInfo[int(tu15) + 0].y + 0.500000;
    //Instruction 65169
    //ROUND_NI
    t10.x = floor(t10.x);
    //Instruction 65170
    //DIV
    t10.x = t10.x / _TreeInfo[int(tu15) + 0].x;
    //Instruction 65171
    //MAD
    t5 = (-t5) * 0.250000 + t2.w;
    //Instruction 65172
    //MAX
    t5 = max(t5, 0.0);
    //Instruction 65173
    //MUL
    t5 = t5 * _ST_WindGlobal.z;
    //Instruction 65174
    //LOG
    t1.x = log2(t5);
    //Instruction 65175
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65176
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65177
    //NE
    tb6 = t5!=0.0;
    //Instruction 65178
    //MOVC
    t5 = (tb6) ? t1.x : t5;
    //Instruction 65179
    //MUL
    t0.x = t5 * t0.x;
    //Instruction 65180
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65181
    //MOV
    t1.y = t2.w;
    //Instruction 65182
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65183
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65184
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65185
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65186
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65187
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65188
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65189
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65190
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65191
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65192
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65193
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65194
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65195
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65196
    //MUL
    t2.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65197
    //MUL
    t2.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65198
    //MUL
    t2.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65199
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65200
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65201
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65202
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65203
    //MUL
    t4.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65204
    //MUL
    t4.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65205
    //MUL
    t4.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65206
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65207
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65208
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65209
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65210
    //MOV
    vs_TEXCOORD0.xyz = t2.xyz;
    //Instruction 65211
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65212
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65213
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 65214
    //ADD
    vs_TEXCOORD1.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 65215
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65216
    //GE
    tb0 = t10.x>=(-t10.x);
    //Instruction 65217
    //FRC
    t5 = fract(abs(t10.x));
    //Instruction 65218
    //MOVC
    t0.x = (tb0) ? t5 : (-t5);
    //Instruction 65219
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu15) + 0].x + _TreeInfo[int(tu15) + 0].z;
    //Instruction 65220
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65221
    //LT
    tb5 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65222
    //MAD
    t10.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65223
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65224
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb5)) ? t10.xy : t2.xy;
    //Instruction 65225
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65226
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65227
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 65228
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 65229
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65230
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65231
    //MUL
    t15 = t0.y * _ProjectionParams.x;
    //Instruction 65232
    //MUL
    t1.w = t15 * 0.500000;
    //Instruction 65233
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65234
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65235
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65236
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 65237
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 65117
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65118
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65119
    //MOV
    t1.x = t16_0.x;
    //Instruction 65120
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65121
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65122
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65123
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65124
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65125
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65126
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65127
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65128
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65129
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65130
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 65131
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 65132
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 65133
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 65134
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 65135
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 65136
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65137
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65138
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65139
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65140
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65141
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65142
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 66961
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 66962
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66963
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66964
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 66965
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 66966
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66967
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66968
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66969
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66970
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66971
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66972
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66973
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 66974
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66975
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 66976
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66977
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 66978
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 66979
    //FTOU
    tu8 = uint(t8);
    //Instruction 66980
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 66981
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 66982
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 66983
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 66984
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 66985
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 66986
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 66987
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 66988
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 66989
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 66990
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 66991
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 66992
    //LOG
    t12 = log2(t6.x);
    //Instruction 66993
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 66994
    //EXP
    t12 = exp2(t12);
    //Instruction 66995
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 66996
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 66997
    //MUL
    t6.x = t6.x * t18;
    //Instruction 66998
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 66999
    //MOV
    t4.y = t3.w;
    //Instruction 67000
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 67001
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 67002
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 67003
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 67004
    //SQRT
    t19 = sqrt(t19);
    //Instruction 67005
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 67006
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 67007
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 67008
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 67009
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 67010
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 67011
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 67012
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 67013
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67014
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67015
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67016
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67017
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67018
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67019
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67020
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 67021
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67022
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67023
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67024
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 67025
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 67026
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 67027
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 67028
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 67029
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 67030
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 67031
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 67032
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 67033
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67034
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 67035
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 67036
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67037
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67038
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 67039
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 67040
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67041
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 67042
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 67043
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67044
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67045
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67046
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67047
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 67048
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67049
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 67050
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 67051
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67052
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67053
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 67054
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 67055
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67056
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67057
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67058
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 67059
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 66921
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 66922
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 66923
    //MOV
    t1.x = t16_0.x;
    //Instruction 66924
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 66925
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66926
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66927
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66928
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66929
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 66930
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66931
    //LT
    tb1 = t10_2<0.0;
    //Instruction 66932
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66933
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 66934
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 66935
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66936
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 66937
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 66938
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 66939
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 66940
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 66941
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 66942
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 66943
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 66944
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 66945
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 66946
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 66947
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 66948
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 66949
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 66950
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66951
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66952
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 66953
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 66954
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 66955
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 66956
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 66957
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 66958
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66959
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66960
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 64624
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 64625
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64626
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64627
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 64628
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 64629
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64630
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64631
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64632
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64633
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64634
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64635
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64636
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 64637
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64638
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 64639
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64640
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64641
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 64642
    //FTOU
    tu8 = uint(t8);
    //Instruction 64643
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 64644
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 64645
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64646
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 64647
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 64648
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 64649
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 64650
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 64651
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 64652
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 64653
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 64654
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 64655
    //LOG
    t12 = log2(t6.x);
    //Instruction 64656
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 64657
    //EXP
    t12 = exp2(t12);
    //Instruction 64658
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 64659
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 64660
    //MUL
    t6.x = t6.x * t18;
    //Instruction 64661
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 64662
    //MOV
    t4.y = t3.w;
    //Instruction 64663
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 64664
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 64665
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 64666
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 64667
    //SQRT
    t19 = sqrt(t19);
    //Instruction 64668
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 64669
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 64670
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 64671
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 64672
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 64673
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 64674
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 64675
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 64676
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64677
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64678
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64679
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64680
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64681
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64682
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64683
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 64684
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64685
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64686
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64687
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 64688
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 64689
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 64690
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 64691
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 64692
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 64693
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 64694
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 64695
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 64696
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64697
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 64698
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 64699
    //FRC
    t1.x = fract(t1.x);
    //Instruction 64700
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 64701
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 64702
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 64703
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 64704
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 64705
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 64706
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64707
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64708
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64709
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64710
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 64711
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64712
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 64713
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 64714
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64715
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 64716
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 64717
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 64718
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 64719
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 64720
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 64721
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 64722
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 64595
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 64596
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 64597
    //MOV
    t1.x = t16_0.x;
    //Instruction 64598
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 64599
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64600
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 64601
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64602
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64603
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64604
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64605
    //LT
    tb1 = t10_2<0.0;
    //Instruction 64606
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64607
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 64608
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 64609
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64610
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 64611
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 64612
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 64613
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 64614
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 64615
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 64616
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64617
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 64618
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64619
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 64620
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 64621
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64622
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64623
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_5 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_5.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 65285
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65286
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65287
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65288
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65289
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65290
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65291
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65292
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65293
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65294
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65295
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65296
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65297
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 65298
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65299
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 65300
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65301
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65302
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 65303
    //FTOU
    tu8 = uint(t8);
    //Instruction 65304
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 65305
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65306
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65307
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 65308
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65309
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65310
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 65311
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65312
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 65313
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 65314
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 65315
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 65316
    //LOG
    t12 = log2(t6.x);
    //Instruction 65317
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 65318
    //EXP
    t12 = exp2(t12);
    //Instruction 65319
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 65320
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 65321
    //MUL
    t6.x = t6.x * t18;
    //Instruction 65322
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 65323
    //MOV
    t4.y = t3.w;
    //Instruction 65324
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 65325
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65326
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 65327
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 65328
    //SQRT
    t19 = sqrt(t19);
    //Instruction 65329
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 65330
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65331
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 65332
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 65333
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 65334
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 65335
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 65336
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 65337
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65338
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65339
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65340
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65341
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65342
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65343
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65344
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65345
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65346
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65347
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65348
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65349
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 65350
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 65351
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 65352
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 65353
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 65354
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 65355
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 65356
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 65357
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65358
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 65359
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 65360
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65361
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65362
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 65363
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 65364
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65365
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 65366
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 65367
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65368
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65369
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65370
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65371
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 65372
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65373
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 65374
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 65375
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65376
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65377
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 65378
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 65379
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65380
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65381
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65382
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 65383
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump vec3 t16_8;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 65238
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65239
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65240
    //MOV
    t1.x = t16_0.x;
    //Instruction 65241
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65242
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65243
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65244
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65245
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65246
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65247
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65248
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65249
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65250
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65251
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65252
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65253
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 65254
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 65255
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 65256
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65257
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65258
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65259
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65260
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 65261
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 65262
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 65263
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 65264
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 65265
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 65266
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 65267
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 65268
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 65269
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 65270
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 65271
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 65272
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 65273
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 65274
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65275
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65276
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 65277
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65278
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 65279
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 65280
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65281
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65282
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65283
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65284
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 67102
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67103
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67104
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67105
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67106
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67107
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67108
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67109
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67110
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67111
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67112
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67113
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67114
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 67115
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67116
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 67117
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67118
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67119
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 67120
    //FTOU
    tu8 = uint(t8);
    //Instruction 67121
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 67122
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67123
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67124
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 67125
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67126
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67127
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 67128
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67129
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 67130
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 67131
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 67132
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 67133
    //LOG
    t12 = log2(t6.x);
    //Instruction 67134
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 67135
    //EXP
    t12 = exp2(t12);
    //Instruction 67136
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 67137
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 67138
    //MUL
    t6.x = t6.x * t18;
    //Instruction 67139
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 67140
    //MOV
    t4.y = t3.w;
    //Instruction 67141
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 67142
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 67143
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 67144
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 67145
    //SQRT
    t19 = sqrt(t19);
    //Instruction 67146
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 67147
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 67148
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 67149
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 67150
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 67151
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 67152
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 67153
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 67154
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67155
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67156
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67157
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67158
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67159
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67160
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67161
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 67162
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67163
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67164
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67165
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 67166
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 67167
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 67168
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 67169
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 67170
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 67171
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 67172
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 67173
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 67174
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67175
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 67176
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 67177
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67178
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67179
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 67180
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 67181
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67182
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 67183
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 67184
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67185
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67186
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67187
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67188
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 67189
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67190
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 67191
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 67192
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67193
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67194
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 67195
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 67196
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67197
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67198
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67199
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 67200
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 67060
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 67061
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 67062
    //MOV
    t1.x = t16_0.x;
    //Instruction 67063
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 67064
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67065
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67066
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67067
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67068
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 67069
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67070
    //LT
    tb1 = t10_2<0.0;
    //Instruction 67071
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67072
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 67073
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 67074
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67075
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 67076
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 67077
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 67078
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 67079
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 67080
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 67081
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 67082
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 67083
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 67084
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 67085
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 67086
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 67087
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 67088
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 67089
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 67090
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 67091
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 67092
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 67093
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 67094
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 67095
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 67096
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 67097
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 67098
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 67099
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67100
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67101
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp float angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  angle_8 = _CameraXZAngle;
  highp vec4 tmpvar_14;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_14 = _InstanceData;
  } else {
    tmpvar_14 = tmpvar_1;
  };
  highp vec3 tmpvar_15;
  tmpvar_15 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_14.x) * _BillboardTangent);
  billboardPos_7.xz = tmpvar_15.xz;
  billboardPos_7.y = (tmpvar_15.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_14.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_16;
    vPos_16 = billboardPos_7;
    highp float fMoveAmount_17;
    highp float fAdjust_18;
    highp float fLength_19;
    fLength_19 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_20;
    tmpvar_20 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_18 = tmpvar_20;
    if ((tmpvar_20 != 0.0)) {
      fAdjust_18 = pow (tmpvar_20, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_21;
    tmpvar_21.zw = vec2(0.0, 0.0);
    tmpvar_21.x = (tmpvar_13.x + tmpvar_14.w);
    tmpvar_21.y = (tmpvar_13.y + (tmpvar_14.w * 0.8));
    highp vec4 tmpvar_22;
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    tmpvar_22 = (((
      (tmpvar_23 * tmpvar_23)
     * 
      (3.0 - (2.0 * tmpvar_23))
    ) - 0.5) * 2.0);
    fMoveAmount_17 = ((_ST_WindGlobal.y * (tmpvar_22.x + 
      (tmpvar_22.y * tmpvar_22.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_17 = (fMoveAmount_17 * fAdjust_18);
    vPos_16.xz = (tmpvar_15.xz + (_ST_WindVector.xz * fMoveAmount_17));
    vPos_16 = (normalize(vPos_16) * fLength_19);
    billboardPos_7 = vPos_16;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (_CameraXZAngle + tmpvar_14.z);
  highp float tmpvar_24;
  tmpvar_24 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.x);
  highp float tmpvar_25;
  tmpvar_25 = (fract(abs(tmpvar_24)) * tmpvar_10.x);
  highp float tmpvar_26;
  if ((tmpvar_24 >= 0.0)) {
    tmpvar_26 = tmpvar_25;
  } else {
    tmpvar_26 = -(tmpvar_25);
  };
  highp vec4 tmpvar_27;
  tmpvar_27 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_26))];
  if ((tmpvar_27.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_27.xy - (tmpvar_27.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_27.xy + (tmpvar_27.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_28;
  tmpvar_28 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_28;
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_2 = tmpvar_38;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
highp vec3 t6;
highp vec2 t7;
highp float t8;
highp uint tu8;
highp float t12;
highp vec2 t14;
highp float t18;
highp float t19;
bool tb19;
void main()
{
    //Instruction 64758
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 64759
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64760
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 64761
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 64762
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 64763
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64764
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 64765
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64766
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 64767
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64768
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 64769
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 64770
    //MAD
    t18 = t2.y * t2.y + t2.x;
    //Instruction 64771
    //DIV
    t19 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64772
    //MAD
    t18 = _ST_WindGlobal.y * t18 + t19;
    //Instruction 64773
    //DIV
    t19 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64774
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64775
    //MUL
    t8 = in_COLOR0.w * 255.000000;
    //Instruction 64776
    //FTOU
    tu8 = uint(t8);
    //Instruction 64777
    //MUL
    t2.x = t2.x * _TreeSize[int(tu8) + 0].x;
    //Instruction 64778
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 64779
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64780
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu8) + 0].y + _TreeSize[int(tu8) + 0].z;
    //Instruction 64781
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 64782
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 64783
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].y + 0.500000;
    //Instruction 64784
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 64785
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu8) + 0].x;
    //Instruction 64786
    //MAD
    t6.x = (-t19) * 0.250000 + t3.w;
    //Instruction 64787
    //MAX
    t6.x = max(t6.x, 0.0);
    //Instruction 64788
    //MUL
    t6.x = t6.x * _ST_WindGlobal.z;
    //Instruction 64789
    //LOG
    t12 = log2(t6.x);
    //Instruction 64790
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 64791
    //EXP
    t12 = exp2(t12);
    //Instruction 64792
    //NE
    tb19 = t6.x!=0.0;
    //Instruction 64793
    //MOVC
    t6.x = (tb19) ? t12 : t6.x;
    //Instruction 64794
    //MUL
    t6.x = t6.x * t18;
    //Instruction 64795
    //MAD
    t4.xz = _ST_WindVector.xz * t6.xx + t3.xz;
    //Instruction 64796
    //MOV
    t4.y = t3.w;
    //Instruction 64797
    //DP3
    t6.x = dot(t4.xyz, t4.xyz);
    //Instruction 64798
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 64799
    //MUL
    t6.xyz = t6.xxx * t4.xyz;
    //Instruction 64800
    //DP3
    t19 = dot(t3.xzw, t3.xzw);
    //Instruction 64801
    //SQRT
    t19 = sqrt(t19);
    //Instruction 64802
    //MUL
    t6.xyz = t6.xyz * vec3(t19);
    //Instruction 64803
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 64804
    //LT
    tb19 = 0.0<t16_5;
    //Instruction 64805
    //MOVC
    t6.xyz = (bool(tb19)) ? t6.xyz : t3.xwz;
    //Instruction 64806
    //ADD
    t6.xyz = t6.xyz + in_POSITION0.xyz;
    //Instruction 64807
    //MUL
    t3 = t6.yyyy * glstate_matrix_mvp[1];
    //Instruction 64808
    //MAD
    t3 = glstate_matrix_mvp[0] * t6.xxxx + t3;
    //Instruction 64809
    //MAD
    t3 = glstate_matrix_mvp[2] * t6.zzzz + t3;
    //Instruction 64810
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 64811
    //MUL
    t3.x = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64812
    //MUL
    t3.y = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64813
    //MUL
    t3.z = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64814
    //MUL
    t4.x = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64815
    //MUL
    t4.y = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64816
    //MUL
    t4.z = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64817
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 64818
    //MUL
    t3.x = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64819
    //MUL
    t3.y = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64820
    //MUL
    t3.z = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64821
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 64822
    //DP3
    t19 = dot(t2.xzw, t2.xzw);
    //Instruction 64823
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 64824
    //MUL
    t2.xzw = vec3(t19) * t2.xzw;
    //Instruction 64825
    //MOV
    vs_TEXCOORD0.xyz = t2.xzw;
    //Instruction 64826
    //MUL
    t2.xzw = t6.yyy * _Object2World[1].xyz;
    //Instruction 64827
    //MAD
    t2.xzw = _Object2World[0].xyz * t6.xxx + t2.xzw;
    //Instruction 64828
    //MAD
    t2.xzw = _Object2World[2].xyz * t6.zzz + t2.xzw;
    //Instruction 64829
    //ADD
    vs_TEXCOORD1.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 64830
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 64831
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 64832
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 64833
    //FRC
    t1.x = fract(t1.x);
    //Instruction 64834
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 64835
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 64836
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 64837
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 64838
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 64839
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu8) + 0].x + _TreeInfo[int(tu8) + 0].z;
    //Instruction 64840
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64841
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64842
    //MAD
    t7.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64843
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64844
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb1)) ? t7.xy : t2.xy;
    //Instruction 64845
    //MUL
    t1.xyz = t6.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 64846
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t6.xxx + t1.xyz;
    //Instruction 64847
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t6.zzz + t0.xyz;
    //Instruction 64848
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 64849
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 64850
    //MUL
    t18 = t0.y * _ProjectionParams.x;
    //Instruction 64851
    //MUL
    t1.w = t18 * 0.500000;
    //Instruction 64852
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 64853
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 64854
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 64855
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 64856
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 64723
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 64724
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 64725
    //MOV
    t1.x = t16_0.x;
    //Instruction 64726
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 64727
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64728
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 64729
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64730
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64731
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 64732
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64733
    //LT
    tb1 = t10_2<0.0;
    //Instruction 64734
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64735
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 64736
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 64737
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 64738
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 64739
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 64740
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 64741
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 64742
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 64743
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 64744
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 64745
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 64746
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 64747
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 64748
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 64749
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 64750
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 64751
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64752
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 64753
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 64754
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 64755
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64756
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64757
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_3 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_42;
  tmpvar_42 = -(tmpvar_41);
  worldBinormal_2 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_3.x;
  tmpvar_43.y = worldBinormal_2.x;
  tmpvar_43.z = worldNormal_4.x;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.y;
  tmpvar_44.y = worldBinormal_2.y;
  tmpvar_44.z = worldNormal_4.y;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.z;
  tmpvar_45.y = worldBinormal_2.z;
  tmpvar_45.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 65420
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 65421
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 65422
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65423
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 65424
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 65425
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65426
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 65427
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65428
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 65429
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65430
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 65431
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65432
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65433
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65434
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 65435
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65436
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65437
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 65438
    //FTOU
    tu21 = uint(t21);
    //Instruction 65439
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 65440
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 65441
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65442
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 65443
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 65444
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 65445
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 65446
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 65447
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 65448
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 65449
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65450
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65451
    //LOG
    t1.x = log2(t7);
    //Instruction 65452
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65453
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65454
    //NE
    tb8 = t7!=0.0;
    //Instruction 65455
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 65456
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 65457
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65458
    //MOV
    t1.y = t2.w;
    //Instruction 65459
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65460
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65461
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65462
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65463
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65464
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65465
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65466
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65467
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65468
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65469
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65470
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65471
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65472
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65473
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65474
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65475
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65476
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65477
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65478
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65479
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65480
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65481
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65482
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65483
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65484
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65485
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65486
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65487
    //MOV
    t4.z = t2.y;
    //Instruction 65488
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65489
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 65490
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 65491
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 65492
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65493
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 65494
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 65495
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 65496
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 65497
    //MOV
    t4.x = t5.z;
    //Instruction 65498
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 65499
    //MOV
    t5.z = t2.x;
    //Instruction 65500
    //MOV
    t2.x = t5.y;
    //Instruction 65501
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 65502
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 65503
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 65504
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 65505
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65506
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65507
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 65508
    //ADD
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 65509
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65510
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 65511
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 65512
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 65513
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 65514
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65515
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65516
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65517
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65518
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 65519
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 65520
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65521
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 65522
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 65523
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65524
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65525
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65526
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65527
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65528
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65529
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65530
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65531
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 65384
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65385
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 65386
    //MOV
    t1.x = t16_0.x;
    //Instruction 65387
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 65388
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65389
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65390
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65391
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65392
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65393
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65394
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65395
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65396
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65397
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65398
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 65399
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 65400
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65401
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65402
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 65403
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 65404
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65405
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65406
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 65407
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65408
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 65409
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65410
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65411
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65412
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65413
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65414
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 65415
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 65416
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 65417
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65418
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65419
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_3 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_42;
  tmpvar_42 = -(tmpvar_41);
  worldBinormal_2 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_3.x;
  tmpvar_43.y = worldBinormal_2.x;
  tmpvar_43.z = worldNormal_4.x;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.y;
  tmpvar_44.y = worldBinormal_2.y;
  tmpvar_44.z = worldNormal_4.y;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.z;
  tmpvar_45.y = worldBinormal_2.z;
  tmpvar_45.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 67226
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67227
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 67228
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67229
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67230
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67231
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67232
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67233
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67234
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67235
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67236
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67237
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67238
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67239
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67240
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 67241
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67242
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67243
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 67244
    //FTOU
    tu21 = uint(t21);
    //Instruction 67245
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 67246
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 67247
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67248
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 67249
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 67250
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 67251
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 67252
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 67253
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 67254
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 67255
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 67256
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 67257
    //LOG
    t1.x = log2(t7);
    //Instruction 67258
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67259
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67260
    //NE
    tb8 = t7!=0.0;
    //Instruction 67261
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 67262
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 67263
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67264
    //MOV
    t1.y = t2.w;
    //Instruction 67265
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67266
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67267
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67268
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67269
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67270
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67271
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 67272
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 67273
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67274
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67275
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67276
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67277
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67278
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 67279
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67280
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67281
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67282
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67283
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67284
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67285
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67286
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67287
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67288
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67289
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67290
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 67291
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67292
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 67293
    //MOV
    t4.z = t2.y;
    //Instruction 67294
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 67295
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 67296
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 67297
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 67298
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67299
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 67300
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 67301
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 67302
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 67303
    //MOV
    t4.x = t5.z;
    //Instruction 67304
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 67305
    //MOV
    t5.z = t2.x;
    //Instruction 67306
    //MOV
    t2.x = t5.y;
    //Instruction 67307
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 67308
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 67309
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 67310
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 67311
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67312
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 67313
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 67314
    //ADD
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 67315
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 67316
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 67317
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 67318
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 67319
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 67320
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67321
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67322
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67323
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67324
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 67325
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 67326
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67327
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 67328
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 67329
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67330
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67331
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 67332
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 67333
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67334
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67335
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67336
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 67337
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 67201
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 67202
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 67203
    //MOV
    t1.x = t16_0.x;
    //Instruction 67204
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 67205
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67206
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 67207
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67208
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67209
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 67210
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67211
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 67212
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 67213
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67214
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67215
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 67216
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67217
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67218
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67219
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67220
    //DP3
    t16_18 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 67221
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 67222
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 67223
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67224
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67225
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_3 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_42;
  tmpvar_42 = -(tmpvar_41);
  worldBinormal_2 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_3.x;
  tmpvar_43.y = worldBinormal_2.x;
  tmpvar_43.z = worldNormal_4.x;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.y;
  tmpvar_44.y = worldBinormal_2.y;
  tmpvar_44.z = worldNormal_4.y;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.z;
  tmpvar_45.y = worldBinormal_2.z;
  tmpvar_45.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_6.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 64900
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 64901
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 64902
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 64903
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 64904
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 64905
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 64906
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 64907
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 64908
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 64909
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 64910
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 64911
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 64912
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 64913
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 64914
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 64915
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 64916
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 64917
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 64918
    //FTOU
    tu21 = uint(t21);
    //Instruction 64919
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 64920
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 64921
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 64922
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 64923
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 64924
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 64925
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 64926
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 64927
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 64928
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 64929
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 64930
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 64931
    //LOG
    t1.x = log2(t7);
    //Instruction 64932
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 64933
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 64934
    //NE
    tb8 = t7!=0.0;
    //Instruction 64935
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 64936
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 64937
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 64938
    //MOV
    t1.y = t2.w;
    //Instruction 64939
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 64940
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64941
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64942
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 64943
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 64944
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 64945
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 64946
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 64947
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 64948
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 64949
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 64950
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 64951
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 64952
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 64953
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 64954
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 64955
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 64956
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 64957
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 64958
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 64959
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64960
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 64961
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 64962
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 64963
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 64964
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 64965
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64966
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 64967
    //MOV
    t4.z = t2.y;
    //Instruction 64968
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 64969
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 64970
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 64971
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 64972
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 64973
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 64974
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 64975
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 64976
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 64977
    //MOV
    t4.x = t5.z;
    //Instruction 64978
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 64979
    //MOV
    t5.z = t2.x;
    //Instruction 64980
    //MOV
    t2.x = t5.y;
    //Instruction 64981
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 64982
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 64983
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 64984
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 64985
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 64986
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 64987
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 64988
    //ADD
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 64989
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 64990
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 64991
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 64992
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 64993
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 64994
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 64995
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 64996
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64997
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 64998
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 64999
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 65000
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65001
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 65002
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 65003
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65004
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65005
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65006
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65007
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65008
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65009
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65010
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65011
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 64857
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 64858
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 64859
    //MOV
    t1.x = t16_0.x;
    //Instruction 64860
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 64861
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 64862
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 64863
    //LT
    tb1 = t16_1<0.0;
    //Instruction 64864
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64865
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 64866
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 64867
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 64868
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 64869
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 64870
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 64871
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 64872
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 64873
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 64874
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 64875
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 64876
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 64877
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 64878
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 64879
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 64880
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 64881
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 64882
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 64883
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 64884
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 64885
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 64886
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 64887
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 64888
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 64889
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 64890
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 64891
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 64892
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 64893
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 64894
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 64895
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 64896
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 64897
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 64898
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 64899
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_3 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_42;
  tmpvar_42 = -(tmpvar_41);
  worldBinormal_2 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_3.x;
  tmpvar_43.y = worldBinormal_2.x;
  tmpvar_43.z = worldNormal_4.x;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.y;
  tmpvar_44.y = worldBinormal_2.y;
  tmpvar_44.z = worldNormal_4.y;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.z;
  tmpvar_45.y = worldBinormal_2.z;
  tmpvar_45.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 65050
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 65051
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 65052
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65053
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 65054
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 65055
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65056
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 65057
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65058
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 65059
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65060
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 65061
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 65062
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 65063
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65064
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 65065
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65066
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65067
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 65068
    //FTOU
    tu21 = uint(t21);
    //Instruction 65069
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 65070
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 65071
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65072
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 65073
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 65074
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 65075
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 65076
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 65077
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 65078
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 65079
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65080
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65081
    //LOG
    t1.x = log2(t7);
    //Instruction 65082
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 65083
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 65084
    //NE
    tb8 = t7!=0.0;
    //Instruction 65085
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 65086
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 65087
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 65088
    //MOV
    t1.y = t2.w;
    //Instruction 65089
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 65090
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65091
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65092
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 65093
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 65094
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 65095
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 65096
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 65097
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 65098
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 65099
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 65100
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 65101
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 65102
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 65103
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65104
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65105
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65106
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65107
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65108
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65109
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65110
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65111
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65112
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65113
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 65114
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 65115
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65116
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 65117
    //MOV
    t4.z = t2.y;
    //Instruction 65118
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65119
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 65120
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 65121
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 65122
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 65123
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 65124
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 65125
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 65126
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 65127
    //MOV
    t4.x = t5.z;
    //Instruction 65128
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 65129
    //MOV
    t5.z = t2.x;
    //Instruction 65130
    //MOV
    t2.x = t5.y;
    //Instruction 65131
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 65132
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 65133
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 65134
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 65135
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 65136
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 65137
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 65138
    //ADD
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 65139
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65140
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 65141
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 65142
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 65143
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 65144
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65145
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65146
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65147
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65148
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 65149
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 65150
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65151
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 65152
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 65153
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65154
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65155
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65156
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65157
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65158
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65159
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65160
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65161
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 65012
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65013
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 65014
    //MOV
    t1.x = t16_0.x;
    //Instruction 65015
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 65016
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65017
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65018
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65019
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65020
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65021
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65022
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65023
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65024
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65025
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65026
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 65027
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 65028
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65029
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65030
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 65031
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 65032
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 65033
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 65034
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65035
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65036
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 65037
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65038
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 65039
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65040
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65041
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65042
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65043
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65044
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 65045
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 65046
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 65047
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65048
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65049
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_29;
  hPos_29 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_30;
  highp vec4 o_31;
  highp vec4 tmpvar_32;
  tmpvar_32 = (hPos_29 * 0.5);
  highp vec2 tmpvar_33;
  tmpvar_33.x = tmpvar_32.x;
  tmpvar_33.y = (tmpvar_32.y * _ProjectionParams.x);
  o_31.xy = (tmpvar_33 + tmpvar_32.w);
  o_31.zw = hPos_29.zw;
  highp vec3 tmpvar_34;
  tmpvar_34 = o_31.xyw;
  screenPos_30 = tmpvar_34;
  screenPos_30.xy = (screenPos_30.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_35;
  v_35.x = _World2Object[0].x;
  v_35.y = _World2Object[1].x;
  v_35.z = _World2Object[2].x;
  v_35.w = _World2Object[3].x;
  highp vec4 v_36;
  v_36.x = _World2Object[0].y;
  v_36.y = _World2Object[1].y;
  v_36.z = _World2Object[2].y;
  v_36.w = _World2Object[3].y;
  highp vec4 v_37;
  v_37.x = _World2Object[0].z;
  v_37.y = _World2Object[1].z;
  v_37.z = _World2Object[2].z;
  v_37.w = _World2Object[3].z;
  highp vec3 tmpvar_38;
  tmpvar_38 = normalize(((
    (v_35.xyz * _BillboardNormal.x)
   + 
    (v_36.xyz * _BillboardNormal.y)
  ) + (v_37.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_38;
  highp mat3 tmpvar_39;
  tmpvar_39[0] = _Object2World[0].xyz;
  tmpvar_39[1] = _Object2World[1].xyz;
  tmpvar_39[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_40;
  tmpvar_40 = normalize((tmpvar_39 * _BillboardTangent));
  worldTangent_3 = tmpvar_40;
  lowp vec3 tmpvar_41;
  tmpvar_41 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_42;
  tmpvar_42 = -(tmpvar_41);
  worldBinormal_2 = tmpvar_42;
  lowp vec3 tmpvar_43;
  tmpvar_43.x = worldTangent_3.x;
  tmpvar_43.y = worldBinormal_2.x;
  tmpvar_43.z = worldNormal_4.x;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.y;
  tmpvar_44.y = worldBinormal_2.y;
  tmpvar_44.z = worldNormal_4.y;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.z;
  tmpvar_45.y = worldBinormal_2.z;
  tmpvar_45.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_43;
  xlv_TEXCOORD1 = tmpvar_44;
  xlv_TEXCOORD2 = tmpvar_45;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_30;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xy;
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, tmpvar_18).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_4.xyz = c_20.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec3 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
highp vec4 t2;
mediump float t16_3;
highp vec3 t4;
highp vec3 t5;
lowp vec3 t10_6;
highp float t7;
bool tb7;
bool tb8;
highp vec2 t14;
bool tb14;
highp float t21;
highp uint tu21;
void main()
{
    //Instruction 67369
    //ADD
    t0.xy = in_POSITION0.xy + _Object2World[3].xy;
    //Instruction 67370
    //LT
    tb14 = 0.0<_InstanceData.x;
    //Instruction 67371
    //MOVC
    t1 = (bool(tb14)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67372
    //ADD
    t2.x = t0.x + t1.w;
    //Instruction 67373
    //MAD
    t2.y = t1.w * 0.800000 + t0.y;
    //Instruction 67374
    //ADD
    t0.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67375
    //FRC
    t0.xy = fract(t0.xy);
    //Instruction 67376
    //MAD
    t0.xy = t0.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67377
    //MUL
    t14.xy = abs(t0.xy) * abs(t0.xy);
    //Instruction 67378
    //MAD
    t0.xy = -abs(t0.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67379
    //MAD
    t0.xy = t14.xy * t0.xy + vec2(-0.500000, -0.500000);
    //Instruction 67380
    //ADD
    t0.xy = t0.xy + t0.xy;
    //Instruction 67381
    //MAD
    t0.x = t0.y * t0.y + t0.x;
    //Instruction 67382
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67383
    //MAD
    t0.x = _ST_WindGlobal.y * t0.x + t7;
    //Instruction 67384
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67385
    //ADD
    t14.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67386
    //MUL
    t21 = in_COLOR0.w * 255.000000;
    //Instruction 67387
    //FTOU
    tu21 = uint(t21);
    //Instruction 67388
    //MUL
    t14.x = t14.x * _TreeSize[int(tu21) + 0].x;
    //Instruction 67389
    //MUL
    t14.x = t1.x * t14.x;
    //Instruction 67390
    //MUL
    t2.xyz = t14.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67391
    //MAD
    t14.x = in_TEXCOORD0.y * _TreeSize[int(tu21) + 0].y + _TreeSize[int(tu21) + 0].z;
    //Instruction 67392
    //MAD
    t2.w = t14.x * t1.y + t2.y;
    //Instruction 67393
    //ADD
    t14.x = t1.z + _CameraXZAngle;
    //Instruction 67394
    //MAD
    t14.x = t14.x * _TreeInfo[int(tu21) + 0].y + 0.500000;
    //Instruction 67395
    //ROUND_NI
    t14.x = floor(t14.x);
    //Instruction 67396
    //DIV
    t14.x = t14.x / _TreeInfo[int(tu21) + 0].x;
    //Instruction 67397
    //MAD
    t7 = (-t7) * 0.250000 + t2.w;
    //Instruction 67398
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 67399
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 67400
    //LOG
    t1.x = log2(t7);
    //Instruction 67401
    //MUL
    t1.x = t1.x * _ST_WindGlobal.w;
    //Instruction 67402
    //EXP
    t1.x = exp2(t1.x);
    //Instruction 67403
    //NE
    tb8 = t7!=0.0;
    //Instruction 67404
    //MOVC
    t7 = (tb8) ? t1.x : t7;
    //Instruction 67405
    //MUL
    t0.x = t7 * t0.x;
    //Instruction 67406
    //MAD
    t1.xz = _ST_WindVector.xz * t0.xx + t2.xz;
    //Instruction 67407
    //MOV
    t1.y = t2.w;
    //Instruction 67408
    //DP3
    t0.x = dot(t1.xyz, t1.xyz);
    //Instruction 67409
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67410
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67411
    //DP3
    t0.x = dot(t2.xzw, t2.xzw);
    //Instruction 67412
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 67413
    //MUL
    t1.xyz = t0.xxx * t1.xyz;
    //Instruction 67414
    //MUL
    t16_3 = _WindEnabled * _WindQuality;
    //Instruction 67415
    //LT
    tb0 = 0.0<t16_3;
    //Instruction 67416
    //MOVC
    t1.xyz = (bool(tb0)) ? t1.xyz : t2.xwz;
    //Instruction 67417
    //ADD
    t1.xyz = t1.xyz + in_POSITION0.xyz;
    //Instruction 67418
    //MUL
    t2 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 67419
    //MAD
    t2 = glstate_matrix_mvp[0] * t1.xxxx + t2;
    //Instruction 67420
    //MAD
    t2 = glstate_matrix_mvp[2] * t1.zzzz + t2;
    //Instruction 67421
    //ADD
    gl_Position = t2 + glstate_matrix_mvp[3];
    //Instruction 67422
    //MUL
    t2.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67423
    //MUL
    t2.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67424
    //MUL
    t2.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67425
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67426
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67427
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67428
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67429
    //MUL
    t4.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67430
    //MUL
    t4.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67431
    //MUL
    t4.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67432
    //ADD
    t2.xyz = t2.xyz + t4.xyz;
    //Instruction 67433
    //DP3
    t0.x = dot(t2.xyz, t2.xyz);
    //Instruction 67434
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67435
    //MUL
    t2.xyz = t0.xxx * t2.xyz;
    //Instruction 67436
    //MOV
    t4.z = t2.y;
    //Instruction 67437
    //MUL
    t5.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 67438
    //MAD
    t5.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t5.xyz;
    //Instruction 67439
    //MAD
    t5.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t5.xyz;
    //Instruction 67440
    //DP3
    t0.x = dot(t5.xyz, t5.xyz);
    //Instruction 67441
    //RSQ
    t0.x = inversesqrt(t0.x);
    //Instruction 67442
    //MUL
    t5.xyz = t0.xxx * t5.yxz;
    //Instruction 67443
    //MUL
    t10_6.xyz = t2.xyz * t5.yxz;
    //Instruction 67444
    //MAD
    t10_6.xyz = t2.zxy * t5.xzy + (-t10_6.xyz);
    //Instruction 67445
    //MOV
    t4.y = (-t10_6.x);
    //Instruction 67446
    //MOV
    t4.x = t5.z;
    //Instruction 67447
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 67448
    //MOV
    t5.z = t2.x;
    //Instruction 67449
    //MOV
    t2.x = t5.y;
    //Instruction 67450
    //MOV
    t2.y = (-t10_6.y);
    //Instruction 67451
    //MOV
    t5.y = (-t10_6.z);
    //Instruction 67452
    //MOV
    vs_TEXCOORD2.xyz = t5.xyz;
    //Instruction 67453
    //MOV
    vs_TEXCOORD1.xyz = t2.xyz;
    //Instruction 67454
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 67455
    //MAD
    t2.xyz = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 67456
    //MAD
    t2.xyz = _Object2World[2].xyz * t1.zzz + t2.xyz;
    //Instruction 67457
    //ADD
    vs_TEXCOORD3.xyz = t2.xyz + _Object2World[3].xyz;
    //Instruction 67458
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 67459
    //GE
    tb0 = t14.x>=(-t14.x);
    //Instruction 67460
    //FRC
    t7 = fract(abs(t14.x));
    //Instruction 67461
    //MOVC
    t0.x = (tb0) ? t7 : (-t7);
    //Instruction 67462
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu21) + 0].x + _TreeInfo[int(tu21) + 0].z;
    //Instruction 67463
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67464
    //LT
    tb7 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67465
    //MAD
    t14.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67466
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67467
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb7)) ? t14.xy : t2.xy;
    //Instruction 67468
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 67469
    //MUL
    t0.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67470
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t0.xyz;
    //Instruction 67471
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t0.xyz;
    //Instruction 67472
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67473
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67474
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 67475
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 67476
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67477
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67478
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67479
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 67480
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump float t16_21;
void main()
{
    //Instruction 67338
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 67339
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 67340
    //MOV
    t1.x = t16_0.x;
    //Instruction 67341
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 67342
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67343
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 67344
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67345
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67346
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 67347
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67348
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 67349
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67350
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67351
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 67352
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 67353
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 67354
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 67355
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 67356
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 67357
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 67358
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 67359
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67360
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67361
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67362
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67363
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 67364
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 67365
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 67366
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67367
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67368
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = texture2D (_LightTexture0, vec2(tmpvar_21)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65577
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65578
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65579
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65580
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65581
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65582
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65583
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65584
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65585
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65586
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65587
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65588
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65589
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65590
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65591
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65592
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65593
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65594
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65595
    //FTOU
    tu9 = uint(t9);
    //Instruction 65596
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65597
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65598
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65599
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65600
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65601
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65602
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65603
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65604
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65605
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65606
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65607
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65608
    //LOG
    t14 = log2(t7.x);
    //Instruction 65609
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 65610
    //EXP
    t14 = exp2(t14);
    //Instruction 65611
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65612
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 65613
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65614
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65615
    //MOV
    t4.y = t3.w;
    //Instruction 65616
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65617
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65618
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65619
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65620
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65621
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65622
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65623
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65624
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65625
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65626
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65627
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65628
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65629
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65630
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65631
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65632
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65633
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65634
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65635
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65636
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65637
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65638
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65639
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65640
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65641
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65642
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65643
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65644
    //MOV
    t3.z = t2.z;
    //Instruction 65645
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65646
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65647
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65648
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65649
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65650
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65651
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65652
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65653
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65654
    //MOV
    t3.x = t4.z;
    //Instruction 65655
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65656
    //MOV
    t4.z = t2.x;
    //Instruction 65657
    //MOV
    t2.x = t4.y;
    //Instruction 65658
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65659
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65660
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65661
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65662
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65663
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65664
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65665
    //ADD
    vs_TEXCOORD3.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 65666
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65667
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 65668
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 65669
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65670
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65671
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 65672
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 65673
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65674
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 65675
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65676
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65677
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65678
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65679
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65680
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 65681
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65682
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 65683
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 65684
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65685
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65686
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65687
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65688
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65689
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65690
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65691
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65692
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 65532
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65533
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 65534
    //MOV
    t1.x = t16_0.x;
    //Instruction 65535
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 65536
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65537
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65538
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65539
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65540
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65541
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65542
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65543
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65544
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65545
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65546
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65547
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 65548
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 65549
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 65550
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65551
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65552
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65553
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65554
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65555
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 65556
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 65557
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65558
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65559
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 65560
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 65561
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65562
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65563
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 65564
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65565
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 65566
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65567
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65568
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65569
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65570
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65571
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 65572
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 65573
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 65574
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65575
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65576
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_4.xyz = c_19.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65727
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65728
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65729
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65730
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65731
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65732
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65733
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65734
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65735
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65736
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65737
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65738
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65739
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65740
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65741
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65742
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65743
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65744
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65745
    //FTOU
    tu9 = uint(t9);
    //Instruction 65746
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65747
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65748
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65749
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65750
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65751
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65752
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65753
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65754
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65755
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65756
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65757
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65758
    //LOG
    t14 = log2(t7.x);
    //Instruction 65759
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 65760
    //EXP
    t14 = exp2(t14);
    //Instruction 65761
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65762
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 65763
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65764
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65765
    //MOV
    t4.y = t3.w;
    //Instruction 65766
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65767
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65768
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65769
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65770
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65771
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65772
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65773
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65774
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65775
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65776
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65777
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65778
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65779
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65780
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65781
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65782
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65783
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65784
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65785
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65786
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65787
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65788
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65789
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65790
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65791
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65792
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65793
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65794
    //MOV
    t3.z = t2.z;
    //Instruction 65795
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65796
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65797
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65798
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65799
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65800
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65801
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65802
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65803
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65804
    //MOV
    t3.x = t4.z;
    //Instruction 65805
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65806
    //MOV
    t4.z = t2.x;
    //Instruction 65807
    //MOV
    t2.x = t4.y;
    //Instruction 65808
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65809
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65810
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65811
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65812
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65813
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65814
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65815
    //ADD
    vs_TEXCOORD3.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 65816
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65817
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 65818
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 65819
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65820
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65821
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 65822
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 65823
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65824
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 65825
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65826
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65827
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65828
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65829
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65830
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 65831
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65832
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 65833
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 65834
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65835
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65836
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65837
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65838
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65839
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65840
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65841
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65842
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 65693
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65694
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 65695
    //MOV
    t1.x = t16_0.x;
    //Instruction 65696
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 65697
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65698
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 65699
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65700
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65701
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65702
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65703
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65704
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65705
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65706
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65707
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65708
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 65709
    //MAX
    t16_4 = max(t16_9.z, t16_9.y);
    //Instruction 65710
    //MAX
    t16_4 = max(t16_9.x, t16_4);
    //Instruction 65711
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 65712
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65713
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65714
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65715
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 65716
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65717
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65718
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65719
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65720
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65721
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65722
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 65723
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 65724
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65725
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65726
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_22;
  tmpvar_22 = (_LightMatrix0 * tmpvar_21);
  lightCoord_6 = tmpvar_22;
  lowp vec4 tmpvar_23;
  mediump vec2 P_24;
  P_24 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_23 = texture2D (_LightTexture0, P_24);
  highp vec3 LightCoord_25;
  LightCoord_25 = lightCoord_6.xyz;
  highp float tmpvar_26;
  tmpvar_26 = dot (LightCoord_25, LightCoord_25);
  lowp vec4 tmpvar_27;
  tmpvar_27 = texture2D (_LightTextureB0, vec2(tmpvar_26));
  mediump float tmpvar_28;
  tmpvar_28 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_23.w) * tmpvar_27.w);
  atten_5 = tmpvar_28;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_20);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_20);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_20);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_10 * tmpvar_1) * diff_31);
  c_30.w = tmpvar_11;
  c_29.w = c_30.w;
  c_29.xyz = c_30.xyz;
  c_4.xyz = c_29.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 67533
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 67534
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67535
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67536
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 67537
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 67538
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67539
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67540
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67541
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67542
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67543
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67544
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67545
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 67546
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67547
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 67548
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67549
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 67550
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 67551
    //FTOU
    tu9 = uint(t9);
    //Instruction 67552
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 67553
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 67554
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 67555
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 67556
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 67557
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 67558
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 67559
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 67560
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 67561
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 67562
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 67563
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 67564
    //LOG
    t14 = log2(t7.x);
    //Instruction 67565
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 67566
    //EXP
    t14 = exp2(t14);
    //Instruction 67567
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 67568
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 67569
    //MUL
    t7.x = t7.x * t21;
    //Instruction 67570
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 67571
    //MOV
    t4.y = t3.w;
    //Instruction 67572
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 67573
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 67574
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 67575
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 67576
    //SQRT
    t22 = sqrt(t22);
    //Instruction 67577
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 67578
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 67579
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 67580
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 67581
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 67582
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 67583
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 67584
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 67585
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67586
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 67587
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 67588
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 67589
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 67590
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 67591
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 67592
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 67593
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 67594
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 67595
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 67596
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 67597
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 67598
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67599
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 67600
    //MOV
    t3.z = t2.z;
    //Instruction 67601
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 67602
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 67603
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 67604
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 67605
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67606
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 67607
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 67608
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 67609
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 67610
    //MOV
    t3.x = t4.z;
    //Instruction 67611
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 67612
    //MOV
    t4.z = t2.x;
    //Instruction 67613
    //MOV
    t2.x = t4.y;
    //Instruction 67614
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 67615
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 67616
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 67617
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 67618
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 67619
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 67620
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 67621
    //ADD
    vs_TEXCOORD3.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 67622
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 67623
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 67624
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 67625
    //FRC
    t1.x = fract(t1.x);
    //Instruction 67626
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 67627
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 67628
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 67629
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 67630
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 67631
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 67632
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 67633
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 67634
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67635
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 67636
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 67637
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67638
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 67639
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 67640
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67641
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 67642
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 67643
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 67644
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 67645
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 67646
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 67647
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 67648
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump vec3 t16_10;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 67481
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 67482
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 67483
    //MOV
    t1.x = t16_0.x;
    //Instruction 67484
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 67485
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67486
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67487
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67488
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67489
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 67490
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67491
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 67492
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67493
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 67494
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 67495
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67496
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 67497
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 67498
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 67499
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 67500
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 67501
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 67502
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 67503
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 67504
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 67505
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 67506
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 67507
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 67508
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 67509
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 67510
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 67511
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 67512
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 67513
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 67514
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 67515
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 67516
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 67517
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 67518
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 67519
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 67520
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 67521
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 67522
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 67523
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 67524
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 67525
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 67526
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 67527
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 67528
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 67529
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 67530
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67531
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67532
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xyz;
  highp float tmpvar_21;
  tmpvar_21 = dot (tmpvar_20, tmpvar_20);
  lowp float tmpvar_22;
  tmpvar_22 = (texture2D (_LightTextureB0, vec2(tmpvar_21)).w * textureCube (_LightTexture0, tmpvar_20).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = c_24.xyz;
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65209
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65210
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65211
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65212
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65213
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65214
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65215
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65216
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65217
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65218
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65219
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65220
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65221
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65222
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65223
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65224
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65225
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65226
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65227
    //FTOU
    tu9 = uint(t9);
    //Instruction 65228
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65229
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65230
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65231
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65232
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65233
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65234
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65235
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65236
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65237
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65238
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65239
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65240
    //LOG
    t14 = log2(t7.x);
    //Instruction 65241
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 65242
    //EXP
    t14 = exp2(t14);
    //Instruction 65243
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65244
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 65245
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65246
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65247
    //MOV
    t4.y = t3.w;
    //Instruction 65248
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65249
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65250
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65251
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65252
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65253
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65254
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65255
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65256
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65257
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65258
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65259
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65260
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65261
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65262
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65263
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65264
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65265
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65266
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65267
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65268
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65269
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65270
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65271
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65272
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65273
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65274
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65275
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65276
    //MOV
    t3.z = t2.z;
    //Instruction 65277
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65278
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65279
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65280
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65281
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65282
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65283
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65284
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65285
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65286
    //MOV
    t3.x = t4.z;
    //Instruction 65287
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65288
    //MOV
    t4.z = t2.x;
    //Instruction 65289
    //MOV
    t2.x = t4.y;
    //Instruction 65290
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65291
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65292
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65293
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65294
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65295
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65296
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65297
    //ADD
    vs_TEXCOORD3.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 65298
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65299
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 65300
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 65301
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65302
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65303
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 65304
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 65305
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65306
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 65307
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65308
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65309
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65310
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65311
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65312
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 65313
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65314
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 65315
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 65316
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65317
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65318
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65319
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65320
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65321
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65322
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65323
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65324
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
lowp float t10_8;
mediump vec3 t16_10;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 65162
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65163
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 65164
    //MOV
    t1.x = t16_0.x;
    //Instruction 65165
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 65166
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65167
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65168
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65169
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65170
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65171
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65172
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65173
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65174
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65175
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65176
    //ADD
    t16_10.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65177
    //MAD
    t16_10.xyz = vs_TEXCOORD5.zzz * t16_10.xyz + t10_0.xyz;
    //Instruction 65178
    //MAX
    t16_4.x = max(t16_10.z, t16_10.y);
    //Instruction 65179
    //MAX
    t16_4.x = max(t16_10.x, t16_4.x);
    //Instruction 65180
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65181
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65182
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_10.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65183
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65184
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 65185
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 65186
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 65187
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65188
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65189
    //SAMPLE
    t10_8 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 65190
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 65191
    //MUL
    t16_1 = t10_8 * t10_1;
    //Instruction 65192
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 65193
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65194
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65195
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 65196
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65197
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 65198
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65199
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65200
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65201
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65202
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65203
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 65204
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 65205
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 65206
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65207
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65208
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec3 _BillboardNormal;
uniform highp vec3 _BillboardTangent;
uniform highp float _CameraXZAngle;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp float angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  angle_9 = _CameraXZAngle;
  highp vec4 tmpvar_15;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_15 = _InstanceData;
  } else {
    tmpvar_15 = tmpvar_1;
  };
  highp vec3 tmpvar_16;
  tmpvar_16 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_15.x) * _BillboardTangent);
  billboardPos_8.xz = tmpvar_16.xz;
  billboardPos_8.y = (tmpvar_16.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_15.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_17;
    vPos_17 = billboardPos_8;
    highp float fMoveAmount_18;
    highp float fAdjust_19;
    highp float fLength_20;
    fLength_20 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_21;
    tmpvar_21 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_19 = tmpvar_21;
    if ((tmpvar_21 != 0.0)) {
      fAdjust_19 = pow (tmpvar_21, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_22;
    tmpvar_22.zw = vec2(0.0, 0.0);
    tmpvar_22.x = (tmpvar_14.x + tmpvar_15.w);
    tmpvar_22.y = (tmpvar_14.y + (tmpvar_15.w * 0.8));
    highp vec4 tmpvar_23;
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    tmpvar_23 = (((
      (tmpvar_24 * tmpvar_24)
     * 
      (3.0 - (2.0 * tmpvar_24))
    ) - 0.5) * 2.0);
    fMoveAmount_18 = ((_ST_WindGlobal.y * (tmpvar_23.x + 
      (tmpvar_23.y * tmpvar_23.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_18 = (fMoveAmount_18 * fAdjust_19);
    vPos_17.xz = (tmpvar_16.xz + (_ST_WindVector.xz * fMoveAmount_18));
    vPos_17 = (normalize(vPos_17) * fLength_20);
    billboardPos_8 = vPos_17;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (_CameraXZAngle + tmpvar_15.z);
  highp float tmpvar_25;
  tmpvar_25 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.x);
  highp float tmpvar_26;
  tmpvar_26 = (fract(abs(tmpvar_25)) * tmpvar_11.x);
  highp float tmpvar_27;
  if ((tmpvar_25 >= 0.0)) {
    tmpvar_27 = tmpvar_26;
  } else {
    tmpvar_27 = -(tmpvar_26);
  };
  highp vec4 tmpvar_28;
  tmpvar_28 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_27))];
  if ((tmpvar_28.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_28.xy - (tmpvar_28.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_28.xy + (tmpvar_28.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_29;
  tmpvar_29 = clamp ((fract(
    ((tmpvar_14.x + tmpvar_14.y) + tmpvar_14.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_29;
  highp vec4 hPos_30;
  hPos_30 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_31;
  highp vec4 o_32;
  highp vec4 tmpvar_33;
  tmpvar_33 = (hPos_30 * 0.5);
  highp vec2 tmpvar_34;
  tmpvar_34.x = tmpvar_33.x;
  tmpvar_34.y = (tmpvar_33.y * _ProjectionParams.x);
  o_32.xy = (tmpvar_34 + tmpvar_33.w);
  o_32.zw = hPos_30.zw;
  highp vec3 tmpvar_35;
  tmpvar_35 = o_32.xyw;
  screenPos_31 = tmpvar_35;
  screenPos_31.xy = (screenPos_31.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_36;
  v_36.x = _World2Object[0].x;
  v_36.y = _World2Object[1].x;
  v_36.z = _World2Object[2].x;
  v_36.w = _World2Object[3].x;
  highp vec4 v_37;
  v_37.x = _World2Object[0].y;
  v_37.y = _World2Object[1].y;
  v_37.z = _World2Object[2].y;
  v_37.w = _World2Object[3].y;
  highp vec4 v_38;
  v_38.x = _World2Object[0].z;
  v_38.y = _World2Object[1].z;
  v_38.z = _World2Object[2].z;
  v_38.w = _World2Object[3].z;
  highp vec3 tmpvar_39;
  tmpvar_39 = normalize(((
    (v_36.xyz * _BillboardNormal.x)
   + 
    (v_37.xyz * _BillboardNormal.y)
  ) + (v_38.xyz * _BillboardNormal.z)));
  worldNormal_4 = tmpvar_39;
  highp mat3 tmpvar_40;
  tmpvar_40[0] = _Object2World[0].xyz;
  tmpvar_40[1] = _Object2World[1].xyz;
  tmpvar_40[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_41;
  tmpvar_41 = normalize((tmpvar_40 * _BillboardTangent));
  worldTangent_3 = tmpvar_41;
  lowp vec3 tmpvar_42;
  tmpvar_42 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_43;
  tmpvar_43 = -(tmpvar_42);
  worldBinormal_2 = tmpvar_43;
  lowp vec3 tmpvar_44;
  tmpvar_44.x = worldTangent_3.x;
  tmpvar_44.y = worldBinormal_2.x;
  tmpvar_44.z = worldNormal_4.x;
  lowp vec3 tmpvar_45;
  tmpvar_45.x = worldTangent_3.y;
  tmpvar_45.y = worldBinormal_2.y;
  tmpvar_45.z = worldNormal_4.y;
  lowp vec3 tmpvar_46;
  tmpvar_46.x = worldTangent_3.z;
  tmpvar_46.y = worldBinormal_2.z;
  tmpvar_46.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_44;
  xlv_TEXCOORD1 = tmpvar_45;
  xlv_TEXCOORD2 = tmpvar_46;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_31;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD5.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec2 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19).xy;
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, tmpvar_20).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_4.xyz = c_22.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
highp uint tu0;
bool tb0;
highp vec4 t1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec3 t4;
mediump float t16_5;
lowp vec3 t10_6;
highp vec3 t7;
highp vec2 t8;
highp float t9;
highp uint tu9;
highp float t14;
highp vec2 t16;
highp float t21;
highp float t22;
bool tb22;
void main()
{
    //Instruction 65883
    //LT
    tb0 = 0.0<_InstanceData.x;
    //Instruction 65884
    //MOVC
    t0 = (bool(tb0)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65885
    //ADD
    t1.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65886
    //ADD
    t2.x = t0.w + t1.x;
    //Instruction 65887
    //MAD
    t2.y = t0.w * 0.800000 + t1.y;
    //Instruction 65888
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65889
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65890
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65891
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65892
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65893
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65894
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65895
    //MAD
    t21 = t2.y * t2.y + t2.x;
    //Instruction 65896
    //DIV
    t22 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65897
    //MAD
    t21 = _ST_WindGlobal.y * t21 + t22;
    //Instruction 65898
    //DIV
    t22 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65899
    //ADD
    t2.x = in_TEXCOORD0.x + -0.500000;
    //Instruction 65900
    //MUL
    t9 = in_COLOR0.w * 255.000000;
    //Instruction 65901
    //FTOU
    tu9 = uint(t9);
    //Instruction 65902
    //MUL
    t2.x = t2.x * _TreeSize[int(tu9) + 0].x;
    //Instruction 65903
    //MUL
    t0.x = t0.x * t2.x;
    //Instruction 65904
    //MUL
    t3.xyz = t0.xxx * _BillboardTangent.xyzx.xyz;
    //Instruction 65905
    //MAD
    t0.x = in_TEXCOORD0.y * _TreeSize[int(tu9) + 0].y + _TreeSize[int(tu9) + 0].z;
    //Instruction 65906
    //MAD
    t3.w = t0.x * t0.y + t3.y;
    //Instruction 65907
    //ADD
    t0.x = t0.z + _CameraXZAngle;
    //Instruction 65908
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].y + 0.500000;
    //Instruction 65909
    //ROUND_NI
    t0.x = floor(t0.x);
    //Instruction 65910
    //DIV
    t0.x = t0.x / _TreeInfo[int(tu9) + 0].x;
    //Instruction 65911
    //MAD
    t7.x = (-t22) * 0.250000 + t3.w;
    //Instruction 65912
    //MAX
    t7.x = max(t7.x, 0.0);
    //Instruction 65913
    //MUL
    t7.x = t7.x * _ST_WindGlobal.z;
    //Instruction 65914
    //LOG
    t14 = log2(t7.x);
    //Instruction 65915
    //MUL
    t14 = t14 * _ST_WindGlobal.w;
    //Instruction 65916
    //EXP
    t14 = exp2(t14);
    //Instruction 65917
    //NE
    tb22 = t7.x!=0.0;
    //Instruction 65918
    //MOVC
    t7.x = (tb22) ? t14 : t7.x;
    //Instruction 65919
    //MUL
    t7.x = t7.x * t21;
    //Instruction 65920
    //MAD
    t4.xz = _ST_WindVector.xz * t7.xx + t3.xz;
    //Instruction 65921
    //MOV
    t4.y = t3.w;
    //Instruction 65922
    //DP3
    t7.x = dot(t4.xyz, t4.xyz);
    //Instruction 65923
    //RSQ
    t7.x = inversesqrt(t7.x);
    //Instruction 65924
    //MUL
    t7.xyz = t7.xxx * t4.xyz;
    //Instruction 65925
    //DP3
    t22 = dot(t3.xzw, t3.xzw);
    //Instruction 65926
    //SQRT
    t22 = sqrt(t22);
    //Instruction 65927
    //MUL
    t7.xyz = t7.xyz * vec3(t22);
    //Instruction 65928
    //MUL
    t16_5 = _WindEnabled * _WindQuality;
    //Instruction 65929
    //LT
    tb22 = 0.0<t16_5;
    //Instruction 65930
    //MOVC
    t7.xyz = (bool(tb22)) ? t7.xyz : t3.xwz;
    //Instruction 65931
    //ADD
    t7.xyz = t7.xyz + in_POSITION0.xyz;
    //Instruction 65932
    //MUL
    t3 = t7.yyyy * glstate_matrix_mvp[1];
    //Instruction 65933
    //MAD
    t3 = glstate_matrix_mvp[0] * t7.xxxx + t3;
    //Instruction 65934
    //MAD
    t3 = glstate_matrix_mvp[2] * t7.zzzz + t3;
    //Instruction 65935
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65936
    //MUL
    t3.y = _World2Object[0].x * _BillboardNormal.xyzx.x;
    //Instruction 65937
    //MUL
    t3.z = _World2Object[1].x * _BillboardNormal.xyzx.x;
    //Instruction 65938
    //MUL
    t3.x = _World2Object[2].x * _BillboardNormal.xyzx.x;
    //Instruction 65939
    //MUL
    t4.y = _World2Object[0].y * _BillboardNormal.xyzx.y;
    //Instruction 65940
    //MUL
    t4.z = _World2Object[1].y * _BillboardNormal.xyzx.y;
    //Instruction 65941
    //MUL
    t4.x = _World2Object[2].y * _BillboardNormal.xyzx.y;
    //Instruction 65942
    //ADD
    t2.xzw = t3.xyz + t4.xyz;
    //Instruction 65943
    //MUL
    t3.y = _World2Object[0].z * _BillboardNormal.xyzx.z;
    //Instruction 65944
    //MUL
    t3.z = _World2Object[1].z * _BillboardNormal.xyzx.z;
    //Instruction 65945
    //MUL
    t3.x = _World2Object[2].z * _BillboardNormal.xyzx.z;
    //Instruction 65946
    //ADD
    t2.xzw = t2.xzw + t3.xyz;
    //Instruction 65947
    //DP3
    t22 = dot(t2.xzw, t2.xzw);
    //Instruction 65948
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65949
    //MUL
    t2.xzw = vec3(t22) * t2.xzw;
    //Instruction 65950
    //MOV
    t3.z = t2.z;
    //Instruction 65951
    //MUL
    t4.xyz = _Object2World[1].yzx * _BillboardTangent.xyzx.yyy;
    //Instruction 65952
    //MAD
    t4.xyz = _Object2World[0].yzx * _BillboardTangent.xyzx.xxx + t4.xyz;
    //Instruction 65953
    //MAD
    t4.xyz = _Object2World[2].yzx * _BillboardTangent.xyzx.zzz + t4.xyz;
    //Instruction 65954
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 65955
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 65956
    //MUL
    t4.xyz = vec3(t22) * t4.yxz;
    //Instruction 65957
    //MUL
    t10_6.xyz = t2.xzw * t4.yxz;
    //Instruction 65958
    //MAD
    t10_6.xyz = t2.wxz * t4.xzy + (-t10_6.xyz);
    //Instruction 65959
    //MOV
    t3.y = (-t10_6.x);
    //Instruction 65960
    //MOV
    t3.x = t4.z;
    //Instruction 65961
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65962
    //MOV
    t4.z = t2.x;
    //Instruction 65963
    //MOV
    t2.x = t4.y;
    //Instruction 65964
    //MOV
    t2.z = (-t10_6.y);
    //Instruction 65965
    //MOV
    t4.y = (-t10_6.z);
    //Instruction 65966
    //MOV
    vs_TEXCOORD2.xyz = t4.xyz;
    //Instruction 65967
    //MOV
    vs_TEXCOORD1.xyz = t2.xzw;
    //Instruction 65968
    //MUL
    t2.xzw = t7.yyy * _Object2World[1].xyz;
    //Instruction 65969
    //MAD
    t2.xzw = _Object2World[0].xyz * t7.xxx + t2.xzw;
    //Instruction 65970
    //MAD
    t2.xzw = _Object2World[2].xyz * t7.zzz + t2.xzw;
    //Instruction 65971
    //ADD
    vs_TEXCOORD3.xyz = t2.xzw + _Object2World[3].xyz;
    //Instruction 65972
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 65973
    //ADD
    t1.x = t1.y + t1.x;
    //Instruction 65974
    //ADD
    t1.x = t1.z + t1.x;
    //Instruction 65975
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65976
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65977
    //MOV
    vs_TEXCOORD5.z = t1.x;
    //Instruction 65978
    //GE
    tb1 = t0.x>=(-t0.x);
    //Instruction 65979
    //FRC
    t0.x = fract(abs(t0.x));
    //Instruction 65980
    //MOVC
    t0.x = (tb1) ? t0.x : (-t0.x);
    //Instruction 65981
    //MAD
    t0.x = t0.x * _TreeInfo[int(tu9) + 0].x + _TreeInfo[int(tu9) + 0].z;
    //Instruction 65982
    //FTOU
    tu0 = uint(t0.x);
    //Instruction 65983
    //LT
    tb1 = _ImageTexCoords[int(tu0) + 0].w<0.0;
    //Instruction 65984
    //MAD
    t8.xy = (-_ImageTexCoords[int(tu0) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65985
    //MAD
    t2.xy = _ImageTexCoords[int(tu0) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu0) + 0].xy;
    //Instruction 65986
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb1)) ? t8.xy : t2.xy;
    //Instruction 65987
    //MUL
    t1.xyz = t7.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65988
    //MAD
    t0.xyz = glstate_matrix_mvp[0].xyw * t7.xxx + t1.xyz;
    //Instruction 65989
    //MAD
    t0.xyz = glstate_matrix_mvp[2].xyw * t7.zzz + t0.xyz;
    //Instruction 65990
    //ADD
    t0.xyz = t0.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65991
    //MUL
    t1.xz = t0.xz * vec2(0.500000, 0.500000);
    //Instruction 65992
    //MUL
    t21 = t0.y * _ProjectionParams.x;
    //Instruction 65993
    //MUL
    t1.w = t21 * 0.500000;
    //Instruction 65994
    //ADD
    t1.xy = t1.zz + t1.xw;
    //Instruction 65995
    //MUL
    t1.xy = t1.xy * _ScreenParams.xy;
    //Instruction 65996
    //MUL
    t0.xy = t1.xy * vec2(0.250000, 0.250000);
    //Instruction 65997
    //MOV
    vs_TEXCOORD6.xyz = t0.xyz;
    //Instruction 65998
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 65843
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65844
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 65845
    //MOV
    t1.x = t16_0.x;
    //Instruction 65846
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 65847
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65848
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 65849
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65850
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65851
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65852
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65853
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65854
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65855
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65856
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65857
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65858
    //MAD
    t16_9.xyz = vs_TEXCOORD5.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 65859
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 65860
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 65861
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65862
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65863
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65864
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65865
    //MUL
    t16_4.xy = vs_TEXCOORD3.yy * _LightMatrix0[1].xy;
    //Instruction 65866
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD3.xx + t16_4.xy;
    //Instruction 65867
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD3.zz + t16_4.xy;
    //Instruction 65868
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 65869
    //SAMPLE
    t10_1.x = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 65870
    //MUL
    t16_4.xyz = t10_1.xxx * _LightColor0.xyz;
    //Instruction 65871
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65872
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65873
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65874
    //DP3
    t10_5.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65875
    //DP3
    t10_5.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65876
    //DP3
    t10_5.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65877
    //DP3
    t16_21 = dot(t10_5.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65878
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 65879
    //MUL
    t16_3.xyz = vec3(t16_21) * t16_3.xyz;
    //Instruction 65880
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65881
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65882
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = texture2D (_LightTexture0, vec2(tmpvar_18)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 67680
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67681
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67682
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67683
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 67684
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67685
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 67686
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 67687
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67688
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67689
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67690
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67691
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67692
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67693
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67694
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67695
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67696
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67697
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 67698
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67699
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 67700
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 67701
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 67702
    //MUL
    t3.y = t0.y * t17;
    //Instruction 67703
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 67704
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 67705
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 67706
    //LOG
    t17 = log2(t7);
    //Instruction 67707
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 67708
    //EXP
    t17 = exp2(t17);
    //Instruction 67709
    //NE
    tb18 = t7!=0.0;
    //Instruction 67710
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 67711
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 67712
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67713
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 67714
    //MUL
    t7 = t0.x * t7;
    //Instruction 67715
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 67716
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 67717
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 67718
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67719
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 67720
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 67721
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 67722
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 67723
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 67724
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 67725
    //MOV
    t4.y = t3.y;
    //Instruction 67726
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 67727
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 67728
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 67729
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 67730
    //SQRT
    t16 = sqrt(t16);
    //Instruction 67731
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 67732
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 67733
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 67734
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 67735
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 67736
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 67737
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67738
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 67739
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 67740
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 67741
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 67742
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 67743
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 67744
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 67745
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 67746
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 67747
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 67748
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 67749
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67750
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 67751
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 67752
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 67753
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67754
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 67755
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67756
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 67757
    //MUL
    t1.x = t1.x * t16;
    //Instruction 67758
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 67759
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 67760
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 67761
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 67762
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 67763
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 67764
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 67765
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 67766
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 67767
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 67768
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 67769
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 67770
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 67771
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 67772
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 67773
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 67774
    //LT
    tb11 = t16<(-t16);
    //Instruction 67775
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 67776
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 67777
    //LT
    tb6 = t1.x<0.0;
    //Instruction 67778
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 67779
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 67780
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67781
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 67782
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67783
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 67784
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 67785
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67786
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 67787
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 67788
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67789
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67790
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67791
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67792
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 67793
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 67794
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67795
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 67796
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 67797
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67798
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 67799
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 67800
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 67801
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 67802
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 67803
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 67804
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 67805
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 67649
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 67650
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 67651
    //MOV
    t1.x = t16_0.x;
    //Instruction 67652
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 67653
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67654
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67655
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67656
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67657
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 67658
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67659
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 67660
    //LT
    tb1 = t10_2<0.0;
    //Instruction 67661
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67662
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 67663
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 67664
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 67665
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 67666
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 67667
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 67668
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 67669
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 67670
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 67671
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 67672
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 67673
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 67674
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 67675
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 67676
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 67677
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67678
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67679
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_16;
  lowp vec4 c_17;
  lowp float diff_18;
  mediump float tmpvar_19;
  tmpvar_19 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_18 = tmpvar_19;
  c_17.xyz = ((tmpvar_8 * tmpvar_1) * diff_18);
  c_17.w = tmpvar_9;
  c_16.w = c_17.w;
  c_16.xyz = c_17.xyz;
  c_3.xyz = c_16.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 65345
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65346
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65347
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65348
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 65349
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65350
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 65351
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 65352
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65353
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65354
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65355
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65356
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65357
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65358
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65359
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65360
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65361
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65362
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 65363
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65364
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 65365
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 65366
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 65367
    //MUL
    t3.y = t0.y * t17;
    //Instruction 65368
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 65369
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65370
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65371
    //LOG
    t17 = log2(t7);
    //Instruction 65372
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 65373
    //EXP
    t17 = exp2(t17);
    //Instruction 65374
    //NE
    tb18 = t7!=0.0;
    //Instruction 65375
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 65376
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 65377
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65378
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 65379
    //MUL
    t7 = t0.x * t7;
    //Instruction 65380
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 65381
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 65382
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 65383
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65384
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 65385
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65386
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65387
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 65388
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 65389
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65390
    //MOV
    t4.y = t3.y;
    //Instruction 65391
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 65392
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65393
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 65394
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 65395
    //SQRT
    t16 = sqrt(t16);
    //Instruction 65396
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 65397
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65398
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65399
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65400
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65401
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65402
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65403
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 65404
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 65405
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 65406
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 65407
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 65408
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 65409
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 65410
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 65411
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 65412
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 65413
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65414
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65415
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65416
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65417
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 65418
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65419
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 65420
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 65421
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 65422
    //MUL
    t1.x = t1.x * t16;
    //Instruction 65423
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 65424
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 65425
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 65426
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 65427
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 65428
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 65429
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 65430
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 65431
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 65432
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 65433
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 65434
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 65435
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 65436
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 65437
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 65438
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 65439
    //LT
    tb11 = t16<(-t16);
    //Instruction 65440
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 65441
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 65442
    //LT
    tb6 = t1.x<0.0;
    //Instruction 65443
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 65444
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 65445
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 65446
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 65447
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 65448
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 65449
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 65450
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 65451
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 65452
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 65453
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 65454
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65455
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65456
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65457
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 65458
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65459
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65460
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 65461
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 65462
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65463
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 65464
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 65465
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 65466
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 65467
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 65468
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 65469
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 65470
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_15;
void main()
{
    //Instruction 65325
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65326
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 65327
    //MOV
    t1.x = t16_0.x;
    //Instruction 65328
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 65329
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65330
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65331
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65332
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65333
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65334
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65335
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65336
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 65337
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65338
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65339
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65340
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 65341
    //MUL
    t16_3.xyz = vec3(t16_15) * t16_3.xyz;
    //Instruction 65342
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65343
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65344
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18);
  lightCoord_5 = tmpvar_19;
  lowp vec4 tmpvar_20;
  mediump vec2 P_21;
  P_21 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_20 = texture2D (_LightTexture0, P_21);
  highp vec3 LightCoord_22;
  LightCoord_22 = lightCoord_5.xyz;
  highp float tmpvar_23;
  tmpvar_23 = dot (LightCoord_22, LightCoord_22);
  lowp vec4 tmpvar_24;
  tmpvar_24 = texture2D (_LightTextureB0, vec2(tmpvar_23));
  mediump float tmpvar_25;
  tmpvar_25 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_20.w) * tmpvar_24.w);
  atten_4 = tmpvar_25;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_10 * tmpvar_1) * diff_28);
  c_27.w = tmpvar_11;
  c_26.w = c_27.w;
  c_26.xyz = c_27.xyz;
  c_3.xyz = c_26.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 65509
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65510
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65511
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65512
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 65513
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65514
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 65515
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 65516
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65517
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65518
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65519
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65520
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65521
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65522
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65523
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65524
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65525
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65526
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 65527
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65528
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 65529
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 65530
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 65531
    //MUL
    t3.y = t0.y * t17;
    //Instruction 65532
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 65533
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 65534
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 65535
    //LOG
    t17 = log2(t7);
    //Instruction 65536
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 65537
    //EXP
    t17 = exp2(t17);
    //Instruction 65538
    //NE
    tb18 = t7!=0.0;
    //Instruction 65539
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 65540
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 65541
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65542
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 65543
    //MUL
    t7 = t0.x * t7;
    //Instruction 65544
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 65545
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 65546
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 65547
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65548
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 65549
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65550
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 65551
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 65552
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 65553
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65554
    //MOV
    t4.y = t3.y;
    //Instruction 65555
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 65556
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65557
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 65558
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 65559
    //SQRT
    t16 = sqrt(t16);
    //Instruction 65560
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 65561
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65562
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65563
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65564
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65565
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65566
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65567
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 65568
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 65569
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 65570
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 65571
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 65572
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 65573
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 65574
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 65575
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 65576
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 65577
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65578
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65579
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65580
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65581
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 65582
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65583
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 65584
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 65585
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 65586
    //MUL
    t1.x = t1.x * t16;
    //Instruction 65587
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 65588
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 65589
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 65590
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 65591
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 65592
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 65593
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 65594
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 65595
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 65596
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 65597
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 65598
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 65599
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 65600
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 65601
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 65602
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 65603
    //LT
    tb11 = t16<(-t16);
    //Instruction 65604
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 65605
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 65606
    //LT
    tb6 = t1.x<0.0;
    //Instruction 65607
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 65608
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 65609
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 65610
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 65611
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 65612
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 65613
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 65614
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 65615
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 65616
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 65617
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 65618
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65619
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65620
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65621
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 65622
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 65623
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65624
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 65625
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 65626
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65627
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 65628
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 65629
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 65630
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 65631
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 65632
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 65633
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 65634
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 65471
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65472
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65473
    //MOV
    t1.x = t16_0.x;
    //Instruction 65474
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65475
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65476
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65477
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65478
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65479
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65480
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65481
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65482
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65483
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65484
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 65485
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 65486
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 65487
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 65488
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 65489
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 65490
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 65491
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 65492
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 65493
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 65494
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 65495
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 65496
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 65497
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 65498
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65499
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65500
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 65501
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65502
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 65503
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 65504
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65505
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65506
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65507
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65508
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xyz;
  highp float tmpvar_18;
  tmpvar_18 = dot (tmpvar_17, tmpvar_17);
  lowp float tmpvar_19;
  tmpvar_19 = (texture2D (_LightTextureB0, vec2(tmpvar_18)).w * textureCube (_LightTexture0, tmpvar_17).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = c_21.xyz;
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 67839
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67840
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67841
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67842
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 67843
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67844
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 67845
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 67846
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 67847
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 67848
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 67849
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 67850
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 67851
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 67852
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 67853
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 67854
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 67855
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 67856
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 67857
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 67858
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 67859
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 67860
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 67861
    //MUL
    t3.y = t0.y * t17;
    //Instruction 67862
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 67863
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 67864
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 67865
    //LOG
    t17 = log2(t7);
    //Instruction 67866
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 67867
    //EXP
    t17 = exp2(t17);
    //Instruction 67868
    //NE
    tb18 = t7!=0.0;
    //Instruction 67869
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 67870
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 67871
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 67872
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 67873
    //MUL
    t7 = t0.x * t7;
    //Instruction 67874
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 67875
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 67876
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 67877
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 67878
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 67879
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 67880
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 67881
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 67882
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 67883
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 67884
    //MOV
    t4.y = t3.y;
    //Instruction 67885
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 67886
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 67887
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 67888
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 67889
    //SQRT
    t16 = sqrt(t16);
    //Instruction 67890
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 67891
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 67892
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 67893
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 67894
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 67895
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 67896
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 67897
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 67898
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 67899
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 67900
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 67901
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 67902
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 67903
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 67904
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 67905
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 67906
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 67907
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 67908
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 67909
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 67910
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 67911
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 67912
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 67913
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 67914
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 67915
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 67916
    //MUL
    t1.x = t1.x * t16;
    //Instruction 67917
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 67918
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 67919
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 67920
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 67921
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 67922
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 67923
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 67924
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 67925
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 67926
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 67927
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 67928
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 67929
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 67930
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 67931
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 67932
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 67933
    //LT
    tb11 = t16<(-t16);
    //Instruction 67934
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 67935
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 67936
    //LT
    tb6 = t1.x<0.0;
    //Instruction 67937
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 67938
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 67939
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 67940
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 67941
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 67942
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 67943
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 67944
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 67945
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 67946
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 67947
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 67948
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 67949
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67950
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 67951
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 67952
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 67953
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 67954
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 67955
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 67956
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 67957
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 67958
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 67959
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 67960
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 67961
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 67962
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 67963
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 67964
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 67806
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 67807
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 67808
    //MOV
    t1.x = t16_0.x;
    //Instruction 67809
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 67810
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67811
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67812
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67813
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67814
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 67815
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67816
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 67817
    //LT
    tb1 = t10_2<0.0;
    //Instruction 67818
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67819
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 67820
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 67821
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 67822
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 67823
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 67824
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 67825
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 67826
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 67827
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 67828
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 67829
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 67830
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 67831
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 67832
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 67833
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 67834
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 67835
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 67836
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67837
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67838
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_40;
  hPos_40 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_41;
  highp vec4 o_42;
  highp vec4 tmpvar_43;
  tmpvar_43 = (hPos_40 * 0.5);
  highp vec2 tmpvar_44;
  tmpvar_44.x = tmpvar_43.x;
  tmpvar_44.y = (tmpvar_43.y * _ProjectionParams.x);
  o_42.xy = (tmpvar_44 + tmpvar_43.w);
  o_42.zw = hPos_40.zw;
  highp vec3 tmpvar_45;
  tmpvar_45 = o_42.xyw;
  screenPos_41 = tmpvar_45;
  screenPos_41.xy = (screenPos_41.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_46;
  v_46.x = _World2Object[0].x;
  v_46.y = _World2Object[1].x;
  v_46.z = _World2Object[2].x;
  v_46.w = _World2Object[3].x;
  highp vec4 v_47;
  v_47.x = _World2Object[0].z;
  v_47.y = _World2Object[1].z;
  v_47.z = _World2Object[2].z;
  v_47.w = _World2Object[3].z;
  highp vec3 tmpvar_48;
  tmpvar_48 = normalize(((v_46.xyz * tmpvar_16.z) + (v_47.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_48;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_41;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_17;
  tmpvar_17 = (_LightMatrix0 * tmpvar_16).xy;
  lowp float tmpvar_18;
  tmpvar_18 = texture2D (_LightTexture0, tmpvar_17).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_18);
  lowp vec4 c_19;
  lowp vec4 c_20;
  lowp float diff_21;
  mediump float tmpvar_22;
  tmpvar_22 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_21 = tmpvar_22;
  c_20.xyz = ((tmpvar_8 * tmpvar_1) * diff_21);
  c_20.w = tmpvar_9;
  c_19.w = c_20.w;
  c_19.xyz = c_20.xyz;
  c_3.xyz = c_19.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t6;
highp int ti6;
bool tb6;
highp float t7;
bool tb8;
highp vec2 t11;
bool tb11;
highp vec2 t12;
highp uint tu12;
highp float t16;
bool tb16;
highp float t17;
bool tb18;
void main()
{
    //Instruction 66025
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66026
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66027
    //ADD
    t6.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66028
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66029
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66030
    //ADD
    t2.x = t0.w + t6.x;
    //Instruction 66031
    //MAD
    t2.y = t0.w * 0.800000 + t6.y;
    //Instruction 66032
    //ADD
    t6.xyz = (-t6.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66033
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66034
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66035
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66036
    //MUL
    t12.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66037
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66038
    //MAD
    t2.xy = t12.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66039
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66040
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66041
    //DIV
    t7 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66042
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t7;
    //Instruction 66043
    //DIV
    t7 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66044
    //MUL
    t12.x = in_COLOR0.w * 255.000000;
    //Instruction 66045
    //FTOU
    tu12 = uint(t12.x);
    //Instruction 66046
    //MAD
    t17 = in_TEXCOORD0.y * _TreeSize[int(tu12) + 0].y + _TreeSize[int(tu12) + 0].z;
    //Instruction 66047
    //MUL
    t3.y = t0.y * t17;
    //Instruction 66048
    //MAD
    t7 = (-t7) * 0.250000 + t3.y;
    //Instruction 66049
    //MAX
    t7 = max(t7, 0.0);
    //Instruction 66050
    //MUL
    t7 = t7 * _ST_WindGlobal.z;
    //Instruction 66051
    //LOG
    t17 = log2(t7);
    //Instruction 66052
    //MUL
    t17 = t17 * _ST_WindGlobal.w;
    //Instruction 66053
    //EXP
    t17 = exp2(t17);
    //Instruction 66054
    //NE
    tb18 = t7!=0.0;
    //Instruction 66055
    //MOVC
    t7 = (tb18) ? t17 : t7;
    //Instruction 66056
    //MUL
    t2.x = t7 * t2.x;
    //Instruction 66057
    //ADD
    t7 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66058
    //MUL
    t7 = t7 * _TreeSize[int(tu12) + 0].x;
    //Instruction 66059
    //MUL
    t7 = t0.x * t7;
    //Instruction 66060
    //DP3
    t11.x = dot(t6.xyz, t6.xyz);
    //Instruction 66061
    //RSQ
    t11.x = inversesqrt(t11.x);
    //Instruction 66062
    //MUL
    t4.xy = t11.xx * t6.xz;
    //Instruction 66063
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66064
    //DP2
    t6.x = dot(t4.xz, t4.xw);
    //Instruction 66065
    //MUL
    t11.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66066
    //RSQ
    t6.x = inversesqrt(t6.x);
    //Instruction 66067
    //MUL
    t6.xy = t6.xx * t11.xy;
    //Instruction 66068
    //MUL
    t3.xz = t6.xy * vec2(t7);
    //Instruction 66069
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66070
    //MOV
    t4.y = t3.y;
    //Instruction 66071
    //DP3
    t16 = dot(t4.xyz, t4.xyz);
    //Instruction 66072
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 66073
    //MUL
    t2.xyw = vec3(t16) * t4.xyz;
    //Instruction 66074
    //DP3
    t16 = dot(t3.xyz, t3.xyz);
    //Instruction 66075
    //SQRT
    t16 = sqrt(t16);
    //Instruction 66076
    //MUL
    t2.xyw = vec3(t16) * t2.xyw;
    //Instruction 66077
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66078
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66079
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66080
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66081
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66082
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66083
    //MUL
    t3.x = t6.y * _World2Object[0].x;
    //Instruction 66084
    //MUL
    t3.y = t6.y * _World2Object[1].x;
    //Instruction 66085
    //MUL
    t3.z = t6.y * _World2Object[2].x;
    //Instruction 66086
    //MUL
    t4.x = (-t6.x) * _World2Object[0].z;
    //Instruction 66087
    //MUL
    t4.y = (-t6.x) * _World2Object[1].z;
    //Instruction 66088
    //MUL
    t4.z = (-t6.x) * _World2Object[2].z;
    //Instruction 66089
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66090
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66091
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66092
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 66093
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 66094
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66095
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66096
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66097
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66098
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 66099
    //MAX
    t1.x = max(abs(t6.y), abs(t6.x));
    //Instruction 66100
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66101
    //MIN
    t16 = min(abs(t6.y), abs(t6.x));
    //Instruction 66102
    //MUL
    t1.x = t1.x * t16;
    //Instruction 66103
    //MUL
    t16 = t1.x * t1.x;
    //Instruction 66104
    //MAD
    t3.x = t16 * 0.020835 + -0.085133;
    //Instruction 66105
    //MAD
    t3.x = t16 * t3.x + 0.180141;
    //Instruction 66106
    //MAD
    t3.x = t16 * t3.x + -0.330299;
    //Instruction 66107
    //MAD
    t16 = t16 * t3.x + 0.999866;
    //Instruction 66108
    //MUL
    t3.x = t16 * t1.x;
    //Instruction 66109
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 66110
    //LT
    tb8 = abs(t6.y)<abs(t6.x);
    //Instruction 66111
    //AND
    t3.x = tb8 ? t3.x : float(0.0);
    //Instruction 66112
    //MAD
    t1.x = t1.x * t16 + t3.x;
    //Instruction 66113
    //LT
    tb16 = t6.y<(-t6.y);
    //Instruction 66114
    //AND
    t16 = tb16 ? -3.141593 : float(0.0);
    //Instruction 66115
    //ADD
    t1.x = t16 + t1.x;
    //Instruction 66116
    //MIN
    t16 = min(t6.y, (-t6.x));
    //Instruction 66117
    //MAX
    t6.x = max(t6.y, (-t6.x));
    //Instruction 66118
    //GE
    tb6 = t6.x>=(-t6.x);
    //Instruction 66119
    //LT
    tb11 = t16<(-t16);
    //Instruction 66120
    //AND
    ti6 = int(uint(tb6) & uint(tb11));
    //Instruction 66121
    //MOVC
    t1.x = (ti6 != 0) ? (-t1.x) : t1.x;
    //Instruction 66122
    //LT
    tb6 = t1.x<0.0;
    //Instruction 66123
    //AND
    t6.x = tb6 ? 6.283185 : float(0.0);
    //Instruction 66124
    //ADD
    t1.x = t6.x + t1.x;
    //Instruction 66125
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66126
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].y + 0.500000;
    //Instruction 66127
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66128
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu12) + 0].x;
    //Instruction 66129
    //GE
    tb6 = t1.x>=(-t1.x);
    //Instruction 66130
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66131
    //MOVC
    t1.x = (tb6) ? t1.x : (-t1.x);
    //Instruction 66132
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu12) + 0].x + _TreeInfo[int(tu12) + 0].z;
    //Instruction 66133
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66134
    //LT
    tb6 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66135
    //MAD
    t11.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66136
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66137
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb6)) ? t11.xy : t3.xy;
    //Instruction 66138
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 66139
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66140
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66141
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66142
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66143
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66144
    //MUL
    t16 = t1.y * _ProjectionParams.x;
    //Instruction 66145
    //MUL
    t2.w = t16 * 0.500000;
    //Instruction 66146
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66147
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66148
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66149
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 66150
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 65999
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 66000
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 66001
    //MOV
    t1.x = t16_0.x;
    //Instruction 66002
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 66003
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66004
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66005
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66006
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66007
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 66008
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66009
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 66010
    //LT
    tb1 = t10_2<0.0;
    //Instruction 66011
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66012
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 66013
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 66014
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 66015
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 66016
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66017
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 66018
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66019
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 66020
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 66021
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 66022
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66023
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66024
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = texture2D (_LightTexture0, vec2(tmpvar_20)).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 65675
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65676
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65677
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 65678
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65679
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65680
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 65681
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 65682
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65683
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65684
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65685
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65686
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65687
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65688
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65689
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65690
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65691
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 65692
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65693
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 65694
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 65695
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 65696
    //MUL
    t3.y = t0.y * t20;
    //Instruction 65697
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 65698
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 65699
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 65700
    //LOG
    t20 = log2(t8);
    //Instruction 65701
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 65702
    //EXP
    t20 = exp2(t20);
    //Instruction 65703
    //NE
    tb21 = t8!=0.0;
    //Instruction 65704
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 65705
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 65706
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65707
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 65708
    //MUL
    t8 = t0.x * t8;
    //Instruction 65709
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65710
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 65711
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 65712
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 65713
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65714
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 65715
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65716
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 65717
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 65718
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 65719
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65720
    //MOV
    t5.y = t3.y;
    //Instruction 65721
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 65722
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 65723
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 65724
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 65725
    //SQRT
    t21 = sqrt(t21);
    //Instruction 65726
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 65727
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65728
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65729
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65730
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65731
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65732
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65733
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 65734
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 65735
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 65736
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 65737
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 65738
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 65739
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 65740
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 65741
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 65742
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 65743
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65744
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65745
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65746
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65747
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 65748
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65749
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 65750
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 65751
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65752
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65753
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 65754
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 65755
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 65756
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 65757
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 65758
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 65759
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 65760
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 65761
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 65762
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 65763
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 65764
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 65765
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 65766
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 65767
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 65768
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 65769
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 65770
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 65771
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 65772
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 65773
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 65774
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 65775
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 65776
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 65777
    //LT
    tb7 = t1.x<0.0;
    //Instruction 65778
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 65779
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 65780
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 65781
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 65782
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 65783
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 65784
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 65785
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 65786
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 65787
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 65788
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 65789
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65790
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65791
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65792
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 65793
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65794
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 65795
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 65796
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65797
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 65798
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 65799
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 65800
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 65801
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 65802
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 65803
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 65804
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 65635
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65636
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65637
    //MOV
    t1.x = t16_0.x;
    //Instruction 65638
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65639
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65640
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65641
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65642
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65643
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65644
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65645
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65646
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65647
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65648
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65649
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65650
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 65651
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 65652
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 65653
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65654
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65655
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65656
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65657
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 65658
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 65659
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 65660
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65661
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65662
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 65663
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 65664
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65665
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65666
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 65667
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65668
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 65669
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 65670
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65671
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65672
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65673
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65674
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_18;
  lowp vec4 c_19;
  lowp float diff_20;
  mediump float tmpvar_21;
  tmpvar_21 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_20 = tmpvar_21;
  c_19.xyz = ((tmpvar_8 * tmpvar_1) * diff_20);
  c_19.w = tmpvar_9;
  c_18.w = c_19.w;
  c_18.xyz = c_19.xyz;
  c_3.xyz = c_18.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 67994
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 67995
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 67996
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 67997
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 67998
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 67999
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 68000
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 68001
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68002
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68003
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68004
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68005
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68006
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68007
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68008
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68009
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68010
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 68011
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68012
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 68013
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 68014
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 68015
    //MUL
    t3.y = t0.y * t20;
    //Instruction 68016
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 68017
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 68018
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 68019
    //LOG
    t20 = log2(t8);
    //Instruction 68020
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 68021
    //EXP
    t20 = exp2(t20);
    //Instruction 68022
    //NE
    tb21 = t8!=0.0;
    //Instruction 68023
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 68024
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 68025
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68026
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 68027
    //MUL
    t8 = t0.x * t8;
    //Instruction 68028
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68029
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 68030
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68031
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 68032
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68033
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 68034
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68035
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68036
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 68037
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 68038
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68039
    //MOV
    t5.y = t3.y;
    //Instruction 68040
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68041
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68042
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68043
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 68044
    //SQRT
    t21 = sqrt(t21);
    //Instruction 68045
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 68046
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68047
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68048
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68049
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68050
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68051
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68052
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 68053
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 68054
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 68055
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 68056
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 68057
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 68058
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 68059
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 68060
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68061
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 68062
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 68063
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68064
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68065
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68066
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 68067
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 68068
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 68069
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 68070
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68071
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68072
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 68073
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68074
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68075
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68076
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 68077
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 68078
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 68079
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 68080
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 68081
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 68082
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 68083
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 68084
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 68085
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 68086
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 68087
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 68088
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 68089
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 68090
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 68091
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 68092
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 68093
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 68094
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 68095
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 68096
    //LT
    tb7 = t1.x<0.0;
    //Instruction 68097
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 68098
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 68099
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68100
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 68101
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68102
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 68103
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 68104
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68105
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 68106
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 68107
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68108
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68109
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68110
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68111
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 68112
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68113
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68114
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68115
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68116
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 68117
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 68118
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 68119
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68120
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68121
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68122
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 68123
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump float t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 67965
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 67966
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 67967
    //MOV
    t1.x = t16_0.x;
    //Instruction 67968
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 67969
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 67970
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 67971
    //LT
    tb1 = t16_1<0.0;
    //Instruction 67972
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67973
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 67974
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 67975
    //LT
    tb1 = t10_2<0.0;
    //Instruction 67976
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 67977
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 67978
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 67979
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 67980
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 67981
    //MAX
    t16_4 = max(t16_8.z, t16_8.y);
    //Instruction 67982
    //MAX
    t16_4 = max(t16_8.x, t16_4);
    //Instruction 67983
    //DIV
    t16_3.x = t16_3.x / t16_4;
    //Instruction 67984
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 67985
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 67986
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 67987
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 67988
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 67989
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 67990
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 67991
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 67992
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 67993
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp float atten_4;
  mediump vec4 lightCoord_5;
  lowp vec3 tmpvar_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD2;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_7 = tmpvar_9;
  tmpvar_6 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump float maxBase_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_11 = (diffuseColor_13.w * _Color.w);
  lowp float x_18;
  x_18 = (tmpvar_11 - _Cutoff);
  if ((x_18 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_12 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_12 = ((maxBase_12 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_12), 0.0, 1.0);
  tmpvar_10 = (diffuseColor_13.xyz * tmpvar_8.xyz);
  highp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = xlv_TEXCOORD1;
  highp vec4 tmpvar_21;
  tmpvar_21 = (_LightMatrix0 * tmpvar_20);
  lightCoord_5 = tmpvar_21;
  lowp vec4 tmpvar_22;
  mediump vec2 P_23;
  P_23 = ((lightCoord_5.xy / lightCoord_5.w) + 0.5);
  tmpvar_22 = texture2D (_LightTexture0, P_23);
  highp vec3 LightCoord_24;
  LightCoord_24 = lightCoord_5.xyz;
  highp float tmpvar_25;
  tmpvar_25 = dot (LightCoord_24, LightCoord_24);
  lowp vec4 tmpvar_26;
  tmpvar_26 = texture2D (_LightTextureB0, vec2(tmpvar_25));
  mediump float tmpvar_27;
  tmpvar_27 = ((float(
    (lightCoord_5.z > 0.0)
  ) * tmpvar_22.w) * tmpvar_26.w);
  atten_4 = tmpvar_27;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_4);
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (tmpvar_6, tmpvar_2));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_10 * tmpvar_1) * diff_30);
  c_29.w = tmpvar_11;
  c_28.w = c_29.w;
  c_28.xyz = c_29.xyz;
  c_3.xyz = c_28.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 66198
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66199
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66200
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 66201
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66202
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66203
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 66204
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 66205
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66206
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66207
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66208
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66209
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66210
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66211
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66212
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66213
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66214
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 66215
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66216
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 66217
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 66218
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 66219
    //MUL
    t3.y = t0.y * t20;
    //Instruction 66220
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 66221
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 66222
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 66223
    //LOG
    t20 = log2(t8);
    //Instruction 66224
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 66225
    //EXP
    t20 = exp2(t20);
    //Instruction 66226
    //NE
    tb21 = t8!=0.0;
    //Instruction 66227
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 66228
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 66229
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66230
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 66231
    //MUL
    t8 = t0.x * t8;
    //Instruction 66232
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66233
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 66234
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 66235
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 66236
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66237
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 66238
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66239
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 66240
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 66241
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 66242
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66243
    //MOV
    t5.y = t3.y;
    //Instruction 66244
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 66245
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 66246
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 66247
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 66248
    //SQRT
    t21 = sqrt(t21);
    //Instruction 66249
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 66250
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66251
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66252
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66253
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66254
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66255
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66256
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 66257
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 66258
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 66259
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 66260
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 66261
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 66262
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 66263
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66264
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66265
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 66266
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 66267
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66268
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66269
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66270
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66271
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 66272
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 66273
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 66274
    //FRC
    t1.x = fract(t1.x);
    //Instruction 66275
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 66276
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 66277
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 66278
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66279
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 66280
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 66281
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 66282
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 66283
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 66284
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 66285
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 66286
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 66287
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 66288
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 66289
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 66290
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 66291
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 66292
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 66293
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 66294
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 66295
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 66296
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 66297
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 66298
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 66299
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 66300
    //LT
    tb7 = t1.x<0.0;
    //Instruction 66301
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 66302
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 66303
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66304
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 66305
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66306
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 66307
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 66308
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66309
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 66310
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 66311
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66312
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66313
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66314
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66315
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 66316
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66317
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66318
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66319
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66320
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66321
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 66322
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 66323
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66324
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66325
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66326
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 66327
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
bool tb6;
mediump vec3 t16_8;
mediump float t16_11;
lowp float t10_11;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 66151
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 66152
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 66153
    //MOV
    t1.x = t16_0.x;
    //Instruction 66154
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 66155
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66156
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66157
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66158
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66159
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 66160
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66161
    //LT
    tb1 = t10_2<0.0;
    //Instruction 66162
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66163
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 66164
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 66165
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 66166
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 66167
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 66168
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 66169
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 66170
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 66171
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 66172
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 66173
    //MUL
    t16_0 = vs_TEXCOORD1.yyyy * _LightMatrix0[1];
    //Instruction 66174
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD1.xxxx + t16_0;
    //Instruction 66175
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD1.zzzz + t16_0;
    //Instruction 66176
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 66177
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 66178
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 66179
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 66180
    //LT
    tb6 = 0.0<t16_0.z;
    //Instruction 66181
    //DP3
    t16_11 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 66182
    //SAMPLE
    t10_11 = texture(_LightTextureB0, vec2(t16_11)).w;
    //Instruction 66183
    //MOVC
    t10_2 = (tb6) ? 1.0 : 0.0;
    //Instruction 66184
    //MUL
    t10_2 = t10_1 * t10_2;
    //Instruction 66185
    //MUL
    t10_2 = t10_11 * t10_2;
    //Instruction 66186
    //MUL
    t16_4.xyz = vec3(t10_2) * _LightColor0.xyz;
    //Instruction 66187
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66188
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66189
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 66190
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 66191
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 66192
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 66193
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 66194
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 66195
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66196
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66197
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD1));
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec3 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xyz;
  highp float tmpvar_20;
  tmpvar_20 = dot (tmpvar_19, tmpvar_19);
  lowp float tmpvar_21;
  tmpvar_21 = (texture2D (_LightTextureB0, vec2(tmpvar_20)).w * textureCube (_LightTexture0, tmpvar_19).w);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = c_23.xyz;
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 65847
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 65848
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 65849
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 65850
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 65851
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 65852
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 65853
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 65854
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 65855
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 65856
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 65857
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 65858
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 65859
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 65860
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 65861
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 65862
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 65863
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 65864
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 65865
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 65866
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 65867
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 65868
    //MUL
    t3.y = t0.y * t20;
    //Instruction 65869
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 65870
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 65871
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 65872
    //LOG
    t20 = log2(t8);
    //Instruction 65873
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 65874
    //EXP
    t20 = exp2(t20);
    //Instruction 65875
    //NE
    tb21 = t8!=0.0;
    //Instruction 65876
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 65877
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 65878
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 65879
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 65880
    //MUL
    t8 = t0.x * t8;
    //Instruction 65881
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 65882
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 65883
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 65884
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 65885
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 65886
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 65887
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 65888
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 65889
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 65890
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 65891
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 65892
    //MOV
    t5.y = t3.y;
    //Instruction 65893
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 65894
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 65895
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 65896
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 65897
    //SQRT
    t21 = sqrt(t21);
    //Instruction 65898
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 65899
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 65900
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 65901
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 65902
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 65903
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 65904
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 65905
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 65906
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 65907
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 65908
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 65909
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 65910
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 65911
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 65912
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 65913
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 65914
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 65915
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 65916
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 65917
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 65918
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 65919
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 65920
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 65921
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 65922
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 65923
    //FRC
    t1.x = fract(t1.x);
    //Instruction 65924
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 65925
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 65926
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 65927
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 65928
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 65929
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 65930
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 65931
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 65932
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 65933
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 65934
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 65935
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 65936
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 65937
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 65938
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 65939
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 65940
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 65941
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 65942
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 65943
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 65944
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 65945
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 65946
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 65947
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 65948
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 65949
    //LT
    tb7 = t1.x<0.0;
    //Instruction 65950
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 65951
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 65952
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 65953
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 65954
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 65955
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 65956
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 65957
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 65958
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 65959
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 65960
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 65961
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 65962
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65963
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 65964
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 65965
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 65966
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 65967
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 65968
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 65969
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 65970
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 65971
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 65972
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 65973
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 65974
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 65975
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 65976
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTextureB0;
uniform lowp samplerCube _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
lowp float t10_6;
mediump vec3 t16_8;
highp float t16;
mediump float t16_18;
void main()
{
    //Instruction 65805
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 65806
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65807
    //MOV
    t1.x = t16_0.x;
    //Instruction 65808
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65809
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65810
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 65811
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65812
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65813
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 65814
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65815
    //LT
    tb1 = t10_2<0.0;
    //Instruction 65816
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65817
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 65818
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 65819
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 65820
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 65821
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 65822
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 65823
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 65824
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 65825
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 65826
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 65827
    //MUL
    t16_4.xyz = vs_TEXCOORD1.yyy * _LightMatrix0[1].xyz;
    //Instruction 65828
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD1.xxx + t16_4.xyz;
    //Instruction 65829
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD1.zzz + t16_4.xyz;
    //Instruction 65830
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 65831
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 65832
    //SAMPLE
    t10_6 = texture(_LightTexture0, t16_4.xyz).w;
    //Instruction 65833
    //SAMPLE
    t10_1 = texture(_LightTextureB0, vec2(t16_1)).w;
    //Instruction 65834
    //MUL
    t16_1 = t10_6 * t10_1;
    //Instruction 65835
    //MUL
    t16_4.xyz = vec3(t16_1) * _LightColor0.xyz;
    //Instruction 65836
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 65837
    //ADD
    t1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 65838
    //DP3
    t16 = dot(t1.xyz, t1.xyz);
    //Instruction 65839
    //RSQ
    t16 = inversesqrt(t16);
    //Instruction 65840
    //MUL
    t1.xyz = vec3(t16) * t1.xyz;
    //Instruction 65841
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, t1.xyz);
    //Instruction 65842
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65843
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65844
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 65845
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 65846
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldNormal_2;
  mediump vec3 tmpvar_3;
  mediump vec4 tmpvar_4;
  highp vec4 tmpvar_5;
  tmpvar_5 = _glesVertex;
  mediump vec3 tmpvar_6;
  highp vec3 billboardPos_7;
  highp vec3 angle_8;
  highp float tmpvar_9;
  tmpvar_9 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_10;
  tmpvar_10 = _TreeInfo[int(tmpvar_9)];
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeSize[int(tmpvar_9)];
  highp vec3 tmpvar_12;
  tmpvar_12.x = _Object2World[3].x;
  tmpvar_12.y = _Object2World[3].y;
  tmpvar_12.z = _Object2World[3].z;
  highp vec3 tmpvar_13;
  tmpvar_13 = (_glesVertex.xyz + tmpvar_12);
  highp vec3 tmpvar_14;
  tmpvar_14 = normalize((_WorldSpaceCameraPos - tmpvar_13));
  highp vec3 tmpvar_15;
  tmpvar_15.y = 0.0;
  tmpvar_15.x = -(tmpvar_14.z);
  tmpvar_15.z = tmpvar_14.x;
  highp vec3 tmpvar_16;
  tmpvar_16 = normalize(tmpvar_15);
  highp vec3 tmpvar_17;
  tmpvar_17.y = 0.0;
  tmpvar_17.x = tmpvar_16.z;
  tmpvar_17.z = -(tmpvar_16.x);
  highp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = (min (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0) / max (abs(
    (tmpvar_17.z / tmpvar_16.z)
  ), 1.0));
  highp float tmpvar_20;
  tmpvar_20 = (tmpvar_19 * tmpvar_19);
  tmpvar_20 = (((
    ((((
      ((((-0.01213232 * tmpvar_20) + 0.05368138) * tmpvar_20) - 0.1173503)
     * tmpvar_20) + 0.1938925) * tmpvar_20) - 0.3326756)
   * tmpvar_20) + 0.9999793) * tmpvar_19);
  tmpvar_20 = (tmpvar_20 + (float(
    (abs((tmpvar_17.z / tmpvar_16.z)) > 1.0)
  ) * (
    (tmpvar_20 * -2.0)
   + 1.570796)));
  tmpvar_18 = (tmpvar_20 * sign((tmpvar_17.z / tmpvar_16.z)));
  if ((abs(tmpvar_16.z) > (1e-08 * abs(tmpvar_17.z)))) {
    if ((tmpvar_16.z < 0.0)) {
      if ((tmpvar_17.z >= 0.0)) {
        tmpvar_18 += 3.141593;
      } else {
        tmpvar_18 = (tmpvar_18 - 3.141593);
      };
    };
  } else {
    tmpvar_18 = (sign(tmpvar_17.z) * 1.570796);
  };
  angle_8 = vec3(tmpvar_18);
  bvec3 tmpvar_21;
  tmpvar_21 = lessThan (vec3(tmpvar_18), vec3(0.0, 0.0, 0.0));
  float tmpvar_22;
  if (tmpvar_21.x) {
    tmpvar_22 = 6.283185;
  } else {
    tmpvar_22 = 0.0;
  };
  float tmpvar_23;
  if (tmpvar_21.y) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_21.z) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  vec3 tmpvar_25;
  tmpvar_25.x = tmpvar_22;
  tmpvar_25.y = tmpvar_23;
  tmpvar_25.z = tmpvar_24;
  angle_8 = (vec3(tmpvar_18) + tmpvar_25);
  highp vec4 tmpvar_26;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_26 = _InstanceData;
  } else {
    tmpvar_26 = tmpvar_1;
  };
  highp vec3 tmpvar_27;
  tmpvar_27 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_11.x) * tmpvar_26.x) * tmpvar_16);
  billboardPos_7.xz = tmpvar_27.xz;
  billboardPos_7.y = (tmpvar_27.y + ((
    (_glesMultiTexCoord0.y * tmpvar_11.y)
   + tmpvar_11.z) * tmpvar_26.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_28;
    vPos_28 = billboardPos_7;
    highp float fMoveAmount_29;
    highp float fAdjust_30;
    highp float fLength_31;
    fLength_31 = sqrt(dot (billboardPos_7, billboardPos_7));
    highp float tmpvar_32;
    tmpvar_32 = (max ((billboardPos_7.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_30 = tmpvar_32;
    if ((tmpvar_32 != 0.0)) {
      fAdjust_30 = pow (tmpvar_32, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_33;
    tmpvar_33.zw = vec2(0.0, 0.0);
    tmpvar_33.x = (tmpvar_13.x + tmpvar_26.w);
    tmpvar_33.y = (tmpvar_13.y + (tmpvar_26.w * 0.8));
    highp vec4 tmpvar_34;
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    tmpvar_34 = (((
      (tmpvar_35 * tmpvar_35)
     * 
      (3.0 - (2.0 * tmpvar_35))
    ) - 0.5) * 2.0);
    fMoveAmount_29 = ((_ST_WindGlobal.y * (tmpvar_34.x + 
      (tmpvar_34.y * tmpvar_34.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_29 = (fMoveAmount_29 * fAdjust_30);
    vPos_28.xz = (tmpvar_27.xz + (_ST_WindVector.xz * fMoveAmount_29));
    vPos_28 = (normalize(vPos_28) * fLength_31);
    billboardPos_7 = vPos_28;
  };
  tmpvar_5.xyz = (_glesVertex.xyz + billboardPos_7);
  tmpvar_5.w = 1.0;
  angle_8 = (angle_8 + tmpvar_26.z);
  highp vec3 tmpvar_36;
  tmpvar_36 = (floor((
    (angle_8 * tmpvar_10.y)
   + 0.5)) / tmpvar_10.xxx);
  highp vec3 tmpvar_37;
  tmpvar_37 = (fract(abs(tmpvar_36)) * tmpvar_10.xxx);
  highp float tmpvar_38;
  if ((tmpvar_36.x >= 0.0)) {
    tmpvar_38 = tmpvar_37.x;
  } else {
    tmpvar_38 = -(tmpvar_37.x);
  };
  highp vec4 tmpvar_39;
  tmpvar_39 = _ImageTexCoords[int((tmpvar_10.z + tmpvar_38))];
  if ((tmpvar_39.w < 0.0)) {
    tmpvar_6.xy = (tmpvar_39.xy - (tmpvar_39.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_6.xy = (tmpvar_39.xy + (tmpvar_39.zw * _glesMultiTexCoord0.xy));
  };
  highp float tmpvar_40;
  tmpvar_40 = clamp ((fract(
    ((tmpvar_13.x + tmpvar_13.y) + tmpvar_13.z)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_6.z = tmpvar_40;
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_5);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_4 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_16.z) + (v_48.xyz * tmpvar_17.z)));
  worldNormal_2 = tmpvar_49;
  tmpvar_3 = worldNormal_2;
  gl_Position = (glstate_matrix_mvp * tmpvar_5);
  xlv_TEXCOORD0 = tmpvar_3;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_5).xyz;
  xlv_TEXCOORD2 = tmpvar_4;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  highp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = xlv_TEXCOORD1;
  highp vec2 tmpvar_19;
  tmpvar_19 = (_LightMatrix0 * tmpvar_18).xy;
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, tmpvar_19).w;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
highp vec4 t3;
highp vec4 t4;
highp vec3 t5;
highp vec3 t7;
highp int ti7;
bool tb7;
highp float t8;
highp vec2 t13;
bool tb13;
highp vec2 t14;
highp uint tu14;
highp float t19;
bool tb19;
highp float t20;
highp float t21;
bool tb21;
void main()
{
    //Instruction 68159
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68160
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68161
    //LT
    tb7 = 0.0<_InstanceData.x;
    //Instruction 68162
    //MOVC
    t0 = (bool(tb7)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68163
    //ADD
    t7.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68164
    //ADD
    t2.x = t0.w + t7.x;
    //Instruction 68165
    //MAD
    t2.y = t0.w * 0.800000 + t7.y;
    //Instruction 68166
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68167
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68168
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68169
    //MUL
    t14.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68170
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68171
    //MAD
    t2.xy = t14.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68172
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68173
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68174
    //DIV
    t8 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68175
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t8;
    //Instruction 68176
    //DIV
    t8 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68177
    //MUL
    t14.x = in_COLOR0.w * 255.000000;
    //Instruction 68178
    //FTOU
    tu14 = uint(t14.x);
    //Instruction 68179
    //MAD
    t20 = in_TEXCOORD0.y * _TreeSize[int(tu14) + 0].y + _TreeSize[int(tu14) + 0].z;
    //Instruction 68180
    //MUL
    t3.y = t0.y * t20;
    //Instruction 68181
    //MAD
    t8 = (-t8) * 0.250000 + t3.y;
    //Instruction 68182
    //MAX
    t8 = max(t8, 0.0);
    //Instruction 68183
    //MUL
    t8 = t8 * _ST_WindGlobal.z;
    //Instruction 68184
    //LOG
    t20 = log2(t8);
    //Instruction 68185
    //MUL
    t20 = t20 * _ST_WindGlobal.w;
    //Instruction 68186
    //EXP
    t20 = exp2(t20);
    //Instruction 68187
    //NE
    tb21 = t8!=0.0;
    //Instruction 68188
    //MOVC
    t8 = (tb21) ? t20 : t8;
    //Instruction 68189
    //MUL
    t2.x = t8 * t2.x;
    //Instruction 68190
    //ADD
    t8 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68191
    //MUL
    t8 = t8 * _TreeSize[int(tu14) + 0].x;
    //Instruction 68192
    //MUL
    t8 = t0.x * t8;
    //Instruction 68193
    //ADD
    t4.xyz = (-t7.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68194
    //DP3
    t20 = dot(t4.xyz, t4.xyz);
    //Instruction 68195
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68196
    //MUL
    t4.xy = vec2(t20) * t4.xz;
    //Instruction 68197
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68198
    //DP2
    t20 = dot(t4.xz, t4.xw);
    //Instruction 68199
    //MUL
    t4.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68200
    //RSQ
    t20 = inversesqrt(t20);
    //Instruction 68201
    //MUL
    t4.xy = vec2(t20) * t4.xy;
    //Instruction 68202
    //MUL
    t3.xz = vec2(t8) * t4.xy;
    //Instruction 68203
    //MAD
    t5.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68204
    //MOV
    t5.y = t3.y;
    //Instruction 68205
    //DP3
    t2.x = dot(t5.xyz, t5.xyz);
    //Instruction 68206
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 68207
    //MUL
    t2.xyw = t2.xxx * t5.xyz;
    //Instruction 68208
    //DP3
    t21 = dot(t3.xyz, t3.xyz);
    //Instruction 68209
    //SQRT
    t21 = sqrt(t21);
    //Instruction 68210
    //MUL
    t2.xyw = t2.xyw * vec3(t21);
    //Instruction 68211
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68212
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68213
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68214
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68215
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68216
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68217
    //MUL
    t3.x = t4.y * _World2Object[0].x;
    //Instruction 68218
    //MUL
    t3.y = t4.y * _World2Object[1].x;
    //Instruction 68219
    //MUL
    t3.z = t4.y * _World2Object[2].x;
    //Instruction 68220
    //MUL
    t5.x = (-t4.x) * _World2Object[0].z;
    //Instruction 68221
    //MUL
    t5.y = (-t4.x) * _World2Object[1].z;
    //Instruction 68222
    //MUL
    t5.z = (-t4.x) * _World2Object[2].z;
    //Instruction 68223
    //ADD
    t3.xyz = t3.xyz + t5.xyz;
    //Instruction 68224
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 68225
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68226
    //MUL
    t3.xyz = t1.xxx * t3.xyz;
    //Instruction 68227
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 68228
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68229
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68230
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68231
    //ADD
    vs_TEXCOORD1.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 68232
    //MOV
    vs_TEXCOORD2 = _Color;
    //Instruction 68233
    //ADD
    t1.x = t7.y + t7.x;
    //Instruction 68234
    //ADD
    t1.x = t7.z + t1.x;
    //Instruction 68235
    //FRC
    t1.x = fract(t1.x);
    //Instruction 68236
    //MUL
    t1.x = t1.x * _HueVariation.w;
    t1.x = clamp(t1.x, 0.0, 1.0);
    //Instruction 68237
    //MOV
    vs_TEXCOORD3.z = t1.x;
    //Instruction 68238
    //MAX
    t1.x = max(abs(t4.y), abs(t4.x));
    //Instruction 68239
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68240
    //MIN
    t7.x = min(abs(t4.y), abs(t4.x));
    //Instruction 68241
    //MUL
    t1.x = t1.x * t7.x;
    //Instruction 68242
    //MUL
    t7.x = t1.x * t1.x;
    //Instruction 68243
    //MAD
    t13.x = t7.x * 0.020835 + -0.085133;
    //Instruction 68244
    //MAD
    t13.x = t7.x * t13.x + 0.180141;
    //Instruction 68245
    //MAD
    t13.x = t7.x * t13.x + -0.330299;
    //Instruction 68246
    //MAD
    t7.x = t7.x * t13.x + 0.999866;
    //Instruction 68247
    //MUL
    t13.x = t7.x * t1.x;
    //Instruction 68248
    //MAD
    t13.x = t13.x * -2.000000 + 1.570796;
    //Instruction 68249
    //LT
    tb19 = abs(t4.y)<abs(t4.x);
    //Instruction 68250
    //AND
    t13.x = tb19 ? t13.x : float(0.0);
    //Instruction 68251
    //MAD
    t1.x = t1.x * t7.x + t13.x;
    //Instruction 68252
    //LT
    tb7 = t4.y<(-t4.y);
    //Instruction 68253
    //AND
    t7.x = tb7 ? -3.141593 : float(0.0);
    //Instruction 68254
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 68255
    //MIN
    t7.x = min(t4.y, (-t4.x));
    //Instruction 68256
    //MAX
    t13.x = max(t4.y, (-t4.x));
    //Instruction 68257
    //GE
    tb13 = t13.x>=(-t13.x);
    //Instruction 68258
    //LT
    tb7 = t7.x<(-t7.x);
    //Instruction 68259
    //AND
    ti7 = int(uint(tb13) & uint(tb7));
    //Instruction 68260
    //MOVC
    t1.x = (ti7 != 0) ? (-t1.x) : t1.x;
    //Instruction 68261
    //LT
    tb7 = t1.x<0.0;
    //Instruction 68262
    //AND
    t7.x = tb7 ? 6.283185 : float(0.0);
    //Instruction 68263
    //ADD
    t1.x = t7.x + t1.x;
    //Instruction 68264
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68265
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].y + 0.500000;
    //Instruction 68266
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68267
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu14) + 0].x;
    //Instruction 68268
    //GE
    tb7 = t1.x>=(-t1.x);
    //Instruction 68269
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68270
    //MOVC
    t1.x = (tb7) ? t1.x : (-t1.x);
    //Instruction 68271
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu14) + 0].x + _TreeInfo[int(tu14) + 0].z;
    //Instruction 68272
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68273
    //LT
    tb7 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68274
    //MAD
    t13.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68275
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68276
    //MOVC
    vs_TEXCOORD3.xy = (bool(tb7)) ? t13.xy : t3.xy;
    //Instruction 68277
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68278
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68279
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68280
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68281
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 68282
    //MUL
    t19 = t1.y * _ProjectionParams.x;
    //Instruction 68283
    //MUL
    t2.w = t19 * 0.500000;
    //Instruction 68284
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68285
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68286
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68287
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 68288
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _LightTexture0;
in mediump vec3 vs_TEXCOORD0;
in highp vec3 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump vec3 t16_8;
mediump float t16_18;
void main()
{
    //Instruction 68124
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 68125
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 68126
    //MOV
    t1.x = t16_0.x;
    //Instruction 68127
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 68128
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68129
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 68130
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68131
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68132
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 68133
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68134
    //LT
    tb1 = t10_2<0.0;
    //Instruction 68135
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68136
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 68137
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 68138
    //ADD
    t16_8.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 68139
    //MAD
    t16_8.xyz = vs_TEXCOORD3.zzz * t16_8.xyz + t10_0.xyz;
    //Instruction 68140
    //MAX
    t16_4.x = max(t16_8.z, t16_8.y);
    //Instruction 68141
    //MAX
    t16_4.x = max(t16_8.x, t16_4.x);
    //Instruction 68142
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 68143
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 68144
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_8.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 68145
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 68146
    //MUL
    t16_4.xy = vs_TEXCOORD1.yy * _LightMatrix0[1].xy;
    //Instruction 68147
    //MAD
    t16_4.xy = _LightMatrix0[0].xy * vs_TEXCOORD1.xx + t16_4.xy;
    //Instruction 68148
    //MAD
    t16_4.xy = _LightMatrix0[2].xy * vs_TEXCOORD1.zz + t16_4.xy;
    //Instruction 68149
    //ADD
    t16_4.xy = t16_4.xy + _LightMatrix0[3].xy;
    //Instruction 68150
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 68151
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 68152
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 68153
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 68154
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 68155
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 68156
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68157
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68158
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_3 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_53;
  tmpvar_53 = -(tmpvar_52);
  worldBinormal_2 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54.x = worldTangent_3.x;
  tmpvar_54.y = worldBinormal_2.x;
  tmpvar_54.z = worldNormal_4.x;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.y;
  tmpvar_55.y = worldBinormal_2.y;
  tmpvar_55.z = worldNormal_4.y;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.z;
  tmpvar_56.y = worldBinormal_2.z;
  tmpvar_56.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = texture2D (_LightTexture0, vec2(tmpvar_19)).w;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66364
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66365
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66366
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66367
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66368
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66369
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66370
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66371
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66372
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66373
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66374
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66375
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66376
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66377
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66378
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66379
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66380
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66381
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66382
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66383
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 66384
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66385
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66386
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66387
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66388
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66389
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66390
    //LOG
    t23 = log2(t9);
    //Instruction 66391
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66392
    //EXP
    t23 = exp2(t23);
    //Instruction 66393
    //NE
    tb24 = t9!=0.0;
    //Instruction 66394
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66395
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66396
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66397
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66398
    //MUL
    t9 = t0.x * t9;
    //Instruction 66399
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66400
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66401
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66402
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66403
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66404
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66405
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66406
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66407
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66408
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66409
    //MOV
    t4.y = t3.y;
    //Instruction 66410
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66411
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66412
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66413
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66414
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66415
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66416
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66417
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66418
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66419
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66420
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66421
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66422
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66423
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66424
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66425
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66426
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66427
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66428
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66429
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66430
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66431
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66432
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66433
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66434
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 66435
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66436
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 66437
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66438
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66439
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66440
    //MOV
    t6.z = t3.x;
    //Instruction 66441
    //MOV
    t6.x = t4.z;
    //Instruction 66442
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66443
    //MOV
    t6.z = t3.y;
    //Instruction 66444
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66445
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66446
    //MOV
    t6.x = t4.x;
    //Instruction 66447
    //MOV
    t3.x = t4.y;
    //Instruction 66448
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66449
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66450
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66451
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66452
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66453
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66454
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66455
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 66456
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66457
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66458
    //MUL
    t1.x = t1.x * t22;
    //Instruction 66459
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 66460
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 66461
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 66462
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 66463
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 66464
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 66465
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 66466
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 66467
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 66468
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 66469
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66470
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66471
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 66472
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66473
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66474
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66475
    //LT
    tb15 = t22<(-t22);
    //Instruction 66476
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66477
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 66478
    //LT
    tb8 = t1.x<0.0;
    //Instruction 66479
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66480
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 66481
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66482
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66483
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66484
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66485
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 66486
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66487
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 66488
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66489
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66490
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66491
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66492
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66493
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 66494
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66495
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66496
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66497
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66498
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66499
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66500
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 66501
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 66502
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66503
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66504
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66505
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66506
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 66328
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 66329
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 66330
    //MOV
    t1.x = t16_0.x;
    //Instruction 66331
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 66332
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 66333
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 66334
    //LT
    tb1 = t16_1<0.0;
    //Instruction 66335
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66336
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 66337
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 66338
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 66339
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 66340
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 66341
    //MUL
    t16_4.xyz = vs_TEXCOORD3.yyy * _LightMatrix0[1].xyz;
    //Instruction 66342
    //MAD
    t16_4.xyz = _LightMatrix0[0].xyz * vs_TEXCOORD3.xxx + t16_4.xyz;
    //Instruction 66343
    //MAD
    t16_4.xyz = _LightMatrix0[2].xyz * vs_TEXCOORD3.zzz + t16_4.xyz;
    //Instruction 66344
    //ADD
    t16_4.xyz = t16_4.xyz + _LightMatrix0[3].xyz;
    //Instruction 66345
    //DP3
    t16_1 = dot(t16_4.xyz, t16_4.xyz);
    //Instruction 66346
    //SAMPLE
    t10_1 = texture(_LightTexture0, vec2(t16_1)).w;
    //Instruction 66347
    //MUL
    t16_4.xyz = vec3(t10_1) * _LightColor0.xyz;
    //Instruction 66348
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 66349
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 66350
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 66351
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66352
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 66353
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 66354
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 66355
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 66356
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 66357
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 66358
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 66359
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 66360
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 66361
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66362
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66363
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_3 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_53;
  tmpvar_53 = -(tmpvar_52);
  worldBinormal_2 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54.x = worldTangent_3.x;
  tmpvar_54.y = worldBinormal_2.x;
  tmpvar_54.z = worldNormal_4.x;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.y;
  tmpvar_55.y = worldBinormal_2.y;
  tmpvar_55.z = worldNormal_4.y;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.z;
  tmpvar_56.y = worldBinormal_2.z;
  tmpvar_56.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform mediump vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  lowp vec4 c_17;
  lowp vec4 c_18;
  lowp float diff_19;
  mediump float tmpvar_20;
  tmpvar_20 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_19 = tmpvar_20;
  c_18.xyz = ((tmpvar_8 * tmpvar_1) * diff_19);
  c_18.w = tmpvar_9;
  c_17.w = c_18.w;
  c_17.xyz = c_18.xyz;
  c_4.xyz = c_17.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66002
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66003
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66004
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66005
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66006
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66007
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66008
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66009
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66010
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66011
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66012
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66013
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66014
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66015
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66016
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66017
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66018
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66019
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66020
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66021
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 66022
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 66023
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 66024
    //MUL
    t3.y = t0.y * t23;
    //Instruction 66025
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 66026
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 66027
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 66028
    //LOG
    t23 = log2(t9);
    //Instruction 66029
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 66030
    //EXP
    t23 = exp2(t23);
    //Instruction 66031
    //NE
    tb24 = t9!=0.0;
    //Instruction 66032
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 66033
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 66034
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 66035
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 66036
    //MUL
    t9 = t0.x * t9;
    //Instruction 66037
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 66038
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 66039
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 66040
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 66041
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 66042
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 66043
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 66044
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 66045
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 66046
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 66047
    //MOV
    t4.y = t3.y;
    //Instruction 66048
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 66049
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 66050
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 66051
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 66052
    //SQRT
    t22 = sqrt(t22);
    //Instruction 66053
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 66054
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 66055
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 66056
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 66057
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 66058
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 66059
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 66060
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 66061
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 66062
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 66063
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 66064
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 66065
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 66066
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 66067
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 66068
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66069
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 66070
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 66071
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 66072
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 66073
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 66074
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 66075
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 66076
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 66077
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 66078
    //MOV
    t6.z = t3.x;
    //Instruction 66079
    //MOV
    t6.x = t4.z;
    //Instruction 66080
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 66081
    //MOV
    t6.z = t3.y;
    //Instruction 66082
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 66083
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 66084
    //MOV
    t6.x = t4.x;
    //Instruction 66085
    //MOV
    t3.x = t4.y;
    //Instruction 66086
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 66087
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 66088
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 66089
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 66090
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 66091
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 66092
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 66093
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 66094
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 66095
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 66096
    //MUL
    t1.x = t1.x * t22;
    //Instruction 66097
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 66098
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 66099
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 66100
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 66101
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 66102
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 66103
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 66104
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 66105
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 66106
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 66107
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 66108
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 66109
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 66110
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 66111
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 66112
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 66113
    //LT
    tb15 = t22<(-t22);
    //Instruction 66114
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 66115
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 66116
    //LT
    tb8 = t1.x<0.0;
    //Instruction 66117
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 66118
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 66119
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 66120
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 66121
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 66122
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 66123
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 66124
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 66125
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 66126
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 66127
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 66128
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 66129
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66130
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 66131
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 66132
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 66133
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 66134
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 66135
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 66136
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 66137
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 66138
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 66139
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 66140
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 66141
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 66142
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 66143
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 66144
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec2 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 65977
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 65978
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 65979
    //MOV
    t1.x = t16_0.x;
    //Instruction 65980
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 65981
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 65982
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 65983
    //LT
    tb1 = t16_1<0.0;
    //Instruction 65984
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65985
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 65986
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 65987
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 65988
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 65989
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 65990
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 65991
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 65992
    //MAD
    t10_2.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 65993
    //DP3
    t10_4.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 65994
    //DP3
    t10_4.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 65995
    //DP3
    t10_4.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 65996
    //DP3
    t16_18 = dot(t10_4.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 65997
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 65998
    //MUL
    t16_3.xyz = vec3(t16_18) * t16_3.xyz;
    //Instruction 65999
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 66000
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 66001
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_3 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_53;
  tmpvar_53 = -(tmpvar_52);
  worldBinormal_2 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54.x = worldTangent_3.x;
  tmpvar_54.y = worldBinormal_2.x;
  tmpvar_54.z = worldNormal_4.x;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.y;
  tmpvar_55.y = worldBinormal_2.y;
  tmpvar_55.z = worldNormal_4.y;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.z;
  tmpvar_56.y = worldBinormal_2.z;
  tmpvar_56.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp float atten_5;
  mediump vec4 lightCoord_6;
  lowp vec3 lightDir_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = xlv_TEXCOORD4;
  highp vec3 tmpvar_9;
  tmpvar_9 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_7 = tmpvar_9;
  lowp vec3 tmpvar_10;
  lowp float tmpvar_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_11 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_11 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  tmpvar_10 = (diffuseColor_12.xyz * tmpvar_8.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = xlv_TEXCOORD3;
  highp vec4 tmpvar_20;
  tmpvar_20 = (_LightMatrix0 * tmpvar_19);
  lightCoord_6 = tmpvar_20;
  lowp vec4 tmpvar_21;
  mediump vec2 P_22;
  P_22 = ((lightCoord_6.xy / lightCoord_6.w) + 0.5);
  tmpvar_21 = texture2D (_LightTexture0, P_22);
  highp vec3 LightCoord_23;
  LightCoord_23 = lightCoord_6.xyz;
  highp float tmpvar_24;
  tmpvar_24 = dot (LightCoord_23, LightCoord_23);
  lowp vec4 tmpvar_25;
  tmpvar_25 = texture2D (_LightTextureB0, vec2(tmpvar_24));
  mediump float tmpvar_26;
  tmpvar_26 = ((float(
    (lightCoord_6.z > 0.0)
  ) * tmpvar_21.w) * tmpvar_25.w);
  atten_5 = tmpvar_26;
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_18);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_18);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_18);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_7;
  tmpvar_1 = (tmpvar_1 * atten_5);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_10 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_11;
  c_27.w = c_28.w;
  c_27.xyz = c_28.xyz;
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "SPOT" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 68332
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 68333
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 68334
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 68335
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 68336
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 68337
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 68338
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 68339
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 68340
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 68341
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 68342
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 68343
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 68344
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 68345
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 68346
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 68347
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 68348
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 68349
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 68350
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 68351
    //MUL
    t16.x = in_COLOR0.w * 255.000000;
    //Instruction 68352
    //FTOU
    tu16 = uint(t16.x);
    //Instruction 68353
    //MAD
    t23 = in_TEXCOORD0.y * _TreeSize[int(tu16) + 0].y + _TreeSize[int(tu16) + 0].z;
    //Instruction 68354
    //MUL
    t3.y = t0.y * t23;
    //Instruction 68355
    //MAD
    t9 = (-t9) * 0.250000 + t3.y;
    //Instruction 68356
    //MAX
    t9 = max(t9, 0.0);
    //Instruction 68357
    //MUL
    t9 = t9 * _ST_WindGlobal.z;
    //Instruction 68358
    //LOG
    t23 = log2(t9);
    //Instruction 68359
    //MUL
    t23 = t23 * _ST_WindGlobal.w;
    //Instruction 68360
    //EXP
    t23 = exp2(t23);
    //Instruction 68361
    //NE
    tb24 = t9!=0.0;
    //Instruction 68362
    //MOVC
    t9 = (tb24) ? t23 : t9;
    //Instruction 68363
    //MUL
    t2.x = t9 * t2.x;
    //Instruction 68364
    //ADD
    t9 = in_TEXCOORD0.x + -0.500000;
    //Instruction 68365
    //MUL
    t9 = t9 * _TreeSize[int(tu16) + 0].x;
    //Instruction 68366
    //MUL
    t9 = t0.x * t9;
    //Instruction 68367
    //DP3
    t15.x = dot(t8.xyz, t8.xyz);
    //Instruction 68368
    //RSQ
    t15.x = inversesqrt(t15.x);
    //Instruction 68369
    //MUL
    t4.xy = t15.xx * t8.xz;
    //Instruction 68370
    //MOV
    t4.zw = (-t4.yy);
    //Instruction 68371
    //DP2
    t8.x = dot(t4.xz, t4.xw);
    //Instruction 68372
    //MUL
    t15.xy = t4.yx * vec2(-1.0, 1.0);
    //Instruction 68373
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 68374
    //MUL
    t8.xy = t8.xx * t15.xy;
    //Instruction 68375
    //MUL
    t3.xz = t8.xy * vec2(t9);
    //Instruction 68376
    //MAD
    t4.xz = _ST_WindVector.xz * t2.xx + t3.xz;
    //Instruction 68377
    //MOV
    t4.y = t3.y;
    //Instruction 68378
    //DP3
    t22 = dot(t4.xyz, t4.xyz);
    //Instruction 68379
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68380
    //MUL
    t2.xyw = vec3(t22) * t4.xyz;
    //Instruction 68381
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 68382
    //SQRT
    t22 = sqrt(t22);
    //Instruction 68383
    //MUL
    t2.xyw = vec3(t22) * t2.xyw;
    //Instruction 68384
    //MOVC
    t2.xyw = (bool(tb1)) ? t2.xyw : t3.xyz;
    //Instruction 68385
    //ADD
    t2.xyw = t2.xyw + in_POSITION0.xyz;
    //Instruction 68386
    //MUL
    t3 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 68387
    //MAD
    t3 = glstate_matrix_mvp[0] * t2.xxxx + t3;
    //Instruction 68388
    //MAD
    t3 = glstate_matrix_mvp[2] * t2.wwww + t3;
    //Instruction 68389
    //ADD
    gl_Position = t3 + glstate_matrix_mvp[3];
    //Instruction 68390
    //MUL
    t3.y = t8.y * _World2Object[0].x;
    //Instruction 68391
    //MUL
    t3.z = t8.y * _World2Object[1].x;
    //Instruction 68392
    //MUL
    t3.x = t8.y * _World2Object[2].x;
    //Instruction 68393
    //MUL
    t4.y = (-t8.x) * _World2Object[0].z;
    //Instruction 68394
    //MUL
    t4.z = (-t8.x) * _World2Object[1].z;
    //Instruction 68395
    //MUL
    t4.x = (-t8.x) * _World2Object[2].z;
    //Instruction 68396
    //ADD
    t3.xyz = t3.xyz + t4.xyz;
    //Instruction 68397
    //DP3
    t1.x = dot(t3.xyz, t3.xyz);
    //Instruction 68398
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68399
    //MUL
    t3.xyz = t1.xxx * t3.yzx;
    //Instruction 68400
    //MUL
    t4.xyz = t8.yyy * _Object2World[2].yzx;
    //Instruction 68401
    //MAD
    t4.xyz = _Object2World[0].yzx * t8.xxx + t4.xyz;
    //Instruction 68402
    //DP3
    t1.x = dot(t4.xyz, t4.xyz);
    //Instruction 68403
    //RSQ
    t1.x = inversesqrt(t1.x);
    //Instruction 68404
    //MUL
    t4.xyz = t1.xxx * t4.xyz;
    //Instruction 68405
    //MUL
    t10_5.xyz = t3.zxy * t4.xyz;
    //Instruction 68406
    //MAD
    t10_5.xyz = t3.yzx * t4.yzx + (-t10_5.xyz);
    //Instruction 68407
    //MOV
    t6.y = (-t10_5.x);
    //Instruction 68408
    //MOV
    t6.z = t3.x;
    //Instruction 68409
    //MOV
    t6.x = t4.z;
    //Instruction 68410
    //MOV
    vs_TEXCOORD0.xyz = t6.xyz;
    //Instruction 68411
    //MOV
    t6.z = t3.y;
    //Instruction 68412
    //MOV
    t6.y = (-t10_5.y);
    //Instruction 68413
    //MOV
    t3.y = (-t10_5.z);
    //Instruction 68414
    //MOV
    t6.x = t4.x;
    //Instruction 68415
    //MOV
    t3.x = t4.y;
    //Instruction 68416
    //MOV
    vs_TEXCOORD2.xyz = t3.xyz;
    //Instruction 68417
    //MOV
    vs_TEXCOORD1.xyz = t6.xyz;
    //Instruction 68418
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 68419
    //MAD
    t3.xyz = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 68420
    //MAD
    t3.xyz = _Object2World[2].xyz * t2.www + t3.xyz;
    //Instruction 68421
    //ADD
    vs_TEXCOORD3.xyz = t3.xyz + _Object2World[3].xyz;
    //Instruction 68422
    //MOV
    vs_TEXCOORD4 = _Color;
    //Instruction 68423
    //MAX
    t1.x = max(abs(t8.y), abs(t8.x));
    //Instruction 68424
    //DIV
    t1.x = float(1.0) / t1.x;
    //Instruction 68425
    //MIN
    t22 = min(abs(t8.y), abs(t8.x));
    //Instruction 68426
    //MUL
    t1.x = t1.x * t22;
    //Instruction 68427
    //MUL
    t22 = t1.x * t1.x;
    //Instruction 68428
    //MAD
    t3.x = t22 * 0.020835 + -0.085133;
    //Instruction 68429
    //MAD
    t3.x = t22 * t3.x + 0.180141;
    //Instruction 68430
    //MAD
    t3.x = t22 * t3.x + -0.330299;
    //Instruction 68431
    //MAD
    t22 = t22 * t3.x + 0.999866;
    //Instruction 68432
    //MUL
    t3.x = t22 * t1.x;
    //Instruction 68433
    //MAD
    t3.x = t3.x * -2.000000 + 1.570796;
    //Instruction 68434
    //LT
    tb10 = abs(t8.y)<abs(t8.x);
    //Instruction 68435
    //AND
    t3.x = tb10 ? t3.x : float(0.0);
    //Instruction 68436
    //MAD
    t1.x = t1.x * t22 + t3.x;
    //Instruction 68437
    //LT
    tb22 = t8.y<(-t8.y);
    //Instruction 68438
    //AND
    t22 = tb22 ? -3.141593 : float(0.0);
    //Instruction 68439
    //ADD
    t1.x = t22 + t1.x;
    //Instruction 68440
    //MIN
    t22 = min(t8.y, (-t8.x));
    //Instruction 68441
    //MAX
    t8.x = max(t8.y, (-t8.x));
    //Instruction 68442
    //GE
    tb8 = t8.x>=(-t8.x);
    //Instruction 68443
    //LT
    tb15 = t22<(-t22);
    //Instruction 68444
    //AND
    ti8 = int(uint(tb8) & uint(tb15));
    //Instruction 68445
    //MOVC
    t1.x = (ti8 != 0) ? (-t1.x) : t1.x;
    //Instruction 68446
    //LT
    tb8 = t1.x<0.0;
    //Instruction 68447
    //AND
    t8.x = tb8 ? 6.283185 : float(0.0);
    //Instruction 68448
    //ADD
    t1.x = t8.x + t1.x;
    //Instruction 68449
    //ADD
    t1.x = t0.z + t1.x;
    //Instruction 68450
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].y + 0.500000;
    //Instruction 68451
    //ROUND_NI
    t1.x = floor(t1.x);
    //Instruction 68452
    //DIV
    t1.x = t1.x / _TreeInfo[int(tu16) + 0].x;
    //Instruction 68453
    //GE
    tb8 = t1.x>=(-t1.x);
    //Instruction 68454
    //FRC
    t1.x = fract(abs(t1.x));
    //Instruction 68455
    //MOVC
    t1.x = (tb8) ? t1.x : (-t1.x);
    //Instruction 68456
    //MAD
    t1.x = t1.x * _TreeInfo[int(tu16) + 0].x + _TreeInfo[int(tu16) + 0].z;
    //Instruction 68457
    //FTOU
    tu1 = uint(t1.x);
    //Instruction 68458
    //LT
    tb8 = _ImageTexCoords[int(tu1) + 0].w<0.0;
    //Instruction 68459
    //MAD
    t15.xy = (-_ImageTexCoords[int(tu1) + 0].zw) * in_TEXCOORD0.yx + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68460
    //MAD
    t3.xy = _ImageTexCoords[int(tu1) + 0].zw * in_TEXCOORD0.xy + _ImageTexCoords[int(tu1) + 0].xy;
    //Instruction 68461
    //MOVC
    vs_TEXCOORD5.xy = (bool(tb8)) ? t15.xy : t3.xy;
    //Instruction 68462
    //MOV
    vs_TEXCOORD5.z = 0.0;
    //Instruction 68463
    //MUL
    t1.xyz = t2.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 68464
    //MAD
    t1.xyz = glstate_matrix_mvp[0].xyw * t2.xxx + t1.xyz;
    //Instruction 68465
    //MAD
    t1.xyz = glstate_matrix_mvp[2].xyw * t2.www + t1.xyz;
    //Instruction 68466
    //ADD
    t1.xyz = t1.xyz + glstate_matrix_mvp[3].xyw;
    //Instruction 68467
    //MUL
    t2.xz = t1.xz * vec2(0.500000, 0.500000);
    //Instruction 68468
    //MUL
    t22 = t1.y * _ProjectionParams.x;
    //Instruction 68469
    //MUL
    t2.w = t22 * 0.500000;
    //Instruction 68470
    //ADD
    t2.xy = t2.zz + t2.xw;
    //Instruction 68471
    //MUL
    t2.xy = t2.xy * _ScreenParams.xy;
    //Instruction 68472
    //MUL
    t1.xy = t2.xy * vec2(0.250000, 0.250000);
    //Instruction 68473
    //MOV
    vs_TEXCOORD6.xyz = t1.xyz;
    //Instruction 68474
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _LightTexture0;
uniform lowp sampler2D _LightTextureB0;
in lowp vec3 vs_TEXCOORD0;
in lowp vec3 vs_TEXCOORD1;
in lowp vec3 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in mediump vec4 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec3 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
lowp vec3 t10_5;
lowp vec3 t10_6;
mediump float t16_7;
bool tb8;
mediump float t16_15;
lowp float t10_15;
highp float t22;
mediump float t16_24;
void main()
{
    //Instruction 68289
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 68290
    //FRC
    t16_7 = fract(t16_0.y);
    //Instruction 68291
    //MOV
    t1.x = t16_0.x;
    //Instruction 68292
    //MAD
    t1.y = t16_7 * 0.062500 + unity_LODFade.y;
    //Instruction 68293
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 68294
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 68295
    //LT
    tb1 = t16_1<0.0;
    //Instruction 68296
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68297
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD5.xy);
    //Instruction 68298
    //MAD
    t10_2.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 68299
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD4.xyz;
    //Instruction 68300
    //LT
    tb1 = t10_2.x<0.0;
    //Instruction 68301
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 68302
    //MUL
    t16_0 = vs_TEXCOORD3.yyyy * _LightMatrix0[1];
    //Instruction 68303
    //MAD
    t16_0 = _LightMatrix0[0] * vs_TEXCOORD3.xxxx + t16_0;
    //Instruction 68304
    //MAD
    t16_0 = _LightMatrix0[2] * vs_TEXCOORD3.zzzz + t16_0;
    //Instruction 68305
    //ADD
    t16_0 = t16_0 + _LightMatrix0[3];
    //Instruction 68306
    //DIV
    t16_4.xy = t16_0.xy / t16_0.ww;
    //Instruction 68307
    //ADD
    t16_4.xy = t16_4.xy + vec2(0.500000, 0.500000);
    //Instruction 68308
    //SAMPLE
    t10_1 = texture(_LightTexture0, t16_4.xy).w;
    //Instruction 68309
    //LT
    tb8 = 0.0<t16_0.z;
    //Instruction 68310
    //DP3
    t16_15 = dot(t16_0.xyz, t16_0.xyz);
    //Instruction 68311
    //SAMPLE
    t10_15 = texture(_LightTextureB0, vec2(t16_15)).w;
    //Instruction 68312
    //MOVC
    t10_2.x = (tb8) ? 1.0 : 0.0;
    //Instruction 68313
    //MUL
    t10_2.x = t10_1 * t10_2.x;
    //Instruction 68314
    //MUL
    t10_2.x = t10_15 * t10_2.x;
    //Instruction 68315
    //MUL
    t16_4.xyz = t10_2.xxx * _LightColor0.xyz;
    //Instruction 68316
    //MUL
    t16_3.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 68317
    //ADD
    t1.xyz = (-vs_TEXCOORD3.xyz) + _WorldSpaceLightPos0.xyz;
    //Instruction 68318
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 68319
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 68320
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 68321
    //SAMPLE
    t10_5.xyz = texture(_BumpMap, vs_TEXCOORD5.xy).xyz;
    //Instruction 68322
    //MAD
    t10_2.xyz = t10_5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 68323
    //DP3
    t10_6.x = dot(vs_TEXCOORD0.xyz, t10_2.xyz);
    //Instruction 68324
    //DP3
    t10_6.y = dot(vs_TEXCOORD1.xyz, t10_2.xyz);
    //Instruction 68325
    //DP3
    t10_6.z = dot(vs_TEXCOORD2.xyz, t10_2.xyz);
    //Instruction 68326
    //DP3
    t16_24 = dot(t10_6.xyz, t1.xyz);
    //Instruction 68327
    //MAX
    t16_24 = max(t16_24, 0.0);
    //Instruction 68328
    //MUL
    t16_3.xyz = vec3(t16_24) * t16_3.xyz;
    //Instruction 68329
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 68330
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 68331
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
uniform highp vec3 _WorldSpaceCameraPos;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranchAdherences;
uniform lowp vec4 _Color;
uniform highp vec4 _TreeInfo[4];
uniform highp vec4 _TreeSize[4];
uniform highp vec4 _ImageTexCoords[32];
uniform highp vec4 _InstanceData;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesMultiTexCoord1;
  lowp vec3 worldBinormal_2;
  lowp vec3 worldTangent_3;
  lowp vec3 worldNormal_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  tmpvar_6 = _glesVertex;
  mediump vec3 tmpvar_7;
  highp vec3 billboardPos_8;
  highp vec3 angle_9;
  highp float tmpvar_10;
  tmpvar_10 = (_glesColor.w * 255.0);
  highp vec4 tmpvar_11;
  tmpvar_11 = _TreeInfo[int(tmpvar_10)];
  highp vec4 tmpvar_12;
  tmpvar_12 = _TreeSize[int(tmpvar_10)];
  highp vec3 tmpvar_13;
  tmpvar_13.x = _Object2World[3].x;
  tmpvar_13.y = _Object2World[3].y;
  tmpvar_13.z = _Object2World[3].z;
  highp vec3 tmpvar_14;
  tmpvar_14 = (_glesVertex.xyz + tmpvar_13);
  highp vec3 tmpvar_15;
  tmpvar_15 = normalize((_WorldSpaceCameraPos - tmpvar_14));
  highp vec3 tmpvar_16;
  tmpvar_16.y = 0.0;
  tmpvar_16.x = -(tmpvar_15.z);
  tmpvar_16.z = tmpvar_15.x;
  highp vec3 tmpvar_17;
  tmpvar_17 = normalize(tmpvar_16);
  highp vec3 tmpvar_18;
  tmpvar_18.y = 0.0;
  tmpvar_18.x = tmpvar_17.z;
  tmpvar_18.z = -(tmpvar_17.x);
  highp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = (min (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0) / max (abs(
    (tmpvar_18.z / tmpvar_17.z)
  ), 1.0));
  highp float tmpvar_21;
  tmpvar_21 = (tmpvar_20 * tmpvar_20);
  tmpvar_21 = (((
    ((((
      ((((-0.01213232 * tmpvar_21) + 0.05368138) * tmpvar_21) - 0.1173503)
     * tmpvar_21) + 0.1938925) * tmpvar_21) - 0.3326756)
   * tmpvar_21) + 0.9999793) * tmpvar_20);
  tmpvar_21 = (tmpvar_21 + (float(
    (abs((tmpvar_18.z / tmpvar_17.z)) > 1.0)
  ) * (
    (tmpvar_21 * -2.0)
   + 1.570796)));
  tmpvar_19 = (tmpvar_21 * sign((tmpvar_18.z / tmpvar_17.z)));
  if ((abs(tmpvar_17.z) > (1e-08 * abs(tmpvar_18.z)))) {
    if ((tmpvar_17.z < 0.0)) {
      if ((tmpvar_18.z >= 0.0)) {
        tmpvar_19 += 3.141593;
      } else {
        tmpvar_19 = (tmpvar_19 - 3.141593);
      };
    };
  } else {
    tmpvar_19 = (sign(tmpvar_18.z) * 1.570796);
  };
  angle_9 = vec3(tmpvar_19);
  bvec3 tmpvar_22;
  tmpvar_22 = lessThan (vec3(tmpvar_19), vec3(0.0, 0.0, 0.0));
  float tmpvar_23;
  if (tmpvar_22.x) {
    tmpvar_23 = 6.283185;
  } else {
    tmpvar_23 = 0.0;
  };
  float tmpvar_24;
  if (tmpvar_22.y) {
    tmpvar_24 = 6.283185;
  } else {
    tmpvar_24 = 0.0;
  };
  float tmpvar_25;
  if (tmpvar_22.z) {
    tmpvar_25 = 6.283185;
  } else {
    tmpvar_25 = 0.0;
  };
  vec3 tmpvar_26;
  tmpvar_26.x = tmpvar_23;
  tmpvar_26.y = tmpvar_24;
  tmpvar_26.z = tmpvar_25;
  angle_9 = (vec3(tmpvar_19) + tmpvar_26);
  highp vec4 tmpvar_27;
  if ((_InstanceData.x > 0.0)) {
    tmpvar_27 = _InstanceData;
  } else {
    tmpvar_27 = tmpvar_1;
  };
  highp vec3 tmpvar_28;
  tmpvar_28 = (((
    (_glesMultiTexCoord0.x - 0.5)
   * tmpvar_12.x) * tmpvar_27.x) * tmpvar_17);
  billboardPos_8.xz = tmpvar_28.xz;
  billboardPos_8.y = (tmpvar_28.y + ((
    (_glesMultiTexCoord0.y * tmpvar_12.y)
   + tmpvar_12.z) * tmpvar_27.y));
  if (((_WindQuality * _WindEnabled) > 0.0)) {
    highp vec3 vPos_29;
    vPos_29 = billboardPos_8;
    highp float fMoveAmount_30;
    highp float fAdjust_31;
    highp float fLength_32;
    fLength_32 = sqrt(dot (billboardPos_8, billboardPos_8));
    highp float tmpvar_33;
    tmpvar_33 = (max ((billboardPos_8.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_31 = tmpvar_33;
    if ((tmpvar_33 != 0.0)) {
      fAdjust_31 = pow (tmpvar_33, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_34;
    tmpvar_34.zw = vec2(0.0, 0.0);
    tmpvar_34.x = (tmpvar_14.x + tmpvar_27.w);
    tmpvar_34.y = (tmpvar_14.y + (tmpvar_27.w * 0.8));
    highp vec4 tmpvar_35;
    highp vec4 tmpvar_36;
    tmpvar_36 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    tmpvar_35 = (((
      (tmpvar_36 * tmpvar_36)
     * 
      (3.0 - (2.0 * tmpvar_36))
    ) - 0.5) * 2.0);
    fMoveAmount_30 = ((_ST_WindGlobal.y * (tmpvar_35.x + 
      (tmpvar_35.y * tmpvar_35.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_30 = (fMoveAmount_30 * fAdjust_31);
    vPos_29.xz = (tmpvar_28.xz + (_ST_WindVector.xz * fMoveAmount_30));
    vPos_29 = (normalize(vPos_29) * fLength_32);
    billboardPos_8 = vPos_29;
  };
  tmpvar_6.xyz = (_glesVertex.xyz + billboardPos_8);
  tmpvar_6.w = 1.0;
  angle_9 = (angle_9 + tmpvar_27.z);
  highp vec3 tmpvar_37;
  tmpvar_37 = (floor((
    (angle_9 * tmpvar_11.y)
   + 0.5)) / tmpvar_11.xxx);
  highp vec3 tmpvar_38;
  tmpvar_38 = (fract(abs(tmpvar_37)) * tmpvar_11.xxx);
  highp float tmpvar_39;
  if ((tmpvar_37.x >= 0.0)) {
    tmpvar_39 = tmpvar_38.x;
  } else {
    tmpvar_39 = -(tmpvar_38.x);
  };
  highp vec4 tmpvar_40;
  tmpvar_40 = _ImageTexCoords[int((tmpvar_11.z + tmpvar_39))];
  if ((tmpvar_40.w < 0.0)) {
    tmpvar_7.xy = (tmpvar_40.xy - (tmpvar_40.zw * _glesMultiTexCoord0.yx));
  } else {
    tmpvar_7.xy = (tmpvar_40.xy + (tmpvar_40.zw * _glesMultiTexCoord0.xy));
  };
  highp vec4 hPos_41;
  hPos_41 = (glstate_matrix_mvp * tmpvar_6);
  mediump vec3 screenPos_42;
  highp vec4 o_43;
  highp vec4 tmpvar_44;
  tmpvar_44 = (hPos_41 * 0.5);
  highp vec2 tmpvar_45;
  tmpvar_45.x = tmpvar_44.x;
  tmpvar_45.y = (tmpvar_44.y * _ProjectionParams.x);
  o_43.xy = (tmpvar_45 + tmpvar_44.w);
  o_43.zw = hPos_41.zw;
  highp vec3 tmpvar_46;
  tmpvar_46 = o_43.xyw;
  screenPos_42 = tmpvar_46;
  screenPos_42.xy = (screenPos_42.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = _Color;
  highp vec4 v_47;
  v_47.x = _World2Object[0].x;
  v_47.y = _World2Object[1].x;
  v_47.z = _World2Object[2].x;
  v_47.w = _World2Object[3].x;
  highp vec4 v_48;
  v_48.x = _World2Object[0].z;
  v_48.y = _World2Object[1].z;
  v_48.z = _World2Object[2].z;
  v_48.w = _World2Object[3].z;
  highp vec3 tmpvar_49;
  tmpvar_49 = normalize(((v_47.xyz * tmpvar_17.z) + (v_48.xyz * tmpvar_18.z)));
  worldNormal_4 = tmpvar_49;
  highp mat3 tmpvar_50;
  tmpvar_50[0] = _Object2World[0].xyz;
  tmpvar_50[1] = _Object2World[1].xyz;
  tmpvar_50[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_51;
  tmpvar_51 = normalize((tmpvar_50 * tmpvar_17));
  worldTangent_3 = tmpvar_51;
  lowp vec3 tmpvar_52;
  tmpvar_52 = ((worldNormal_4.yzx * worldTangent_3.zxy) - (worldNormal_4.zxy * worldTangent_3.yzx));
  highp vec3 tmpvar_53;
  tmpvar_53 = -(tmpvar_52);
  worldBinormal_2 = tmpvar_53;
  lowp vec3 tmpvar_54;
  tmpvar_54.x = worldTangent_3.x;
  tmpvar_54.y = worldBinormal_2.x;
  tmpvar_54.z = worldNormal_4.x;
  lowp vec3 tmpvar_55;
  tmpvar_55.x = worldTangent_3.y;
  tmpvar_55.y = worldBinormal_2.y;
  tmpvar_55.z = worldNormal_4.y;
  lowp vec3 tmpvar_56;
  tmpvar_56.x = worldTangent_3.z;
  tmpvar_56.y = worldBinormal_2.z;
  tmpvar_56.z = worldNormal_4.z;
  gl_Position = (glstate_matrix_mvp * tmpvar_6);
  xlv_TEXCOORD0 = tmpvar_54;
  xlv_TEXCOORD1 = tmpvar_55;
  xlv_TEXCOORD2 = tmpvar_56;
  xlv_TEXCOORD3 = (_Object2World * tmpvar_6).xyz;
  xlv_TEXCOORD4 = tmpvar_5;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = screenPos_42;
}


#endif
#ifdef FRAGMENT
uniform highp vec4 _WorldSpaceLightPos0;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp samplerCube _LightTexture0;
uniform mediump mat4 _LightMatrix0;
uniform sampler2D _LightTextureB0;
uniform lowp float _Cutoff;
uniform sampler2D _MainTex;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying lowp vec3 xlv_TEXCOORD0;
varying lowp vec3 xlv_TEXCOORD1;
varying lowp vec3 xlv_TEXCOORD2;
varying highp vec3 xlv_TEXCOORD3;
varying mediump vec4 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD4;
  highp vec3 tmpvar_7;
  tmpvar_7 = normalize((_WorldSpaceLightPos0.xyz - xlv_TEXCOORD3));
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_16;
  tmpvar_16 = ((texture2D (_BumpMap, xlv_TEXCOORD5.xy).xyz * 2.0) - 1.0);
  highp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = xlv_TEXCOORD3;
  highp vec3 tmpvar_18;
  tmpvar_18 = (_LightMatrix0 * tmpvar_17).xyz;
  highp float tmpvar_19;
  tmpvar_19 = dot (tmpvar_18, tmpvar_18);
  lowp float tmpvar_20;
  tmpvar_20 = (texture2D (_LightTextureB0, vec2(tmpvar_19)).w * textureCube (_LightTexture0, tmpvar_18).w);
  worldN_3.x = dot (xlv_TEXCOORD0, tmpvar_16);
  worldN_3.y = dot (xlv_TEXCOORD1, tmpvar_16);
  worldN_3.z = dot (xlv_TEXCOORD2, tmpvar_16);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  tmpvar_1 = (tmpvar_1 * tmpvar_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = c_22.xyz;
  c_4.xyz = c_21.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "POINT_COOKIE" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "BILLBOARD_FACE_CAMERA_POS" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump mat4 _LightMatrix0;
uniform 	lowp float _Cutoff;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	vec3 _BillboardNormal;
uniform 	vec3 _BillboardTangent;
uniform 	float _CameraXZAngle;
uniform 	vec4 _TreeInfo[4];
uniform 	vec4 _TreeSize[4];
uniform 	vec4 _ImageTexCoords[32];
uniform 	vec4 _InstanceData;
in highp vec4 in_POSITION0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_COLOR0;
out lowp vec3 vs_TEXCOORD0;
out lowp vec3 vs_TEXCOORD1;
out lowp vec3 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out mediump vec4 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump float t16_0;
highp vec3 t1;
highp uint tu1;
bool tb1;
highp vec4 t2;
bool tb2;
highp vec4 t3;
highp vec4 t4;
lowp vec3 t10_5;
highp vec3 t6;
highp vec3 t8;
highp int ti8;
bool tb8;
highp float t9;
bool tb10;
highp vec2 t15;
bool tb15;
highp vec2 t16;
highp uint tu16;
highp float t22;
bool tb22;
highp float t23;
bool tb24;
void main()
{
    //Instruction 66545
    //MUL
    t16_0 = _WindEnabled * _WindQuality;
    //Instruction 66546
    //LT
    tb1 = 0.0<t16_0;
    //Instruction 66547
    //ADD
    t8.xyz = in_POSITION0.xyz + _Object2World[3].xyz;
    //Instruction 66548
    //LT
    tb2 = 0.0<_InstanceData.x;
    //Instruction 66549
    //MOVC
    t0 = (bool(tb2)) ? _InstanceData : in_TEXCOORD1;
    //Instruction 66550
    //ADD
    t2.x = t0.w + t8.x;
    //Instruction 66551
    //MAD
    t2.y = t0.w * 0.800000 + t8.y;
    //Instruction 66552
    //ADD
    t8.xyz = (-t8.xyz) + _WorldSpaceCameraPos.xyzx.xyz;
    //Instruction 66553
    //ADD
    t2.xy = t2.xy + vec2(0.500000, 0.500000);
    //Instruction 66554
    //FRC
    t2.xy = fract(t2.xy);
    //Instruction 66555
    //MAD
    t2.xy = t2.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 66556
    //MUL
    t16.xy = abs(t2.xy) * abs(t2.xy);
    //Instruction 66557
    //MAD
    t2.xy = -abs(t2.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 66558
    //MAD
    t2.xy = t16.xy * t2.xy + vec2(-0.500000, -0.500000);
    //Instruction 66559
    //ADD
    t2.xy = t2.xy + t2.xy;
    //Instruction 66560
    //MAD
    t2.x = t2.y * t2.y + t2.x;
    //Instruction 66561
    //DIV
    t9 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 66562
    //MAD
    t2.x = _ST_WindGlobal.y * t2.x + t9;
    //Instruction 66563
    //DIV
    t9 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 66564
    //MUL
    t16.x = in_COLO