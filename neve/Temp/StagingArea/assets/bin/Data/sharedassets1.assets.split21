ediump vec3 tmpvar_25;
  mediump vec3 tmpvar_26;
  mediump vec4 tmpvar_27;
  tmpvar_27.w = 1.0;
  tmpvar_27.xyz = normalWorld_24;
  mediump vec3 x1_28;
  x1_28.x = dot (unity_SHAr, tmpvar_27);
  x1_28.y = dot (unity_SHAg, tmpvar_27);
  x1_28.z = dot (unity_SHAb, tmpvar_27);
  tmpvar_26 = (xlv_TEXCOORD6 + x1_28);
  tmpvar_25 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_25;
  lowp vec4 c_29;
  lowp vec4 c_30;
  lowp float diff_31;
  mediump float tmpvar_32;
  tmpvar_32 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_31 = tmpvar_32;
  c_30.xyz = ((tmpvar_9 * tmpvar_25) * diff_31);
  c_30.w = tmpvar_10;
  c_29.w = c_30.w;
  c_29.xyz = (c_30.xyz + (tmpvar_9 * tmpvar_26));
  c_5.xyz = c_29.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 19641
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19642
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19643
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 19644
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19645
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 19646
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 19647
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 19648
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 19649
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19650
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 19651
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 19652
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19653
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19654
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19655
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 19656
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19657
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 19658
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 19659
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 19660
    //IF
    if(tb28){
        //Instruction 19661
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 19662
        //IF
        if(tb28){
            //Instruction 19663
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19664
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19665
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19666
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 19667
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 19668
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19669
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19670
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19671
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19672
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19673
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 19674
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 19675
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19676
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19677
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 19678
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19679
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19680
            //FRC
            t2 = fract(t2);
            //Instruction 19681
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19682
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19683
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19684
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19685
            //ADD
            t2 = t2 + t2;
            //Instruction 19686
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19687
            //LT
            tb30 = t5.w<0.0;
            //Instruction 19688
            //MOV
            t5.y = (-t5.w);
            //Instruction 19689
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19690
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 19691
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 19692
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 19693
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 19694
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 19695
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 19696
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19697
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19698
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19699
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 19700
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19701
            //MUL
            t30 = t30 * t31;
            //Instruction 19702
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 19703
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19704
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19705
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19706
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19707
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19708
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19709
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19710
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19711
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19712
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19713
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19714
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19715
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 19716
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19717
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 19718
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 19719
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19720
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19721
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19722
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19723
        //ELSE
        } else {
            //Instruction 19724
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19725
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19726
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19727
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19728
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19729
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19730
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19731
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19732
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19733
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19734
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19735
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19736
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19737
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19738
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19739
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19740
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19741
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19742
            //MOV
            t2.y = (-t2.w);
            //Instruction 19743
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19744
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19745
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19746
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19747
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 19748
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 19749
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19750
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19751
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19752
            //MUL
            t30 = t30 * t5.x;
            //Instruction 19753
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 19754
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19755
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19756
        //ENDIF
        }
        //Instruction 19757
    //ELSE
    } else {
        //Instruction 19758
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19759
    //ENDIF
    }
    //Instruction 19760
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19761
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19762
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19763
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 19764
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 19765
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 19766
    //NE
    tb30 = t28!=0.0;
    //Instruction 19767
    //LOG
    t4.x = log2(t28);
    //Instruction 19768
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19769
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19770
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 19771
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19772
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19773
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19774
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19775
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19776
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19777
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19778
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19779
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19780
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 19781
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19782
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 19783
    //MUL
    t28 = t28 * t30;
    //Instruction 19784
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 19785
    //MOV
    t4.y = t3.y;
    //Instruction 19786
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 19787
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19788
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 19789
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19790
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 19791
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19792
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19793
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19794
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19795
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19796
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 19797
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 19798
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19799
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19800
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19801
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19802
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19803
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19804
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19805
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19806
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19807
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 19808
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 19809
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 19810
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 19811
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 19812
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 19813
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 19814
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 19815
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 19816
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 19817
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 19818
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 19819
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 19820
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 19821
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 19822
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 19823
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 19824
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 19825
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 19826
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 19827
    //DP3
    t27 = dot(t5.xyz, t5.xyz);
    //Instruction 19828
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 19829
    //MUL
    t5.xyz = vec3(t27) * t5.xyz;
    //Instruction 19830
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 19831
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 19832
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 19833
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 19834
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 19835
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 19836
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 19837
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 19838
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 19839
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 19840
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 19841
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 19842
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 19843
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 19844
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 19845
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 19846
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 19847
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 19848
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 19849
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 19850
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 19851
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 19852
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 19853
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 19854
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 19855
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 19856
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 19857
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 19858
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 19859
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 19860
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 19861
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 19862
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19863
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19864
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 19865
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 19600
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19601
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19602
    //MOV
    t1.x = t16_0.x;
    //Instruction 19603
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19604
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19605
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19606
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19607
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19608
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19609
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 19610
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 19611
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19612
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19613
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 19614
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 19615
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 19616
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 19617
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19618
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 19619
    //SAMPLE_C_LZ
    vec3 txVec46 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec46, 0.0);
    //Instruction 19620
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 19621
    //MAD
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    //Instruction 19622
    //MUL
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19623
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19624
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 19625
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 19626
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 19627
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 19628
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 19629
    //MOV
    t1.w = 1.0;
    //Instruction 19630
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 19631
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 19632
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 19633
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19634
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19635
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19636
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19637
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19638
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19639
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19640
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_5;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  highp vec3 lightColor0_77;
  lightColor0_77 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_78;
  lightColor1_78 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_79;
  lightColor2_79 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_80;
  lightColor3_80 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_81;
  lightAttenSq_81 = unity_4LightAtten0;
  highp vec3 normal_82;
  normal_82 = worldNormal_5;
  highp vec3 col_83;
  highp vec4 ndotl_84;
  highp vec4 lengthSq_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_85 = (tmpvar_86 * tmpvar_86);
  lengthSq_85 = (lengthSq_85 + (tmpvar_87 * tmpvar_87));
  lengthSq_85 = (lengthSq_85 + (tmpvar_88 * tmpvar_88));
  ndotl_84 = (tmpvar_86 * normal_82.x);
  ndotl_84 = (ndotl_84 + (tmpvar_87 * normal_82.y));
  ndotl_84 = (ndotl_84 + (tmpvar_88 * normal_82.z));
  highp vec4 tmpvar_89;
  tmpvar_89 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_84 * inversesqrt(lengthSq_85)));
  ndotl_84 = tmpvar_89;
  highp vec4 tmpvar_90;
  tmpvar_90 = (tmpvar_89 * (1.0/((1.0 + 
    (lengthSq_85 * lightAttenSq_81)
  ))));
  col_83 = (lightColor0_77 * tmpvar_90.x);
  col_83 = (col_83 + (lightColor1_78 * tmpvar_90.y));
  col_83 = (col_83 + (lightColor2_79 * tmpvar_90.z));
  col_83 = (col_83 + (lightColor3_80 * tmpvar_90.w));
  tmpvar_7 = ((x2_75 + (unity_SHC.xyz * 
    ((normal_74.x * normal_74.x) - (normal_74.y * normal_74.y))
  )) + col_83);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = tmpvar_7;
  xlv_TEXCOORD7 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_17 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_18;
  tmpvar_18 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_19;
  shadow_19 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_18);
  worldN_4.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_18);
  worldN_4.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_18);
  worldN_4.z = tmpvar_22;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_19;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_4;
  mediump vec3 tmpvar_24;
  mediump vec3 tmpvar_25;
  mediump vec4 tmpvar_26;
  tmpvar_26.w = 1.0;
  tmpvar_26.xyz = normalWorld_23;
  mediump vec3 x1_27;
  x1_27.x = dot (unity_SHAr, tmpvar_26);
  x1_27.y = dot (unity_SHAg, tmpvar_26);
  x1_27.z = dot (unity_SHAb, tmpvar_26);
  tmpvar_25 = (xlv_TEXCOORD6 + x1_27);
  tmpvar_24 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_24;
  lowp vec4 c_28;
  lowp vec4 c_29;
  lowp float diff_30;
  mediump float tmpvar_31;
  tmpvar_31 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_30 = tmpvar_31;
  c_29.xyz = ((tmpvar_9 * tmpvar_24) * diff_30);
  c_29.w = tmpvar_10;
  c_28.w = c_29.w;
  c_28.xyz = (c_29.xyz + (tmpvar_9 * tmpvar_25));
  c_5.xyz = c_28.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec2 t12;
bool tb12;
highp vec2 t24;
highp vec2 t28;
highp vec2 t29;
highp float t36;
highp float t37;
bool tb37;
highp float t39;
bool tb39;
highp float t40;
mediump float t16_44;
void main()
{
    //Instruction 19907
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19908
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19909
    //ADD
    t12.x = t0.x + _Object2World[3].z;
    //Instruction 19910
    //ADD
    t24.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19911
    //ADD
    t12.y = t24.x + in_NORMAL0.x;
    //Instruction 19912
    //FRC
    t12.xy = fract(t12.xy);
    //Instruction 19913
    //MAD
    t12.x = t12.y * 0.500000 + t12.x;
    //Instruction 19914
    //ADD
    t12.x = t12.x + -0.300000;
    //Instruction 19915
    //MUL
    t1.z = t12.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19916
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 19917
    //LT
    tb12 = 0.0<t16_2;
    //Instruction 19918
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19919
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19920
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19921
    //DP3
    t24.x = dot(t3.xyz, t3.xyz);
    //Instruction 19922
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 19923
    //MUL
    t24.xy = t24.xx * t3.xz;
    //Instruction 19924
    //AND
    t24.xy = mix(vec2(0.0, 0.0), t24.xy, bvec2(tb12));
    //Instruction 19925
    //GE
    tb37 = t16_2>=3.000000;
    //Instruction 19926
    //IF
    if(tb37){
        //Instruction 19927
        //EQ
        tb37 = t16_2==5.000000;
        //Instruction 19928
        //IF
        if(tb37){
            //Instruction 19929
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19930
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19931
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19932
            //DP3
            t37 = dot(t3.xyz, t3.xyz);
            //Instruction 19933
            //RSQ
            t37 = inversesqrt(t37);
            //Instruction 19934
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 19935
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19936
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19937
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19938
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19939
            //ADD
            t37 = t0.x + _ST_WindBranch.x;
            //Instruction 19940
            //ADD
            t2.x = t37 + in_TEXCOORD0.w;
            //Instruction 19941
            //MAD
            t2.y = t37 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19942
            //MUL
            t39 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19943
            //MUL
            t2.z = t39 * 0.500000;
            //Instruction 19944
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19945
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19946
            //FRC
            t2 = fract(t2);
            //Instruction 19947
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19948
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19949
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19950
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19951
            //ADD
            t2 = t2 + t2;
            //Instruction 19952
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19953
            //LT
            tb39 = t5.w<0.0;
            //Instruction 19954
            //MOV
            t5.y = (-t5.w);
            //Instruction 19955
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19956
            //MOVC
            t5.xy = (bool(tb39)) ? t5.xy : t5.zw;
            //Instruction 19957
            //MAD
            t39 = (-t2.y) * t2.z + t5.x;
            //Instruction 19958
            //MAD
            t39 = t5.y * t39 + t5.w;
            //Instruction 19959
            //ADD
            t40 = (-t39) + t5.x;
            //Instruction 19960
            //MAD
            t39 = t5.y * t40 + t39;
            //Instruction 19961
            //MUL
            t39 = t39 * _ST_WindBranchTwitch.x;
            //Instruction 19962
            //ADD
            t40 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19963
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19964
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19965
            //MAD
            t39 = t39 * t40 + t5.x;
            //Instruction 19966
            //MAD
            t40 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19967
            //MUL
            t39 = t39 * t40;
            //Instruction 19968
            //MUL
            t4.xyz = vec3(t39) * t4.xyz;
            //Instruction 19969
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19970
            //MAD
            t5.x = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19971
            //MUL
            t37 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19972
            //MAD
            t5.y = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19973
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19974
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19975
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19976
            //MUL
            t29.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19977
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19978
            //MAD
            t5.xy = t29.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19979
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19980
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19981
            //MUL
            t37 = t5.x * t5.y;
            //Instruction 19982
            //MAD
            t37 = (-t37) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19983
            //MUL
            t39 = t2.w * _ST_WindVector.w;
            //Instruction 19984
            //MAD
            t37 = t39 * _ST_WindBranchWhip.x + t37;
            //Instruction 19985
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19986
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19987
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 19988
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19989
        //ELSE
        } else {
            //Instruction 19990
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19991
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19992
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19993
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19994
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19995
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19996
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19997
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19998
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19999
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20000
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20001
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20002
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20003
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20004
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20005
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20006
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20007
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20008
            //MOV
            t2.y = (-t2.w);
            //Instruction 20009
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20010
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20011
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20012
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20013
            //ADD
            t37 = (-t0.x) + t6.x;
            //Instruction 20014
            //MAD
            t0.x = t6.y * t37 + t0.x;
            //Instruction 20015
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20016
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20017
            //ADD
            t39 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20018
            //MUL
            t39 = t39 * t5.x;
            //Instruction 20019
            //MAD
            t0.x = t0.x * t37 + t39;
            //Instruction 20020
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20021
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20022
        //ENDIF
        }
        //Instruction 20023
    //ELSE
    } else {
        //Instruction 20024
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20025
    //ENDIF
    }
    //Instruction 20026
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20027
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20028
    //DIV
    t37 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20029
    //MAD
    t37 = (-t37) * 0.250000 + t3.y;
    //Instruction 20030
    //MAX
    t37 = max(t37, 0.0);
    //Instruction 20031
    //MUL
    t37 = t37 * _ST_WindGlobal.z;
    //Instruction 20032
    //NE
    tb39 = t37!=0.0;
    //Instruction 20033
    //LOG
    t4.x = log2(t37);
    //Instruction 20034
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20035
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20036
    //MOVC
    t37 = (tb39) ? t4.x : t37;
    //Instruction 20037
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20038
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20039
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20040
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20041
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20042
    //MUL
    t28.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20043
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20044
    //MAD
    t4.xy = t28.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20045
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20046
    //MAD
    t39 = t4.y * t4.y + t4.x;
    //Instruction 20047
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20048
    //MAD
    t39 = _ST_WindGlobal.y * t39 + t4.x;
    //Instruction 20049
    //MUL
    t37 = t37 * t39;
    //Instruction 20050
    //MAD
    t4.xz = t24.xy * vec2(t37) + t3.xz;
    //Instruction 20051
    //MOV
    t4.y = t3.y;
    //Instruction 20052
    //DP3
    t24.x = dot(t4.xyz, t4.xyz);
    //Instruction 20053
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 20054
    //MUL
    t4.xyz = t24.xxx * t4.xyz;
    //Instruction 20055
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20056
    //MOVC
    t0.xyz = (bool(tb12)) ? t0.xzw : t3.xyz;
    //Instruction 20057
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20058
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20059
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20060
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20061
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20062
    //MUL
    t36 = t3.y * _ProjectionParams.x;
    //Instruction 20063
    //MUL
    t4.w = t36 * 0.500000;
    //Instruction 20064
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20065
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20066
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20067
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20068
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20069
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20070
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20071
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20072
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20073
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20074
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 20075
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 20076
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 20077
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 20078
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 20079
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 20080
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 20081
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 20082
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 20083
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 20084
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 20085
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 20086
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 20087
    //DP3
    t36 = dot(t2.xyw, t2.xyw);
    //Instruction 20088
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 20089
    //MUL
    t2 = vec4(t36) * t2;
    //Instruction 20090
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 20091
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 20092
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 20093
    //DP3
    t36 = dot(t5.xyz, t5.xyz);
    //Instruction 20094
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 20095
    //MUL
    t5.xyz = vec3(t36) * t5.xyz;
    //Instruction 20096
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 20097
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 20098
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 20099
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 20100
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 20101
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 20102
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 20103
    //MUL
    t16_44 = t2.y * t2.y;
    //Instruction 20104
    //MAD
    t16_44 = t2.x * t2.x + (-t16_44);
    //Instruction 20105
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_44) + t16_8.xyz;
    //Instruction 20106
    //ADD
    t7 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 20107
    //ADD
    t9 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 20108
    //ADD
    t10 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 20109
    //MUL
    t11 = t9 * t9;
    //Instruction 20110
    //MAD
    t11 = t7 * t7 + t11;
    //Instruction 20111
    //MAD
    t11 = t10 * t10 + t11;
    //Instruction 20112
    //MUL
    t9 = t2.yyyy * t9;
    //Instruction 20113
    //MAD
    t7 = t7 * t2.xxxx + t9;
    //Instruction 20114
    //MAD
    t7 = t10 * t2.wwww + t7;
    //Instruction 20115
    //RSQ
    t9 = inversesqrt(t11);
    //Instruction 20116
    //MUL
    t7 = t7 * t9;
    //Instruction 20117
    //MAX
    t7 = max(t7, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20118
    //MAD
    t9 = t11 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20119
    //DIV
    t9 = vec4(1.0, 1.0, 1.0, 1.0) / t9;
    //Instruction 20120
    //MUL
    t7 = t7 * t9;
    //Instruction 20121
    //MUL
    t9.xyz = t7.yyy * unity_LightColor[1].xyz;
    //Instruction 20122
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t7.xxx + t9.xyz;
    //Instruction 20123
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t7.zzz + t9.xyz;
    //Instruction 20124
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t7.www + t9.xyz;
    //Instruction 20125
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 20126
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 20127
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 20128
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 20129
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20130
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20131
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 20132
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 20133
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 20134
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 20135
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 20136
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 20137
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 20138
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 20139
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 20140
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 20141
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 20142
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 20143
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 20144
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 20145
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 20146
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 20147
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 20148
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20149
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 20150
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 20151
    //MOV
    vs_TEXCOORD6.xyz = t9.xyz;
    //Instruction 20152
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
void main()
{
    //Instruction 19866
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19867
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19868
    //MOV
    t1.x = t16_0.x;
    //Instruction 19869
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19870
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19871
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19872
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19873
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19874
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19875
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 19876
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 19877
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19878
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19879
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 19880
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 19881
    //DIV
    t16_15 = t16_2.x / t16_15;
    //Instruction 19882
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 19883
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19884
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 19885
    //SAMPLE_C_LZ
    vec3 txVec47 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec47, 0.0);
    //Instruction 19886
    //ADD
    t16_2.x = (-_LightShadowData.x) + 1.0;
    //Instruction 19887
    //MAD
    t16_15 = t16_15 * t16_2.x + _LightShadowData.x;
    //Instruction 19888
    //MUL
    t16_2.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19889
    //MUL
    t16_2.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19890
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 19891
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 19892
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 19893
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 19894
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 19895
    //MOV
    t1.w = 1.0;
    //Instruction 19896
    //DP4
    t16_4.x = dot(unity_SHAr, t1);
    //Instruction 19897
    //DP4
    t16_4.y = dot(unity_SHAg, t1);
    //Instruction 19898
    //DP4
    t16_4.z = dot(unity_SHAb, t1);
    //Instruction 19899
    //DP3
    t16_15 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19900
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19901
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19902
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19903
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19904
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19905
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19906
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_9;
  tmpvar_9.xy = _glesMultiTexCoord2.zw;
  tmpvar_9.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_9;
  highp vec4 tmpvar_10;
  tmpvar_10 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_20;
      vPos_20 = tmpvar_14;
      highp float fTime_21;
      highp float fAdherenceScale_22;
      highp vec3 vWindVector_23;
      vWindVector_23 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_21 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_24;
      highp float fOscillation_25;
      fOscillation_25 = 1.0;
      highp float fAmount_26;
      highp float fTarget_27;
      highp vec4 tmpvar_28;
      tmpvar_28.x = (fTime_21 + _glesMultiTexCoord0.w);
      tmpvar_28.y = ((fTime_21 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_28.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_21 + _glesMultiTexCoord0.w));
      tmpvar_28.w = ((fTime_21 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_29;
      tmpvar_29 = abs(((
        fract((tmpvar_28 + 0.5))
       * 2.0) - 1.0));
      vOscillations_24 = (((
        (tmpvar_29 * tmpvar_29)
       * 
        (3.0 - (2.0 * tmpvar_29))
      ) - 0.5) * 2.0);
      highp float tmpvar_30;
      tmpvar_30 = (vOscillations_24.y * vOscillations_24.z);
      fTarget_27 = 1.0;
      fAmount_26 = tmpvar_30;
      if ((tmpvar_30 < 0.0)) {
        fTarget_27 = -1.0;
        fAmount_26 = -(tmpvar_30);
      };
      fOscillation_25 = (((
        mix (mix (tmpvar_30, fTarget_27, fAmount_26), fTarget_27, fAmount_26)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_24.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_25 = (fOscillation_25 * (1.0 + (vOscillations_24.w * _ST_WindBranchWhip.x)));
      vPos_20 = (_glesVertex.xyz + ((vWindVector_23 * fOscillation_25) * _ST_WindBranch.y));
      highp vec4 tmpvar_31;
      tmpvar_31.zw = vec2(0.0, 0.0);
      tmpvar_31.x = ((fTime_21 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_31.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_32;
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      tmpvar_32 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      fAdherenceScale_22 = (1.0 - ((tmpvar_32.x * tmpvar_32.y) * (
        (tmpvar_32.x * tmpvar_32.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_22 = (fAdherenceScale_22 + ((vOscillations_24.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_20 = (vPos_20 + ((
        ((vRotatedBranchAnchor_11 - vPos_20) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_22) * _glesMultiTexCoord0.z));
      vPos_19 = vPos_20;
    } else {
      highp vec3 vPos_34;
      vPos_34 = vPos_19;
      highp float fTime_35;
      highp vec3 vWindVector_36;
      vWindVector_36 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_35 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_37;
      highp float fOscillation_38;
      fOscillation_38 = 1.0;
      highp float fAmount_39;
      highp float fTarget_40;
      highp vec4 tmpvar_41;
      tmpvar_41.w = 0.0;
      tmpvar_41.x = (fTime_35 + _glesMultiTexCoord0.w);
      tmpvar_41.y = ((fTime_35 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_41.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_35 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_42;
      tmpvar_42 = abs(((
        fract((tmpvar_41 + 0.5))
       * 2.0) - 1.0));
      vOscillations_37 = (((
        (tmpvar_42 * tmpvar_42)
       * 
        (3.0 - (2.0 * tmpvar_42))
      ) - 0.5) * 2.0);
      highp float tmpvar_43;
      tmpvar_43 = (vOscillations_37.y * vOscillations_37.z);
      fTarget_40 = 1.0;
      fAmount_39 = tmpvar_43;
      if ((tmpvar_43 < 0.0)) {
        fTarget_40 = -1.0;
        fAmount_39 = -(tmpvar_43);
      };
      fOscillation_38 = (((
        mix (mix (tmpvar_43, fTarget_40, fAmount_39), fTarget_40, fAmount_39)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_37.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_34 = (vPos_19 + ((vWindVector_36 * fOscillation_38) * _ST_WindBranch.y));
      vPos_19 = vPos_34;
    };
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_44;
    vPos_44 = FinalPosition_13;
    highp float fMoveAmount_45;
    highp float fAdjust_46;
    highp float fLength_47;
    fLength_47 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_48;
    tmpvar_48 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_46 = tmpvar_48;
    if ((tmpvar_48 != 0.0)) {
      fAdjust_46 = pow (tmpvar_48, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_49;
    tmpvar_49.zw = vec2(0.0, 0.0);
    tmpvar_49.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_49.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_50;
    highp vec4 tmpvar_51;
    tmpvar_51 = abs(((
      fract((tmpvar_49 + 0.5))
     * 2.0) - 1.0));
    tmpvar_50 = (((
      (tmpvar_51 * tmpvar_51)
     * 
      (3.0 - (2.0 * tmpvar_51))
    ) - 0.5) * 2.0);
    fMoveAmount_45 = ((_ST_WindGlobal.y * (tmpvar_50.x + 
      (tmpvar_50.y * tmpvar_50.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_45 = (fMoveAmount_45 * fAdjust_46);
    vPos_44.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_45));
    vPos_44 = (normalize(vPos_44) * fLength_47);
    FinalPosition_13 = vPos_44;
  };
  tmpvar_10.xyz = FinalPosition_13;
  highp vec4 hPos_52;
  hPos_52 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_53;
  highp vec4 o_54;
  highp vec4 tmpvar_55;
  tmpvar_55 = (hPos_52 * 0.5);
  highp vec2 tmpvar_56;
  tmpvar_56.x = tmpvar_55.x;
  tmpvar_56.y = (tmpvar_55.y * _ProjectionParams.x);
  o_54.xy = (tmpvar_56 + tmpvar_55.w);
  o_54.zw = hPos_52.zw;
  highp vec3 tmpvar_57;
  tmpvar_57 = o_54.xyw;
  screenPos_53 = tmpvar_57;
  screenPos_53.xy = (screenPos_53.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_58;
  v_58.x = _World2Object[0].x;
  v_58.y = _World2Object[1].x;
  v_58.z = _World2Object[2].x;
  v_58.w = _World2Object[3].x;
  highp vec4 v_59;
  v_59.x = _World2Object[0].y;
  v_59.y = _World2Object[1].y;
  v_59.z = _World2Object[2].y;
  v_59.w = _World2Object[3].y;
  highp vec4 v_60;
  v_60.x = _World2Object[0].z;
  v_60.y = _World2Object[1].z;
  v_60.z = _World2Object[2].z;
  v_60.w = _World2Object[3].z;
  highp vec3 tmpvar_61;
  tmpvar_61 = normalize(((
    (v_58.xyz * _glesNormal.x)
   + 
    (v_59.xyz * _glesNormal.y)
  ) + (v_60.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_61;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_62;
  tmpvar_62.w = 1.0;
  tmpvar_62.xyz = worldNormal_3;
  mediump vec4 normal_63;
  normal_63 = tmpvar_62;
  mediump vec3 x2_64;
  mediump vec4 tmpvar_65;
  tmpvar_65 = (normal_63.xyzz * normal_63.yzzx);
  x2_64.x = dot (unity_SHBr, tmpvar_65);
  x2_64.y = dot (unity_SHBg, tmpvar_65);
  x2_64.z = dot (unity_SHBb, tmpvar_65);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_53;
  xlv_TEXCOORD6 = (x2_64 + (unity_SHC.xyz * (
    (normal_63.x * normal_63.x)
   - 
    (normal_63.y * normal_63.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD6 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 19176
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19177
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 19178
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 19179
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19180
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 19181
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 19182
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 19183
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 19184
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 19185
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 19186
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 19187
    //IF
    if(tb22){
        //Instruction 19188
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 19189
        //IF
        if(tb22){
            //Instruction 19190
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19191
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 19192
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 19193
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 19194
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 19195
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 19196
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19197
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19198
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19199
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19200
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19201
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 19202
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 19203
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19204
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 19205
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 19206
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 19207
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19208
            //FRC
            t0 = fract(t0);
            //Instruction 19209
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19210
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 19211
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19212
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19213
            //ADD
            t0 = t0 + t0;
            //Instruction 19214
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 19215
            //LT
            tb23 = t4.w<0.0;
            //Instruction 19216
            //MOV
            t4.y = (-t4.w);
            //Instruction 19217
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 19218
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 19219
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 19220
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 19221
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 19222
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 19223
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 19224
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19225
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19226
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 19227
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 19228
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19229
            //MUL
            t23 = t23 * t24;
            //Instruction 19230
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 19231
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19232
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19233
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19234
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19235
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 19236
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 19237
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19238
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 19239
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19240
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 19241
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 19242
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 19243
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 19244
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19245
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 19246
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 19247
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 19248
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19249
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 19250
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 19251
        //ELSE
        } else {
            //Instruction 19252
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19253
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19254
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19255
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19256
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19257
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 19258
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 19259
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19260
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 19261
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 19262
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19263
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19264
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19265
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 19266
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19267
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19268
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 19269
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 19270
            //LT
            tb22 = t0.w<0.0;
            //Instruction 19271
            //MOV
            t0.y = (-t0.w);
            //Instruction 19272
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 19273
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 19274
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 19275
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 19276
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 19277
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 19278
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 19279
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19280
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19281
            //MUL
            t24 = t24 * t4.x;
            //Instruction 19282
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 19283
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 19284
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19285
        //ENDIF
        }
        //Instruction 19286
    //ELSE
    } else {
        //Instruction 19287
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 19288
    //ENDIF
    }
    //Instruction 19289
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 19290
    //SQRT
    t22 = sqrt(t22);
    //Instruction 19291
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19292
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 19293
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 19294
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 19295
    //NE
    tb3 = t23!=0.0;
    //Instruction 19296
    //LOG
    t10 = log2(t23);
    //Instruction 19297
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 19298
    //EXP
    t10 = exp2(t10);
    //Instruction 19299
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 19300
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19301
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19302
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 19303
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 19304
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19305
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 19306
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19307
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 19308
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 19309
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 19310
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19311
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 19312
    //MUL
    t23 = t23 * t3.x;
    //Instruction 19313
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 19314
    //MOV
    t3.y = t2.y;
    //Instruction 19315
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 19316
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 19317
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 19318
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 19319
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 19320
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19321
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 19322
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 19323
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 19324
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 19325
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 19326
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 19327
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 19328
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 19329
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 19330
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 19331
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 19332
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 19333
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 19334
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 19335
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 19336
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 19337
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 19338
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 19339
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 19340
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 19341
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 19342
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 19343
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 19344
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 19345
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 19346
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 19347
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 19348
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 19349
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 19350
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 19351
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 19352
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 19353
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 19354
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 19355
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 19356
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 19357
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 19358
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 19359
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 19360
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 19361
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19362
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 19363
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 19364
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 19365
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 19366
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19367
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 19368
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 19148
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19149
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 19150
    //MOV
    t1.x = t16_0.x;
    //Instruction 19151
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 19152
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19153
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19154
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19155
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19156
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19157
    //MOV
    t16_0.w = 1.0;
    //Instruction 19158
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 19159
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 19160
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 19161
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19162
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 19163
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19164
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19165
    //ADD
    t16_2.xyz = t10_1.xyz + (-t10_3.xyz);
    //Instruction 19166
    //MAD
    t16_2.xyz = vec3(t16_12) * t16_2.xyz + t10_3.xyz;
    //Instruction 19167
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19168
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19169
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 19170
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19171
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 19172
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 19173
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19174
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19175
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_59;
  tmpvar_59 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_3;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  highp vec3 lightColor0_68;
  lightColor0_68 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_69;
  lightColor1_69 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_70;
  lightColor2_70 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_71;
  lightColor3_71 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_72;
  lightAttenSq_72 = unity_4LightAtten0;
  highp vec3 normal_73;
  normal_73 = worldNormal_3;
  highp vec3 col_74;
  highp vec4 ndotl_75;
  highp vec4 lengthSq_76;
  highp vec4 tmpvar_77;
  tmpvar_77 = (unity_4LightPosX0 - tmpvar_59.x);
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosY0 - tmpvar_59.y);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosZ0 - tmpvar_59.z);
  lengthSq_76 = (tmpvar_77 * tmpvar_77);
  lengthSq_76 = (lengthSq_76 + (tmpvar_78 * tmpvar_78));
  lengthSq_76 = (lengthSq_76 + (tmpvar_79 * tmpvar_79));
  ndotl_75 = (tmpvar_77 * normal_73.x);
  ndotl_75 = (ndotl_75 + (tmpvar_78 * normal_73.y));
  ndotl_75 = (ndotl_75 + (tmpvar_79 * normal_73.z));
  highp vec4 tmpvar_80;
  tmpvar_80 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_75 * inversesqrt(lengthSq_76)));
  ndotl_75 = tmpvar_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (tmpvar_80 * (1.0/((1.0 + 
    (lengthSq_76 * lightAttenSq_72)
  ))));
  col_74 = (lightColor0_68 * tmpvar_81.x);
  col_74 = (col_74 + (lightColor1_69 * tmpvar_81.y));
  col_74 = (col_74 + (lightColor2_70 * tmpvar_81.z));
  col_74 = (col_74 + (lightColor3_71 * tmpvar_81.w));
  tmpvar_6 = ((x2_66 + (unity_SHC.xyz * 
    ((normal_65.x * normal_65.x) - (normal_65.y * normal_65.y))
  )) + col_74);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_59;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 blendColor_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_10 = tmpvar_16;
  diffuseColor_11.xyz = mix (blendColor_10.xyz, diffuseColor_11.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_17;
  normalWorld_17 = tmpvar_4;
  mediump vec3 tmpvar_18;
  mediump vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = normalWorld_17;
  mediump vec3 x1_20;
  x1_20.x = dot (unity_SHAr, tmpvar_19);
  x1_20.y = dot (unity_SHAg, tmpvar_19);
  x1_20.z = dot (unity_SHAb, tmpvar_19);
  tmpvar_18 = (xlv_TEXCOORD6 + x1_20);
  lowp vec4 c_21;
  lowp vec4 c_22;
  lowp float diff_23;
  mediump float tmpvar_24;
  tmpvar_24 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_23 = tmpvar_24;
  c_22.xyz = ((tmpvar_8 * tmpvar_1) * diff_23);
  c_22.w = tmpvar_9;
  c_21.w = c_22.w;
  c_21.xyz = (c_22.xyz + (tmpvar_8 * tmpvar_18));
  c_3.xyz = c_21.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t20;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
mediump float t16_30;
void main()
{
    //Instruction 19397
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19398
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 19399
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 19400
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19401
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 19402
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 19403
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 19404
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 19405
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 19406
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 19407
    //GE
    tb25 = t16_0.x>=3.000000;
    //Instruction 19408
    //IF
    if(tb25){
        //Instruction 19409
        //EQ
        tb25 = t16_0.x==5.000000;
        //Instruction 19410
        //IF
        if(tb25){
            //Instruction 19411
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19412
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 19413
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 19414
            //DP3
            t25 = dot(t2.xyz, t2.xyz);
            //Instruction 19415
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 19416
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 19417
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19418
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19419
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19420
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19421
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19422
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 19423
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 19424
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19425
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 19426
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 19427
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 19428
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19429
            //FRC
            t0 = fract(t0);
            //Instruction 19430
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19431
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 19432
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19433
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19434
            //ADD
            t0 = t0 + t0;
            //Instruction 19435
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 19436
            //LT
            tb26 = t4.w<0.0;
            //Instruction 19437
            //MOV
            t4.y = (-t4.w);
            //Instruction 19438
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 19439
            //MOVC
            t4.xy = (bool(tb26)) ? t4.xy : t4.zw;
            //Instruction 19440
            //MAD
            t26 = (-t0.y) * t0.z + t4.x;
            //Instruction 19441
            //MAD
            t26 = t4.y * t26 + t4.w;
            //Instruction 19442
            //ADD
            t27 = (-t26) + t4.x;
            //Instruction 19443
            //MAD
            t26 = t4.y * t27 + t26;
            //Instruction 19444
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 19445
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19446
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19447
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 19448
            //MAD
            t26 = t26 * t27 + t4.x;
            //Instruction 19449
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19450
            //MUL
            t26 = t26 * t27;
            //Instruction 19451
            //MUL
            t3.xyz = vec3(t26) * t3.xyz;
            //Instruction 19452
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19453
            //MAD
            t4.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19454
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19455
            //MAD
            t4.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19456
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 19457
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 19458
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19459
            //MUL
            t20.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 19460
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19461
            //MAD
            t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 19462
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 19463
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 19464
            //MUL
            t25 = t4.x * t4.y;
            //Instruction 19465
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19466
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 19467
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 19468
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 19469
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19470
            //MUL
            t2.xyz = vec3(t25) * t2.xyz;
            //Instruction 19471
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 19472
        //ELSE
        } else {
            //Instruction 19473
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19474
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19475
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19476
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19477
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19478
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 19479
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 19480
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19481
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 19482
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 19483
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19484
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19485
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19486
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 19487
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19488
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19489
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 19490
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 19491
            //LT
            tb25 = t0.w<0.0;
            //Instruction 19492
            //MOV
            t0.y = (-t0.w);
            //Instruction 19493
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 19494
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 19495
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 19496
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 19497
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 19498
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 19499
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 19500
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19501
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19502
            //MUL
            t27 = t27 * t4.x;
            //Instruction 19503
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 19504
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 19505
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19506
        //ENDIF
        }
        //Instruction 19507
    //ELSE
    } else {
        //Instruction 19508
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 19509
    //ENDIF
    }
    //Instruction 19510
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 19511
    //SQRT
    t25 = sqrt(t25);
    //Instruction 19512
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19513
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 19514
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 19515
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 19516
    //NE
    tb3 = t26!=0.0;
    //Instruction 19517
    //LOG
    t11 = log2(t26);
    //Instruction 19518
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 19519
    //EXP
    t11 = exp2(t11);
    //Instruction 19520
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 19521
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19522
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19523
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 19524
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 19525
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19526
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 19527
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19528
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 19529
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 19530
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 19531
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19532
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 19533
    //MUL
    t26 = t26 * t3.x;
    //Instruction 19534
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 19535
    //MOV
    t3.y = t2.y;
    //Instruction 19536
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 19537
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 19538
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 19539
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 19540
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 19541
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19542
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 19543
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 19544
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 19545
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 19546
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 19547
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 19548
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 19549
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 19550
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 19551
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 19552
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 19553
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 19554
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 19555
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 19556
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 19557
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 19558
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 19559
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 19560
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 19561
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 19562
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 19563
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 19564
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 19565
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 19566
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 19567
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19568
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19569
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 19570
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 19571
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 19572
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 19573
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 19574
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 19575
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 19576
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 19577
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 19578
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 19579
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 19580
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 19581
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 19582
    //ADD
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 19583
    //ADD
    t5 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 19584
    //MUL
    t7 = t4 * t4;
    //Instruction 19585
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 19586
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 19587
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 19588
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 19589
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 19590
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 19591
    //MUL
    t0 = t0 * t4;
    //Instruction 19592
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 19593
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 19594
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 19595
    //MUL
    t0 = t0 * t4;
    //Instruction 19596
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 19597
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19598
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 19599
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 19600
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 19601
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 19602
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 19603
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19604
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 19605
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 19606
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 19607
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 19608
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19609
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 19610
    //MOV
    vs_TEXCOORD6.xyz = t4.xyz;
    //Instruction 19611
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 19369
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19370
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 19371
    //MOV
    t1.x = t16_0.x;
    //Instruction 19372
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 19373
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19374
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19375
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19376
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19377
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19378
    //MOV
    t16_0.w = 1.0;
    //Instruction 19379
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 19380
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 19381
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 19382
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19383
    //MOV
    t16_12 = vs_TEXCOORD4.z;
    t16_12 = clamp(t16_12, 0.0, 1.0);
    //Instruction 19384
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19385
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19386
    //ADD
    t16_2.xyz = t10_1.xyz + (-t10_3.xyz);
    //Instruction 19387
    //MAD
    t16_2.xyz = vec3(t16_12) * t16_2.xyz + t10_3.xyz;
    //Instruction 19388
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19389
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19390
    //MUL
    t16_2.xyz = t16_2.xyz * _LightColor0.xyz;
    //Instruction 19391
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19392
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 19393
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_12) + t16_0.xyz;
    //Instruction 19394
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19395
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19396
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_18;
  highp float tmpvar_19;
  tmpvar_19 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_18 = tmpvar_19;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_18;
  mediump vec3 normalWorld_20;
  normalWorld_20 = tmpvar_5;
  mediump vec3 tmpvar_21;
  mediump vec3 tmpvar_22;
  mediump vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = normalWorld_20;
  mediump vec3 x1_24;
  x1_24.x = dot (unity_SHAr, tmpvar_23);
  x1_24.y = dot (unity_SHAg, tmpvar_23);
  x1_24.z = dot (unity_SHAb, tmpvar_23);
  tmpvar_22 = (xlv_TEXCOORD6 + x1_24);
  tmpvar_21 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_21;
  lowp vec4 c_25;
  lowp vec4 c_26;
  lowp float diff_27;
  mediump float tmpvar_28;
  tmpvar_28 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_27 = tmpvar_28;
  c_26.xyz = ((tmpvar_9 * tmpvar_21) * diff_27);
  c_26.w = tmpvar_10;
  c_25.w = c_26.w;
  c_25.xyz = (c_26.xyz + (tmpvar_9 * tmpvar_22));
  c_4.xyz = c_25.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 19644
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19645
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 19646
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 19647
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19648
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 19649
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 19650
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 19651
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 19652
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 19653
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 19654
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 19655
    //IF
    if(tb22){
        //Instruction 19656
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 19657
        //IF
        if(tb22){
            //Instruction 19658
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19659
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 19660
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 19661
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 19662
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 19663
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 19664
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19665
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19666
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19667
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19668
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19669
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 19670
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 19671
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19672
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 19673
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 19674
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 19675
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19676
            //FRC
            t0 = fract(t0);
            //Instruction 19677
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19678
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 19679
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19680
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19681
            //ADD
            t0 = t0 + t0;
            //Instruction 19682
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 19683
            //LT
            tb23 = t4.w<0.0;
            //Instruction 19684
            //MOV
            t4.y = (-t4.w);
            //Instruction 19685
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 19686
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 19687
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 19688
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 19689
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 19690
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 19691
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 19692
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19693
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19694
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 19695
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 19696
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19697
            //MUL
            t23 = t23 * t24;
            //Instruction 19698
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 19699
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19700
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19701
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19702
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19703
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 19704
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 19705
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19706
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 19707
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19708
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 19709
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 19710
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 19711
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 19712
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19713
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 19714
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 19715
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 19716
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19717
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 19718
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 19719
        //ELSE
        } else {
            //Instruction 19720
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19721
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19722
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19723
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19724
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19725
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 19726
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 19727
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19728
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 19729
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 19730
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19731
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19732
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19733
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 19734
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19735
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19736
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 19737
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 19738
            //LT
            tb22 = t0.w<0.0;
            //Instruction 19739
            //MOV
            t0.y = (-t0.w);
            //Instruction 19740
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 19741
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 19742
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 19743
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 19744
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 19745
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 19746
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 19747
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19748
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19749
            //MUL
            t24 = t24 * t4.x;
            //Instruction 19750
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 19751
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 19752
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19753
        //ENDIF
        }
        //Instruction 19754
    //ELSE
    } else {
        //Instruction 19755
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 19756
    //ENDIF
    }
    //Instruction 19757
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 19758
    //SQRT
    t22 = sqrt(t22);
    //Instruction 19759
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19760
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 19761
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 19762
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 19763
    //NE
    tb3 = t23!=0.0;
    //Instruction 19764
    //LOG
    t10 = log2(t23);
    //Instruction 19765
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 19766
    //EXP
    t10 = exp2(t10);
    //Instruction 19767
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 19768
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19769
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19770
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 19771
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 19772
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19773
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 19774
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19775
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 19776
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 19777
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 19778
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19779
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 19780
    //MUL
    t23 = t23 * t3.x;
    //Instruction 19781
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 19782
    //MOV
    t3.y = t2.y;
    //Instruction 19783
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 19784
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 19785
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 19786
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 19787
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 19788
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19789
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 19790
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 19791
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 19792
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 19793
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 19794
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 19795
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 19796
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 19797
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 19798
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 19799
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 19800
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 19801
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 19802
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 19803
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 19804
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 19805
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 19806
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 19807
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 19808
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 19809
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 19810
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 19811
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 19812
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 19813
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 19814
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19815
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19816
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 19817
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 19818
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 19819
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 19820
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 19821
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 19822
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 19823
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 19824
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 19825
    //MUL
    t16_27 = t3.y * t3.y;
    //Instruction 19826
    //MAD
    t16_27 = t3.x * t3.x + (-t16_27);
    //Instruction 19827
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 19828
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 19829
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 19830
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 19831
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 19832
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 19833
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 19834
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 19835
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 19836
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 19837
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19838
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 19839
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 19840
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 19841
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 19842
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 19843
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19844
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 19845
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
mediump float t16_17;
void main()
{
    //Instruction 19612
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19613
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19614
    //MOV
    t1.x = t16_0.x;
    //Instruction 19615
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19616
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19617
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19618
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19619
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19620
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19621
    //MOV
    t16_0.w = 1.0;
    //Instruction 19622
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 19623
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 19624
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 19625
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19626
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 19627
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19628
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19629
    //ADD
    t16_2.xyz = t10_1.xyz + (-t10_3.xyz);
    //Instruction 19630
    //MAD
    t16_2.xyz = vec3(t16_15) * t16_2.xyz + t10_3.xyz;
    //Instruction 19631
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19632
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19633
    //SAMPLE_C_LZ
    vec3 txVec42 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec42, 0.0);
    //Instruction 19634
    //ADD
    t16_17 = (-_LightShadowData.x) + 1.0;
    //Instruction 19635
    //MAD
    t16_15 = t16_15 * t16_17 + _LightShadowData.x;
    //Instruction 19636
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19637
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 19638
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19639
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19640
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19641
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19642
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19643
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_11;
  tmpvar_11.xy = _glesMultiTexCoord2.zw;
  tmpvar_11.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_11;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_16;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_13 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_15;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_15 = vPos_46;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_12).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  highp vec3 lightColor0_69;
  lightColor0_69 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_70;
  lightColor1_70 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_71;
  lightColor2_71 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_72;
  lightColor3_72 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_73;
  lightAttenSq_73 = unity_4LightAtten0;
  highp vec3 normal_74;
  normal_74 = worldNormal_3;
  highp vec3 col_75;
  highp vec4 ndotl_76;
  highp vec4 lengthSq_77;
  highp vec4 tmpvar_78;
  tmpvar_78 = (unity_4LightPosX0 - tmpvar_60.x);
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosY0 - tmpvar_60.y);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosZ0 - tmpvar_60.z);
  lengthSq_77 = (tmpvar_78 * tmpvar_78);
  lengthSq_77 = (lengthSq_77 + (tmpvar_79 * tmpvar_79));
  lengthSq_77 = (lengthSq_77 + (tmpvar_80 * tmpvar_80));
  ndotl_76 = (tmpvar_78 * normal_74.x);
  ndotl_76 = (ndotl_76 + (tmpvar_79 * normal_74.y));
  ndotl_76 = (ndotl_76 + (tmpvar_80 * normal_74.z));
  highp vec4 tmpvar_81;
  tmpvar_81 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_76 * inversesqrt(lengthSq_77)));
  ndotl_76 = tmpvar_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (tmpvar_81 * (1.0/((1.0 + 
    (lengthSq_77 * lightAttenSq_73)
  ))));
  col_75 = (lightColor0_69 * tmpvar_82.x);
  col_75 = (col_75 + (lightColor1_70 * tmpvar_82.y));
  col_75 = (col_75 + (lightColor2_71 * tmpvar_82.z));
  col_75 = (col_75 + (lightColor3_72 * tmpvar_82.w));
  tmpvar_6 = ((x2_67 + (unity_SHC.xyz * 
    ((normal_66.x * normal_66.x) - (normal_66.y * normal_66.y))
  )) + col_75);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_12));
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_60;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float shadow_18;
  shadow_18 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_18;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD6 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec4 t8;
highp vec3 t10;
highp float t12;
highp float t19;
highp vec2 t21;
highp vec2 t22;
highp float t28;
bool tb28;
highp float t29;
bool tb29;
highp float t30;
mediump float t16_33;
void main()
{
    //Instruction 19055
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19056
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 19057
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 19058
    //MUL
    t10.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19059
    //MAD
    t10.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t10.xyz;
    //Instruction 19060
    //MAD
    t10.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t10.xyz;
    //Instruction 19061
    //DP3
    t19 = dot(t10.xyz, t10.xyz);
    //Instruction 19062
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 19063
    //MUL
    t10.xy = vec2(t19) * t10.xz;
    //Instruction 19064
    //AND
    t10.xy = mix(vec2(0.0, 0.0), t10.xy, bvec2(tb1));
    //Instruction 19065
    //GE
    tb28 = t16_0.x>=3.000000;
    //Instruction 19066
    //IF
    if(tb28){
        //Instruction 19067
        //EQ
        tb28 = t16_0.x==5.000000;
        //Instruction 19068
        //IF
        if(tb28){
            //Instruction 19069
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19070
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 19071
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 19072
            //DP3
            t28 = dot(t2.xyz, t2.xyz);
            //Instruction 19073
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 19074
            //MUL
            t2.xyz = vec3(t28) * t2.xyz;
            //Instruction 19075
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19076
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19077
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19078
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19079
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19080
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 19081
            //ADD
            t0.x = t28 + in_TEXCOORD0.w;
            //Instruction 19082
            //MAD
            t0.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19083
            //MUL
            t29 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 19084
            //MUL
            t0.z = t29 * 0.500000;
            //Instruction 19085
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 19086
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19087
            //FRC
            t0 = fract(t0);
            //Instruction 19088
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19089
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 19090
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19091
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19092
            //ADD
            t0 = t0 + t0;
            //Instruction 19093
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 19094
            //LT
            tb29 = t4.w<0.0;
            //Instruction 19095
            //MOV
            t4.y = (-t4.w);
            //Instruction 19096
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 19097
            //MOVC
            t4.xy = (bool(tb29)) ? t4.xy : t4.zw;
            //Instruction 19098
            //MAD
            t29 = (-t0.y) * t0.z + t4.x;
            //Instruction 19099
            //MAD
            t29 = t4.y * t29 + t4.w;
            //Instruction 19100
            //ADD
            t30 = (-t29) + t4.x;
            //Instruction 19101
            //MAD
            t29 = t4.y * t30 + t29;
            //Instruction 19102
            //MUL
            t29 = t29 * _ST_WindBranchTwitch.x;
            //Instruction 19103
            //ADD
            t30 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19104
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19105
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 19106
            //MAD
            t29 = t29 * t30 + t4.x;
            //Instruction 19107
            //MAD
            t30 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19108
            //MUL
            t29 = t29 * t30;
            //Instruction 19109
            //MUL
            t3.xyz = vec3(t29) * t3.xyz;
            //Instruction 19110
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19111
            //MAD
            t4.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19112
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19113
            //MAD
            t4.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19114
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 19115
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 19116
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19117
            //MUL
            t22.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 19118
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19119
            //MAD
            t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 19120
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 19121
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 19122
            //MUL
            t28 = t4.x * t4.y;
            //Instruction 19123
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19124
            //MUL
            t29 = t0.w * _ST_WindVector.w;
            //Instruction 19125
            //MAD
            t28 = t29 * _ST_WindBranchWhip.x + t28;
            //Instruction 19126
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 19127
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19128
            //MUL
            t2.xyz = vec3(t28) * t2.xyz;
            //Instruction 19129
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 19130
        //ELSE
        } else {
            //Instruction 19131
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19132
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 19133
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19134
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 19135
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 19136
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 19137
            //ADD
            t4.x = t28 + in_TEXCOORD0.w;
            //Instruction 19138
            //MAD
            t4.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19139
            //MUL
            t28 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 19140
            //MUL
            t4.z = t28 * 0.500000;
            //Instruction 19141
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19142
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19143
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19144
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 19145
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19146
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19147
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 19148
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 19149
            //LT
            tb28 = t0.w<0.0;
            //Instruction 19150
            //MOV
            t0.y = (-t0.w);
            //Instruction 19151
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 19152
            //MOVC
            t5.xy = (bool(tb28)) ? t0.xy : t0.zw;
            //Instruction 19153
            //MAD
            t28 = (-t4.y) * t4.z + t5.x;
            //Instruction 19154
            //MAD
            t28 = t5.y * t28 + t0.w;
            //Instruction 19155
            //ADD
            t29 = (-t28) + t5.x;
            //Instruction 19156
            //MAD
            t28 = t5.y * t29 + t28;
            //Instruction 19157
            //MUL
            t28 = t28 * _ST_WindBranchTwitch.x;
            //Instruction 19158
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19159
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19160
            //MUL
            t30 = t30 * t4.x;
            //Instruction 19161
            //MAD
            t28 = t28 * t29 + t30;
            //Instruction 19162
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19163
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19164
        //ENDIF
        }
        //Instruction 19165
    //ELSE
    } else {
        //Instruction 19166
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 19167
    //ENDIF
    }
    //Instruction 19168
    //DP3
    t28 = dot(t2.xyz, t2.xyz);
    //Instruction 19169
    //SQRT
    t28 = sqrt(t28);
    //Instruction 19170
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19171
    //MAD
    t29 = (-t29) * 0.250000 + t2.y;
    //Instruction 19172
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 19173
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 19174
    //NE
    tb3 = t29!=0.0;
    //Instruction 19175
    //LOG
    t12 = log2(t29);
    //Instruction 19176
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 19177
    //EXP
    t12 = exp2(t12);
    //Instruction 19178
    //MOVC
    t29 = (tb3) ? t12 : t29;
    //Instruction 19179
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19180
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19181
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 19182
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 19183
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19184
    //MUL
    t21.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 19185
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19186
    //MAD
    t3.xy = t21.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 19187
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 19188
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 19189
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19190
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t12;
    //Instruction 19191
    //MUL
    t29 = t29 * t3.x;
    //Instruction 19192
    //MAD
    t3.xz = t10.xy * vec2(t29) + t2.xz;
    //Instruction 19193
    //MOV
    t3.y = t2.y;
    //Instruction 19194
    //DP3
    t10.x = dot(t3.xyz, t3.xyz);
    //Instruction 19195
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 19196
    //MUL
    t3.xyz = t10.xxx * t3.xyz;
    //Instruction 19197
    //MUL
    t10.xyz = vec3(t28) * t3.xyz;
    //Instruction 19198
    //MOVC
    t1.xyz = (bool(tb1)) ? t10.xyz : t2.xyz;
    //Instruction 19199
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19200
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 19201
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 19202
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 19203
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 19204
    //MUL
    t28 = t2.y * _ProjectionParams.x;
    //Instruction 19205
    //MUL
    t3.w = t28 * 0.500000;
    //Instruction 19206
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 19207
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 19208
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 19209
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 19210
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 19211
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 19212
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 19213
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 19214
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 19215
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 19216
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 19217
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 19218
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 19219
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 19220
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 19221
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 19222
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 19223
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 19224
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 19225
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 19226
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 19227
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 19228
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 19229
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 19230
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 19231
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 19232
    //MUL
    t16_0 = t4.yzzx * t4.xyzz;
    //Instruction 19233
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 19234
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 19235
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 19236
    //MUL
    t16_33 = t4.y * t4.y;
    //Instruction 19237
    //MAD
    t16_33 = t4.x * t4.x + (-t16_33);
    //Instruction 19238
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_33) + t16_6.xyz;
    //Instruction 19239
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 19240
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 19241
    //ADD
    t7 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 19242
    //MUL
    t8 = t5 * t5;
    //Instruction 19243
    //MAD
    t8 = t0 * t0 + t8;
    //Instruction 19244
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 19245
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 19246
    //MAD
    t0 = t0 * t4.xxxx + t5;
    //Instruction 19247
    //MAD
    t0 = t7 * t4.zzzz + t0;
    //Instruction 19248
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 19249
    //MUL
    t0 = t0 * t5;
    //Instruction 19250
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 19251
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 19252
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 19253
    //MUL
    t0 = t0 * t5;
    //Instruction 19254
    //MUL
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 19255
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    //Instruction 19256
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    //Instruction 19257
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    //Instruction 19258
    //ADD
    t5.xyz = t5.xyz + t16_6.xyz;
    //Instruction 19259
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 19260
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 19261
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 19262
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 19263
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 19264
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 19265
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 19266
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 19267
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 19268
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 19269
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19270
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 19271
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 19272
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 19273
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 19274
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 19275
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 19276
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 19277
    //MOV
    vs_TEXCOORD6.xyz = t5.xyz;
    //Instruction 19278
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
highp vec2 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_15;
mediump float t16_17;
void main()
{
    //Instruction 19023
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19024
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 19025
    //MOV
    t1.x = t16_0.x;
    //Instruction 19026
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 19027
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19028
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 19029
    //LT
    tb1 = t16_1<0.0;
    //Instruction 19030
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19031
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19032
    //MOV
    t16_0.w = 1.0;
    //Instruction 19033
    //DP4
    t16_2.x = dot(unity_SHAr, t16_0);
    //Instruction 19034
    //DP4
    t16_2.y = dot(unity_SHAg, t16_0);
    //Instruction 19035
    //DP4
    t16_2.z = dot(unity_SHAb, t16_0);
    //Instruction 19036
    //ADD
    t16_0.xyz = t16_2.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19037
    //MOV
    t16_15 = vs_TEXCOORD4.z;
    t16_15 = clamp(t16_15, 0.0, 1.0);
    //Instruction 19038
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19039
    //SAMPLE
    t10_3.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19040
    //ADD
    t16_2.xyz = t10_1.xyz + (-t10_3.xyz);
    //Instruction 19041
    //MAD
    t16_2.xyz = vec3(t16_15) * t16_2.xyz + t10_3.xyz;
    //Instruction 19042
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19043
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 19044
    //SAMPLE_C_LZ
    vec3 txVec55 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec55, 0.0);
    //Instruction 19045
    //ADD
    t16_17 = (-_LightShadowData.x) + 1.0;
    //Instruction 19046
    //MAD
    t16_15 = t16_15 * t16_17 + _LightShadowData.x;
    //Instruction 19047
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19048
    //MUL
    t16_2.xyz = t16_2.xyz * t16_4.xyz;
    //Instruction 19049
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19050
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19051
    //MAD
    t16_0.xyz = t16_2.xyz * vec3(t16_15) + t16_0.xyz;
    //Instruction 19052
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19053
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19054
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  lowp vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_7.xy = tmpvar_2.xy;
  tmpvar_6.w = _Color.w;
  tmpvar_6.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_7.z = tmpvar_9;
  highp vec3 tmpvar_12;
  tmpvar_12.xy = _glesMultiTexCoord2.zw;
  tmpvar_12.z = _glesMultiTexCoord1.w;
  tmpvar_8 = tmpvar_12;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_6;
  highp vec4 v_60;
  v_60.x = _World2Object[0].x;
  v_60.y = _World2Object[1].x;
  v_60.z = _World2Object[2].x;
  v_60.w = _World2Object[3].x;
  highp vec4 v_61;
  v_61.x = _World2Object[0].y;
  v_61.y = _World2Object[1].y;
  v_61.z = _World2Object[2].y;
  v_61.w = _World2Object[3].y;
  highp vec4 v_62;
  v_62.x = _World2Object[0].z;
  v_62.y = _World2Object[1].z;
  v_62.z = _World2Object[2].z;
  v_62.w = _World2Object[3].z;
  highp vec3 tmpvar_63;
  tmpvar_63 = normalize(((
    (v_60.xyz * _glesNormal.x)
   + 
    (v_61.xyz * _glesNormal.y)
  ) + (v_62.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_63;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_64;
  tmpvar_64.w = 1.0;
  tmpvar_64.xyz = worldNormal_3;
  mediump vec4 normal_65;
  normal_65 = tmpvar_64;
  mediump vec3 x2_66;
  mediump vec4 tmpvar_67;
  tmpvar_67 = (normal_65.xyzz * normal_65.yzzx);
  x2_66.x = dot (unity_SHBr, tmpvar_67);
  x2_66.y = dot (unity_SHBg, tmpvar_67);
  x2_66.z = dot (unity_SHBb, tmpvar_67);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD6 = (x2_66 + (unity_SHC.xyz * (
    (normal_65.x * normal_65.x)
   - 
    (normal_65.y * normal_65.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_4;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD6 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 19316
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19317
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19318
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 19319
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19320
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 19321
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 19322
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 19323
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 19324
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19325
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 19326
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 19327
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19328
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19329
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19330
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 19331
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 19332
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 19333
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 19334
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 19335
    //IF
    if(tb25){
        //Instruction 19336
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 19337
        //IF
        if(tb25){
            //Instruction 19338
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19339
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19340
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19341
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 19342
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 19343
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 19344
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19345
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19346
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19347
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19348
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 19349
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 19350
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19351
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19352
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 19353
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19354
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19355
            //FRC
            t2 = fract(t2);
            //Instruction 19356
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19357
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19358
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19359
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19360
            //ADD
            t2 = t2 + t2;
            //Instruction 19361
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19362
            //LT
            tb27 = t5.w<0.0;
            //Instruction 19363
            //MOV
            t5.y = (-t5.w);
            //Instruction 19364
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19365
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 19366
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 19367
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 19368
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 19369
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 19370
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 19371
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19372
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19373
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19374
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 19375
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19376
            //MUL
            t27 = t27 * t28;
            //Instruction 19377
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 19378
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19379
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19380
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19381
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19382
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19383
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19384
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19385
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19386
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19387
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19388
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19389
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19390
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 19391
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19392
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 19393
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 19394
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19395
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19396
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 19397
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19398
        //ELSE
        } else {
            //Instruction 19399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19403
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19404
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19405
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19406
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19407
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19408
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19409
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19410
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19411
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19412
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19413
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19414
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19415
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19416
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19417
            //MOV
            t2.y = (-t2.w);
            //Instruction 19418
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19419
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19420
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19421
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19422
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 19423
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 19424
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19425
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19426
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19427
            //MUL
            t27 = t27 * t5.x;
            //Instruction 19428
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 19429
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19430
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19431
        //ENDIF
        }
        //Instruction 19432
    //ELSE
    } else {
        //Instruction 19433
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19434
    //ENDIF
    }
    //Instruction 19435
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19436
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19437
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19438
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 19439
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 19440
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 19441
    //NE
    tb27 = t25!=0.0;
    //Instruction 19442
    //LOG
    t4.x = log2(t25);
    //Instruction 19443
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19444
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19445
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 19446
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19447
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19448
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19449
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19450
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19451
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19452
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19453
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19454
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19455
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 19456
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19457
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 19458
    //MUL
    t25 = t25 * t27;
    //Instruction 19459
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 19460
    //MOV
    t4.y = t3.y;
    //Instruction 19461
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 19462
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 19463
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 19464
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19465
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 19466
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19467
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19468
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19469
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19470
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19471
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 19472
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 19473
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19474
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19475
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19476
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19477
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19478
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19479
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19480
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19481
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19482
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 19483
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 19484
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 19485
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 19486
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 19487
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 19488
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 19489
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 19490
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 19491
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 19492
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 19493
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 19494
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 19495
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 19496
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 19497
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 19498
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 19499
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 19500
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 19501
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 19502
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 19503
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 19504
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 19505
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 19506
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 19507
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19508
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19509
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 19510
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 19511
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 19512
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 19513
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 19514
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 19279
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19280
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 19281
    //MOV
    t1.x = t16_0.x;
    //Instruction 19282
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 19283
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19284
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 19285
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 19286
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19287
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 19288
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19289
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19290
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 19291
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 19292
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 19293
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 19294
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 19295
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 19296
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 19297
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 19298
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 19299
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 19300
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19301
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19302
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19303
    //MOV
    t16_1.w = 1.0;
    //Instruction 19304
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 19305
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 19306
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 19307
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19308
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 19309
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 19310
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19311
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 19312
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 19313
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19314
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19315
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_65;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_3;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  highp vec3 lightColor0_70;
  lightColor0_70 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_71;
  lightColor1_71 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_72;
  lightColor2_72 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_73;
  lightColor3_73 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_74;
  lightAttenSq_74 = unity_4LightAtten0;
  highp vec3 normal_75;
  normal_75 = worldNormal_3;
  highp vec3 col_76;
  highp vec4 ndotl_77;
  highp vec4 lengthSq_78;
  highp vec4 tmpvar_79;
  tmpvar_79 = (unity_4LightPosX0 - tmpvar_61.x);
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosY0 - tmpvar_61.y);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosZ0 - tmpvar_61.z);
  lengthSq_78 = (tmpvar_79 * tmpvar_79);
  lengthSq_78 = (lengthSq_78 + (tmpvar_80 * tmpvar_80));
  lengthSq_78 = (lengthSq_78 + (tmpvar_81 * tmpvar_81));
  ndotl_77 = (tmpvar_79 * normal_75.x);
  ndotl_77 = (ndotl_77 + (tmpvar_80 * normal_75.y));
  ndotl_77 = (ndotl_77 + (tmpvar_81 * normal_75.z));
  highp vec4 tmpvar_82;
  tmpvar_82 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_77 * inversesqrt(lengthSq_78)));
  ndotl_77 = tmpvar_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = (tmpvar_82 * (1.0/((1.0 + 
    (lengthSq_78 * lightAttenSq_74)
  ))));
  col_76 = (lightColor0_70 * tmpvar_83.x);
  col_76 = (col_76 + (lightColor1_71 * tmpvar_83.y));
  col_76 = (col_76 + (lightColor2_72 * tmpvar_83.z));
  col_76 = (col_76 + (lightColor3_73 * tmpvar_83.w));
  tmpvar_6 = ((x2_68 + (unity_SHC.xyz * 
    ((normal_67.x * normal_67.x) - (normal_67.y * normal_67.y))
  )) + col_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_61;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_4;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_19;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD6 + x1_22);
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_8 * tmpvar_1) * diff_25);
  c_24.w = tmpvar_9;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_8 * tmpvar_20));
  c_3.xyz = c_23.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_34;
void main()
{
    //Instruction 19552
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19553
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19554
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 19555
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19556
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 19557
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 19558
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 19559
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 19560
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19561
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 19562
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 19563
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19564
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19565
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19566
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 19567
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19568
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 19569
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 19570
    //GE
    tb28 = t16_2.x>=3.000000;
    //Instruction 19571
    //IF
    if(tb28){
        //Instruction 19572
        //EQ
        tb28 = t16_2.x==5.000000;
        //Instruction 19573
        //IF
        if(tb28){
            //Instruction 19574
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19575
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19576
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19577
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 19578
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 19579
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19580
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19581
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19582
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19583
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19584
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 19585
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 19586
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19587
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19588
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 19589
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19590
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19591
            //FRC
            t2 = fract(t2);
            //Instruction 19592
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19593
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19594
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19595
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19596
            //ADD
            t2 = t2 + t2;
            //Instruction 19597
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19598
            //LT
            tb30 = t5.w<0.0;
            //Instruction 19599
            //MOV
            t5.y = (-t5.w);
            //Instruction 19600
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19601
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 19602
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 19603
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 19604
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 19605
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 19606
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 19607
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19608
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19609
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19610
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 19611
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19612
            //MUL
            t30 = t30 * t31;
            //Instruction 19613
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 19614
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19615
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19616
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19617
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19618
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19619
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19620
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19621
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19622
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19623
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19624
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19625
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19626
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 19627
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19628
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 19629
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 19630
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19631
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19632
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 19633
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19634
        //ELSE
        } else {
            //Instruction 19635
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19636
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19637
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19638
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19639
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19640
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19641
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19642
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19643
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19644
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19645
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19646
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19647
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19648
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19649
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19650
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19651
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19652
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19653
            //MOV
            t2.y = (-t2.w);
            //Instruction 19654
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19655
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19656
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19657
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19658
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 19659
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 19660
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19661
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19662
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19663
            //MUL
            t30 = t30 * t5.x;
            //Instruction 19664
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 19665
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19666
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19667
        //ENDIF
        }
        //Instruction 19668
    //ELSE
    } else {
        //Instruction 19669
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19670
    //ENDIF
    }
    //Instruction 19671
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19672
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19673
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19674
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 19675
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 19676
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 19677
    //NE
    tb30 = t28!=0.0;
    //Instruction 19678
    //LOG
    t4.x = log2(t28);
    //Instruction 19679
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19680
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19681
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 19682
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19683
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19684
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19685
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19686
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19687
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19688
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19689
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19690
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19691
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 19692
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19693
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 19694
    //MUL
    t28 = t28 * t30;
    //Instruction 19695
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 19696
    //MOV
    t4.y = t3.y;
    //Instruction 19697
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 19698
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 19699
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 19700
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19701
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 19702
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19703
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19704
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19705
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19706
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19707
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 19708
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 19709
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19710
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19711
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19712
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19713
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19714
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19715
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19716
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19717
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19718
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 19719
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 19720
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 19721
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 19722
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 19723
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 19724
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 19725
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 19726
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 19727
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 19728
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 19729
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 19730
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 19731
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 19732
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 19733
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 19734
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 19735
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 19736
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 19737
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 19738
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 19739
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 19740
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 19741
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 19742
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 19743
    //ADD
    t5 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 19744
    //ADD
    t6 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 19745
    //MUL
    t8 = t5 * t5;
    //Instruction 19746
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 19747
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 19748
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 19749
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 19750
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 19751
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 19752
    //MUL
    t2 = t2 * t5;
    //Instruction 19753
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 19754
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 19755
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 19756
    //MUL
    t2 = t2 * t5;
    //Instruction 19757
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 19758
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 19759
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 19760
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 19761
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 19762
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 19763
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 19764
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 19765
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 19766
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 19767
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 19768
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 19769
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 19770
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 19771
    //MOV
    vs_TEXCOORD6.xyz = t5.xyz;
    //Instruction 19772
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_12;
void main()
{
    //Instruction 19515
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19516
    //FRC
    t16_4.x = fract(t16_0.y);
    //Instruction 19517
    //MOV
    t1.x = t16_0.x;
    //Instruction 19518
    //MAD
    t1.y = t16_4.x * 0.062500 + unity_LODFade.y;
    //Instruction 19519
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19520
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 19521
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 19522
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19523
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 19524
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19525
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19526
    //ADD
    t16_4.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 19527
    //MAD
    t16_0.xyz = t16_0.xxx * t16_4.xyz + t10_2.xyz;
    //Instruction 19528
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 19529
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 19530
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 19531
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 19532
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 19533
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 19534
    //DIV
    t16_12 = t16_12 / t16_3.x;
    //Instruction 19535
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 19536
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19537
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19538
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19539
    //MOV
    t16_1.w = 1.0;
    //Instruction 19540
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 19541
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 19542
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 19543
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19544
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 19545
    //MUL
    t16_0.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 19546
    //DP3
    t16_12 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19547
    //MAX
    t16_12 = max(t16_12, 0.0);
    //Instruction 19548
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_12) + t16_3.xyz;
    //Instruction 19549
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19550
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19551
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_3;
  highp vec3 col_77;
  highp vec4 ndotl_78;
  highp vec4 lengthSq_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_62.z);
  lengthSq_79 = (tmpvar_80 * tmpvar_80);
  lengthSq_79 = (lengthSq_79 + (tmpvar_81 * tmpvar_81));
  lengthSq_79 = (lengthSq_79 + (tmpvar_82 * tmpvar_82));
  ndotl_78 = (tmpvar_80 * normal_76.x);
  ndotl_78 = (ndotl_78 + (tmpvar_81 * normal_76.y));
  ndotl_78 = (ndotl_78 + (tmpvar_82 * normal_76.z));
  highp vec4 tmpvar_83;
  tmpvar_83 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_78 * inversesqrt(lengthSq_79)));
  ndotl_78 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (tmpvar_83 * (1.0/((1.0 + 
    (lengthSq_79 * lightAttenSq_75)
  ))));
  col_77 = (lightColor0_71 * tmpvar_84.x);
  col_77 = (col_77 + (lightColor1_72 * tmpvar_84.y));
  col_77 = (col_77 + (lightColor2_73 * tmpvar_84.z));
  col_77 = (col_77 + (lightColor3_74 * tmpvar_84.w));
  tmpvar_6 = ((x2_69 + (unity_SHC.xyz * 
    ((normal_68.x * normal_68.x) - (normal_68.y * normal_68.y))
  )) + col_77);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_57;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD7).x > 
    (xlv_TEXCOORD7.z / xlv_TEXCOORD7.w)
  )), _LightShadowData.x);
  tmpvar_20 = tmpvar_21;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_20;
  mediump vec3 normalWorld_22;
  normalWorld_22 = tmpvar_5;
  mediump vec3 tmpvar_23;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_22;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD6 + x1_26);
  tmpvar_23 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_23;
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_9 * tmpvar_23) * diff_29);
  c_28.w = tmpvar_10;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_9 * tmpvar_24));
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  tmpvar_6 = (unity_World2Shadow[0] * (_Object2World * tmpvar_14));
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD6 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
  xlv_TEXCOORD7 = tmpvar_6;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 19814
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19815
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19816
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 19817
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19818
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 19819
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 19820
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 19821
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 19822
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19823
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 19824
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 19825
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19826
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19827
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19828
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 19829
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 19830
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 19831
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 19832
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 19833
    //IF
    if(tb25){
        //Instruction 19834
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 19835
        //IF
        if(tb25){
            //Instruction 19836
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19837
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19838
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19839
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 19840
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 19841
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 19842
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19843
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19844
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19845
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19846
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 19847
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 19848
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19849
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19850
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 19851
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19852
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19853
            //FRC
            t2 = fract(t2);
            //Instruction 19854
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19855
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19856
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19857
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19858
            //ADD
            t2 = t2 + t2;
            //Instruction 19859
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19860
            //LT
            tb27 = t5.w<0.0;
            //Instruction 19861
            //MOV
            t5.y = (-t5.w);
            //Instruction 19862
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19863
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 19864
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 19865
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 19866
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 19867
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 19868
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 19869
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19870
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19871
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19872
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 19873
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19874
            //MUL
            t27 = t27 * t28;
            //Instruction 19875
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 19876
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19877
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19878
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19879
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19880
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19881
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19882
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19883
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19884
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19885
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19886
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19887
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19888
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 19889
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19890
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 19891
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 19892
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19893
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19894
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 19895
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19896
        //ELSE
        } else {
            //Instruction 19897
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19898
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19899
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19900
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19901
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19902
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19903
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19904
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19905
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19906
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19907
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19908
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19909
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19910
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19911
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19912
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19913
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19914
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19915
            //MOV
            t2.y = (-t2.w);
            //Instruction 19916
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19917
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19918
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19919
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19920
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 19921
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 19922
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19923
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19924
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19925
            //MUL
            t27 = t27 * t5.x;
            //Instruction 19926
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 19927
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 19928
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19929
        //ENDIF
        }
        //Instruction 19930
    //ELSE
    } else {
        //Instruction 19931
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 19932
    //ENDIF
    }
    //Instruction 19933
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 19934
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 19935
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 19936
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 19937
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 19938
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 19939
    //NE
    tb27 = t25!=0.0;
    //Instruction 19940
    //LOG
    t4.x = log2(t25);
    //Instruction 19941
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 19942
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 19943
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 19944
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 19945
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 19946
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 19947
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 19948
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 19949
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 19950
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 19951
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 19952
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 19953
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 19954
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 19955
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 19956
    //MUL
    t25 = t25 * t27;
    //Instruction 19957
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 19958
    //MOV
    t4.y = t3.y;
    //Instruction 19959
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 19960
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 19961
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 19962
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 19963
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 19964
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 19965
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 19966
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 19967
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 19968
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 19969
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 19970
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 19971
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 19972
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 19973
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 19974
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 19975
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 19976
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 19977
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 19978
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 19979
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 19980
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 19981
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 19982
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 19983
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 19984
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 19985
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 19986
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 19987
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 19988
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 19989
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 19990
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 19991
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 19992
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 19993
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 19994
    //DP3
    t24 = dot(t4.xyz, t4.xyz);
    //Instruction 19995
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 19996
    //MUL
    t4.xyz = vec3(t24) * t4.xyz;
    //Instruction 19997
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 19998
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 19999
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 20000
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 20001
    //MUL
    t16_31 = t4.y * t4.y;
    //Instruction 20002
    //MAD
    t16_31 = t4.x * t4.x + (-t16_31);
    //Instruction 20003
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 20004
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 20005
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 20006
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 20007
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20008
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20009
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 20010
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 20011
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 20012
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 20013
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20014
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 20015
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20016
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 20017
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20018
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20019
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 20020
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 20021
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 19773
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19774
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 19775
    //MOV
    t1.x = t16_0.x;
    //Instruction 19776
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 19777
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19778
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 19779
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 19780
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19781
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 19782
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19783
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19784
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 19785
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 19786
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19787
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19788
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 19789
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 19790
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 19791
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 19792
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 19793
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 19794
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19795
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19796
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19797
    //MOV
    t16_1.w = 1.0;
    //Instruction 19798
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 19799
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 19800
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 19801
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19802
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 19803
    //SAMPLE_C_LZ
    vec3 txVec56 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec56, 0.0);
    //Instruction 19804
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 19805
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 19806
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19807
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19808
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19809
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19810
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 19811
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19812
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19813
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  mediump vec3 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_66;
  tmpvar_4 = worldNormal_3;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_3;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  highp vec3 lightColor0_71;
  lightColor0_71 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_72;
  lightColor1_72 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_73;
  lightColor2_73 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_74;
  lightColor3_74 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_75;
  lightAttenSq_75 = unity_4LightAtten0;
  highp vec3 normal_76;
  normal_76 = worldNormal_3;
  highp vec3 col_77;
  highp vec4 ndotl_78;
  highp vec4 lengthSq_79;
  highp vec4 tmpvar_80;
  tmpvar_80 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosZ0 - tmpvar_62.z);
  lengthSq_79 = (tmpvar_80 * tmpvar_80);
  lengthSq_79 = (lengthSq_79 + (tmpvar_81 * tmpvar_81));
  lengthSq_79 = (lengthSq_79 + (tmpvar_82 * tmpvar_82));
  ndotl_78 = (tmpvar_80 * normal_76.x);
  ndotl_78 = (ndotl_78 + (tmpvar_81 * normal_76.y));
  ndotl_78 = (ndotl_78 + (tmpvar_82 * normal_76.z));
  highp vec4 tmpvar_83;
  tmpvar_83 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_78 * inversesqrt(lengthSq_79)));
  ndotl_78 = tmpvar_83;
  highp vec4 tmpvar_84;
  tmpvar_84 = (tmpvar_83 * (1.0/((1.0 + 
    (lengthSq_79 * lightAttenSq_75)
  ))));
  col_77 = (lightColor0_71 * tmpvar_84.x);
  col_77 = (col_77 + (lightColor1_72 * tmpvar_84.y));
  col_77 = (col_77 + (lightColor2_73 * tmpvar_84.z));
  col_77 = (col_77 + (lightColor3_74 * tmpvar_84.w));
  tmpvar_6 = ((x2_69 + (unity_SHC.xyz * 
    ((normal_68.x * normal_68.x) - (normal_68.y * normal_68.y))
  )) + col_77);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = tmpvar_62;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = screenPos_57;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec4 xlv_TEXCOORD7;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp float shadow_20;
  shadow_20 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD7.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_20;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD6 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec4 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec4 t9;
highp vec2 t10;
bool tb10;
highp vec2 t20;
highp vec2 t24;
highp vec2 t25;
highp float t30;
highp float t31;
bool tb31;
highp float t33;
bool tb33;
highp float t34;
mediump float t16_37;
void main()
{
    //Instruction 19887
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 19888
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 19889
    //ADD
    t10.x = t0.x + _Object2World[3].z;
    //Instruction 19890
    //ADD
    t20.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 19891
    //ADD
    t10.y = t20.x + in_NORMAL0.x;
    //Instruction 19892
    //FRC
    t10.xy = fract(t10.xy);
    //Instruction 19893
    //MAD
    t10.x = t10.y * 0.500000 + t10.x;
    //Instruction 19894
    //ADD
    t10.x = t10.x + -0.300000;
    //Instruction 19895
    //MUL
    t1.z = t10.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 19896
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 19897
    //LT
    tb10 = 0.0<t16_2.x;
    //Instruction 19898
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 19899
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 19900
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 19901
    //DP3
    t20.x = dot(t3.xyz, t3.xyz);
    //Instruction 19902
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 19903
    //MUL
    t20.xy = t20.xx * t3.xz;
    //Instruction 19904
    //AND
    t20.xy = mix(vec2(0.0, 0.0), t20.xy, bvec2(tb10));
    //Instruction 19905
    //GE
    tb31 = t16_2.x>=3.000000;
    //Instruction 19906
    //IF
    if(tb31){
        //Instruction 19907
        //EQ
        tb31 = t16_2.x==5.000000;
        //Instruction 19908
        //IF
        if(tb31){
            //Instruction 19909
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 19910
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 19911
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 19912
            //DP3
            t31 = dot(t3.xyz, t3.xyz);
            //Instruction 19913
            //RSQ
            t31 = inversesqrt(t31);
            //Instruction 19914
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 19915
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19916
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19917
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19918
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19919
            //ADD
            t31 = t0.x + _ST_WindBranch.x;
            //Instruction 19920
            //ADD
            t2.x = t31 + in_TEXCOORD0.w;
            //Instruction 19921
            //MAD
            t2.y = t31 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19922
            //MUL
            t33 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 19923
            //MUL
            t2.z = t33 * 0.500000;
            //Instruction 19924
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 19925
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 19926
            //FRC
            t2 = fract(t2);
            //Instruction 19927
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 19928
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 19929
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 19930
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 19931
            //ADD
            t2 = t2 + t2;
            //Instruction 19932
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 19933
            //LT
            tb33 = t5.w<0.0;
            //Instruction 19934
            //MOV
            t5.y = (-t5.w);
            //Instruction 19935
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 19936
            //MOVC
            t5.xy = (bool(tb33)) ? t5.xy : t5.zw;
            //Instruction 19937
            //MAD
            t33 = (-t2.y) * t2.z + t5.x;
            //Instruction 19938
            //MAD
            t33 = t5.y * t33 + t5.w;
            //Instruction 19939
            //ADD
            t34 = (-t33) + t5.x;
            //Instruction 19940
            //MAD
            t33 = t5.y * t34 + t33;
            //Instruction 19941
            //MUL
            t33 = t33 * _ST_WindBranchTwitch.x;
            //Instruction 19942
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19943
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19944
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 19945
            //MAD
            t33 = t33 * t34 + t5.x;
            //Instruction 19946
            //MAD
            t34 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 19947
            //MUL
            t33 = t33 * t34;
            //Instruction 19948
            //MUL
            t4.xyz = vec3(t33) * t4.xyz;
            //Instruction 19949
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 19950
            //MAD
            t5.x = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19951
            //MUL
            t31 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 19952
            //MAD
            t5.y = t31 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 19953
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 19954
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 19955
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 19956
            //MUL
            t25.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 19957
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 19958
            //MAD
            t5.xy = t25.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 19959
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 19960
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 19961
            //MUL
            t31 = t5.x * t5.y;
            //Instruction 19962
            //MAD
            t31 = (-t31) * _ST_WindTurbulences.x + 1.0;
            //Instruction 19963
            //MUL
            t33 = t2.w * _ST_WindVector.w;
            //Instruction 19964
            //MAD
            t31 = t33 * _ST_WindBranchWhip.x + t31;
            //Instruction 19965
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 19966
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 19967
            //MUL
            t3.xyz = vec3(t31) * t3.xyz;
            //Instruction 19968
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 19969
        //ELSE
        } else {
            //Instruction 19970
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 19971
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 19972
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19973
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 19974
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 19975
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 19976
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 19977
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 19978
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 19979
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 19980
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 19981
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 19982
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 19983
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 19984
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 19985
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 19986
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 19987
            //LT
            tb0 = t2.w<0.0;
            //Instruction 19988
            //MOV
            t2.y = (-t2.w);
            //Instruction 19989
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 19990
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 19991
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 19992
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 19993
            //ADD
            t31 = (-t0.x) + t6.x;
            //Instruction 19994
            //MAD
            t0.x = t6.y * t31 + t0.x;
            //Instruction 19995
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 19996
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 19997
            //ADD
            t33 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 19998
            //MUL
            t33 = t33 * t5.x;
            //Instruction 19999
            //MAD
            t0.x = t0.x * t31 + t33;
            //Instruction 20000
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20001
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20002
        //ENDIF
        }
        //Instruction 20003
    //ELSE
    } else {
        //Instruction 20004
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20005
    //ENDIF
    }
    //Instruction 20006
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20007
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20008
    //DIV
    t31 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20009
    //MAD
    t31 = (-t31) * 0.250000 + t3.y;
    //Instruction 20010
    //MAX
    t31 = max(t31, 0.0);
    //Instruction 20011
    //MUL
    t31 = t31 * _ST_WindGlobal.z;
    //Instruction 20012
    //NE
    tb33 = t31!=0.0;
    //Instruction 20013
    //LOG
    t4.x = log2(t31);
    //Instruction 20014
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20015
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20016
    //MOVC
    t31 = (tb33) ? t4.x : t31;
    //Instruction 20017
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20018
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20019
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20020
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20021
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20022
    //MUL
    t24.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20023
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20024
    //MAD
    t4.xy = t24.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20025
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20026
    //MAD
    t33 = t4.y * t4.y + t4.x;
    //Instruction 20027
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20028
    //MAD
    t33 = _ST_WindGlobal.y * t33 + t4.x;
    //Instruction 20029
    //MUL
    t31 = t31 * t33;
    //Instruction 20030
    //MAD
    t4.xz = t20.xy * vec2(t31) + t3.xz;
    //Instruction 20031
    //MOV
    t4.y = t3.y;
    //Instruction 20032
    //DP3
    t20.x = dot(t4.xyz, t4.xyz);
    //Instruction 20033
    //RSQ
    t20.x = inversesqrt(t20.x);
    //Instruction 20034
    //MUL
    t4.xyz = t20.xxx * t4.xyz;
    //Instruction 20035
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20036
    //MOVC
    t0.xyz = (bool(tb10)) ? t0.xzw : t3.xyz;
    //Instruction 20037
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20038
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20039
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20040
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20041
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20042
    //MUL
    t30 = t3.y * _ProjectionParams.x;
    //Instruction 20043
    //MUL
    t4.w = t30 * 0.500000;
    //Instruction 20044
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20045
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20046
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20047
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20048
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20049
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20050
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20051
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20052
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20053
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20054
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 20055
    //MOV
    t5.x = _World2Object[0].x;
    //Instruction 20056
    //MOV
    t5.y = _World2Object[1].x;
    //Instruction 20057
    //MOV
    t5.z = _World2Object[2].x;
    //Instruction 20058
    //MOV
    t6.x = _World2Object[0].y;
    //Instruction 20059
    //MOV
    t6.y = _World2Object[1].y;
    //Instruction 20060
    //MOV
    t6.z = _World2Object[2].y;
    //Instruction 20061
    //MUL
    t6.xyz = t6.xyz * in_NORMAL0.yyy;
    //Instruction 20062
    //MAD
    t5.xyz = t5.xyz * in_NORMAL0.xxx + t6.xyz;
    //Instruction 20063
    //MOV
    t6.x = _World2Object[0].z;
    //Instruction 20064
    //MOV
    t6.y = _World2Object[1].z;
    //Instruction 20065
    //MOV
    t6.z = _World2Object[2].z;
    //Instruction 20066
    //MAD
    t5.xyz = t6.xyz * in_NORMAL0.zzz + t5.xyz;
    //Instruction 20067
    //DP3
    t30 = dot(t5.xyz, t5.xyz);
    //Instruction 20068
    //RSQ
    t30 = inversesqrt(t30);
    //Instruction 20069
    //MUL
    t5.xyz = vec3(t30) * t5.xyz;
    //Instruction 20070
    //MUL
    t16_2 = t5.yzzx * t5.xyzz;
    //Instruction 20071
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 20072
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 20073
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 20074
    //MUL
    t16_37 = t5.y * t5.y;
    //Instruction 20075
    //MAD
    t16_37 = t5.x * t5.x + (-t16_37);
    //Instruction 20076
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_37) + t16_7.xyz;
    //Instruction 20077
    //ADD
    t2 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 20078
    //ADD
    t6 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 20079
    //ADD
    t8 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 20080
    //MUL
    t9 = t6 * t6;
    //Instruction 20081
    //MAD
    t9 = t2 * t2 + t9;
    //Instruction 20082
    //MAD
    t9 = t8 * t8 + t9;
    //Instruction 20083
    //MUL
    t6 = t5.yyyy * t6;
    //Instruction 20084
    //MAD
    t2 = t2 * t5.xxxx + t6;
    //Instruction 20085
    //MAD
    t2 = t8 * t5.zzzz + t2;
    //Instruction 20086
    //RSQ
    t6 = inversesqrt(t9);
    //Instruction 20087
    //MUL
    t2 = t2 * t6;
    //Instruction 20088
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20089
    //MAD
    t6 = t9 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20090
    //DIV
    t6 = vec4(1.0, 1.0, 1.0, 1.0) / t6;
    //Instruction 20091
    //MUL
    t2 = t2 * t6;
    //Instruction 20092
    //MUL
    t6.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 20093
    //MAD
    t6.xyz = unity_LightColor[0].xyz * t2.xxx + t6.xyz;
    //Instruction 20094
    //MAD
    t6.xyz = unity_LightColor[2].xyz * t2.zzz + t6.xyz;
    //Instruction 20095
    //MAD
    t6.xyz = unity_LightColor[3].xyz * t2.www + t6.xyz;
    //Instruction 20096
    //ADD
    t6.xyz = t6.xyz + t16_7.xyz;
    //Instruction 20097
    //MUL
    t2 = t0.yyyy * _Object2World[1];
    //Instruction 20098
    //MAD
    t2 = _Object2World[0] * t0.xxxx + t2;
    //Instruction 20099
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t2;
    //Instruction 20100
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20101
    //MUL
    t2 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20102
    //MAD
    t2 = unity_World2Shadow[0][0] * t0.xxxx + t2;
    //Instruction 20103
    //MAD
    t2 = unity_World2Shadow[0][2] * t0.zzzz + t2;
    //Instruction 20104
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t2;
    //Instruction 20105
    //MOV
    vs_TEXCOORD0.xyz = t5.xyz;
    //Instruction 20106
    //MOV
    vs_TEXCOORD1.xyz = t4.xyz;
    //Instruction 20107
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20108
    //MOV
    vs_TEXCOORD7 = t0;
    //Instruction 20109
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20110
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 20111
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20112
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20113
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 20114
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 20115
    //MOV
    vs_TEXCOORD6.xyz = t6.xyz;
    //Instruction 20116
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec4 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_15;
mediump float t16_18;
void main()
{
    //Instruction 19846
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 19847
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 19848
    //MOV
    t1.x = t16_0.x;
    //Instruction 19849
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 19850
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 19851
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 19852
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 19853
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 19854
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 19855
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 19856
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 19857
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 19858
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 19859
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 19860
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 19861
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 19862
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 19863
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 19864
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 19865
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 19866
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 19867
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 19868
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 19869
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 19870
    //MOV
    t16_1.w = 1.0;
    //Instruction 19871
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 19872
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 19873
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 19874
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 19875
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 19876
    //SAMPLE_C_LZ
    vec3 txVec43 = vec3(vs_TEXCOORD7.xy,vs_TEXCOORD7.z);
    t16_15 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec43, 0.0);
    //Instruction 19877
    //ADD
    t16_18 = (-_LightShadowData.x) + 1.0;
    //Instruction 19878
    //MAD
    t16_15 = t16_15 * t16_18 + _LightShadowData.x;
    //Instruction 19879
    //MUL
    t16_4.xyz = vec3(t16_15) * _LightColor0.xyz;
    //Instruction 19880
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 19881
    //DP3
    t16_15 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 19882
    //MAX
    t16_15 = max(t16_15, 0.0);
    //Instruction 19883
    //MAD
    t16_0.xyz = t16_0.xyz * vec3(t16_15) + t16_3.xyz;
    //Instruction 19884
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 19885
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 19886
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec3 tmpvar_61;
  tmpvar_61 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * _glesNormal.x)
   + 
    (v_63.xyz * _glesNormal.y)
  ) + (v_64.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_65;
  highp mat3 tmpvar_66;
  tmpvar_66[0] = _Object2World[0].xyz;
  tmpvar_66[1] = _Object2World[1].xyz;
  tmpvar_66[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize((tmpvar_66 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_67;
  lowp vec3 tmpvar_68;
  tmpvar_68 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_69;
  tmpvar_69 = (tmpvar_68 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_69;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.x;
  tmpvar_70.y = worldBinormal_3.x;
  tmpvar_70.z = worldNormal_5.x;
  tmpvar_70.w = tmpvar_61.x;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.y;
  tmpvar_71.y = worldBinormal_3.y;
  tmpvar_71.z = worldNormal_5.y;
  tmpvar_71.w = tmpvar_61.y;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.z;
  tmpvar_72.y = worldBinormal_3.z;
  tmpvar_72.z = worldNormal_5.z;
  tmpvar_72.w = tmpvar_61.z;
  lowp vec4 tmpvar_73;
  tmpvar_73.w = 1.0;
  tmpvar_73.xyz = worldNormal_5;
  mediump vec4 normal_74;
  normal_74 = tmpvar_73;
  mediump vec3 x2_75;
  mediump vec4 tmpvar_76;
  tmpvar_76 = (normal_74.xyzz * normal_74.yzzx);
  x2_75.x = dot (unity_SHBr, tmpvar_76);
  x2_75.y = dot (unity_SHBg, tmpvar_76);
  x2_75.z = dot (unity_SHBb, tmpvar_76);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_70;
  xlv_TEXCOORD1 = tmpvar_71;
  xlv_TEXCOORD2 = tmpvar_72;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_8;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = screenPos_56;
  xlv_TEXCOORD7 = (x2_75 + (unity_SHC.xyz * (
    (normal_74.x * normal_74.x)
   - 
    (normal_74.y * normal_74.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_3.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_3.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_3.z = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_3;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_23;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD7 + x1_26);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_8 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_9;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_8 * tmpvar_24));
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 20194
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20195
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20196
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 20197
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20198
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 20199
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 20200
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 20201
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 20202
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20203
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 20204
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 20205
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20206
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20207
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20208
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 20209
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20210
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 20211
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 20212
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 20213
    //IF
    if(tb28){
        //Instruction 20214
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 20215
        //IF
        if(tb28){
            //Instruction 20216
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20217
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20218
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20219
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 20220
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 20221
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 20222
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20223
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20224
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20225
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20226
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 20227
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 20228
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20229
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20230
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 20231
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20232
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20233
            //FRC
            t2 = fract(t2);
            //Instruction 20234
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20235
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 20236
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20237
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20238
            //ADD
            t2 = t2 + t2;
            //Instruction 20239
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 20240
            //LT
            tb30 = t5.w<0.0;
            //Instruction 20241
            //MOV
            t5.y = (-t5.w);
            //Instruction 20242
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20243
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 20244
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 20245
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 20246
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 20247
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 20248
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 20249
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20250
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20251
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 20252
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 20253
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20254
            //MUL
            t30 = t30 * t31;
            //Instruction 20255
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 20256
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20257
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20258
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20259
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20260
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20261
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20262
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20263
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20264
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20265
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20266
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20267
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20268
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 20269
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20270
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 20271
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 20272
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20273
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20274
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 20275
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20276
        //ELSE
        } else {
            //Instruction 20277
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20278
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20279
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20280
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20281
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20282
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20283
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20284
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20285
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20286
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20287
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20288
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20289
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20290
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20291
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20292
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20293
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20294
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20295
            //MOV
            t2.y = (-t2.w);
            //Instruction 20296
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20297
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20298
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20299
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20300
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 20301
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 20302
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20303
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20304
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20305
            //MUL
            t30 = t30 * t5.x;
            //Instruction 20306
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 20307
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20308
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20309
        //ENDIF
        }
        //Instruction 20310
    //ELSE
    } else {
        //Instruction 20311
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20312
    //ENDIF
    }
    //Instruction 20313
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20314
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20315
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20316
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 20317
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 20318
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 20319
    //NE
    tb30 = t28!=0.0;
    //Instruction 20320
    //LOG
    t4.x = log2(t28);
    //Instruction 20321
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20322
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20323
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 20324
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20325
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20326
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20327
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20328
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20329
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20330
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20331
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20332
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20333
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 20334
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20335
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 20336
    //MUL
    t28 = t28 * t30;
    //Instruction 20337
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 20338
    //MOV
    t4.y = t3.y;
    //Instruction 20339
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 20340
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20341
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 20342
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20343
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 20344
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20345
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20346
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20347
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20348
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20349
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 20350
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 20351
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20352
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20353
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20354
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20355
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20356
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20357
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20358
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20359
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20360
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 20361
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 20362
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 20363
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 20364
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 20365
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 20366
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 20367
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 20368
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 20369
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 20370
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 20371
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 20372
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 20373
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 20374
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 20375
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 20376
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 20377
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 20378
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 20379
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 20380
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 20381
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 20382
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 20383
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 20384
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 20385
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 20386
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 20387
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 20388
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 20389
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 20390
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 20391
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 20392
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 20393
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 20394
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 20395
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 20396
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 20397
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 20398
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 20399
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 20400
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 20401
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 20402
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 20403
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 20404
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 20405
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 20406
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20407
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 20408
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20409
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20410
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 20411
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 20412
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 20153
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 20154
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 20155
    //MOV
    t1.x = t16_0.x;
    //Instruction 20156
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 20157
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20158
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 20159
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20160
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20161
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 20162
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 20163
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 20164
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 20165
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 20166
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 20167
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 20168
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 20169
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 20170
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 20171
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 20172
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 20173
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 20174
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 20175
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 20176
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 20177
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 20178
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 20179
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 20180
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 20181
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 20182
    //MOV
    t1.w = 1.0;
    //Instruction 20183
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 20184
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 20185
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 20186
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20187
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20188
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD7.xyz;
    //Instruction 20189
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 20190
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 20191
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 20192
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20193
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.x;
  tmpvar_71.y = worldBinormal_3.x;
  tmpvar_71.z = worldNormal_5.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.y;
  tmpvar_72.y = worldBinormal_3.y;
  tmpvar_72.z = worldNormal_5.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.z;
  tmpvar_73.y = worldBinormal_3.z;
  tmpvar_73.z = worldNormal_5.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_5;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = screenPos_57;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_4.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_4.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_4.z = tmpvar_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_26;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (xlv_TEXCOORD7 + x1_30);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_9 * tmpvar_27) * diff_33);
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_9 * tmpvar_28));
  c_5.xyz = c_31.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.x;
  tmpvar_71.y = worldBinormal_3.x;
  tmpvar_71.z = worldNormal_5.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.y;
  tmpvar_72.y = worldBinormal_3.y;
  tmpvar_72.z = worldNormal_5.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.z;
  tmpvar_73.y = worldBinormal_3.z;
  tmpvar_73.z = worldNormal_5.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_5;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  highp vec3 lightColor0_78;
  lightColor0_78 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_79;
  lightColor1_79 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_80;
  lightColor2_80 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_81;
  lightColor3_81 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_82;
  lightAttenSq_82 = unity_4LightAtten0;
  highp vec3 normal_83;
  normal_83 = worldNormal_5;
  highp vec3 col_84;
  highp vec4 ndotl_85;
  highp vec4 lengthSq_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = (unity_4LightPosX0 - tmpvar_62.x);
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosY0 - tmpvar_62.y);
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_4LightPosZ0 - tmpvar_62.z);
  lengthSq_86 = (tmpvar_87 * tmpvar_87);
  lengthSq_86 = (lengthSq_86 + (tmpvar_88 * tmpvar_88));
  lengthSq_86 = (lengthSq_86 + (tmpvar_89 * tmpvar_89));
  ndotl_85 = (tmpvar_87 * normal_83.x);
  ndotl_85 = (ndotl_85 + (tmpvar_88 * normal_83.y));
  ndotl_85 = (ndotl_85 + (tmpvar_89 * normal_83.z));
  highp vec4 tmpvar_90;
  tmpvar_90 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_85 * inversesqrt(lengthSq_86)));
  ndotl_85 = tmpvar_90;
  highp vec4 tmpvar_91;
  tmpvar_91 = (tmpvar_90 * (1.0/((1.0 + 
    (lengthSq_86 * lightAttenSq_82)
  ))));
  col_84 = (lightColor0_78 * tmpvar_91.x);
  col_84 = (col_84 + (lightColor1_79 * tmpvar_91.y));
  col_84 = (col_84 + (lightColor2_80 * tmpvar_91.z));
  col_84 = (col_84 + (lightColor3_81 * tmpvar_91.w));
  tmpvar_7 = ((x2_76 + (unity_SHC.xyz * 
    ((normal_75.x * normal_75.x) - (normal_75.y * normal_75.y))
  )) + col_84);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = screenPos_57;
  xlv_TEXCOORD7 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec3 worldN_3;
  lowp vec4 c_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 blendColor_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_9 = (diffuseColor_12.w * _Color.w);
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_11 = tmpvar_17;
  diffuseColor_12.xyz = mix (blendColor_11.xyz, diffuseColor_12.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_10 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_12.xyz * tmpvar_6.xyz);
  lowp vec3 tmpvar_19;
  tmpvar_19 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_20;
  tmpvar_20 = dot (xlv_TEXCOORD0.xyz, tmpvar_19);
  worldN_3.x = tmpvar_20;
  highp float tmpvar_21;
  tmpvar_21 = dot (xlv_TEXCOORD1.xyz, tmpvar_19);
  worldN_3.y = tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD2.xyz, tmpvar_19);
  worldN_3.z = tmpvar_22;
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_23;
  normalWorld_23 = worldN_3;
  mediump vec3 tmpvar_24;
  mediump vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = normalWorld_23;
  mediump vec3 x1_26;
  x1_26.x = dot (unity_SHAr, tmpvar_25);
  x1_26.y = dot (unity_SHAg, tmpvar_25);
  x1_26.z = dot (unity_SHAb, tmpvar_25);
  tmpvar_24 = (xlv_TEXCOORD7 + x1_26);
  lowp vec4 c_27;
  lowp vec4 c_28;
  lowp float diff_29;
  mediump float tmpvar_30;
  tmpvar_30 = max (0.0, dot (worldN_3, tmpvar_2));
  diff_29 = tmpvar_30;
  c_28.xyz = ((tmpvar_8 * tmpvar_1) * diff_29);
  c_28.w = tmpvar_9;
  c_27.w = c_28.w;
  c_27.xyz = (c_28.xyz + (tmpvar_8 * tmpvar_24));
  c_4.xyz = c_27.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec4 t16_6;
highp vec4 t7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec2 t11;
bool tb11;
highp vec2 t22;
highp vec2 t26;
highp vec2 t27;
highp float t33;
highp float t34;
bool tb34;
highp float t36;
bool tb36;
highp float t37;
mediump float t16_41;
void main()
{
    //Instruction 20454
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20455
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20456
    //ADD
    t11.x = t0.x + _Object2World[3].z;
    //Instruction 20457
    //ADD
    t22.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20458
    //ADD
    t11.y = t22.x + in_NORMAL0.x;
    //Instruction 20459
    //FRC
    t11.xy = fract(t11.xy);
    //Instruction 20460
    //MAD
    t11.x = t11.y * 0.500000 + t11.x;
    //Instruction 20461
    //ADD
    t11.x = t11.x + -0.300000;
    //Instruction 20462
    //MUL
    t1.z = t11.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20463
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 20464
    //LT
    tb11 = 0.0<t16_2;
    //Instruction 20465
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20466
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20467
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20468
    //DP3
    t22.x = dot(t3.xyz, t3.xyz);
    //Instruction 20469
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 20470
    //MUL
    t22.xy = t22.xx * t3.xz;
    //Instruction 20471
    //AND
    t22.xy = mix(vec2(0.0, 0.0), t22.xy, bvec2(tb11));
    //Instruction 20472
    //GE
    tb34 = t16_2>=3.000000;
    //Instruction 20473
    //IF
    if(tb34){
        //Instruction 20474
        //EQ
        tb34 = t16_2==5.000000;
        //Instruction 20475
        //IF
        if(tb34){
            //Instruction 20476
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20477
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20478
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20479
            //DP3
            t34 = dot(t3.xyz, t3.xyz);
            //Instruction 20480
            //RSQ
            t34 = inversesqrt(t34);
            //Instruction 20481
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 20482
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20483
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20484
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20485
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20486
            //ADD
            t34 = t0.x + _ST_WindBranch.x;
            //Instruction 20487
            //ADD
            t2.x = t34 + in_TEXCOORD0.w;
            //Instruction 20488
            //MAD
            t2.y = t34 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20489
            //MUL
            t36 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20490
            //MUL
            t2.z = t36 * 0.500000;
            //Instruction 20491
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20492
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20493
            //FRC
            t2 = fract(t2);
            //Instruction 20494
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20495
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 20496
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20497
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20498
            //ADD
            t2 = t2 + t2;
            //Instruction 20499
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 20500
            //LT
            tb36 = t5.w<0.0;
            //Instruction 20501
            //MOV
            t5.y = (-t5.w);
            //Instruction 20502
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20503
            //MOVC
            t5.xy = (bool(tb36)) ? t5.xy : t5.zw;
            //Instruction 20504
            //MAD
            t36 = (-t2.y) * t2.z + t5.x;
            //Instruction 20505
            //MAD
            t36 = t5.y * t36 + t5.w;
            //Instruction 20506
            //ADD
            t37 = (-t36) + t5.x;
            //Instruction 20507
            //MAD
            t36 = t5.y * t37 + t36;
            //Instruction 20508
            //MUL
            t36 = t36 * _ST_WindBranchTwitch.x;
            //Instruction 20509
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20510
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20511
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 20512
            //MAD
            t36 = t36 * t37 + t5.x;
            //Instruction 20513
            //MAD
            t37 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20514
            //MUL
            t36 = t36 * t37;
            //Instruction 20515
            //MUL
            t4.xyz = vec3(t36) * t4.xyz;
            //Instruction 20516
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20517
            //MAD
            t5.x = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20518
            //MUL
            t34 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20519
            //MAD
            t5.y = t34 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20520
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20521
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20522
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20523
            //MUL
            t27.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20524
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20525
            //MAD
            t5.xy = t27.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20526
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20527
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20528
            //MUL
            t34 = t5.x * t5.y;
            //Instruction 20529
            //MAD
            t34 = (-t34) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20530
            //MUL
            t36 = t2.w * _ST_WindVector.w;
            //Instruction 20531
            //MAD
            t34 = t36 * _ST_WindBranchWhip.x + t34;
            //Instruction 20532
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20533
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20534
            //MUL
            t3.xyz = vec3(t34) * t3.xyz;
            //Instruction 20535
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20536
        //ELSE
        } else {
            //Instruction 20537
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20538
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20539
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20540
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20541
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20542
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20543
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20544
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20545
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20546
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20547
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20548
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20549
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20550
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20551
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20552
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20553
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20554
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20555
            //MOV
            t2.y = (-t2.w);
            //Instruction 20556
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20557
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20558
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20559
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20560
            //ADD
            t34 = (-t0.x) + t6.x;
            //Instruction 20561
            //MAD
            t0.x = t6.y * t34 + t0.x;
            //Instruction 20562
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20563
            //ADD
            t34 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20564
            //ADD
            t36 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20565
            //MUL
            t36 = t36 * t5.x;
            //Instruction 20566
            //MAD
            t0.x = t0.x * t34 + t36;
            //Instruction 20567
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20568
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20569
        //ENDIF
        }
        //Instruction 20570
    //ELSE
    } else {
        //Instruction 20571
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20572
    //ENDIF
    }
    //Instruction 20573
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20574
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20575
    //DIV
    t34 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20576
    //MAD
    t34 = (-t34) * 0.250000 + t3.y;
    //Instruction 20577
    //MAX
    t34 = max(t34, 0.0);
    //Instruction 20578
    //MUL
    t34 = t34 * _ST_WindGlobal.z;
    //Instruction 20579
    //NE
    tb36 = t34!=0.0;
    //Instruction 20580
    //LOG
    t4.x = log2(t34);
    //Instruction 20581
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20582
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20583
    //MOVC
    t34 = (tb36) ? t4.x : t34;
    //Instruction 20584
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20585
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20586
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20587
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20588
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20589
    //MUL
    t26.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20590
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20591
    //MAD
    t4.xy = t26.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20592
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20593
    //MAD
    t36 = t4.y * t4.y + t4.x;
    //Instruction 20594
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20595
    //MAD
    t36 = _ST_WindGlobal.y * t36 + t4.x;
    //Instruction 20596
    //MUL
    t34 = t34 * t36;
    //Instruction 20597
    //MAD
    t4.xz = t22.xy * vec2(t34) + t3.xz;
    //Instruction 20598
    //MOV
    t4.y = t3.y;
    //Instruction 20599
    //DP3
    t22.x = dot(t4.xyz, t4.xyz);
    //Instruction 20600
    //RSQ
    t22.x = inversesqrt(t22.x);
    //Instruction 20601
    //MUL
    t4.xyz = t22.xxx * t4.xyz;
    //Instruction 20602
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20603
    //MOVC
    t0.xyz = (bool(tb11)) ? t0.xzw : t3.xyz;
    //Instruction 20604
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20605
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20606
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20607
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20608
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20609
    //MUL
    t33 = t3.y * _ProjectionParams.x;
    //Instruction 20610
    //MUL
    t4.w = t33 * 0.500000;
    //Instruction 20611
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20612
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20613
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20614
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20615
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20616
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20617
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20618
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20619
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20620
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 20621
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 20622
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 20623
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 20624
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 20625
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 20626
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 20627
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 20628
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 20629
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 20630
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 20631
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 20632
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 20633
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 20634
    //DP3
    t33 = dot(t2.xyw, t2.xyw);
    //Instruction 20635
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 20636
    //MUL
    t2 = vec4(t33) * t2;
    //Instruction 20637
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 20638
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 20639
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 20640
    //DP3
    t33 = dot(t4.xyz, t4.xyz);
    //Instruction 20641
    //RSQ
    t33 = inversesqrt(t33);
    //Instruction 20642
    //MUL
    t4.xyz = vec3(t33) * t4.xyz;
    //Instruction 20643
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 20644
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 20645
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 20646
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 20647
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 20648
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 20649
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 20650
    //MUL
    t16_41 = t2.y * t2.y;
    //Instruction 20651
    //MAD
    t16_41 = t2.x * t2.x + (-t16_41);
    //Instruction 20652
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_41) + t16_8.xyz;
    //Instruction 20653
    //ADD
    t6 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 20654
    //ADD
    t7 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 20655
    //ADD
    t9 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 20656
    //MUL
    t10 = t7 * t7;
    //Instruction 20657
    //MAD
    t10 = t6 * t6 + t10;
    //Instruction 20658
    //MAD
    t10 = t9 * t9 + t10;
    //Instruction 20659
    //MUL
    t7 = t2.yyyy * t7;
    //Instruction 20660
    //MAD
    t6 = t6 * t2.xxxx + t7;
    //Instruction 20661
    //MAD
    t6 = t9 * t2.wwww + t6;
    //Instruction 20662
    //RSQ
    t7 = inversesqrt(t10);
    //Instruction 20663
    //MUL
    t6 = t6 * t7;
    //Instruction 20664
    //MAX
    t6 = max(t6, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20665
    //MAD
    t7 = t10 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20666
    //DIV
    t7 = vec4(1.0, 1.0, 1.0, 1.0) / t7;
    //Instruction 20667
    //MUL
    t6 = t6 * t7;
    //Instruction 20668
    //MUL
    t9.xyz = t6.yyy * unity_LightColor[1].xyz;
    //Instruction 20669
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t6.xxx + t9.xyz;
    //Instruction 20670
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t6.zzz + t9.xyz;
    //Instruction 20671
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t6.www + t9.xyz;
    //Instruction 20672
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 20673
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 20674
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 20675
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 20676
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 20677
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 20678
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 20679
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 20680
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 20681
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 20682
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 20683
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 20684
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 20685
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 20686
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20687
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 20688
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20689
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20690
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 20691
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 20692
    //MOV
    vs_TEXCOORD7.xyz = t9.xyz;
    //Instruction 20693
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 20413
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 20414
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 20415
    //MOV
    t1.x = t16_0.x;
    //Instruction 20416
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 20417
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20418
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 20419
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20420
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20421
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 20422
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 20423
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 20424
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 20425
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 20426
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 20427
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 20428
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 20429
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 20430
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 20431
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 20432
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 20433
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 20434
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 20435
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 20436
    //MUL
    t16_3.xyz = t16_0.xyz * _LightColor0.xyz;
    //Instruction 20437
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 20438
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 20439
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 20440
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 20441
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 20442
    //MOV
    t1.w = 1.0;
    //Instruction 20443
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 20444
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 20445
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 20446
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20447
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20448
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD7.xyz;
    //Instruction 20449
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 20450
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 20451
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 20452
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20453
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_16);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.x;
  tmpvar_72.y = worldBinormal_3.x;
  tmpvar_72.z = worldNormal_5.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.y;
  tmpvar_73.y = worldBinormal_3.y;
  tmpvar_73.z = worldNormal_5.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_4.z;
  tmpvar_74.y = worldBinormal_3.z;
  tmpvar_74.z = worldNormal_5.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_5;
  mediump vec4 normal_76;
  normal_76 = tmpvar_75;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_5;
  highp vec3 col_85;
  highp vec4 ndotl_86;
  highp vec4 lengthSq_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosZ0 - tmpvar_63.z);
  lengthSq_87 = (tmpvar_88 * tmpvar_88);
  lengthSq_87 = (lengthSq_87 + (tmpvar_89 * tmpvar_89));
  lengthSq_87 = (lengthSq_87 + (tmpvar_90 * tmpvar_90));
  ndotl_86 = (tmpvar_88 * normal_84.x);
  ndotl_86 = (ndotl_86 + (tmpvar_89 * normal_84.y));
  ndotl_86 = (ndotl_86 + (tmpvar_90 * normal_84.z));
  highp vec4 tmpvar_91;
  tmpvar_91 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_86 * inversesqrt(lengthSq_87)));
  ndotl_86 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (tmpvar_91 * (1.0/((1.0 + 
    (lengthSq_87 * lightAttenSq_83)
  ))));
  col_85 = (lightColor0_79 * tmpvar_92.x);
  col_85 = (col_85 + (lightColor1_80 * tmpvar_92.y));
  col_85 = (col_85 + (lightColor2_81 * tmpvar_92.z));
  col_85 = (col_85 + (lightColor3_82 * tmpvar_92.w));
  tmpvar_7 = ((x2_77 + (unity_SHC.xyz * 
    ((normal_76.x * normal_76.x) - (normal_76.y * normal_76.y))
  )) + col_85);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = screenPos_58;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float tmpvar_21;
  highp float tmpvar_22;
  tmpvar_22 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD8).x > 
    (xlv_TEXCOORD8.z / xlv_TEXCOORD8.w)
  )), _LightShadowData.x);
  tmpvar_21 = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_4.x = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_4.y = tmpvar_24;
  highp float tmpvar_25;
  tmpvar_25 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_4.z = tmpvar_25;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_21;
  mediump vec3 normalWorld_26;
  normalWorld_26 = worldN_4;
  mediump vec3 tmpvar_27;
  mediump vec3 tmpvar_28;
  mediump vec4 tmpvar_29;
  tmpvar_29.w = 1.0;
  tmpvar_29.xyz = normalWorld_26;
  mediump vec3 x1_30;
  x1_30.x = dot (unity_SHAr, tmpvar_29);
  x1_30.y = dot (unity_SHAg, tmpvar_29);
  x1_30.z = dot (unity_SHAb, tmpvar_29);
  tmpvar_28 = (xlv_TEXCOORD7 + x1_30);
  tmpvar_27 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_27;
  lowp vec4 c_31;
  lowp vec4 c_32;
  lowp float diff_33;
  mediump float tmpvar_34;
  tmpvar_34 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_33 = tmpvar_34;
  c_32.xyz = ((tmpvar_9 * tmpvar_27) * diff_33);
  c_32.w = tmpvar_10;
  c_31.w = c_32.w;
  c_31.xyz = (c_32.xyz + (tmpvar_9 * tmpvar_28));
  c_5.xyz = c_31.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_11;
  highp vec3 tmpvar_14;
  tmpvar_14.xy = _glesMultiTexCoord2.zw;
  tmpvar_14.z = _glesMultiTexCoord1.w;
  tmpvar_10 = tmpvar_14;
  highp vec4 tmpvar_15;
  tmpvar_15 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  highp vec3 tmpvar_19;
  tmpvar_19 = tmpvar_1.xyz;
  FinalPosition_18 = tmpvar_19;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = tmpvar_19;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (_glesVertex.xyz + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_16 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_18;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_18 = vPos_48;
  };
  tmpvar_15.xyz = FinalPosition_18;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_15);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_62;
  tmpvar_62 = (_Object2World * tmpvar_15).xyz;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * _glesNormal.x)
   + 
    (v_64.xyz * _glesNormal.y)
  ) + (v_65.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_66;
  highp mat3 tmpvar_67;
  tmpvar_67[0] = _Object2World[0].xyz;
  tmpvar_67[1] = _Object2World[1].xyz;
  tmpvar_67[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize((tmpvar_67 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_68;
  lowp vec3 tmpvar_69;
  tmpvar_69 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_70;
  tmpvar_70 = (tmpvar_69 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_70;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.x;
  tmpvar_71.y = worldBinormal_3.x;
  tmpvar_71.z = worldNormal_5.x;
  tmpvar_71.w = tmpvar_62.x;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.y;
  tmpvar_72.y = worldBinormal_3.y;
  tmpvar_72.z = worldNormal_5.y;
  tmpvar_72.w = tmpvar_62.y;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.z;
  tmpvar_73.y = worldBinormal_3.z;
  tmpvar_73.z = worldNormal_5.z;
  tmpvar_73.w = tmpvar_62.z;
  lowp vec4 tmpvar_74;
  tmpvar_74.w = 1.0;
  tmpvar_74.xyz = worldNormal_5;
  mediump vec4 normal_75;
  normal_75 = tmpvar_74;
  mediump vec3 x2_76;
  mediump vec4 tmpvar_77;
  tmpvar_77 = (normal_75.xyzz * normal_75.yzzx);
  x2_76.x = dot (unity_SHBr, tmpvar_77);
  x2_76.y = dot (unity_SHBg, tmpvar_77);
  x2_76.z = dot (unity_SHBb, tmpvar_77);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_15));
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_71;
  xlv_TEXCOORD1 = tmpvar_72;
  xlv_TEXCOORD2 = tmpvar_73;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_10;
  xlv_TEXCOORD6 = screenPos_57;
  xlv_TEXCOORD7 = (x2_76 + (unity_SHC.xyz * (
    (normal_75.x * normal_75.x)
   - 
    (normal_75.y * normal_75.y)
  )));
  xlv_TEXCOORD8 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_21;
  shadow_21 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD7 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 20739
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20740
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20741
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 20742
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20743
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 20744
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 20745
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 20746
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 20747
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20748
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 20749
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 20750
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20751
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20752
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20753
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 20754
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20755
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 20756
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 20757
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 20758
    //IF
    if(tb28){
        //Instruction 20759
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 20760
        //IF
        if(tb28){
            //Instruction 20761
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20762
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20763
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20764
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 20765
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 20766
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 20767
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20768
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20769
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20770
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20771
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 20772
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 20773
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20774
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20775
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 20776
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20777
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20778
            //FRC
            t2 = fract(t2);
            //Instruction 20779
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20780
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 20781
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20782
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20783
            //ADD
            t2 = t2 + t2;
            //Instruction 20784
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 20785
            //LT
            tb30 = t5.w<0.0;
            //Instruction 20786
            //MOV
            t5.y = (-t5.w);
            //Instruction 20787
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20788
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 20789
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 20790
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 20791
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 20792
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 20793
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 20794
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20795
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20796
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 20797
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 20798
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20799
            //MUL
            t30 = t30 * t31;
            //Instruction 20800
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 20801
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20802
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20803
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20804
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20805
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20806
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20807
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20808
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20809
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20810
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20811
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20812
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20813
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 20814
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20815
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 20816
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 20817
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20818
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20819
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 20820
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20821
        //ELSE
        } else {
            //Instruction 20822
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20823
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20824
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20825
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20826
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20827
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20828
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20829
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20830
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20831
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20832
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20833
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20834
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20835
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20836
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20837
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20838
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20839
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20840
            //MOV
            t2.y = (-t2.w);
            //Instruction 20841
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20842
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20843
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20844
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20845
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 20846
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 20847
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20848
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20849
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20850
            //MUL
            t30 = t30 * t5.x;
            //Instruction 20851
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 20852
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20853
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20854
        //ENDIF
        }
        //Instruction 20855
    //ELSE
    } else {
        //Instruction 20856
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20857
    //ENDIF
    }
    //Instruction 20858
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20859
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20860
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20861
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 20862
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 20863
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 20864
    //NE
    tb30 = t28!=0.0;
    //Instruction 20865
    //LOG
    t4.x = log2(t28);
    //Instruction 20866
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20867
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20868
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 20869
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20870
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20871
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20872
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20873
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20874
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20875
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20876
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20877
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20878
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 20879
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20880
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 20881
    //MUL
    t28 = t28 * t30;
    //Instruction 20882
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 20883
    //MOV
    t4.y = t3.y;
    //Instruction 20884
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 20885
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20886
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 20887
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20888
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 20889
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20890
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20891
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20892
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20893
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20894
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 20895
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 20896
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20897
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20898
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20899
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20900
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20901
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20902
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20903
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20904
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20905
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20906
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 20907
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 20908
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 20909
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 20910
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 20911
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 20912
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 20913
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 20914
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 20915
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 20916
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 20917
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 20918
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 20919
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 20920
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 20921
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 20922
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 20923
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 20924
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 20925
    //DP3
    t27 = dot(t5.xyz, t5.xyz);
    //Instruction 20926
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 20927
    //MUL
    t5.xyz = vec3(t27) * t5.xyz;
    //Instruction 20928
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 20929
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 20930
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 20931
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 20932
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 20933
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 20934
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 20935
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 20936
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 20937
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 20938
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 20939
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 20940
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 20941
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20942
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20943
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 20944
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 20945
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 20946
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 20947
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 20948
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 20949
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 20950
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 20951
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 20952
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 20953
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 20954
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 20955
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 20956
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 20957
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 20958
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 20959
    //MOV
    vs_TEXCOORD8 = t0;
    //Instruction 20960
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20961
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 20962
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20963
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20964
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 20965
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 20966
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD8;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 20694
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 20695
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 20696
    //MOV
    t1.x = t16_0.x;
    //Instruction 20697
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 20698
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20699
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 20700
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20701
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20702
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 20703
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 20704
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 20705
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 20706
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 20707
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 20708
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 20709
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 20710
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 20711
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 20712
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 20713
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 20714
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 20715
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 20716
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 20717
    //SAMPLE_C_LZ
    vec3 txVec48 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec48, 0.0);
    //Instruction 20718
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 20719
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 20720
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 20721
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 20722
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 20723
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 20724
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 20725
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 20726
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 20727
    //MOV
    t1.w = 1.0;
    //Instruction 20728
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 20729
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 20730
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 20731
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20732
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20733
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD7.xyz;
    //Instruction 20734
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 20735
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 20736
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 20737
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20738
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_10.xy = tmpvar_2.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_12;
  highp vec3 tmpvar_15;
  tmpvar_15.xy = _glesMultiTexCoord2.zw;
  tmpvar_15.z = _glesMultiTexCoord1.w;
  tmpvar_11 = tmpvar_15;
  highp vec4 tmpvar_16;
  tmpvar_16 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  highp vec3 tmpvar_20;
  tmpvar_20 = tmpvar_1.xyz;
  FinalPosition_19 = tmpvar_20;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = tmpvar_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = tmpvar_20;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (_glesVertex.xyz + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_17 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_19 = vPos_24;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_19;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_19 = vPos_49;
  };
  tmpvar_16.xyz = FinalPosition_19;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_16);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * _glesNormal.x)
   + 
    (v_65.xyz * _glesNormal.y)
  ) + (v_66.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_67;
  highp mat3 tmpvar_68;
  tmpvar_68[0] = _Object2World[0].xyz;
  tmpvar_68[1] = _Object2World[1].xyz;
  tmpvar_68[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize((tmpvar_68 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_69;
  lowp vec3 tmpvar_70;
  tmpvar_70 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_71;
  tmpvar_71 = (tmpvar_70 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_71;
  highp vec4 tmpvar_72;
  tmpvar_72.x = worldTangent_4.x;
  tmpvar_72.y = worldBinormal_3.x;
  tmpvar_72.z = worldNormal_5.x;
  tmpvar_72.w = tmpvar_63.x;
  highp vec4 tmpvar_73;
  tmpvar_73.x = worldTangent_4.y;
  tmpvar_73.y = worldBinormal_3.y;
  tmpvar_73.z = worldNormal_5.y;
  tmpvar_73.w = tmpvar_63.y;
  highp vec4 tmpvar_74;
  tmpvar_74.x = worldTangent_4.z;
  tmpvar_74.y = worldBinormal_3.z;
  tmpvar_74.z = worldNormal_5.z;
  tmpvar_74.w = tmpvar_63.z;
  lowp vec4 tmpvar_75;
  tmpvar_75.w = 1.0;
  tmpvar_75.xyz = worldNormal_5;
  mediump vec4 normal_76;
  normal_76 = tmpvar_75;
  mediump vec3 x2_77;
  mediump vec4 tmpvar_78;
  tmpvar_78 = (normal_76.xyzz * normal_76.yzzx);
  x2_77.x = dot (unity_SHBr, tmpvar_78);
  x2_77.y = dot (unity_SHBg, tmpvar_78);
  x2_77.z = dot (unity_SHBb, tmpvar_78);
  highp vec3 lightColor0_79;
  lightColor0_79 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_80;
  lightColor1_80 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_81;
  lightColor2_81 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_82;
  lightColor3_82 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_83;
  lightAttenSq_83 = unity_4LightAtten0;
  highp vec3 normal_84;
  normal_84 = worldNormal_5;
  highp vec3 col_85;
  highp vec4 ndotl_86;
  highp vec4 lengthSq_87;
  highp vec4 tmpvar_88;
  tmpvar_88 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_89;
  tmpvar_89 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_90;
  tmpvar_90 = (unity_4LightPosZ0 - tmpvar_63.z);
  lengthSq_87 = (tmpvar_88 * tmpvar_88);
  lengthSq_87 = (lengthSq_87 + (tmpvar_89 * tmpvar_89));
  lengthSq_87 = (lengthSq_87 + (tmpvar_90 * tmpvar_90));
  ndotl_86 = (tmpvar_88 * normal_84.x);
  ndotl_86 = (ndotl_86 + (tmpvar_89 * normal_84.y));
  ndotl_86 = (ndotl_86 + (tmpvar_90 * normal_84.z));
  highp vec4 tmpvar_91;
  tmpvar_91 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_86 * inversesqrt(lengthSq_87)));
  ndotl_86 = tmpvar_91;
  highp vec4 tmpvar_92;
  tmpvar_92 = (tmpvar_91 * (1.0/((1.0 + 
    (lengthSq_87 * lightAttenSq_83)
  ))));
  col_85 = (lightColor0_79 * tmpvar_92.x);
  col_85 = (col_85 + (lightColor1_80 * tmpvar_92.y));
  col_85 = (col_85 + (lightColor2_81 * tmpvar_92.z));
  col_85 = (col_85 + (lightColor3_82 * tmpvar_92.w));
  tmpvar_7 = ((x2_77 + (unity_SHC.xyz * 
    ((normal_76.x * normal_76.x) - (normal_76.y * normal_76.y))
  )) + col_85);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_16));
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_72;
  xlv_TEXCOORD1 = tmpvar_73;
  xlv_TEXCOORD2 = tmpvar_74;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD5 = tmpvar_11;
  xlv_TEXCOORD6 = screenPos_58;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
varying mediump vec4 xlv_TEXCOORD8;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec3 worldN_4;
  lowp vec4 c_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD3;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 blendColor_12;
  mediump vec4 diffuseColor_13;
  mediump vec2 projUV_14;
  mediump vec2 tmpvar_15;
  tmpvar_15 = (xlv_TEXCOORD6.xy / xlv_TEXCOORD6.z);
  projUV_14.x = tmpvar_15.x;
  projUV_14.y = ((fract(tmpvar_15.y) * 0.0625) + unity_LODFade.y);
  lowp float x_16;
  x_16 = (texture2D (_DitherMaskLOD2D, projUV_14).w - 0.5);
  if ((x_16 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_17;
  tmpvar_17 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_13 = tmpvar_17;
  tmpvar_10 = (diffuseColor_13.w * _Color.w);
  lowp vec4 tmpvar_18;
  tmpvar_18 = texture2D (_MainTex, xlv_TEXCOORD5.xy);
  blendColor_12 = tmpvar_18;
  diffuseColor_13.xyz = mix (blendColor_12.xyz, diffuseColor_13.xyz, vec3(clamp (xlv_TEXCOORD5.z, 0.0, 1.0)));
  mediump vec3 tmpvar_19;
  tmpvar_19 = mix (diffuseColor_13.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_11 = (max (diffuseColor_13.x, max (diffuseColor_13.y, diffuseColor_13.z)) / max (tmpvar_19.x, max (tmpvar_19.y, tmpvar_19.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_13.xyz = clamp ((tmpvar_19 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_13.xyz * tmpvar_7.xyz);
  lowp vec3 tmpvar_20;
  tmpvar_20 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  lowp float shadow_21;
  shadow_21 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD8.xyz) * (1.0 - _LightShadowData.x)));
  highp float tmpvar_22;
  tmpvar_22 = dot (xlv_TEXCOORD0.xyz, tmpvar_20);
  worldN_4.x = tmpvar_22;
  highp float tmpvar_23;
  tmpvar_23 = dot (xlv_TEXCOORD1.xyz, tmpvar_20);
  worldN_4.y = tmpvar_23;
  highp float tmpvar_24;
  tmpvar_24 = dot (xlv_TEXCOORD2.xyz, tmpvar_20);
  worldN_4.z = tmpvar_24;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_21;
  mediump vec3 normalWorld_25;
  normalWorld_25 = worldN_4;
  mediump vec3 tmpvar_26;
  mediump vec3 tmpvar_27;
  mediump vec4 tmpvar_28;
  tmpvar_28.w = 1.0;
  tmpvar_28.xyz = normalWorld_25;
  mediump vec3 x1_29;
  x1_29.x = dot (unity_SHAr, tmpvar_28);
  x1_29.y = dot (unity_SHAg, tmpvar_28);
  x1_29.z = dot (unity_SHAb, tmpvar_28);
  tmpvar_27 = (xlv_TEXCOORD7 + x1_29);
  tmpvar_26 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_26;
  lowp vec4 c_30;
  lowp vec4 c_31;
  lowp float diff_32;
  mediump float tmpvar_33;
  tmpvar_33 = max (0.0, dot (worldN_4, tmpvar_3));
  diff_32 = tmpvar_33;
  c_31.xyz = ((tmpvar_9 * tmpvar_26) * diff_32);
  c_31.w = tmpvar_10;
  c_30.w = c_31.w;
  c_30.xyz = (c_31.xyz + (tmpvar_9 * tmpvar_27));
  c_5.xyz = c_30.xyz;
  c_5.w = 1.0;
  gl_FragData[0] = c_5;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
out mediump vec4 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
highp vec4 t7;
mediump vec4 t16_7;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec2 t12;
bool tb12;
highp vec2 t24;
highp vec2 t28;
highp vec2 t29;
highp float t36;
highp float t37;
bool tb37;
highp float t39;
bool tb39;
highp float t40;
mediump float t16_44;
void main()
{
    //Instruction 20162
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20163
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20164
    //ADD
    t12.x = t0.x + _Object2World[3].z;
    //Instruction 20165
    //ADD
    t24.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20166
    //ADD
    t12.y = t24.x + in_NORMAL0.x;
    //Instruction 20167
    //FRC
    t12.xy = fract(t12.xy);
    //Instruction 20168
    //MAD
    t12.x = t12.y * 0.500000 + t12.x;
    //Instruction 20169
    //ADD
    t12.x = t12.x + -0.300000;
    //Instruction 20170
    //MUL
    t1.z = t12.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20171
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 20172
    //LT
    tb12 = 0.0<t16_2;
    //Instruction 20173
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20174
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20175
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20176
    //DP3
    t24.x = dot(t3.xyz, t3.xyz);
    //Instruction 20177
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 20178
    //MUL
    t24.xy = t24.xx * t3.xz;
    //Instruction 20179
    //AND
    t24.xy = mix(vec2(0.0, 0.0), t24.xy, bvec2(tb12));
    //Instruction 20180
    //GE
    tb37 = t16_2>=3.000000;
    //Instruction 20181
    //IF
    if(tb37){
        //Instruction 20182
        //EQ
        tb37 = t16_2==5.000000;
        //Instruction 20183
        //IF
        if(tb37){
            //Instruction 20184
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20185
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20186
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20187
            //DP3
            t37 = dot(t3.xyz, t3.xyz);
            //Instruction 20188
            //RSQ
            t37 = inversesqrt(t37);
            //Instruction 20189
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 20190
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20191
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20192
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20193
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20194
            //ADD
            t37 = t0.x + _ST_WindBranch.x;
            //Instruction 20195
            //ADD
            t2.x = t37 + in_TEXCOORD0.w;
            //Instruction 20196
            //MAD
            t2.y = t37 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20197
            //MUL
            t39 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20198
            //MUL
            t2.z = t39 * 0.500000;
            //Instruction 20199
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20200
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20201
            //FRC
            t2 = fract(t2);
            //Instruction 20202
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20203
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 20204
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20205
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20206
            //ADD
            t2 = t2 + t2;
            //Instruction 20207
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 20208
            //LT
            tb39 = t5.w<0.0;
            //Instruction 20209
            //MOV
            t5.y = (-t5.w);
            //Instruction 20210
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20211
            //MOVC
            t5.xy = (bool(tb39)) ? t5.xy : t5.zw;
            //Instruction 20212
            //MAD
            t39 = (-t2.y) * t2.z + t5.x;
            //Instruction 20213
            //MAD
            t39 = t5.y * t39 + t5.w;
            //Instruction 20214
            //ADD
            t40 = (-t39) + t5.x;
            //Instruction 20215
            //MAD
            t39 = t5.y * t40 + t39;
            //Instruction 20216
            //MUL
            t39 = t39 * _ST_WindBranchTwitch.x;
            //Instruction 20217
            //ADD
            t40 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20218
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20219
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 20220
            //MAD
            t39 = t39 * t40 + t5.x;
            //Instruction 20221
            //MAD
            t40 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20222
            //MUL
            t39 = t39 * t40;
            //Instruction 20223
            //MUL
            t4.xyz = vec3(t39) * t4.xyz;
            //Instruction 20224
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20225
            //MAD
            t5.x = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20226
            //MUL
            t37 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20227
            //MAD
            t5.y = t37 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20228
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20229
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20230
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20231
            //MUL
            t29.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20232
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20233
            //MAD
            t5.xy = t29.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20234
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20235
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20236
            //MUL
            t37 = t5.x * t5.y;
            //Instruction 20237
            //MAD
            t37 = (-t37) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20238
            //MUL
            t39 = t2.w * _ST_WindVector.w;
            //Instruction 20239
            //MAD
            t37 = t39 * _ST_WindBranchWhip.x + t37;
            //Instruction 20240
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20241
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20242
            //MUL
            t3.xyz = vec3(t37) * t3.xyz;
            //Instruction 20243
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20244
        //ELSE
        } else {
            //Instruction 20245
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20246
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20247
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20248
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20249
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20250
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20251
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20252
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20253
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20254
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20255
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20256
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20257
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20258
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20259
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20260
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20261
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20262
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20263
            //MOV
            t2.y = (-t2.w);
            //Instruction 20264
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20265
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20266
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20267
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20268
            //ADD
            t37 = (-t0.x) + t6.x;
            //Instruction 20269
            //MAD
            t0.x = t6.y * t37 + t0.x;
            //Instruction 20270
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20271
            //ADD
            t37 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20272
            //ADD
            t39 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20273
            //MUL
            t39 = t39 * t5.x;
            //Instruction 20274
            //MAD
            t0.x = t0.x * t37 + t39;
            //Instruction 20275
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20276
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 20277
        //ENDIF
        }
        //Instruction 20278
    //ELSE
    } else {
        //Instruction 20279
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 20280
    //ENDIF
    }
    //Instruction 20281
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20282
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20283
    //DIV
    t37 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20284
    //MAD
    t37 = (-t37) * 0.250000 + t3.y;
    //Instruction 20285
    //MAX
    t37 = max(t37, 0.0);
    //Instruction 20286
    //MUL
    t37 = t37 * _ST_WindGlobal.z;
    //Instruction 20287
    //NE
    tb39 = t37!=0.0;
    //Instruction 20288
    //LOG
    t4.x = log2(t37);
    //Instruction 20289
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20290
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20291
    //MOVC
    t37 = (tb39) ? t4.x : t37;
    //Instruction 20292
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20293
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20294
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20295
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20296
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20297
    //MUL
    t28.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20298
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20299
    //MAD
    t4.xy = t28.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20300
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20301
    //MAD
    t39 = t4.y * t4.y + t4.x;
    //Instruction 20302
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20303
    //MAD
    t39 = _ST_WindGlobal.y * t39 + t4.x;
    //Instruction 20304
    //MUL
    t37 = t37 * t39;
    //Instruction 20305
    //MAD
    t4.xz = t24.xy * vec2(t37) + t3.xz;
    //Instruction 20306
    //MOV
    t4.y = t3.y;
    //Instruction 20307
    //DP3
    t24.x = dot(t4.xyz, t4.xyz);
    //Instruction 20308
    //RSQ
    t24.x = inversesqrt(t24.x);
    //Instruction 20309
    //MUL
    t4.xyz = t24.xxx * t4.xyz;
    //Instruction 20310
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20311
    //MOVC
    t0.xyz = (bool(tb12)) ? t0.xzw : t3.xyz;
    //Instruction 20312
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20313
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20314
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20315
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20316
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20317
    //MUL
    t36 = t3.y * _ProjectionParams.x;
    //Instruction 20318
    //MUL
    t4.w = t36 * 0.500000;
    //Instruction 20319
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20320
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20321
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20322
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20323
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20324
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20325
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20326
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20327
    //MAD
    t4.xyz = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20328
    //MAD
    t4.xyz = _Object2World[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20329
    //MAD
    t4.xyz = _Object2World[3].xyz * in_POSITION0.www + t4.xyz;
    //Instruction 20330
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 20331
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 20332
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 20333
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 20334
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 20335
    //MOV
    t5.zw = _World2Object[2].yy;
    //Instruction 20336
    //MUL
    t5 = t5 * in_NORMAL0.yyyy;
    //Instruction 20337
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t5;
    //Instruction 20338
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 20339
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 20340
    //MOV
    t5.zw = _World2Object[2].zz;
    //Instruction 20341
    //MAD
    t2 = t5 * in_NORMAL0.zzzz + t2;
    //Instruction 20342
    //DP3
    t36 = dot(t2.xyw, t2.xyw);
    //Instruction 20343
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 20344
    //MUL
    t2 = vec4(t36) * t2;
    //Instruction 20345
    //MUL
    t5.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 20346
    //MAD
    t5.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t5.xyz;
    //Instruction 20347
    //MAD
    t5.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t5.xyz;
    //Instruction 20348
    //DP3
    t36 = dot(t5.xyz, t5.xyz);
    //Instruction 20349
    //RSQ
    t36 = inversesqrt(t36);
    //Instruction 20350
    //MUL
    t5.xyz = vec3(t36) * t5.xyz;
    //Instruction 20351
    //MUL
    t10_7.xyz = t2.wxy * t5.xyz;
    //Instruction 20352
    //MAD
    t10_7.xyz = t2.ywx * t5.yzx + (-t10_7.xyz);
    //Instruction 20353
    //MUL
    t6.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 20354
    //MUL
    t16_7 = t2.ywzx * t2;
    //Instruction 20355
    //DP4
    t16_8.x = dot(unity_SHBr, t16_7);
    //Instruction 20356
    //DP4
    t16_8.y = dot(unity_SHBg, t16_7);
    //Instruction 20357
    //DP4
    t16_8.z = dot(unity_SHBb, t16_7);
    //Instruction 20358
    //MUL
    t16_44 = t2.y * t2.y;
    //Instruction 20359
    //MAD
    t16_44 = t2.x * t2.x + (-t16_44);
    //Instruction 20360
    //MAD
    t16_8.xyz = unity_SHC.xyz * vec3(t16_44) + t16_8.xyz;
    //Instruction 20361
    //ADD
    t7 = (-t4.xxxx) + unity_4LightPosX0;
    //Instruction 20362
    //ADD
    t9 = (-t4.yyyy) + unity_4LightPosY0;
    //Instruction 20363
    //ADD
    t10 = (-t4.zzzz) + unity_4LightPosZ0;
    //Instruction 20364
    //MUL
    t11 = t9 * t9;
    //Instruction 20365
    //MAD
    t11 = t7 * t7 + t11;
    //Instruction 20366
    //MAD
    t11 = t10 * t10 + t11;
    //Instruction 20367
    //MUL
    t9 = t2.yyyy * t9;
    //Instruction 20368
    //MAD
    t7 = t7 * t2.xxxx + t9;
    //Instruction 20369
    //MAD
    t7 = t10 * t2.wwww + t7;
    //Instruction 20370
    //RSQ
    t9 = inversesqrt(t11);
    //Instruction 20371
    //MUL
    t7 = t7 * t9;
    //Instruction 20372
    //MAX
    t7 = max(t7, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20373
    //MAD
    t9 = t11 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20374
    //DIV
    t9 = vec4(1.0, 1.0, 1.0, 1.0) / t9;
    //Instruction 20375
    //MUL
    t7 = t7 * t9;
    //Instruction 20376
    //MUL
    t9.xyz = t7.yyy * unity_LightColor[1].xyz;
    //Instruction 20377
    //MAD
    t9.xyz = unity_LightColor[0].xyz * t7.xxx + t9.xyz;
    //Instruction 20378
    //MAD
    t9.xyz = unity_LightColor[2].xyz * t7.zzz + t9.xyz;
    //Instruction 20379
    //MAD
    t9.xyz = unity_LightColor[3].xyz * t7.www + t9.xyz;
    //Instruction 20380
    //ADD
    t9.xyz = t16_8.xyz + t9.xyz;
    //Instruction 20381
    //MUL
    t7 = t0.yyyy * _Object2World[1];
    //Instruction 20382
    //MAD
    t7 = _Object2World[0] * t0.xxxx + t7;
    //Instruction 20383
    //MAD
    t0 = _Object2World[2] * t0.zzzz + t7;
    //Instruction 20384
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 20385
    //MUL
    t7 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 20386
    //MAD
    t7 = unity_World2Shadow[0][0] * t0.xxxx + t7;
    //Instruction 20387
    //MAD
    t7 = unity_World2Shadow[0][2] * t0.zzzz + t7;
    //Instruction 20388
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t7;
    //Instruction 20389
    //MOV
    vs_TEXCOORD0.x = t5.z;
    //Instruction 20390
    //MOV
    vs_TEXCOORD0.y = t6.x;
    //Instruction 20391
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 20392
    //MOV
    vs_TEXCOORD0.w = t4.x;
    //Instruction 20393
    //MOV
    vs_TEXCOORD1.x = t5.x;
    //Instruction 20394
    //MOV
    vs_TEXCOORD1.y = t6.y;
    //Instruction 20395
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 20396
    //MOV
    vs_TEXCOORD1.w = t4.y;
    //Instruction 20397
    //MOV
    vs_TEXCOORD2.x = t5.y;
    //Instruction 20398
    //MOV
    vs_TEXCOORD2.y = t6.z;
    //Instruction 20399
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 20400
    //MOV
    vs_TEXCOORD2.w = t4.z;
    //Instruction 20401
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 20402
    //MOV
    vs_TEXCOORD8 = t0;
    //Instruction 20403
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20404
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 20405
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 20406
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 20407
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 20408
    //MOV
    vs_TEXCOORD6.xyz = t3.xyz;
    //Instruction 20409
    //MOV
    vs_TEXCOORD7.xyz = t9.xyz;
    //Instruction 20410
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD6;
in mediump vec3 vs_TEXCOORD7;
in mediump vec4 vs_TEXCOORD8;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump vec3 t16_6;
mediump float t16_18;
void main()
{
    //Instruction 20117
    //DIV
    t16_0.xy = vs_TEXCOORD6.xy / vs_TEXCOORD6.zz;
    //Instruction 20118
    //FRC
    t16_6.x = fract(t16_0.y);
    //Instruction 20119
    //MOV
    t1.x = t16_0.x;
    //Instruction 20120
    //MAD
    t1.y = t16_6.x * 0.062500 + unity_LODFade.y;
    //Instruction 20121
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20122
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 20123
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20124
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20125
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 20126
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 20127
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 20128
    //ADD
    t16_6.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 20129
    //MAD
    t16_0.xyz = t16_0.xxx * t16_6.xyz + t10_2.xyz;
    //Instruction 20130
    //MAX
    t16_18 = max(t16_0.z, t16_0.y);
    //Instruction 20131
    //MAX
    t16_18 = max(t16_18, t16_0.x);
    //Instruction 20132
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 20133
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 20134
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 20135
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 20136
    //DIV
    t16_18 = t16_18 / t16_3.x;
    //Instruction 20137
    //MAD
    t16_1 = t16_18 * 0.500000 + 0.500000;
    //Instruction 20138
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 20139
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 20140
    //SAMPLE_C_LZ
    vec3 txVec44 = vec3(vs_TEXCOORD8.xy,vs_TEXCOORD8.z);
    t16_18 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec44, 0.0);
    //Instruction 20141
    //ADD
    t16_3.x = (-_LightShadowData.x) + 1.0;
    //Instruction 20142
    //MAD
    t16_18 = t16_18 * t16_3.x + _LightShadowData.x;
    //Instruction 20143
    //MUL
    t16_3.xyz = vec3(t16_18) * _LightColor0.xyz;
    //Instruction 20144
    //MUL
    t16_3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 20145
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 20146
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 20147
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 20148
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 20149
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 20150
    //MOV
    t1.w = 1.0;
    //Instruction 20151
    //DP4
    t16_5.x = dot(unity_SHAr, t1);
    //Instruction 20152
    //DP4
    t16_5.y = dot(unity_SHAg, t1);
    //Instruction 20153
    //DP4
    t16_5.z = dot(unity_SHAb, t1);
    //Instruction 20154
    //DP3
    t16_18 = dot(t1.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20155
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20156
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD7.xyz;
    //Instruction 20157
    //MUL
    t16_0.xyz = t16_0.xyz * t16_5.xyz;
    //Instruction 20158
    //MAD
    t16_0.xyz = t16_3.xyz * vec3(t16_18) + t16_0.xyz;
    //Instruction 20159
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 20160
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20161
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  highp vec3 tmpvar_10;
  tmpvar_9 = tmpvar_1;
  tmpvar_10 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_11;
  highp vec3 vRotatedWindVector_12;
  highp vec3 FinalPosition_13;
  highp vec3 tmpvar_14;
  tmpvar_14 = tmpvar_1.xyz;
  FinalPosition_13 = tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_12 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_11 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_12 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_11 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_19;
    vPos_19 = tmpvar_14;
    highp float fOffset_20;
    fOffset_20 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_20 = 0.75;
    };
    highp vec4 tmpvar_21;
    tmpvar_21.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_21.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_20);
    highp vec4 tmpvar_22;
    tmpvar_22 = abs(((
      fract((tmpvar_21 + 0.5))
     * 2.0) - 1.0));
    vPos_19 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_22 * tmpvar_22)
       * 
        (3.0 - (2.0 * tmpvar_22))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_10 = tmpvar_2;
    FinalPosition_13 = vPos_19;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_23;
    vPos_23 = FinalPosition_13;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_24;
      vPos_24 = FinalPosition_13;
      highp float fTime_25;
      highp float fAdherenceScale_26;
      highp vec3 vWindVector_27;
      vWindVector_27 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_25 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_28;
      highp float fOscillation_29;
      fOscillation_29 = 1.0;
      highp float fAmount_30;
      highp float fTarget_31;
      highp vec4 tmpvar_32;
      tmpvar_32.x = (fTime_25 + _glesMultiTexCoord0.w);
      tmpvar_32.y = ((fTime_25 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_32.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_25 + _glesMultiTexCoord0.w));
      tmpvar_32.w = ((fTime_25 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_33;
      tmpvar_33 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      vOscillations_28 = (((
        (tmpvar_33 * tmpvar_33)
       * 
        (3.0 - (2.0 * tmpvar_33))
      ) - 0.5) * 2.0);
      highp float tmpvar_34;
      tmpvar_34 = (vOscillations_28.y * vOscillations_28.z);
      fTarget_31 = 1.0;
      fAmount_30 = tmpvar_34;
      if ((tmpvar_34 < 0.0)) {
        fTarget_31 = -1.0;
        fAmount_30 = -(tmpvar_34);
      };
      fOscillation_29 = (((
        mix (mix (tmpvar_34, fTarget_31, fAmount_30), fTarget_31, fAmount_30)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_28.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_29 = (fOscillation_29 * (1.0 + (vOscillations_28.w * _ST_WindBranchWhip.x)));
      vPos_24 = (FinalPosition_13 + ((vWindVector_27 * fOscillation_29) * _ST_WindBranch.y));
      highp vec4 tmpvar_35;
      tmpvar_35.zw = vec2(0.0, 0.0);
      tmpvar_35.x = ((fTime_25 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_35.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_36;
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      tmpvar_36 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      fAdherenceScale_26 = (1.0 - ((tmpvar_36.x * tmpvar_36.y) * (
        (tmpvar_36.x * tmpvar_36.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_26 = (fAdherenceScale_26 + ((vOscillations_28.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_24 = (vPos_24 + ((
        ((vRotatedBranchAnchor_11 - vPos_24) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_26) * _glesMultiTexCoord0.z));
      vPos_23 = vPos_24;
    } else {
      highp vec3 vPos_38;
      vPos_38 = vPos_23;
      highp float fTime_39;
      highp vec3 vWindVector_40;
      vWindVector_40 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_39 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_41;
      highp float fOscillation_42;
      fOscillation_42 = 1.0;
      highp float fAmount_43;
      highp float fTarget_44;
      highp vec4 tmpvar_45;
      tmpvar_45.w = 0.0;
      tmpvar_45.x = (fTime_39 + _glesMultiTexCoord0.w);
      tmpvar_45.y = ((fTime_39 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_45.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_39 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_46;
      tmpvar_46 = abs(((
        fract((tmpvar_45 + 0.5))
       * 2.0) - 1.0));
      vOscillations_41 = (((
        (tmpvar_46 * tmpvar_46)
       * 
        (3.0 - (2.0 * tmpvar_46))
      ) - 0.5) * 2.0);
      highp float tmpvar_47;
      tmpvar_47 = (vOscillations_41.y * vOscillations_41.z);
      fTarget_44 = 1.0;
      fAmount_43 = tmpvar_47;
      if ((tmpvar_47 < 0.0)) {
        fTarget_44 = -1.0;
        fAmount_43 = -(tmpvar_47);
      };
      fOscillation_42 = (((
        mix (mix (tmpvar_47, fTarget_44, fAmount_43), fTarget_44, fAmount_43)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_41.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_38 = (vPos_23 + ((vWindVector_40 * fOscillation_42) * _ST_WindBranch.y));
      vPos_23 = vPos_38;
    };
    FinalPosition_13 = vPos_23;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_48;
    vPos_48 = FinalPosition_13;
    highp float fMoveAmount_49;
    highp float fAdjust_50;
    highp float fLength_51;
    fLength_51 = sqrt(dot (FinalPosition_13, FinalPosition_13));
    highp float tmpvar_52;
    tmpvar_52 = (max ((FinalPosition_13.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_50 = tmpvar_52;
    if ((tmpvar_52 != 0.0)) {
      fAdjust_50 = pow (tmpvar_52, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_53;
    tmpvar_53.zw = vec2(0.0, 0.0);
    tmpvar_53.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_53.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_54;
    highp vec4 tmpvar_55;
    tmpvar_55 = abs(((
      fract((tmpvar_53 + 0.5))
     * 2.0) - 1.0));
    tmpvar_54 = (((
      (tmpvar_55 * tmpvar_55)
     * 
      (3.0 - (2.0 * tmpvar_55))
    ) - 0.5) * 2.0);
    fMoveAmount_49 = ((_ST_WindGlobal.y * (tmpvar_54.x + 
      (tmpvar_54.y * tmpvar_54.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_49 = (fMoveAmount_49 * fAdjust_50);
    vPos_48.xz = (FinalPosition_13.xz + (vRotatedWindVector_12.xz * fMoveAmount_49));
    vPos_48 = (normalize(vPos_48) * fLength_51);
    FinalPosition_13 = vPos_48;
  };
  tmpvar_9.xyz = FinalPosition_13;
  highp vec4 hPos_56;
  hPos_56 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_57;
  highp vec4 o_58;
  highp vec4 tmpvar_59;
  tmpvar_59 = (hPos_56 * 0.5);
  highp vec2 tmpvar_60;
  tmpvar_60.x = tmpvar_59.x;
  tmpvar_60.y = (tmpvar_59.y * _ProjectionParams.x);
  o_58.xy = (tmpvar_60 + tmpvar_59.w);
  o_58.zw = hPos_56.zw;
  highp vec3 tmpvar_61;
  tmpvar_61 = o_58.xyw;
  screenPos_57 = tmpvar_61;
  screenPos_57.xy = (screenPos_57.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_62;
  v_62.x = _World2Object[0].x;
  v_62.y = _World2Object[1].x;
  v_62.z = _World2Object[2].x;
  v_62.w = _World2Object[3].x;
  highp vec4 v_63;
  v_63.x = _World2Object[0].y;
  v_63.y = _World2Object[1].y;
  v_63.z = _World2Object[2].y;
  v_63.w = _World2Object[3].y;
  highp vec4 v_64;
  v_64.x = _World2Object[0].z;
  v_64.y = _World2Object[1].z;
  v_64.z = _World2Object[2].z;
  v_64.w = _World2Object[3].z;
  highp vec3 tmpvar_65;
  tmpvar_65 = normalize(((
    (v_62.xyz * tmpvar_10.x)
   + 
    (v_63.xyz * tmpvar_10.y)
  ) + (v_64.xyz * tmpvar_10.z)));
  worldNormal_4 = tmpvar_65;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_66;
  tmpvar_66.w = 1.0;
  tmpvar_66.xyz = worldNormal_4;
  mediump vec4 normal_67;
  normal_67 = tmpvar_66;
  mediump vec3 x2_68;
  mediump vec4 tmpvar_69;
  tmpvar_69 = (normal_67.xyzz * normal_67.yzzx);
  x2_68.x = dot (unity_SHBr, tmpvar_69);
  x2_68.y = dot (unity_SHBg, tmpvar_69);
  x2_68.z = dot (unity_SHBb, tmpvar_69);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_57;
  xlv_TEXCOORD5 = (x2_68 + (unity_SHC.xyz * (
    (normal_67.x * normal_67.x)
   - 
    (normal_67.y * normal_67.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 20438
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20439
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 20440
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 20441
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20442
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 20443
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 20444
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 20445
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 20446
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 20447
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 20448
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 20449
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 20450
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 20451
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20452
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 20453
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 20454
    //FRC
    t2.x = fract(t2.x);
    //Instruction 20455
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 20456
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 20457
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 20458
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 20459
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 20460
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 20461
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20462
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 20463
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 20464
    //IF
    if(tb23){
        //Instruction 20465
        //IF
        if(tb22){
            //Instruction 20466
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20467
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20468
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20469
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 20470
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 20471
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 20472
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20473
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20474
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20475
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20476
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 20477
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 20478
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 20479
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20480
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 20481
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 20482
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 20483
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20484
            //FRC
            t0 = fract(t0);
            //Instruction 20485
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20486
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 20487
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20488
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20489
            //ADD
            t0 = t0 + t0;
            //Instruction 20490
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 20491
            //LT
            tb23 = t5.w<0.0;
            //Instruction 20492
            //MOV
            t5.y = (-t5.w);
            //Instruction 20493
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20494
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 20495
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 20496
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 20497
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 20498
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 20499
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 20500
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20501
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20502
            //MUL
            t25 = t0.x * t25;
            //Instruction 20503
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 20504
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20505
            //MUL
            t23 = t23 * t24;
            //Instruction 20506
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 20507
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 20508
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20509
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20510
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20511
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20512
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20513
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20514
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20515
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20516
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20517
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20518
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20519
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 20520
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20521
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 20522
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 20523
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20524
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20525
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 20526
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20527
        //ELSE
        } else {
            //Instruction 20528
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20529
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 20530
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20531
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 20532
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 20533
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 20534
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 20535
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20536
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 20537
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 20538
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20539
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20540
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20541
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 20542
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20543
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20544
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 20545
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 20546
            //LT
            tb22 = t0.w<0.0;
            //Instruction 20547
            //MOV
            t0.y = (-t0.w);
            //Instruction 20548
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 20549
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 20550
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 20551
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 20552
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 20553
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 20554
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 20555
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20556
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20557
            //MUL
            t24 = t24 * t4.x;
            //Instruction 20558
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 20559
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 20560
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 20561
        //ENDIF
        }
        //Instruction 20562
    //ENDIF
    }
    //Instruction 20563
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 20564
    //SQRT
    t22 = sqrt(t22);
    //Instruction 20565
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20566
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 20567
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 20568
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 20569
    //NE
    tb3 = t23!=0.0;
    //Instruction 20570
    //LOG
    t10 = log2(t23);
    //Instruction 20571
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 20572
    //EXP
    t10 = exp2(t10);
    //Instruction 20573
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 20574
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20575
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20576
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 20577
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 20578
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20579
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 20580
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20581
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 20582
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 20583
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 20584
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20585
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 20586
    //MUL
    t23 = t23 * t3.x;
    //Instruction 20587
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 20588
    //MOV
    t3.y = t2.y;
    //Instruction 20589
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 20590
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 20591
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 20592
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 20593
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 20594
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20595
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 20596
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 20597
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 20598
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 20599
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 20600
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 20601
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 20602
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 20603
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 20604
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 20605
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 20606
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 20607
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 20608
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 20609
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 20610
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 20611
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 20612
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 20613
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 20614
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 20615
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 20616
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 20617
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 20618
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 20619
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 20620
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 20621
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 20622
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 20623
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 20624
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 20625
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 20626
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 20627
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 20628
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 20629
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 20630
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 20631
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 20632
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 20633
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 20634
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 20635
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20636
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 20637
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 20638
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 20639
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 20411
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20412
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 20413
    //MOV
    t1.x = t16_0.x;
    //Instruction 20414
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 20415
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20416
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20417
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20418
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20419
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20420
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20421
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20422
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20423
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20424
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20425
    //MOV
    t16_0.w = 1.0;
    //Instruction 20426
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 20427
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 20428
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 20429
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20430
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20431
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 20432
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20433
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20434
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 20435
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20436
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20437
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_63;
  tmpvar_63 = (_Object2World * tmpvar_10).xyz;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_11.x)
   + 
    (v_65.xyz * tmpvar_11.y)
  ) + (v_66.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_4;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  highp vec3 lightColor0_72;
  lightColor0_72 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_73;
  lightColor1_73 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_74;
  lightColor2_74 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_75;
  lightColor3_75 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_76;
  lightAttenSq_76 = unity_4LightAtten0;
  highp vec3 normal_77;
  normal_77 = worldNormal_4;
  highp vec3 col_78;
  highp vec4 ndotl_79;
  highp vec4 lengthSq_80;
  highp vec4 tmpvar_81;
  tmpvar_81 = (unity_4LightPosX0 - tmpvar_63.x);
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosY0 - tmpvar_63.y);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosZ0 - tmpvar_63.z);
  lengthSq_80 = (tmpvar_81 * tmpvar_81);
  lengthSq_80 = (lengthSq_80 + (tmpvar_82 * tmpvar_82));
  lengthSq_80 = (lengthSq_80 + (tmpvar_83 * tmpvar_83));
  ndotl_79 = (tmpvar_81 * normal_77.x);
  ndotl_79 = (ndotl_79 + (tmpvar_82 * normal_77.y));
  ndotl_79 = (ndotl_79 + (tmpvar_83 * normal_77.z));
  highp vec4 tmpvar_84;
  tmpvar_84 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_79 * inversesqrt(lengthSq_80)));
  ndotl_79 = tmpvar_84;
  highp vec4 tmpvar_85;
  tmpvar_85 = (tmpvar_84 * (1.0/((1.0 + 
    (lengthSq_80 * lightAttenSq_76)
  ))));
  col_78 = (lightColor0_72 * tmpvar_85.x);
  col_78 = (col_78 + (lightColor1_73 * tmpvar_85.y));
  col_78 = (col_78 + (lightColor2_74 * tmpvar_85.z));
  col_78 = (col_78 + (lightColor3_75 * tmpvar_85.w));
  tmpvar_7 = ((x2_70 + (unity_SHC.xyz * 
    ((normal_69.x * normal_69.x) - (normal_69.y * normal_69.y))
  )) + col_78);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_63;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump vec4 diffuseColor_10;
  mediump vec2 projUV_11;
  mediump vec2 tmpvar_12;
  tmpvar_12 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_11.x = tmpvar_12.x;
  projUV_11.y = ((fract(tmpvar_12.y) * 0.0625) + unity_LODFade.y);
  lowp float x_13;
  x_13 = (texture2D (_DitherMaskLOD2D, projUV_11).w - 0.5);
  if ((x_13 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_14;
  tmpvar_14 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_10 = tmpvar_14;
  tmpvar_9 = (diffuseColor_10.w * _Color.w);
  lowp float x_15;
  x_15 = (tmpvar_9 - _Cutoff);
  if ((x_15 < 0.0)) {
    discard;
  };
  tmpvar_8 = (diffuseColor_10.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_16;
  normalWorld_16 = tmpvar_4;
  mediump vec3 tmpvar_17;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_16;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  tmpvar_17 = (xlv_TEXCOORD5 + x1_19);
  lowp vec4 c_20;
  lowp vec4 c_21;
  lowp float diff_22;
  mediump float tmpvar_23;
  tmpvar_23 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_22 = tmpvar_23;
  c_21.xyz = ((tmpvar_8 * tmpvar_1) * diff_22);
  c_21.w = tmpvar_9;
  c_20.w = c_21.w;
  c_20.xyz = (c_21.xyz + (tmpvar_8 * tmpvar_17));
  c_3.xyz = c_20.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec3 t9;
highp float t10;
highp float t11;
highp float t17;
highp vec2 t19;
highp vec2 t21;
highp float t25;
bool tb25;
highp float t26;
bool tb26;
highp float t27;
highp float t28;
mediump float t16_30;
void main()
{
    //Instruction 20667
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20668
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 20669
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 20670
    //MUL
    t9.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20671
    //MAD
    t9.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t9.xyz;
    //Instruction 20672
    //MAD
    t9.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t9.xyz;
    //Instruction 20673
    //DP3
    t17 = dot(t9.xyz, t9.xyz);
    //Instruction 20674
    //RSQ
    t17 = inversesqrt(t17);
    //Instruction 20675
    //MUL
    t9.xy = vec2(t17) * t9.xz;
    //Instruction 20676
    //AND
    t9.xy = mix(vec2(0.0, 0.0), t9.xy, bvec2(tb1));
    //Instruction 20677
    //EQ
    tb25 = t16_0.x==5.000000;
    //Instruction 20678
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 20679
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 20680
    //ADD
    t10 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20681
    //MAD
    t2.x = t10 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 20682
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 20683
    //FRC
    t2.x = fract(t2.x);
    //Instruction 20684
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 20685
    //MUL
    t10 = abs(t2.x) * abs(t2.x);
    //Instruction 20686
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 20687
    //MAD
    t2.x = t10 * t2.x + -0.500000;
    //Instruction 20688
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 20689
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 20690
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20691
    //MOVC
    t2.xyz = (bool(tb25)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 20692
    //GE
    tb26 = t16_0.x>=3.000000;
    //Instruction 20693
    //IF
    if(tb26){
        //Instruction 20694
        //IF
        if(tb25){
            //Instruction 20695
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20696
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20697
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20698
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 20699
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 20700
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 20701
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20702
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20703
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20704
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20705
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 20706
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 20707
            //ADD
            t0.x = t25 + in_TEXCOORD0.w;
            //Instruction 20708
            //MAD
            t0.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20709
            //MUL
            t26 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 20710
            //MUL
            t0.z = t26 * 0.500000;
            //Instruction 20711
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 20712
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20713
            //FRC
            t0 = fract(t0);
            //Instruction 20714
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20715
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 20716
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20717
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20718
            //ADD
            t0 = t0 + t0;
            //Instruction 20719
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 20720
            //LT
            tb26 = t5.w<0.0;
            //Instruction 20721
            //MOV
            t5.y = (-t5.w);
            //Instruction 20722
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20723
            //MOVC
            t5.xy = (bool(tb26)) ? t5.xy : t5.zw;
            //Instruction 20724
            //MAD
            t26 = (-t0.y) * t0.z + t5.x;
            //Instruction 20725
            //MAD
            t26 = t5.y * t26 + t5.w;
            //Instruction 20726
            //ADD
            t27 = (-t26) + t5.x;
            //Instruction 20727
            //MAD
            t26 = t5.y * t27 + t26;
            //Instruction 20728
            //MUL
            t26 = t26 * _ST_WindBranchTwitch.x;
            //Instruction 20729
            //ADD
            t27 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20730
            //ADD
            t28 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20731
            //MUL
            t28 = t0.x * t28;
            //Instruction 20732
            //MAD
            t26 = t26 * t27 + t28;
            //Instruction 20733
            //MAD
            t27 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20734
            //MUL
            t26 = t26 * t27;
            //Instruction 20735
            //MUL
            t4.xyz = vec3(t26) * t4.xyz;
            //Instruction 20736
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 20737
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20738
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20739
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20740
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20741
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20742
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20743
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20744
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20745
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 20746
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 20747
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 20748
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 20749
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20750
            //MUL
            t26 = t0.w * _ST_WindVector.w;
            //Instruction 20751
            //MAD
            t25 = t26 * _ST_WindBranchWhip.x + t25;
            //Instruction 20752
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 20753
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20754
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 20755
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 20756
        //ELSE
        } else {
            //Instruction 20757
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20758
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 20759
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20760
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 20761
            //ADD
            t25 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 20762
            //ADD
            t25 = t25 + _ST_WindBranch.x;
            //Instruction 20763
            //ADD
            t4.x = t25 + in_TEXCOORD0.w;
            //Instruction 20764
            //MAD
            t4.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20765
            //MUL
            t25 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 20766
            //MUL
            t4.z = t25 * 0.500000;
            //Instruction 20767
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20768
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20769
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20770
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 20771
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20772
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20773
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 20774
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 20775
            //LT
            tb25 = t0.w<0.0;
            //Instruction 20776
            //MOV
            t0.y = (-t0.w);
            //Instruction 20777
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 20778
            //MOVC
            t5.xy = (bool(tb25)) ? t0.xy : t0.zw;
            //Instruction 20779
            //MAD
            t25 = (-t4.y) * t4.z + t5.x;
            //Instruction 20780
            //MAD
            t25 = t5.y * t25 + t0.w;
            //Instruction 20781
            //ADD
            t26 = (-t25) + t5.x;
            //Instruction 20782
            //MAD
            t25 = t5.y * t26 + t25;
            //Instruction 20783
            //MUL
            t25 = t25 * _ST_WindBranchTwitch.x;
            //Instruction 20784
            //ADD
            t26 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20785
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20786
            //MUL
            t27 = t27 * t4.x;
            //Instruction 20787
            //MAD
            t25 = t25 * t26 + t27;
            //Instruction 20788
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 20789
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 20790
        //ENDIF
        }
        //Instruction 20791
    //ENDIF
    }
    //Instruction 20792
    //DP3
    t25 = dot(t2.xyz, t2.xyz);
    //Instruction 20793
    //SQRT
    t25 = sqrt(t25);
    //Instruction 20794
    //DIV
    t26 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20795
    //MAD
    t26 = (-t26) * 0.250000 + t2.y;
    //Instruction 20796
    //MAX
    t26 = max(t26, 0.0);
    //Instruction 20797
    //MUL
    t26 = t26 * _ST_WindGlobal.z;
    //Instruction 20798
    //NE
    tb3 = t26!=0.0;
    //Instruction 20799
    //LOG
    t11 = log2(t26);
    //Instruction 20800
    //MUL
    t11 = t11 * _ST_WindGlobal.w;
    //Instruction 20801
    //EXP
    t11 = exp2(t11);
    //Instruction 20802
    //MOVC
    t26 = (tb3) ? t11 : t26;
    //Instruction 20803
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20804
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20805
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 20806
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 20807
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20808
    //MUL
    t19.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 20809
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20810
    //MAD
    t3.xy = t19.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 20811
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 20812
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 20813
    //DIV
    t11 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20814
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t11;
    //Instruction 20815
    //MUL
    t26 = t26 * t3.x;
    //Instruction 20816
    //MAD
    t3.xz = t9.xy * vec2(t26) + t2.xz;
    //Instruction 20817
    //MOV
    t3.y = t2.y;
    //Instruction 20818
    //DP3
    t9.x = dot(t3.xyz, t3.xyz);
    //Instruction 20819
    //RSQ
    t9.x = inversesqrt(t9.x);
    //Instruction 20820
    //MUL
    t3.xyz = t9.xxx * t3.xyz;
    //Instruction 20821
    //MUL
    t9.xyz = vec3(t25) * t3.xyz;
    //Instruction 20822
    //MOVC
    t1.xyz = (bool(tb1)) ? t9.xyz : t2.xyz;
    //Instruction 20823
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20824
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 20825
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 20826
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 20827
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 20828
    //MUL
    t25 = t2.y * _ProjectionParams.x;
    //Instruction 20829
    //MUL
    t3.w = t25 * 0.500000;
    //Instruction 20830
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 20831
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 20832
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 20833
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 20834
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 20835
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 20836
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 20837
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 20838
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 20839
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 20840
    //MAD
    t1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 20841
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 20842
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 20843
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 20844
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 20845
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 20846
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 20847
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 20848
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 20849
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 20850
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 20851
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 20852
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 20853
    //DP3
    t25 = dot(t3.xyz, t3.xyz);
    //Instruction 20854
    //RSQ
    t25 = inversesqrt(t25);
    //Instruction 20855
    //MUL
    t3.xyz = vec3(t25) * t3.xyz;
    //Instruction 20856
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 20857
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 20858
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 20859
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 20860
    //MUL
    t16_30 = t3.y * t3.y;
    //Instruction 20861
    //MAD
    t16_30 = t3.x * t3.x + (-t16_30);
    //Instruction 20862
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_30) + t16_6.xyz;
    //Instruction 20863
    //ADD
    t0 = (-t1.xxxx) + unity_4LightPosX0;
    //Instruction 20864
    //ADD
    t4 = (-t1.yyyy) + unity_4LightPosY0;
    //Instruction 20865
    //ADD
    t5 = (-t1.zzzz) + unity_4LightPosZ0;
    //Instruction 20866
    //MUL
    t7 = t4 * t4;
    //Instruction 20867
    //MAD
    t7 = t0 * t0 + t7;
    //Instruction 20868
    //MAD
    t7 = t5 * t5 + t7;
    //Instruction 20869
    //MUL
    t4 = t3.yyyy * t4;
    //Instruction 20870
    //MAD
    t0 = t0 * t3.xxxx + t4;
    //Instruction 20871
    //MAD
    t0 = t5 * t3.zzzz + t0;
    //Instruction 20872
    //RSQ
    t4 = inversesqrt(t7);
    //Instruction 20873
    //MUL
    t0 = t0 * t4;
    //Instruction 20874
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20875
    //MAD
    t4 = t7 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20876
    //DIV
    t4 = vec4(1.0, 1.0, 1.0, 1.0) / t4;
    //Instruction 20877
    //MUL
    t0 = t0 * t4;
    //Instruction 20878
    //MUL
    t4.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 20879
    //MAD
    t4.xyz = unity_LightColor[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20880
    //MAD
    t4.xyz = unity_LightColor[2].xyz * t0.zzz + t4.xyz;
    //Instruction 20881
    //MAD
    t4.xyz = unity_LightColor[3].xyz * t0.www + t4.xyz;
    //Instruction 20882
    //ADD
    t4.xyz = t4.xyz + t16_6.xyz;
    //Instruction 20883
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 20884
    //MOV
    vs_TEXCOORD1.xyz = t1.xyz;
    //Instruction 20885
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20886
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 20887
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 20888
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 20889
    //MOV
    vs_TEXCOORD5.xyz = t4.xyz;
    //Instruction 20890
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump float t16_5;
mediump float t16_18;
void main()
{
    //Instruction 20640
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20641
    //FRC
    t16_5 = fract(t16_0.y);
    //Instruction 20642
    //MOV
    t1.x = t16_0.x;
    //Instruction 20643
    //MAD
    t1.y = t16_5 * 0.062500 + unity_LODFade.y;
    //Instruction 20644
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20645
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20646
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20647
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20648
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20649
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20650
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20651
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20652
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20653
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20654
    //MOV
    t16_0.w = 1.0;
    //Instruction 20655
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 20656
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 20657
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 20658
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20659
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20660
    //MUL
    t16_3.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 20661
    //DP3
    t16_18 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20662
    //MAX
    t16_18 = max(t16_18, 0.0);
    //Instruction 20663
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_18) + t16_4.xyz;
    //Instruction 20664
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20665
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20666
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_12.x)
   + 
    (v_66.xyz * tmpvar_12.y)
  ) + (v_67.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_4;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_64.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_59;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float tmpvar_17;
  highp float tmpvar_18;
  tmpvar_18 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_17 = tmpvar_18;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_17;
  mediump vec3 normalWorld_19;
  normalWorld_19 = tmpvar_5;
  mediump vec3 tmpvar_20;
  mediump vec3 tmpvar_21;
  mediump vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = normalWorld_19;
  mediump vec3 x1_23;
  x1_23.x = dot (unity_SHAr, tmpvar_22);
  x1_23.y = dot (unity_SHAg, tmpvar_22);
  x1_23.z = dot (unity_SHAb, tmpvar_22);
  tmpvar_21 = (xlv_TEXCOORD5 + x1_23);
  tmpvar_20 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_20;
  lowp vec4 c_24;
  lowp vec4 c_25;
  lowp float diff_26;
  mediump float tmpvar_27;
  tmpvar_27 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_26 = tmpvar_27;
  c_25.xyz = ((tmpvar_9 * tmpvar_20) * diff_26);
  c_25.w = tmpvar_10;
  c_24.w = c_25.w;
  c_24.xyz = (c_25.xyz + (tmpvar_9 * tmpvar_21));
  c_4.xyz = c_24.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  highp vec4 hPos_57;
  hPos_57 = (glstate_matrix_mvp * tmpvar_10);
  mediump vec3 screenPos_58;
  highp vec4 o_59;
  highp vec4 tmpvar_60;
  tmpvar_60 = (hPos_57 * 0.5);
  highp vec2 tmpvar_61;
  tmpvar_61.x = tmpvar_60.x;
  tmpvar_61.y = (tmpvar_60.y * _ProjectionParams.x);
  o_59.xy = (tmpvar_61 + tmpvar_60.w);
  o_59.zw = hPos_57.zw;
  highp vec3 tmpvar_62;
  tmpvar_62 = o_59.xyw;
  screenPos_58 = tmpvar_62;
  screenPos_58.xy = (screenPos_58.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_63;
  v_63.x = _World2Object[0].x;
  v_63.y = _World2Object[1].x;
  v_63.z = _World2Object[2].x;
  v_63.w = _World2Object[3].x;
  highp vec4 v_64;
  v_64.x = _World2Object[0].y;
  v_64.y = _World2Object[1].y;
  v_64.z = _World2Object[2].y;
  v_64.w = _World2Object[3].y;
  highp vec4 v_65;
  v_65.x = _World2Object[0].z;
  v_65.y = _World2Object[1].z;
  v_65.z = _World2Object[2].z;
  v_65.w = _World2Object[3].z;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize(((
    (v_63.xyz * tmpvar_11.x)
   + 
    (v_64.xyz * tmpvar_11.y)
  ) + (v_65.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_66;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_67;
  tmpvar_67.w = 1.0;
  tmpvar_67.xyz = worldNormal_4;
  mediump vec4 normal_68;
  normal_68 = tmpvar_67;
  mediump vec3 x2_69;
  mediump vec4 tmpvar_70;
  tmpvar_70 = (normal_68.xyzz * normal_68.yzzx);
  x2_69.x = dot (unity_SHBr, tmpvar_70);
  x2_69.y = dot (unity_SHBg, tmpvar_70);
  x2_69.z = dot (unity_SHBb, tmpvar_70);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_10));
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_58;
  xlv_TEXCOORD5 = (x2_69 + (unity_SHC.xyz * (
    (normal_68.x * normal_68.x)
   - 
    (normal_68.y * normal_68.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t9;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 20922
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20923
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 20924
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 20925
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20926
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 20927
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 20928
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 20929
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 20930
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 20931
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 20932
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 20933
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 20934
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 20935
    //ADD
    t9 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20936
    //MAD
    t2.x = t9 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 20937
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 20938
    //FRC
    t2.x = fract(t2.x);
    //Instruction 20939
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 20940
    //MUL
    t9 = abs(t2.x) * abs(t2.x);
    //Instruction 20941
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 20942
    //MAD
    t2.x = t9 * t2.x + -0.500000;
    //Instruction 20943
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 20944
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 20945
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20946
    //MOVC
    t2.xyz = (bool(tb22)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 20947
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 20948
    //IF
    if(tb23){
        //Instruction 20949
        //IF
        if(tb22){
            //Instruction 20950
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20951
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 20952
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 20953
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 20954
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 20955
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 20956
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20957
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20958
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20959
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20960
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 20961
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 20962
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 20963
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20964
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 20965
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 20966
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 20967
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20968
            //FRC
            t0 = fract(t0);
            //Instruction 20969
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20970
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 20971
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20972
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20973
            //ADD
            t0 = t0 + t0;
            //Instruction 20974
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 20975
            //LT
            tb23 = t5.w<0.0;
            //Instruction 20976
            //MOV
            t5.y = (-t5.w);
            //Instruction 20977
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 20978
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 20979
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 20980
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 20981
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 20982
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 20983
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 20984
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20985
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20986
            //MUL
            t25 = t0.x * t25;
            //Instruction 20987
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 20988
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20989
            //MUL
            t23 = t23 * t24;
            //Instruction 20990
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 20991
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 20992
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20993
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20994
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20995
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 20996
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 20997
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20998
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 20999
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21000
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 21001
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 21002
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 21003
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 21004
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21005
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 21006
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 21007
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 21008
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21009
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 21010
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 21011
        //ELSE
        } else {
            //Instruction 21012
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21013
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 21014
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21015
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 21016
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21017
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 21018
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 21019
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21020
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 21021
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 21022
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21023
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21024
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21025
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 21026
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21027
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21028
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 21029
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 21030
            //LT
            tb22 = t0.w<0.0;
            //Instruction 21031
            //MOV
            t0.y = (-t0.w);
            //Instruction 21032
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 21033
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 21034
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 21035
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 21036
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 21037
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 21038
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 21039
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21040
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21041
            //MUL
            t24 = t24 * t4.x;
            //Instruction 21042
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 21043
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 21044
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 21045
        //ENDIF
        }
        //Instruction 21046
    //ENDIF
    }
    //Instruction 21047
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 21048
    //SQRT
    t22 = sqrt(t22);
    //Instruction 21049
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21050
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 21051
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 21052
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 21053
    //NE
    tb3 = t23!=0.0;
    //Instruction 21054
    //LOG
    t10 = log2(t23);
    //Instruction 21055
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 21056
    //EXP
    t10 = exp2(t10);
    //Instruction 21057
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 21058
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21059
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21060
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 21061
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 21062
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21063
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 21064
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21065
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 21066
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 21067
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 21068
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21069
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 21070
    //MUL
    t23 = t23 * t3.x;
    //Instruction 21071
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 21072
    //MOV
    t3.y = t2.y;
    //Instruction 21073
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 21074
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 21075
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 21076
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 21077
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 21078
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21079
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 21080
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 21081
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 21082
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 21083
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 21084
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 21085
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 21086
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 21087
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 21088
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 21089
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 21090
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 21091
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 21092
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 21093
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 21094
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 21095
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 21096
    //MOV
    t3.x = _World2Object[0].x;
    //Instruction 21097
    //MOV
    t3.y = _World2Object[1].x;
    //Instruction 21098
    //MOV
    t3.z = _World2Object[2].x;
    //Instruction 21099
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 21100
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 21101
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 21102
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 21103
    //MAD
    t3.xyz = t3.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 21104
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 21105
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 21106
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 21107
    //MAD
    t3.xyz = t4.xyz * in_NORMAL0.zzz + t3.xyz;
    //Instruction 21108
    //DP3
    t22 = dot(t3.xyz, t3.xyz);
    //Instruction 21109
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 21110
    //MUL
    t3.xyz = vec3(t22) * t3.xyz;
    //Instruction 21111
    //MUL
    t16_0 = t3.yzzx * t3.xyzz;
    //Instruction 21112
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 21113
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 21114
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 21115
    //MUL
    t16_27 = t3.y * t3.y;
    //Instruction 21116
    //MAD
    t16_27 = t3.x * t3.x + (-t16_27);
    //Instruction 21117
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 21118
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 21119
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 21120
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 21121
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 21122
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 21123
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 21124
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 21125
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 21126
    //MOV
    vs_TEXCOORD0.xyz = t3.xyz;
    //Instruction 21127
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21128
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 21129
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 21130
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 21131
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 21132
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 20891
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20892
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20893
    //MOV
    t1.x = t16_0.x;
    //Instruction 20894
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20895
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20896
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20897
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20898
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20899
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20900
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20901
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20902
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20903
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20904
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20905
    //MOV
    t16_0.w = 1.0;
    //Instruction 20906
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 20907
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 20908
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 20909
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20910
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20911
    //SAMPLE_C_LZ
    vec3 txVec45 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec45, 0.0);
    //Instruction 20912
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 20913
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 20914
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 20915
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20916
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20917
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20918
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 20919
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20920
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20921
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
#extension GL_EXT_shadow_samplers : enable
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_11;
  highp vec3 tmpvar_12;
  tmpvar_11 = tmpvar_1;
  tmpvar_12 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_16;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_12 = tmpvar_2;
    FinalPosition_15 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_15;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_15;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_15 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_13 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_15 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_15;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_15 = vPos_50;
  };
  tmpvar_11.xyz = FinalPosition_15;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_9;
  highp vec3 tmpvar_64;
  tmpvar_64 = (_Object2World * tmpvar_11).xyz;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_12.x)
   + 
    (v_66.xyz * tmpvar_12.y)
  ) + (v_67.xyz * tmpvar_12.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  highp vec3 lightColor0_73;
  lightColor0_73 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_74;
  lightColor1_74 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_75;
  lightColor2_75 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_76;
  lightColor3_76 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_77;
  lightAttenSq_77 = unity_4LightAtten0;
  highp vec3 normal_78;
  normal_78 = worldNormal_4;
  highp vec3 col_79;
  highp vec4 ndotl_80;
  highp vec4 lengthSq_81;
  highp vec4 tmpvar_82;
  tmpvar_82 = (unity_4LightPosX0 - tmpvar_64.x);
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosY0 - tmpvar_64.y);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosZ0 - tmpvar_64.z);
  lengthSq_81 = (tmpvar_82 * tmpvar_82);
  lengthSq_81 = (lengthSq_81 + (tmpvar_83 * tmpvar_83));
  lengthSq_81 = (lengthSq_81 + (tmpvar_84 * tmpvar_84));
  ndotl_80 = (tmpvar_82 * normal_78.x);
  ndotl_80 = (ndotl_80 + (tmpvar_83 * normal_78.y));
  ndotl_80 = (ndotl_80 + (tmpvar_84 * normal_78.z));
  highp vec4 tmpvar_85;
  tmpvar_85 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_80 * inversesqrt(lengthSq_81)));
  ndotl_80 = tmpvar_85;
  highp vec4 tmpvar_86;
  tmpvar_86 = (tmpvar_85 * (1.0/((1.0 + 
    (lengthSq_81 * lightAttenSq_77)
  ))));
  col_79 = (lightColor0_73 * tmpvar_86.x);
  col_79 = (col_79 + (lightColor1_74 * tmpvar_86.y));
  col_79 = (col_79 + (lightColor2_75 * tmpvar_86.z));
  col_79 = (col_79 + (lightColor3_76 * tmpvar_86.w));
  tmpvar_7 = ((x2_71 + (unity_SHC.xyz * 
    ((normal_70.x * normal_70.x) - (normal_70.y * normal_70.y))
  )) + col_79);
  tmpvar_8 = (unity_World2Shadow[0] * (_Object2World * tmpvar_11));
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_64;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_10;
  xlv_TEXCOORD4 = screenPos_59;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = tmpvar_8;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_shadow_samplers : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform lowp sampler2DShadow _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_10 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_10 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  tmpvar_9 = (diffuseColor_11.xyz * tmpvar_7.xyz);
  lowp float shadow_17;
  shadow_17 = (_LightShadowData.x + (shadow2DEXT (_ShadowMapTexture, xlv_TEXCOORD6.xyz) * (1.0 - _LightShadowData.x)));
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = shadow_17;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_5;
  mediump vec3 tmpvar_19;
  mediump vec3 tmpvar_20;
  mediump vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = normalWorld_18;
  mediump vec3 x1_22;
  x1_22.x = dot (unity_SHAr, tmpvar_21);
  x1_22.y = dot (unity_SHAg, tmpvar_21);
  x1_22.z = dot (unity_SHAb, tmpvar_21);
  tmpvar_20 = (xlv_TEXCOORD5 + x1_22);
  tmpvar_19 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_19;
  lowp vec4 c_23;
  lowp vec4 c_24;
  lowp float diff_25;
  mediump float tmpvar_26;
  tmpvar_26 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_25 = tmpvar_26;
  c_24.xyz = ((tmpvar_9 * tmpvar_19) * diff_25);
  c_24.w = tmpvar_10;
  c_23.w = c_24.w;
  c_23.xyz = (c_24.xyz + (tmpvar_9 * tmpvar_20));
  c_4.xyz = c_23.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "SHADOWS_NATIVE" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out mediump vec4 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
bool tb2;
highp vec4 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec4 t7;
highp vec4 t8;
highp vec3 t10;
highp float t11;
highp float t12;
highp float t19;
highp vec2 t21;
highp vec2 t23;
highp float t28;
bool tb28;
highp float t29;
bool tb29;
highp float t30;
highp float t31;
mediump float t16_33;
void main()
{
    //Instruction 20998
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20999
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 21000
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 21001
    //MUL
    t10.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 21002
    //MAD
    t10.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t10.xyz;
    //Instruction 21003
    //MAD
    t10.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t10.xyz;
    //Instruction 21004
    //DP3
    t19 = dot(t10.xyz, t10.xyz);
    //Instruction 21005
    //RSQ
    t19 = inversesqrt(t19);
    //Instruction 21006
    //MUL
    t10.xy = vec2(t19) * t10.xz;
    //Instruction 21007
    //AND
    t10.xy = mix(vec2(0.0, 0.0), t10.xy, bvec2(tb1));
    //Instruction 21008
    //EQ
    tb28 = t16_0.x==5.000000;
    //Instruction 21009
    //LT
    tb2 = in_TEXCOORD0.x<0.500000;
    //Instruction 21010
    //AND
    t2.x = tb2 ? 0.750000 : float(0.0);
    //Instruction 21011
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 21012
    //MAD
    t2.x = t11 * _ST_WindFrondRipple.z + t2.x;
    //Instruction 21013
    //ADD
    t2.x = t2.x + 0.500000;
    //Instruction 21014
    //FRC
    t2.x = fract(t2.x);
    //Instruction 21015
    //MAD
    t2.x = t2.x * 2.000000 + -1.0;
    //Instruction 21016
    //MUL
    t11 = abs(t2.x) * abs(t2.x);
    //Instruction 21017
    //MAD
    t2.x = -abs(t2.x) * 2.000000 + 3.000000;
    //Instruction 21018
    //MAD
    t2.x = t11 * t2.x + -0.500000;
    //Instruction 21019
    //MUL
    t2.x = t2.x * in_TEXCOORD2.y;
    //Instruction 21020
    //DP2
    t2.x = dot(_ST_WindFrondRipple.yy, t2.xx);
    //Instruction 21021
    //MAD
    t2.xyz = t2.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 21022
    //MOVC
    t2.xyz = (bool(tb28)) ? t2.xyz : in_POSITION0.xyz;
    //Instruction 21023
    //GE
    tb29 = t16_0.x>=3.000000;
    //Instruction 21024
    //IF
    if(tb29){
        //Instruction 21025
        //IF
        if(tb28){
            //Instruction 21026
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 21027
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 21028
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 21029
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 21030
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 21031
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 21032
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21033
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21034
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21035
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 21036
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21037
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 21038
            //ADD
            t0.x = t28 + in_TEXCOORD0.w;
            //Instruction 21039
            //MAD
            t0.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21040
            //MUL
            t29 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 21041
            //MUL
            t0.z = t29 * 0.500000;
            //Instruction 21042
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 21043
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 21044
            //FRC
            t0 = fract(t0);
            //Instruction 21045
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 21046
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 21047
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 21048
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 21049
            //ADD
            t0 = t0 + t0;
            //Instruction 21050
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 21051
            //LT
            tb29 = t5.w<0.0;
            //Instruction 21052
            //MOV
            t5.y = (-t5.w);
            //Instruction 21053
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 21054
            //MOVC
            t5.xy = (bool(tb29)) ? t5.xy : t5.zw;
            //Instruction 21055
            //MAD
            t29 = (-t0.y) * t0.z + t5.x;
            //Instruction 21056
            //MAD
            t29 = t5.y * t29 + t5.w;
            //Instruction 21057
            //ADD
            t30 = (-t29) + t5.x;
            //Instruction 21058
            //MAD
            t29 = t5.y * t30 + t29;
            //Instruction 21059
            //MUL
            t29 = t29 * _ST_WindBranchTwitch.x;
            //Instruction 21060
            //ADD
            t30 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21061
            //ADD
            t31 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21062
            //MUL
            t31 = t0.x * t31;
            //Instruction 21063
            //MAD
            t29 = t29 * t30 + t31;
            //Instruction 21064
            //MAD
            t30 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 21065
            //MUL
            t29 = t29 * t30;
            //Instruction 21066
            //MUL
            t4.xyz = vec3(t29) * t4.xyz;
            //Instruction 21067
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 21068
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21069
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 21070
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 21071
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 21072
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 21073
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 21074
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 21075
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 21076
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 21077
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 21078
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 21079
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 21080
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 21081
            //MUL
            t29 = t0.w * _ST_WindVector.w;
            //Instruction 21082
            //MAD
            t28 = t29 * _ST_WindBranchWhip.x + t28;
            //Instruction 21083
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 21084
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 21085
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 21086
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 21087
        //ELSE
        } else {
            //Instruction 21088
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 21089
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 21090
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21091
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 21092
            //ADD
            t28 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 21093
            //ADD
            t28 = t28 + _ST_WindBranch.x;
            //Instruction 21094
            //ADD
            t4.x = t28 + in_TEXCOORD0.w;
            //Instruction 21095
            //MAD
            t4.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 21096
            //MUL
            t28 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 21097
            //MUL
            t4.z = t28 * 0.500000;
            //Instruction 21098
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 21099
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 21100
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 21101
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 21102
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 21103
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 21104
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 21105
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 21106
            //LT
            tb28 = t0.w<0.0;
            //Instruction 21107
            //MOV
            t0.y = (-t0.w);
            //Instruction 21108
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 21109
            //MOVC
            t5.xy = (bool(tb28)) ? t0.xy : t0.zw;
            //Instruction 21110
            //MAD
            t28 = (-t4.y) * t4.z + t5.x;
            //Instruction 21111
            //MAD
            t28 = t5.y * t28 + t0.w;
            //Instruction 21112
            //ADD
            t29 = (-t28) + t5.x;
            //Instruction 21113
            //MAD
            t28 = t5.y * t29 + t28;
            //Instruction 21114
            //MUL
            t28 = t28 * _ST_WindBranchTwitch.x;
            //Instruction 21115
            //ADD
            t29 = (-_ST_WindVector.w) + 1.0;
            //Instruction 21116
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 21117
            //MUL
            t30 = t30 * t4.x;
            //Instruction 21118
            //MAD
            t28 = t28 * t29 + t30;
            //Instruction 21119
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 21120
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 21121
        //ENDIF
        }
        //Instruction 21122
    //ENDIF
    }
    //Instruction 21123
    //DP3
    t28 = dot(t2.xyz, t2.xyz);
    //Instruction 21124
    //SQRT
    t28 = sqrt(t28);
    //Instruction 21125
    //DIV
    t29 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 21126
    //MAD
    t29 = (-t29) * 0.250000 + t2.y;
    //Instruction 21127
    //MAX
    t29 = max(t29, 0.0);
    //Instruction 21128
    //MUL
    t29 = t29 * _ST_WindGlobal.z;
    //Instruction 21129
    //NE
    tb3 = t29!=0.0;
    //Instruction 21130
    //LOG
    t12 = log2(t29);
    //Instruction 21131
    //MUL
    t12 = t12 * _ST_WindGlobal.w;
    //Instruction 21132
    //EXP
    t12 = exp2(t12);
    //Instruction 21133
    //MOVC
    t29 = (tb3) ? t12 : t29;
    //Instruction 21134
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 21135
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 21136
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 21137
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 21138
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 21139
    //MUL
    t21.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 21140
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 21141
    //MAD
    t3.xy = t21.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 21142
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 21143
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 21144
    //DIV
    t12 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 21145
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t12;
    //Instruction 21146
    //MUL
    t29 = t29 * t3.x;
    //Instruction 21147
    //MAD
    t3.xz = t10.xy * vec2(t29) + t2.xz;
    //Instruction 21148
    //MOV
    t3.y = t2.y;
    //Instruction 21149
    //DP3
    t10.x = dot(t3.xyz, t3.xyz);
    //Instruction 21150
    //RSQ
    t10.x = inversesqrt(t10.x);
    //Instruction 21151
    //MUL
    t3.xyz = t10.xxx * t3.xyz;
    //Instruction 21152
    //MUL
    t10.xyz = vec3(t28) * t3.xyz;
    //Instruction 21153
    //MOVC
    t1.xyz = (bool(tb1)) ? t10.xyz : t2.xyz;
    //Instruction 21154
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 21155
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 21156
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 21157
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 21158
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 21159
    //MUL
    t28 = t2.y * _ProjectionParams.x;
    //Instruction 21160
    //MUL
    t3.w = t28 * 0.500000;
    //Instruction 21161
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 21162
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 21163
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 21164
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 21165
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 21166
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 21167
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 21168
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 21169
    //MAD
    t3.xyz = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 21170
    //MAD
    t3.xyz = _Object2World[2].xyz * t1.zzz + t3.xyz;
    //Instruction 21171
    //MAD
    t3.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xyz;
    //Instruction 21172
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 21173
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 21174
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 21175
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 21176
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 21177
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 21178
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 21179
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 21180
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 21181
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 21182
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 21183
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 21184
    //DP3
    t28 = dot(t4.xyz, t4.xyz);
    //Instruction 21185
    //RSQ
    t28 = inversesqrt(t28);
    //Instruction 21186
    //MUL
    t4.xyz = vec3(t28) * t4.xyz;
    //Instruction 21187
    //MUL
    t16_0 = t4.yzzx * t4.xyzz;
    //Instruction 21188
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 21189
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 21190
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 21191
    //MUL
    t16_33 = t4.y * t4.y;
    //Instruction 21192
    //MAD
    t16_33 = t4.x * t4.x + (-t16_33);
    //Instruction 21193
    //MAD
    t16_6.xyz = unity_SHC.xyz * vec3(t16_33) + t16_6.xyz;
    //Instruction 21194
    //ADD
    t0 = (-t3.xxxx) + unity_4LightPosX0;
    //Instruction 21195
    //ADD
    t5 = (-t3.yyyy) + unity_4LightPosY0;
    //Instruction 21196
    //ADD
    t7 = (-t3.zzzz) + unity_4LightPosZ0;
    //Instruction 21197
    //MUL
    t8 = t5 * t5;
    //Instruction 21198
    //MAD
    t8 = t0 * t0 + t8;
    //Instruction 21199
    //MAD
    t8 = t7 * t7 + t8;
    //Instruction 21200
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 21201
    //MAD
    t0 = t0 * t4.xxxx + t5;
    //Instruction 21202
    //MAD
    t0 = t7 * t4.zzzz + t0;
    //Instruction 21203
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 21204
    //MUL
    t0 = t0 * t5;
    //Instruction 21205
    //MAX
    t0 = max(t0, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 21206
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 21207
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 21208
    //MUL
    t0 = t0 * t5;
    //Instruction 21209
    //MUL
    t5.xyz = t0.yyy * unity_LightColor[1].xyz;
    //Instruction 21210
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t0.xxx + t5.xyz;
    //Instruction 21211
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t0.zzz + t5.xyz;
    //Instruction 21212
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t0.www + t5.xyz;
    //Instruction 21213
    //ADD
    t5.xyz = t5.xyz + t16_6.xyz;
    //Instruction 21214
    //MUL
    t0 = t1.yyyy * _Object2World[1];
    //Instruction 21215
    //MAD
    t0 = _Object2World[0] * t1.xxxx + t0;
    //Instruction 21216
    //MAD
    t0 = _Object2World[2] * t1.zzzz + t0;
    //Instruction 21217
    //MAD
    t0 = _Object2World[3] * in_POSITION0.wwww + t0;
    //Instruction 21218
    //MUL
    t1 = t0.yyyy * unity_World2Shadow[0][1];
    //Instruction 21219
    //MAD
    t1 = unity_World2Shadow[0][0] * t0.xxxx + t1;
    //Instruction 21220
    //MAD
    t1 = unity_World2Shadow[0][2] * t0.zzzz + t1;
    //Instruction 21221
    //MAD
    t0 = unity_World2Shadow[0][3] * t0.wwww + t1;
    //Instruction 21222
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 21223
    //MOV
    vs_TEXCOORD1.xyz = t3.xyz;
    //Instruction 21224
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 21225
    //MOV
    vs_TEXCOORD6 = t0;
    //Instruction 21226
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 21227
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 21228
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 21229
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 21230
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2DShadow hlslcc_zcmp_ShadowMapTexture;
uniform lowp sampler2D _ShadowMapTexture;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec4 vs_TEXCOORD6;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump float t16_21;
mediump float t16_22;
void main()
{
    //Instruction 20967
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20968
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20969
    //MOV
    t1.x = t16_0.x;
    //Instruction 20970
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20971
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20972
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20973
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20974
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20975
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20976
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20977
    //MUL
    t16_3.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20978
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20979
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20980
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20981
    //MOV
    t16_0.w = 1.0;
    //Instruction 20982
    //DP4
    t16_4.x = dot(unity_SHAr, t16_0);
    //Instruction 20983
    //DP4
    t16_4.y = dot(unity_SHAg, t16_0);
    //Instruction 20984
    //DP4
    t16_4.z = dot(unity_SHAb, t16_0);
    //Instruction 20985
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20986
    //MUL
    t16_4.xyz = t16_3.xyz * t16_4.xyz;
    //Instruction 20987
    //SAMPLE_C_LZ
    vec3 txVec49 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);
    t16_21 = textureLod(hlslcc_zcmp_ShadowMapTexture, txVec49, 0.0);
    //Instruction 20988
    //ADD
    t16_22 = (-_LightShadowData.x) + 1.0;
    //Instruction 20989
    //MAD
    t16_21 = t16_21 * t16_22 + _LightShadowData.x;
    //Instruction 20990
    //MUL
    t16_5.xyz = vec3(t16_21) * _LightColor0.xyz;
    //Instruction 20991
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20992
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20993
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20994
    //MAD
    t16_3.xyz = t16_3.xyz * vec3(t16_21) + t16_4.xyz;
    //Instruction 20995
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20996
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20997
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_3.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    highp float fOffset_22;
    fOffset_22 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_22 = 0.75;
    };
    highp vec4 tmpvar_23;
    tmpvar_23.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_23.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_22);
    highp vec4 tmpvar_24;
    tmpvar_24 = abs(((
      fract((tmpvar_23 + 0.5))
     * 2.0) - 1.0));
    vPos_21 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_24 * tmpvar_24)
       * 
        (3.0 - (2.0 * tmpvar_24))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_13 = tmpvar_2;
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_25;
    vPos_25 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_26;
      vPos_26 = FinalPosition_16;
      highp float fTime_27;
      highp float fAdherenceScale_28;
      highp vec3 vWindVector_29;
      vWindVector_29 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_27 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_30;
      highp float fOscillation_31;
      fOscillation_31 = 1.0;
      highp float fAmount_32;
      highp float fTarget_33;
      highp vec4 tmpvar_34;
      tmpvar_34.x = (fTime_27 + _glesMultiTexCoord0.w);
      tmpvar_34.y = ((fTime_27 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_34.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_27 + _glesMultiTexCoord0.w));
      tmpvar_34.w = ((fTime_27 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      vOscillations_30 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      highp float tmpvar_36;
      tmpvar_36 = (vOscillations_30.y * vOscillations_30.z);
      fTarget_33 = 1.0;
      fAmount_32 = tmpvar_36;
      if ((tmpvar_36 < 0.0)) {
        fTarget_33 = -1.0;
        fAmount_32 = -(tmpvar_36);
      };
      fOscillation_31 = (((
        mix (mix (tmpvar_36, fTarget_33, fAmount_32), fTarget_33, fAmount_32)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_30.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_31 = (fOscillation_31 * (1.0 + (vOscillations_30.w * _ST_WindBranchWhip.x)));
      vPos_26 = (FinalPosition_16 + ((vWindVector_29 * fOscillation_31) * _ST_WindBranch.y));
      highp vec4 tmpvar_37;
      tmpvar_37.zw = vec2(0.0, 0.0);
      tmpvar_37.x = ((fTime_27 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_37.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_38;
      highp vec4 tmpvar_39;
      tmpvar_39 = abs(((
        fract((tmpvar_37 + 0.5))
       * 2.0) - 1.0));
      tmpvar_38 = (((
        (tmpvar_39 * tmpvar_39)
       * 
        (3.0 - (2.0 * tmpvar_39))
      ) - 0.5) * 2.0);
      fAdherenceScale_28 = (1.0 - ((tmpvar_38.x * tmpvar_38.y) * (
        (tmpvar_38.x * tmpvar_38.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_28 = (fAdherenceScale_28 + ((vOscillations_30.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_26 = (vPos_26 + ((
        ((vRotatedBranchAnchor_14 - vPos_26) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_28) * _glesMultiTexCoord0.z));
      vPos_25 = vPos_26;
    } else {
      highp vec3 vPos_40;
      vPos_40 = vPos_25;
      highp float fTime_41;
      highp vec3 vWindVector_42;
      vWindVector_42 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_41 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_43;
      highp float fOscillation_44;
      fOscillation_44 = 1.0;
      highp float fAmount_45;
      highp float fTarget_46;
      highp vec4 tmpvar_47;
      tmpvar_47.w = 0.0;
      tmpvar_47.x = (fTime_41 + _glesMultiTexCoord0.w);
      tmpvar_47.y = ((fTime_41 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_47.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_41 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_47 + 0.5))
       * 2.0) - 1.0));
      vOscillations_43 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      highp float tmpvar_49;
      tmpvar_49 = (vOscillations_43.y * vOscillations_43.z);
      fTarget_46 = 1.0;
      fAmount_45 = tmpvar_49;
      if ((tmpvar_49 < 0.0)) {
        fTarget_46 = -1.0;
        fAmount_45 = -(tmpvar_49);
      };
      fOscillation_44 = (((
        mix (mix (tmpvar_49, fTarget_46, fAmount_45), fTarget_46, fAmount_45)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_43.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_40 = (vPos_25 + ((vWindVector_42 * fOscillation_44) * _ST_WindBranch.y));
      vPos_25 = vPos_40;
    };
    FinalPosition_16 = vPos_25;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_50;
    vPos_50 = FinalPosition_16;
    highp float fMoveAmount_51;
    highp float fAdjust_52;
    highp float fLength_53;
    fLength_53 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_54;
    tmpvar_54 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_52 = tmpvar_54;
    if ((tmpvar_54 != 0.0)) {
      fAdjust_52 = pow (tmpvar_54, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_55;
    tmpvar_55.zw = vec2(0.0, 0.0);
    tmpvar_55.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_55.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_56;
    highp vec4 tmpvar_57;
    tmpvar_57 = abs(((
      fract((tmpvar_55 + 0.5))
     * 2.0) - 1.0));
    tmpvar_56 = (((
      (tmpvar_57 * tmpvar_57)
     * 
      (3.0 - (2.0 * tmpvar_57))
    ) - 0.5) * 2.0);
    fMoveAmount_51 = ((_ST_WindGlobal.y * (tmpvar_56.x + 
      (tmpvar_56.y * tmpvar_56.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_51 = (fMoveAmount_51 * fAdjust_52);
    vPos_50.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_51));
    vPos_50 = (normalize(vPos_50) * fLength_53);
    FinalPosition_16 = vPos_50;
  };
  tmpvar_12.xyz = FinalPosition_16;
  highp vec4 hPos_58;
  hPos_58 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_59;
  highp vec4 o_60;
  highp vec4 tmpvar_61;
  tmpvar_61 = (hPos_58 * 0.5);
  highp vec2 tmpvar_62;
  tmpvar_62.x = tmpvar_61.x;
  tmpvar_62.y = (tmpvar_61.y * _ProjectionParams.x);
  o_60.xy = (tmpvar_62 + tmpvar_61.w);
  o_60.zw = hPos_58.zw;
  highp vec3 tmpvar_63;
  tmpvar_63 = o_60.xyw;
  screenPos_59 = tmpvar_63;
  screenPos_59.xy = (screenPos_59.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_7;
  highp vec4 v_64;
  v_64.x = _World2Object[0].x;
  v_64.y = _World2Object[1].x;
  v_64.z = _World2Object[2].x;
  v_64.w = _World2Object[3].x;
  highp vec4 v_65;
  v_65.x = _World2Object[0].y;
  v_65.y = _World2Object[1].y;
  v_65.z = _World2Object[2].y;
  v_65.w = _World2Object[3].y;
  highp vec4 v_66;
  v_66.x = _World2Object[0].z;
  v_66.y = _World2Object[1].z;
  v_66.z = _World2Object[2].z;
  v_66.w = _World2Object[3].z;
  highp vec3 tmpvar_67;
  tmpvar_67 = normalize(((
    (v_64.xyz * tmpvar_13.x)
   + 
    (v_65.xyz * tmpvar_13.y)
  ) + (v_66.xyz * tmpvar_13.z)));
  worldNormal_4 = tmpvar_67;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_68;
  tmpvar_68.w = 1.0;
  tmpvar_68.xyz = worldNormal_4;
  mediump vec4 normal_69;
  normal_69 = tmpvar_68;
  mediump vec3 x2_70;
  mediump vec4 tmpvar_71;
  tmpvar_71 = (normal_69.xyzz * normal_69.yzzx);
  x2_70.x = dot (unity_SHBr, tmpvar_71);
  x2_70.y = dot (unity_SHBg, tmpvar_71);
  x2_70.z = dot (unity_SHBb, tmpvar_71);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_59;
  xlv_TEXCOORD5 = (x2_70 + (unity_SHC.xyz * (
    (normal_69.x * normal_69.x)
   - 
    (normal_69.y * normal_69.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp float t11;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 20058
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20059
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20060
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 20061
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20062
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 20063
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 20064
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 20065
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 20066
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20067
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 20068
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 20069
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20070
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20071
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20072
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 20073
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 20074
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 20075
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 20076
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 20077
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 20078
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 20079
    //ADD
    t11 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20080
    //MAD
    t3.x = t11 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 20081
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 20082
    //FRC
    t3.x = fract(t3.x);
    //Instruction 20083
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 20084
    //MUL
    t11 = abs(t3.x) * abs(t3.x);
    //Instruction 20085
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 20086
    //MAD
    t3.x = t11 * t3.x + -0.500000;
    //Instruction 20087
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 20088
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 20089
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20090
    //MOVC
    t3.xyz = (bool(tb25)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 20091
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 20092
    //IF
    if(tb27){
        //Instruction 20093
        //IF
        if(tb25){
            //Instruction 20094
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20095
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 20096
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 20097
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 20098
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 20099
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 20100
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20101
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20102
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20103
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 20104
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 20105
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 20106
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20107
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20108
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 20109
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20110
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20111
            //FRC
            t2 = fract(t2);
            //Instruction 20112
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20113
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 20114
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20115
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20116
            //ADD
            t2 = t2 + t2;
            //Instruction 20117
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 20118
            //LT
            tb27 = t6.w<0.0;
            //Instruction 20119
            //MOV
            t6.y = (-t6.w);
            //Instruction 20120
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 20121
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 20122
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 20123
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 20124
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 20125
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 20126
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 20127
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20128
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20129
            //MUL
            t29 = t2.x * t29;
            //Instruction 20130
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 20131
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20132
            //MUL
            t27 = t27 * t28;
            //Instruction 20133
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 20134
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20135
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20136
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20137
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20138
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 20139
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 20140
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20141
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 20142
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20143
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 20144
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 20145
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 20146
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 20147
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20148
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 20149
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 20150
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 20151
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20152
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 20153
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 20154
        //ELSE
        } else {
            //Instruction 20155
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20156
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20157
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20158
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20159
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20160
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20161
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20162
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20163
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20164
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20165
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20166
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20167
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20168
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20169
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20170
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20171
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20172
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20173
            //MOV
            t2.y = (-t2.w);
            //Instruction 20174
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20175
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20176
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20177
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20178
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 20179
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 20180
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20181
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20182
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20183
            //MUL
            t27 = t27 * t5.x;
            //Instruction 20184
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 20185
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20186
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20187
        //ENDIF
        }
        //Instruction 20188
    //ENDIF
    }
    //Instruction 20189
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20190
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20191
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20192
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 20193
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 20194
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 20195
    //NE
    tb27 = t25!=0.0;
    //Instruction 20196
    //LOG
    t4.x = log2(t25);
    //Instruction 20197
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20198
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20199
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 20200
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20201
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20202
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20203
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20204
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20205
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20206
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20207
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20208
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20209
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 20210
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20211
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 20212
    //MUL
    t25 = t25 * t27;
    //Instruction 20213
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 20214
    //MOV
    t4.y = t3.y;
    //Instruction 20215
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 20216
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 20217
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 20218
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20219
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 20220
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20221
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20222
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20223
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20224
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20225
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 20226
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 20227
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20228
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20229
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20230
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20231
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20232
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20233
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20234
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20235
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20236
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 20237
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 20238
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 20239
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 20240
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 20241
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 20242
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 20243
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 20244
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 20245
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 20246
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 20247
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 20248
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 20249
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 20250
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 20251
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 20252
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 20253
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 20254
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 20255
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 20256
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 20257
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 20258
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 20259
    //MAD
    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 20260
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 20261
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20262
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20263
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 20264
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 20265
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 20022
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20023
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20024
    //MOV
    t1.x = t16_0.x;
    //Instruction 20025
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20026
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20027
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20028
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20029
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20030
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20031
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20032
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20033
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20034
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 20035
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 20036
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 20037
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 20038
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 20039
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 20040
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 20041
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 20042
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 20043
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20044
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 20045
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20046
    //MOV
    t16_0.w = 1.0;
    //Instruction 20047
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 20048
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 20049
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 20050
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20051
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20052
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20053
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20054
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 20055
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20056
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20057
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 unity_World2Shadow[4];
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec4 v_65;
  v_65.x = _World2Object[0].x;
  v_65.y = _World2Object[1].x;
  v_65.z = _World2Object[2].x;
  v_65.w = _World2Object[3].x;
  highp vec4 v_66;
  v_66.x = _World2Object[0].y;
  v_66.y = _World2Object[1].y;
  v_66.z = _World2Object[2].y;
  v_66.w = _World2Object[3].y;
  highp vec4 v_67;
  v_67.x = _World2Object[0].z;
  v_67.y = _World2Object[1].z;
  v_67.z = _World2Object[2].z;
  v_67.w = _World2Object[3].z;
  highp vec3 tmpvar_68;
  tmpvar_68 = normalize(((
    (v_65.xyz * tmpvar_14.x)
   + 
    (v_66.xyz * tmpvar_14.y)
  ) + (v_67.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_68;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_69;
  tmpvar_69.w = 1.0;
  tmpvar_69.xyz = worldNormal_4;
  mediump vec4 normal_70;
  normal_70 = tmpvar_69;
  mediump vec3 x2_71;
  mediump vec4 tmpvar_72;
  tmpvar_72 = (normal_70.xyzz * normal_70.yzzx);
  x2_71.x = dot (unity_SHBr, tmpvar_72);
  x2_71.y = dot (unity_SHBg, tmpvar_72);
  x2_71.z = dot (unity_SHBb, tmpvar_72);
  tmpvar_7 = (unity_World2Shadow[0] * (_Object2World * tmpvar_13));
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_60;
  xlv_TEXCOORD5 = (x2_71 + (unity_SHC.xyz * (
    (normal_70.x * normal_70.x)
   - 
    (normal_70.y * normal_70.y)
  )));
  xlv_TEXCOORD6 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform mediump vec4 _LightShadowData;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform highp sampler2D _ShadowMapTexture;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec4 xlv_TEXCOORD6;
void main ()
{
  mediump float tmpvar_1;
  mediump vec3 tmpvar_2;
  mediump vec3 tmpvar_3;
  lowp vec4 c_4;
  lowp vec3 tmpvar_5;
  lowp vec3 lightDir_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_8;
  tmpvar_8 = _WorldSpaceLightPos0.xyz;
  lightDir_6 = tmpvar_8;
  tmpvar_5 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_9;
  lowp float tmpvar_10;
  mediump float maxBase_11;
  mediump vec4 diffuseColor_12;
  mediump vec2 projUV_13;
  mediump vec2 tmpvar_14;
  tmpvar_14 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_13.x = tmpvar_14.x;
  projUV_13.y = ((fract(tmpvar_14.y) * 0.0625) + unity_LODFade.y);
  lowp float x_15;
  x_15 = (texture2D (_DitherMaskLOD2D, projUV_13).w - 0.5);
  if ((x_15 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_16;
  tmpvar_16 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_12 = tmpvar_16;
  tmpvar_10 = (diffuseColor_12.w * _Color.w);
  lowp float x_17;
  x_17 = (tmpvar_10 - _Cutoff);
  if ((x_17 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_18;
  tmpvar_18 = mix (diffuseColor_12.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_11 = (max (diffuseColor_12.x, max (diffuseColor_12.y, diffuseColor_12.z)) / max (tmpvar_18.x, max (tmpvar_18.y, tmpvar_18.z)));
  maxBase_11 = ((maxBase_11 * 0.5) + 0.5);
  diffuseColor_12.xyz = clamp ((tmpvar_18 * maxBase_11), 0.0, 1.0);
  tmpvar_9 = (diffuseColor_12.xyz * tmpvar_7.xyz);
  lowp float tmpvar_19;
  highp float tmpvar_20;
  tmpvar_20 = max (float((texture2DProj (_ShadowMapTexture, xlv_TEXCOORD6).x > 
    (xlv_TEXCOORD6.z / xlv_TEXCOORD6.w)
  )), _LightShadowData.x);
  tmpvar_19 = tmpvar_20;
  tmpvar_2 = _LightColor0.xyz;
  tmpvar_3 = lightDir_6;
  tmpvar_1 = tmpvar_19;
  mediump vec3 normalWorld_21;
  normalWorld_21 = tmpvar_5;
  mediump vec3 tmpvar_22;
  mediump vec3 tmpvar_23;
  mediump vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = normalWorld_21;
  mediump vec3 x1_25;
  x1_25.x = dot (unity_SHAr, tmpvar_24);
  x1_25.y = dot (unity_SHAg, tmpvar_24);
  x1_25.z = dot (unity_SHAb, tmpvar_24);
  tmpvar_23 = (xlv_TEXCOORD5 + x1_25);
  tmpvar_22 = (tmpvar_2 * tmpvar_1);
  tmpvar_2 = tmpvar_22;
  lowp vec4 c_26;
  lowp vec4 c_27;
  lowp float diff_28;
  mediump float tmpvar_29;
  tmpvar_29 = max (0.0, dot (tmpvar_5, tmpvar_3));
  diff_28 = tmpvar_29;
  c_27.xyz = ((tmpvar_9 * tmpvar_22) * diff_28);
  c_27.w = tmpvar_10;
  c_26.w = c_27.w;
  c_26.xyz = (c_27.xyz + (tmpvar_9 * tmpvar_23));
  c_4.xyz = c_26.xyz;
  c_4.w = 1.0;
  gl_FragData[0] = c_4;
}


#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  mediump vec3 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (_glesVertex.xyz + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  highp vec4 hPos_59;
  hPos_59 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_60;
  highp vec4 o_61;
  highp vec4 tmpvar_62;
  tmpvar_62 = (hPos_59 * 0.5);
  highp vec2 tmpvar_63;
  tmpvar_63.x = tmpvar_62.x;
  tmpvar_63.y = (tmpvar_62.y * _ProjectionParams.x);
  o_61.xy = (tmpvar_63 + tmpvar_62.w);
  o_61.zw = hPos_59.zw;
  highp vec3 tmpvar_64;
  tmpvar_64 = o_61.xyw;
  screenPos_60 = tmpvar_64;
  screenPos_60.xy = (screenPos_60.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_65;
  tmpvar_65 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_66;
  v_66.x = _World2Object[0].x;
  v_66.y = _World2Object[1].x;
  v_66.z = _World2Object[2].x;
  v_66.w = _World2Object[3].x;
  highp vec4 v_67;
  v_67.x = _World2Object[0].y;
  v_67.y = _World2Object[1].y;
  v_67.z = _World2Object[2].y;
  v_67.w = _World2Object[3].y;
  highp vec4 v_68;
  v_68.x = _World2Object[0].z;
  v_68.y = _World2Object[1].z;
  v_68.z = _World2Object[2].z;
  v_68.w = _World2Object[3].z;
  highp vec3 tmpvar_69;
  tmpvar_69 = normalize(((
    (v_66.xyz * tmpvar_14.x)
   + 
    (v_67.xyz * tmpvar_14.y)
  ) + (v_68.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_69;
  tmpvar_5 = worldNormal_4;
  lowp vec4 tmpvar_70;
  tmpvar_70.w = 1.0;
  tmpvar_70.xyz = worldNormal_4;
  mediump vec4 normal_71;
  normal_71 = tmpvar_70;
  mediump vec3 x2_72;
  mediump vec4 tmpvar_73;
  tmpvar_73 = (normal_71.xyzz * normal_71.yzzx);
  x2_72.x = dot (unity_SHBr, tmpvar_73);
  x2_72.y = dot (unity_SHBg, tmpvar_73);
  x2_72.z = dot (unity_SHBb, tmpvar_73);
  highp vec3 lightColor0_74;
  lightColor0_74 = unity_LightColor[0].xyz;
  highp vec3 lightColor1_75;
  lightColor1_75 = unity_LightColor[1].xyz;
  highp vec3 lightColor2_76;
  lightColor2_76 = unity_LightColor[2].xyz;
  highp vec3 lightColor3_77;
  lightColor3_77 = unity_LightColor[3].xyz;
  highp vec4 lightAttenSq_78;
  lightAttenSq_78 = unity_4LightAtten0;
  highp vec3 normal_79;
  normal_79 = worldNormal_4;
  highp vec3 col_80;
  highp vec4 ndotl_81;
  highp vec4 lengthSq_82;
  highp vec4 tmpvar_83;
  tmpvar_83 = (unity_4LightPosX0 - tmpvar_65.x);
  highp vec4 tmpvar_84;
  tmpvar_84 = (unity_4LightPosY0 - tmpvar_65.y);
  highp vec4 tmpvar_85;
  tmpvar_85 = (unity_4LightPosZ0 - tmpvar_65.z);
  lengthSq_82 = (tmpvar_83 * tmpvar_83);
  lengthSq_82 = (lengthSq_82 + (tmpvar_84 * tmpvar_84));
  lengthSq_82 = (lengthSq_82 + (tmpvar_85 * tmpvar_85));
  ndotl_81 = (tmpvar_83 * normal_79.x);
  ndotl_81 = (ndotl_81 + (tmpvar_84 * normal_79.y));
  ndotl_81 = (ndotl_81 + (tmpvar_85 * normal_79.z));
  highp vec4 tmpvar_86;
  tmpvar_86 = max (vec4(0.0, 0.0, 0.0, 0.0), (ndotl_81 * inversesqrt(lengthSq_82)));
  ndotl_81 = tmpvar_86;
  highp vec4 tmpvar_87;
  tmpvar_87 = (tmpvar_86 * (1.0/((1.0 + 
    (lengthSq_82 * lightAttenSq_78)
  ))));
  col_80 = (lightColor0_74 * tmpvar_87.x);
  col_80 = (col_80 + (lightColor1_75 * tmpvar_87.y));
  col_80 = (col_80 + (lightColor2_76 * tmpvar_87.z));
  col_80 = (col_80 + (lightColor3_77 * tmpvar_87.w));
  tmpvar_7 = ((x2_72 + (unity_SHC.xyz * 
    ((normal_71.x * normal_71.x) - (normal_71.y * normal_71.y))
  )) + col_80);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = tmpvar_65;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = screenPos_60;
  xlv_TEXCOORD5 = tmpvar_7;
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
uniform mediump vec4 _WorldSpaceLightPos0;
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform lowp vec4 _LightColor0;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
void main ()
{
  mediump vec3 tmpvar_1;
  mediump vec3 tmpvar_2;
  lowp vec4 c_3;
  lowp vec3 tmpvar_4;
  lowp vec3 lightDir_5;
  lowp vec4 tmpvar_6;
  tmpvar_6 = xlv_TEXCOORD2;
  mediump vec3 tmpvar_7;
  tmpvar_7 = _WorldSpaceLightPos0.xyz;
  lightDir_5 = tmpvar_7;
  tmpvar_4 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_8;
  lowp float tmpvar_9;
  mediump float maxBase_10;
  mediump vec4 diffuseColor_11;
  mediump vec2 projUV_12;
  mediump vec2 tmpvar_13;
  tmpvar_13 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_12.x = tmpvar_13.x;
  projUV_12.y = ((fract(tmpvar_13.y) * 0.0625) + unity_LODFade.y);
  lowp float x_14;
  x_14 = (texture2D (_DitherMaskLOD2D, projUV_12).w - 0.5);
  if ((x_14 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_15;
  tmpvar_15 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_11 = tmpvar_15;
  tmpvar_9 = (diffuseColor_11.w * _Color.w);
  lowp float x_16;
  x_16 = (tmpvar_9 - _Cutoff);
  if ((x_16 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_17;
  tmpvar_17 = mix (diffuseColor_11.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_10 = (max (diffuseColor_11.x, max (diffuseColor_11.y, diffuseColor_11.z)) / max (tmpvar_17.x, max (tmpvar_17.y, tmpvar_17.z)));
  maxBase_10 = ((maxBase_10 * 0.5) + 0.5);
  diffuseColor_11.xyz = clamp ((tmpvar_17 * maxBase_10), 0.0, 1.0);
  tmpvar_8 = (diffuseColor_11.xyz * tmpvar_6.xyz);
  tmpvar_1 = _LightColor0.xyz;
  tmpvar_2 = lightDir_5;
  mediump vec3 normalWorld_18;
  normalWorld_18 = tmpvar_4;
  mediump vec3 tmpvar_19;
  mediump vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = normalWorld_18;
  mediump vec3 x1_21;
  x1_21.x = dot (unity_SHAr, tmpvar_20);
  x1_21.y = dot (unity_SHAg, tmpvar_20);
  x1_21.z = dot (unity_SHAb, tmpvar_20);
  tmpvar_19 = (xlv_TEXCOORD5 + x1_21);
  lowp vec4 c_22;
  lowp vec4 c_23;
  lowp float diff_24;
  mediump float tmpvar_25;
  tmpvar_25 = max (0.0, dot (tmpvar_4, tmpvar_2));
  diff_24 = tmpvar_25;
  c_23.xyz = ((tmpvar_8 * tmpvar_1) * diff_24);
  c_23.w = tmpvar_9;
  c_22.w = c_23.w;
  c_22.xyz = (c_23.xyz + (tmpvar_8 * tmpvar_19));
  c_3.xyz = c_22.xyz;
  c_3.w = 1.0;
  gl_FragData[0] = c_3;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "DIRECTIONAL" "SHADOWS_OFF" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
bool tb3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec4 t8;
highp vec2 t9;
bool tb9;
highp float t12;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_34;
void main()
{
    //Instruction 20302
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 20303
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 20304
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 20305
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 20306
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 20307
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 20308
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 20309
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 20310
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 20311
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 20312
    //LT
    tb9 = 0.0<t16_2.x;
    //Instruction 20313
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 20314
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 20315
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 20316
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 20317
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20318
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 20319
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 20320
    //EQ
    tb28 = t16_2.x==5.000000;
    //Instruction 20321
    //LT
    tb3 = in_TEXCOORD0.x<0.500000;
    //Instruction 20322
    //AND
    t3.x = tb3 ? 0.750000 : float(0.0);
    //Instruction 20323
    //ADD
    t12 = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 20324
    //MAD
    t3.x = t12 * _ST_WindFrondRipple.z + t3.x;
    //Instruction 20325
    //ADD
    t3.x = t3.x + 0.500000;
    //Instruction 20326
    //FRC
    t3.x = fract(t3.x);
    //Instruction 20327
    //MAD
    t3.x = t3.x * 2.000000 + -1.0;
    //Instruction 20328
    //MUL
    t12 = abs(t3.x) * abs(t3.x);
    //Instruction 20329
    //MAD
    t3.x = -abs(t3.x) * 2.000000 + 3.000000;
    //Instruction 20330
    //MAD
    t3.x = t12 * t3.x + -0.500000;
    //Instruction 20331
    //MUL
    t3.x = t3.x * in_TEXCOORD2.y;
    //Instruction 20332
    //DP2
    t3.x = dot(_ST_WindFrondRipple.yy, t3.xx);
    //Instruction 20333
    //MAD
    t3.xyz = t3.xxx * in_NORMAL0.xyz + in_POSITION0.xyz;
    //Instruction 20334
    //MOVC
    t3.xyz = (bool(tb28)) ? t3.xyz : in_POSITION0.xyz;
    //Instruction 20335
    //GE
    tb30 = t16_2.x>=3.000000;
    //Instruction 20336
    //IF
    if(tb30){
        //Instruction 20337
        //IF
        if(tb28){
            //Instruction 20338
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 20339
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 20340
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 20341
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 20342
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 20343
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 20344
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20345
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20346
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20347
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 20348
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 20349
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 20350
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20351
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 20352
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 20353
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 20354
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 20355
            //FRC
            t2 = fract(t2);
            //Instruction 20356
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 20357
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 20358
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 20359
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 20360
            //ADD
            t2 = t2 + t2;
            //Instruction 20361
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 20362
            //LT
            tb30 = t6.w<0.0;
            //Instruction 20363
            //MOV
            t6.y = (-t6.w);
            //Instruction 20364
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 20365
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 20366
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 20367
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 20368
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 20369
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 20370
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 20371
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20372
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20373
            //MUL
            t32 = t2.x * t32;
            //Instruction 20374
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 20375
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 20376
            //MUL
            t30 = t30 * t31;
            //Instruction 20377
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 20378
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20379
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20380
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 20381
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 20382
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 20383
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 20384
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 20385
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 20386
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 20387
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 20388
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 20389
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 20390
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 20391
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 20392
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 20393
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 20394
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 20395
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 20396
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 20397
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 20398
        //ELSE
        } else {
            //Instruction 20399
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 20400
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 20401
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20402
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 20403
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 20404
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 20405
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 20406
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 20407
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 20408
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 20409
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 20410
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 20411
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 20412
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 20413
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 20414
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 20415
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 20416
            //LT
            tb0 = t2.w<0.0;
            //Instruction 20417
            //MOV
            t2.y = (-t2.w);
            //Instruction 20418
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 20419
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 20420
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 20421
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 20422
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 20423
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 20424
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 20425
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 20426
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 20427
            //MUL
            t30 = t30 * t5.x;
            //Instruction 20428
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 20429
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 20430
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 20431
        //ENDIF
        }
        //Instruction 20432
    //ENDIF
    }
    //Instruction 20433
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 20434
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 20435
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 20436
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 20437
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 20438
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 20439
    //NE
    tb30 = t28!=0.0;
    //Instruction 20440
    //LOG
    t4.x = log2(t28);
    //Instruction 20441
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 20442
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 20443
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 20444
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 20445
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 20446
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 20447
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 20448
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 20449
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 20450
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 20451
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 20452
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 20453
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 20454
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 20455
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 20456
    //MUL
    t28 = t28 * t30;
    //Instruction 20457
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 20458
    //MOV
    t4.y = t3.y;
    //Instruction 20459
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 20460
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 20461
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 20462
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 20463
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 20464
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 20465
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 20466
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 20467
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 20468
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 20469
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 20470
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 20471
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 20472
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 20473
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 20474
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 20475
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 20476
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 20477
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 20478
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 20479
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 20480
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 20481
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 20482
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 20483
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 20484
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 20485
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 20486
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 20487
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 20488
    //MUL
    t5.xyz = t5.xyz * in_NORMAL0.yyy;
    //Instruction 20489
    //MAD
    t4.xyz = t4.xyz * in_NORMAL0.xxx + t5.xyz;
    //Instruction 20490
    //MOV
    t5.x = _World2Object[0].z;
    //Instruction 20491
    //MOV
    t5.y = _World2Object[1].z;
    //Instruction 20492
    //MOV
    t5.z = _World2Object[2].z;
    //Instruction 20493
    //MAD
    t4.xyz = t5.xyz * in_NORMAL0.zzz + t4.xyz;
    //Instruction 20494
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 20495
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 20496
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 20497
    //MUL
    t16_2 = t4.yzzx * t4.xyzz;
    //Instruction 20498
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 20499
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 20500
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 20501
    //MUL
    t16_34 = t4.y * t4.y;
    //Instruction 20502
    //MAD
    t16_34 = t4.x * t4.x + (-t16_34);
    //Instruction 20503
    //MAD
    t16_7.xyz = unity_SHC.xyz * vec3(t16_34) + t16_7.xyz;
    //Instruction 20504
    //ADD
    t2 = (-t0.xxxx) + unity_4LightPosX0;
    //Instruction 20505
    //ADD
    t5 = (-t0.yyyy) + unity_4LightPosY0;
    //Instruction 20506
    //ADD
    t6 = (-t0.zzzz) + unity_4LightPosZ0;
    //Instruction 20507
    //MUL
    t8 = t5 * t5;
    //Instruction 20508
    //MAD
    t8 = t2 * t2 + t8;
    //Instruction 20509
    //MAD
    t8 = t6 * t6 + t8;
    //Instruction 20510
    //MUL
    t5 = t4.yyyy * t5;
    //Instruction 20511
    //MAD
    t2 = t2 * t4.xxxx + t5;
    //Instruction 20512
    //MAD
    t2 = t6 * t4.zzzz + t2;
    //Instruction 20513
    //RSQ
    t5 = inversesqrt(t8);
    //Instruction 20514
    //MUL
    t2 = t2 * t5;
    //Instruction 20515
    //MAX
    t2 = max(t2, vec4(0.0, 0.0, 0.0, 0.0));
    //Instruction 20516
    //MAD
    t5 = t8 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);
    //Instruction 20517
    //DIV
    t5 = vec4(1.0, 1.0, 1.0, 1.0) / t5;
    //Instruction 20518
    //MUL
    t2 = t2 * t5;
    //Instruction 20519
    //MUL
    t5.xyz = t2.yyy * unity_LightColor[1].xyz;
    //Instruction 20520
    //MAD
    t5.xyz = unity_LightColor[0].xyz * t2.xxx + t5.xyz;
    //Instruction 20521
    //MAD
    t5.xyz = unity_LightColor[2].xyz * t2.zzz + t5.xyz;
    //Instruction 20522
    //MAD
    t5.xyz = unity_LightColor[3].xyz * t2.www + t5.xyz;
    //Instruction 20523
    //ADD
    t5.xyz = t5.xyz + t16_7.xyz;
    //Instruction 20524
    //MOV
    vs_TEXCOORD0.xyz = t4.xyz;
    //Instruction 20525
    //MOV
    vs_TEXCOORD1.xyz = t0.xyz;
    //Instruction 20526
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 20527
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 20528
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 20529
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 20530
    //MOV
    vs_TEXCOORD5.xyz = t5.xyz;
    //Instruction 20531
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	mediump vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
layout(location = 0) out lowp vec4 SV_Target0;
mediump vec4 t16_0;
lowp vec4 t10_0;
highp vec2 t1;
mediump float t16_1;
lowp float t10_1;
bool tb1;
lowp float t10_2;
mediump vec3 t16_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
mediump float t16_6;
mediump vec3 t16_9;
mediump float t16_21;
void main()
{
    //Instruction 20266
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 20267
    //FRC
    t16_6 = fract(t16_0.y);
    //Instruction 20268
    //MOV
    t1.x = t16_0.x;
    //Instruction 20269
    //MAD
    t1.y = t16_6 * 0.062500 + unity_LODFade.y;
    //Instruction 20270
    //SAMPLE
    t10_1 = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 20271
    //ADD
    t16_1 = t10_1 + -0.500000;
    //Instruction 20272
    //LT
    tb1 = t16_1<0.0;
    //Instruction 20273
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20274
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 20275
    //MAD
    t10_2 = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 20276
    //LT
    tb1 = t10_2<0.0;
    //Instruction 20277
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 20278
    //MAX
    t16_3.x = max(t10_0.z, t10_0.y);
    //Instruction 20279
    //MAX
    t16_3.x = max(t10_0.x, t16_3.x);
    //Instruction 20280
    //ADD
    t16_9.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 20281
    //MAD
    t16_9.xyz = vs_TEXCOORD3.zzz * t16_9.xyz + t10_0.xyz;
    //Instruction 20282
    //MAX
    t16_4.x = max(t16_9.z, t16_9.y);
    //Instruction 20283
    //MAX
    t16_4.x = max(t16_9.x, t16_4.x);
    //Instruction 20284
    //DIV
    t16_3.x = t16_3.x / t16_4.x;
    //Instruction 20285
    //MAD
    t16_1 = t16_3.x * 0.500000 + 0.500000;
    //Instruction 20286
    //MUL
    t16_3.xyz = vec3(t16_1) * t16_9.xyz;
    t16_3.xyz = clamp(t16_3.xyz, 0.0, 1.0);
    //Instruction 20287
    //MUL
    t16_3.xyz = t16_3.xyz * vs_TEXCOORD2.xyz;
    //Instruction 20288
    //MUL
    t16_4.xyz = t16_3.xyz * _LightColor0.xyz;
    //Instruction 20289
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 20290
    //MOV
    t16_0.w = 1.0;
    //Instruction 20291
    //DP4
    t16_5.x = dot(unity_SHAr, t16_0);
    //Instruction 20292
    //DP4
    t16_5.y = dot(unity_SHAg, t16_0);
    //Instruction 20293
    //DP4
    t16_5.z = dot(unity_SHAb, t16_0);
    //Instruction 20294
    //ADD
    t16_5.xyz = t16_5.xyz + vs_TEXCOORD5.xyz;
    //Instruction 20295
    //MUL
    t16_3.xyz = t16_3.xyz * t16_5.xyz;
    //Instruction 20296
    //DP3
    t16_21 = dot(vs_TEXCOORD0.xyz, _WorldSpaceLightPos0.xyz);
    //Instruction 20297
    //MAX
    t16_21 = max(t16_21, 0.0);
    //Instruction 20298
    //MAD
    t16_3.xyz = t16_4.xyz * vec3(t16_21) + t16_3.xyz;
    //Instruction 20299
    //MOV
    SV_Target0.xyz = t16_3.xyz;
    //Instruction 20300
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 20301
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "VERTEXLIGHT_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform highp vec4 unity_4LightPosX0;
uniform highp vec4 unity_4LightPosY0;
uniform highp vec4 unity_4LightPosZ0;
uniform mediump vec4 unity_4LightAtten0;
uniform mediump vec4 unity_LightColor[8];
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
unif