       //Instruction 49664
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 49665
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49666
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49667
            //MUL
            t32 = t2.x * t32;
            //Instruction 49668
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 49669
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49670
            //MUL
            t30 = t30 * t31;
            //Instruction 49671
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 49672
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49673
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49674
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49675
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49676
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49677
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49678
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49679
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49680
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49681
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49682
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49683
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49684
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 49685
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49686
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 49687
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 49688
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49689
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49690
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 49691
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49692
        //ELSE
        } else {
            //Instruction 49693
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49694
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49695
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49696
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49697
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49698
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49699
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49700
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49701
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49702
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49703
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49704
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49705
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49706
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49707
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49708
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49709
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49710
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49711
            //MOV
            t2.y = (-t2.w);
            //Instruction 49712
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49713
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49714
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49715
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49716
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 49717
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 49718
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49719
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49720
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49721
            //MUL
            t30 = t30 * t5.x;
            //Instruction 49722
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 49723
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49724
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49725
        //ENDIF
        }
        //Instruction 49726
    //ENDIF
    }
    //Instruction 49727
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49728
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49729
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49730
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 49731
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 49732
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 49733
    //NE
    tb30 = t28!=0.0;
    //Instruction 49734
    //LOG
    t4.x = log2(t28);
    //Instruction 49735
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49736
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49737
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 49738
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49739
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49740
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49741
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49742
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49743
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49744
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49745
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49746
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 49747
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 49748
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 49749
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 49750
    //MUL
    t28 = t28 * t30;
    //Instruction 49751
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 49752
    //MOV
    t4.y = t3.y;
    //Instruction 49753
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 49754
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 49755
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 49756
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 49757
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 49758
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 49759
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 49760
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 49761
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 49762
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 49763
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 49764
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 49765
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 49766
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 49767
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 49768
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 49769
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 49770
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 49771
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 49772
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 49773
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 49774
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 49775
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 49776
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 49777
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 49778
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 49779
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49780
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 49781
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 49782
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 49783
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 49784
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 49785
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 49786
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 49787
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 49788
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 49789
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 49790
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 49791
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 49792
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 49793
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 49794
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 49795
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 49796
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 49797
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 49798
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 49799
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 49800
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 49801
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 49802
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 49803
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 49804
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 49805
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 49806
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 49807
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 49808
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 49809
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 49810
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 49811
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 49812
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 49813
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 49814
    //MOV
    vs_TEXCOORD5.xyz = t0.xyz;
    //Instruction 49815
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49816
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 49574
    //MOV
    t16_0.x = vs_TEXCOORD5.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 49575
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 49576
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD5.xy).xyz;
    //Instruction 49577
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 49578
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 49579
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 49580
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 49581
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 49582
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 49583
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 49584
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 49585
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 49586
    //MAD
    t16_1 = t16_15 * 0.500000 + 0.500000;
    //Instruction 49587
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 49588
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 49589
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 49590
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49591
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49592
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49593
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 49594
    //MAD
    t10_4.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 49595
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_4.xyz);
    //Instruction 49596
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_4.xyz);
    //Instruction 49597
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_4.xyz);
    //Instruction 49598
    //MAD
    t10_4.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49599
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 49600
    //MOV
    t1.w = 1.0;
    //Instruction 49601
    //DP4
    t16_3.x = dot(unity_SHAr, t1);
    //Instruction 49602
    //DP4
    t16_3.y = dot(unity_SHAg, t1);
    //Instruction 49603
    //DP4
    t16_3.z = dot(unity_SHAb, t1);
    //Instruction 49604
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 49605
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 49606
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49607
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 50725
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50726
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 50727
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 50728
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50729
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 50730
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 50731
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 50732
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 50733
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 50734
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 50735
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50736
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 50737
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 50738
    //LT
    tb23 = in_TEXCOORD0.x<0.500000;
    //Instruction 50739
    //AND
    t23 = tb23 ? 0.750000 : float(0.0);
    //Instruction 50740
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 50741
    //MAD
    t23 = t3.x * _ST_WindFrondRipple.z + t23;
    //Instruction 50742
    //ADD
    t23 = t23 + 0.500000;
    //Instruction 50743
    //FRC
    t23 = fract(t23);
    //Instruction 50744
    //MAD
    t23 = t23 * 2.000000 + -1.0;
    //Instruction 50745
    //MUL
    t3.x = abs(t23) * abs(t23);
    //Instruction 50746
    //MAD
    t23 = -abs(t23) * 2.000000 + 3.000000;
    //Instruction 50747
    //MAD
    t23 = t3.x * t23 + -0.500000;
    //Instruction 50748
    //MUL
    t23 = t23 * in_TEXCOORD2.y;
    //Instruction 50749
    //DP2
    t23 = dot(_ST_WindFrondRipple.yy, vec2(t23));
    //Instruction 50750
    //MAD
    t3.xyz = vec3(t23) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 50751
    //MOVC
    t2.xyz = (bool(tb22)) ? t3.xyz : t2.xyz;
    //Instruction 50752
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 50753
    //IF
    if(tb23){
        //Instruction 50754
        //IF
        if(tb22){
            //Instruction 50755
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50756
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 50757
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 50758
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 50759
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 50760
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50761
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50762
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50763
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50764
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50765
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50766
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50767
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 50768
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50769
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 50770
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 50771
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 50772
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50773
            //FRC
            t0 = fract(t0);
            //Instruction 50774
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50775
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 50776
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50777
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50778
            //ADD
            t0 = t0 + t0;
            //Instruction 50779
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 50780
            //LT
            tb23 = t5.w<0.0;
            //Instruction 50781
            //MOV
            t5.y = (-t5.w);
            //Instruction 50782
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 50783
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 50784
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 50785
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 50786
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 50787
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 50788
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 50789
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50790
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50791
            //MUL
            t25 = t0.x * t25;
            //Instruction 50792
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 50793
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50794
            //MUL
            t23 = t23 * t24;
            //Instruction 50795
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 50796
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50797
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50798
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50799
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50800
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 50801
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 50802
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50803
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 50804
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50805
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 50806
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 50807
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 50808
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 50809
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50810
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 50811
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 50812
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 50813
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50814
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50815
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 50816
        //ELSE
        } else {
            //Instruction 50817
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50818
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 50819
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50820
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 50821
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50822
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50823
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 50824
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50825
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 50826
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 50827
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50828
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50829
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50830
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 50831
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50832
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50833
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 50834
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 50835
            //LT
            tb22 = t0.w<0.0;
            //Instruction 50836
            //MOV
            t0.y = (-t0.w);
            //Instruction 50837
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 50838
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 50839
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 50840
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 50841
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 50842
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 50843
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 50844
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50845
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50846
            //MUL
            t24 = t24 * t4.x;
            //Instruction 50847
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 50848
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50849
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50850
        //ENDIF
        }
        //Instruction 50851
    //ENDIF
    }
    //Instruction 50852
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 50853
    //SQRT
    t22 = sqrt(t22);
    //Instruction 50854
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50855
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 50856
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 50857
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 50858
    //NE
    tb3 = t23!=0.0;
    //Instruction 50859
    //LOG
    t10 = log2(t23);
    //Instruction 50860
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 50861
    //EXP
    t10 = exp2(t10);
    //Instruction 50862
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 50863
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50864
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50865
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 50866
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 50867
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50868
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 50869
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50870
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 50871
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 50872
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 50873
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50874
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 50875
    //MUL
    t23 = t23 * t3.x;
    //Instruction 50876
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 50877
    //MOV
    t3.y = t2.y;
    //Instruction 50878
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 50879
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 50880
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 50881
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 50882
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 50883
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 50884
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 50885
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 50886
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 50887
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 50888
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 50889
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 50890
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 50891
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 50892
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 50893
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 50894
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 50895
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 50896
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 50897
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 50898
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 50899
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50900
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50901
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 50902
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 50903
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 50904
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 50905
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 50906
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 50907
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 50908
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 50909
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 50910
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 50911
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 50912
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 50913
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 50914
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50915
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 50916
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 50917
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50918
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 50704
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 50705
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50706
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50707
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 50708
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 50709
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50710
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50711
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50712
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50713
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50714
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50715
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50716
    //MOV
    t16_0.w = 1.0;
    //Instruction 50717
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 50718
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 50719
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 50720
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50721
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50722
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 50723
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50724
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_10;
  highp vec3 tmpvar_11;
  tmpvar_10 = tmpvar_1;
  tmpvar_11 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  FinalPosition_14 = tmpvar_1.xyz;
  highp vec3 tmpvar_15;
  tmpvar_15.x = _Object2World[3].x;
  tmpvar_15.y = _Object2World[3].y;
  tmpvar_15.z = _Object2World[3].z;
  mediump float tmpvar_16;
  tmpvar_16 = (_WindQuality * _WindEnabled);
  if ((tmpvar_16 > 0.0)) {
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_17 * _ST_WindVector.xyz));
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_18 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_19;
  tmpvar_19 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_14 = tmpvar_19;
  if ((tmpvar_16 == 5.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_19;
    highp float fOffset_21;
    fOffset_21 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_21 = 0.75;
    };
    highp vec4 tmpvar_22;
    tmpvar_22.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_22.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_21);
    highp vec4 tmpvar_23;
    tmpvar_23 = abs(((
      fract((tmpvar_22 + 0.5))
     * 2.0) - 1.0));
    vPos_20 = (tmpvar_19 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_23 * tmpvar_23)
       * 
        (3.0 - (2.0 * tmpvar_23))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_11 = tmpvar_2;
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_16 >= 3.0)) {
    highp vec3 vPos_24;
    vPos_24 = FinalPosition_14;
    if ((tmpvar_16 == 5.0)) {
      highp vec3 vPos_25;
      vPos_25 = FinalPosition_14;
      highp float fTime_26;
      highp float fAdherenceScale_27;
      highp vec3 vWindVector_28;
      vWindVector_28 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_26 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_29;
      highp float fOscillation_30;
      fOscillation_30 = 1.0;
      highp float fAmount_31;
      highp float fTarget_32;
      highp vec4 tmpvar_33;
      tmpvar_33.x = (fTime_26 + _glesMultiTexCoord0.w);
      tmpvar_33.y = ((fTime_26 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_33.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_26 + _glesMultiTexCoord0.w));
      tmpvar_33.w = ((fTime_26 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      vOscillations_29 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      highp float tmpvar_35;
      tmpvar_35 = (vOscillations_29.y * vOscillations_29.z);
      fTarget_32 = 1.0;
      fAmount_31 = tmpvar_35;
      if ((tmpvar_35 < 0.0)) {
        fTarget_32 = -1.0;
        fAmount_31 = -(tmpvar_35);
      };
      fOscillation_30 = (((
        mix (mix (tmpvar_35, fTarget_32, fAmount_31), fTarget_32, fAmount_31)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_29.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_30 = (fOscillation_30 * (1.0 + (vOscillations_29.w * _ST_WindBranchWhip.x)));
      vPos_25 = (FinalPosition_14 + ((vWindVector_28 * fOscillation_30) * _ST_WindBranch.y));
      highp vec4 tmpvar_36;
      tmpvar_36.zw = vec2(0.0, 0.0);
      tmpvar_36.x = ((fTime_26 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_36.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_37;
      highp vec4 tmpvar_38;
      tmpvar_38 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      tmpvar_37 = (((
        (tmpvar_38 * tmpvar_38)
       * 
        (3.0 - (2.0 * tmpvar_38))
      ) - 0.5) * 2.0);
      fAdherenceScale_27 = (1.0 - ((tmpvar_37.x * tmpvar_37.y) * (
        (tmpvar_37.x * tmpvar_37.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_27 = (fAdherenceScale_27 + ((vOscillations_29.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_25 = (vPos_25 + ((
        ((vRotatedBranchAnchor_12 - vPos_25) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_27) * _glesMultiTexCoord0.z));
      vPos_24 = vPos_25;
    } else {
      highp vec3 vPos_39;
      vPos_39 = vPos_24;
      highp float fTime_40;
      highp vec3 vWindVector_41;
      vWindVector_41 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_40 = (_ST_WindBranch.x + (tmpvar_15.x + tmpvar_15.y));
      highp vec4 vOscillations_42;
      highp float fOscillation_43;
      fOscillation_43 = 1.0;
      highp float fAmount_44;
      highp float fTarget_45;
      highp vec4 tmpvar_46;
      tmpvar_46.w = 0.0;
      tmpvar_46.x = (fTime_40 + _glesMultiTexCoord0.w);
      tmpvar_46.y = ((fTime_40 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_46.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_40 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_47;
      tmpvar_47 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      vOscillations_42 = (((
        (tmpvar_47 * tmpvar_47)
       * 
        (3.0 - (2.0 * tmpvar_47))
      ) - 0.5) * 2.0);
      highp float tmpvar_48;
      tmpvar_48 = (vOscillations_42.y * vOscillations_42.z);
      fTarget_45 = 1.0;
      fAmount_44 = tmpvar_48;
      if ((tmpvar_48 < 0.0)) {
        fTarget_45 = -1.0;
        fAmount_44 = -(tmpvar_48);
      };
      fOscillation_43 = (((
        mix (mix (tmpvar_48, fTarget_45, fAmount_44), fTarget_45, fAmount_44)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_42.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_39 = (vPos_24 + ((vWindVector_41 * fOscillation_43) * _ST_WindBranch.y));
      vPos_24 = vPos_39;
    };
    FinalPosition_14 = vPos_24;
  };
  if ((tmpvar_16 > 0.0)) {
    highp vec3 vPos_49;
    vPos_49 = FinalPosition_14;
    highp float fMoveAmount_50;
    highp float fAdjust_51;
    highp float fLength_52;
    fLength_52 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_53;
    tmpvar_53 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_51 = tmpvar_53;
    if ((tmpvar_53 != 0.0)) {
      fAdjust_51 = pow (tmpvar_53, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_54;
    tmpvar_54.zw = vec2(0.0, 0.0);
    tmpvar_54.x = (tmpvar_15.x + _ST_WindGlobal.x);
    tmpvar_54.y = (tmpvar_15.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_55;
    highp vec4 tmpvar_56;
    tmpvar_56 = abs(((
      fract((tmpvar_54 + 0.5))
     * 2.0) - 1.0));
    tmpvar_55 = (((
      (tmpvar_56 * tmpvar_56)
     * 
      (3.0 - (2.0 * tmpvar_56))
    ) - 0.5) * 2.0);
    fMoveAmount_50 = ((_ST_WindGlobal.y * (tmpvar_55.x + 
      (tmpvar_55.y * tmpvar_55.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_50 = (fMoveAmount_50 * fAdjust_51);
    vPos_49.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_50));
    vPos_49 = (normalize(vPos_49) * fLength_52);
    FinalPosition_14 = vPos_49;
  };
  tmpvar_10.xyz = FinalPosition_14;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * tmpvar_11.x)
   + 
    (v_58.xyz * tmpvar_11.y)
  ) + (v_59.xyz * tmpvar_11.z)));
  worldNormal_4 = tmpvar_60;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_4;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_10);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_10).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec3 t3;
bool tb3;
highp vec3 t4;
highp vec4 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t19;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
highp float t25;
mediump float t16_27;
void main()
{
    //Instruction 50409
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50410
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 50411
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 50412
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50413
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 50414
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 50415
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 50416
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 50417
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 50418
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 50419
    //ADD
    t2.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50420
    //MAD
    t2.xyz = unity_LODFade.xxx * t2.xyz + in_POSITION0.xyz;
    //Instruction 50421
    //EQ
    tb22 = t16_0.x==5.000000;
    //Instruction 50422
    //LT
    tb23 = in_TEXCOORD0.x<0.500000;
    //Instruction 50423
    //AND
    t23 = tb23 ? 0.750000 : float(0.0);
    //Instruction 50424
    //ADD
    t3.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 50425
    //MAD
    t23 = t3.x * _ST_WindFrondRipple.z + t23;
    //Instruction 50426
    //ADD
    t23 = t23 + 0.500000;
    //Instruction 50427
    //FRC
    t23 = fract(t23);
    //Instruction 50428
    //MAD
    t23 = t23 * 2.000000 + -1.0;
    //Instruction 50429
    //MUL
    t3.x = abs(t23) * abs(t23);
    //Instruction 50430
    //MAD
    t23 = -abs(t23) * 2.000000 + 3.000000;
    //Instruction 50431
    //MAD
    t23 = t3.x * t23 + -0.500000;
    //Instruction 50432
    //MUL
    t23 = t23 * in_TEXCOORD2.y;
    //Instruction 50433
    //DP2
    t23 = dot(_ST_WindFrondRipple.yy, vec2(t23));
    //Instruction 50434
    //MAD
    t3.xyz = vec3(t23) * in_NORMAL0.xyz + t2.xyz;
    //Instruction 50435
    //MOVC
    t2.xyz = (bool(tb22)) ? t3.xyz : t2.xyz;
    //Instruction 50436
    //GE
    tb23 = t16_0.x>=3.000000;
    //Instruction 50437
    //IF
    if(tb23){
        //Instruction 50438
        //IF
        if(tb22){
            //Instruction 50439
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50440
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 50441
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 50442
            //DP3
            t22 = dot(t3.xyz, t3.xyz);
            //Instruction 50443
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 50444
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50445
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50446
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50447
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50448
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50449
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50450
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50451
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 50452
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50453
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 50454
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 50455
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 50456
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50457
            //FRC
            t0 = fract(t0);
            //Instruction 50458
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50459
            //MUL
            t5 = abs(t0) * abs(t0);
            //Instruction 50460
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50461
            //MAD
            t0 = t5 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50462
            //ADD
            t0 = t0 + t0;
            //Instruction 50463
            //MUL
            t5.w = t0.z * t0.y;
            //Instruction 50464
            //LT
            tb23 = t5.w<0.0;
            //Instruction 50465
            //MOV
            t5.y = (-t5.w);
            //Instruction 50466
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 50467
            //MOVC
            t5.xy = (bool(tb23)) ? t5.xy : t5.zw;
            //Instruction 50468
            //MAD
            t23 = (-t0.y) * t0.z + t5.x;
            //Instruction 50469
            //MAD
            t23 = t5.y * t23 + t5.w;
            //Instruction 50470
            //ADD
            t24 = (-t23) + t5.x;
            //Instruction 50471
            //MAD
            t23 = t5.y * t24 + t23;
            //Instruction 50472
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 50473
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50474
            //ADD
            t25 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50475
            //MUL
            t25 = t0.x * t25;
            //Instruction 50476
            //MAD
            t23 = t23 * t24 + t25;
            //Instruction 50477
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50478
            //MUL
            t23 = t23 * t24;
            //Instruction 50479
            //MUL
            t4.xyz = vec3(t23) * t4.xyz;
            //Instruction 50480
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50481
            //MAD
            t5.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50482
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50483
            //MAD
            t5.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50484
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 50485
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 50486
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50487
            //MUL
            t19.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 50488
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50489
            //MAD
            t5.xy = t19.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 50490
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 50491
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 50492
            //MUL
            t22 = t5.x * t5.y;
            //Instruction 50493
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50494
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 50495
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 50496
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 50497
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50498
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50499
            //MAD
            t2.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 50500
        //ELSE
        } else {
            //Instruction 50501
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50502
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 50503
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50504
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 50505
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 50506
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 50507
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 50508
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50509
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 50510
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 50511
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50512
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50513
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50514
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 50515
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50516
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50517
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 50518
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 50519
            //LT
            tb22 = t0.w<0.0;
            //Instruction 50520
            //MOV
            t0.y = (-t0.w);
            //Instruction 50521
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 50522
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 50523
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 50524
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 50525
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 50526
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 50527
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 50528
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50529
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50530
            //MUL
            t24 = t24 * t4.x;
            //Instruction 50531
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 50532
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 50533
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + t2.xyz;
            //Instruction 50534
        //ENDIF
        }
        //Instruction 50535
    //ENDIF
    }
    //Instruction 50536
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 50537
    //SQRT
    t22 = sqrt(t22);
    //Instruction 50538
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50539
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 50540
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 50541
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 50542
    //NE
    tb3 = t23!=0.0;
    //Instruction 50543
    //LOG
    t10 = log2(t23);
    //Instruction 50544
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 50545
    //EXP
    t10 = exp2(t10);
    //Instruction 50546
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 50547
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50548
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50549
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 50550
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 50551
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50552
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 50553
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50554
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 50555
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 50556
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 50557
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50558
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 50559
    //MUL
    t23 = t23 * t3.x;
    //Instruction 50560
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 50561
    //MOV
    t3.y = t2.y;
    //Instruction 50562
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 50563
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 50564
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 50565
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 50566
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 50567
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 50568
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 50569
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 50570
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 50571
    //MUL
    t2.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 50572
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t2.xyz;
    //Instruction 50573
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 50574
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 50575
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 50576
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 50577
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 50578
    //MOV
    t2.x = _World2Object[0].y;
    //Instruction 50579
    //MOV
    t2.y = _World2Object[1].y;
    //Instruction 50580
    //MOV
    t2.z = _World2Object[2].y;
    //Instruction 50581
    //MUL
    t2.xyz = t2.xyz * in_NORMAL0.yyy;
    //Instruction 50582
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t2.xyz;
    //Instruction 50583
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50584
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50585
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 50586
    //MAD
    t1.xyz = t2.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 50587
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 50588
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 50589
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 50590
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 50591
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 50592
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 50593
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 50594
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 50595
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 50596
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 50597
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 50598
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50599
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 50600
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 50601
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50602
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 50389
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 50390
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50391
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50392
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 50393
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 50394
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50395
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50396
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50397
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50398
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50399
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50400
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50401
    //MOV
    t16_0.w = 1.0;
    //Instruction 50402
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 50403
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 50404
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 50405
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50406
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50407
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50408
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 49847
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 49848
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 49849
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 49850
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 49851
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 49852
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 49853
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 49854
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 49855
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 49856
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 49857
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 49858
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 49859
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 49860
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 49861
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 49862
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 49863
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 49864
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 49865
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 49866
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 49867
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 49868
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 49869
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 49870
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 49871
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 49872
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 49873
    //FRC
    t27 = fract(t27);
    //Instruction 49874
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 49875
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 49876
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 49877
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 49878
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 49879
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 49880
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 49881
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 49882
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 49883
    //IF
    if(tb27){
        //Instruction 49884
        //IF
        if(tb25){
            //Instruction 49885
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 49886
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 49887
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 49888
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 49889
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 49890
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49891
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49892
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49893
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49894
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 49895
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 49896
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 49897
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49898
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 49899
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 49900
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 49901
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 49902
            //FRC
            t2 = fract(t2);
            //Instruction 49903
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 49904
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 49905
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 49906
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 49907
            //ADD
            t2 = t2 + t2;
            //Instruction 49908
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 49909
            //LT
            tb27 = t6.w<0.0;
            //Instruction 49910
            //MOV
            t6.y = (-t6.w);
            //Instruction 49911
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 49912
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 49913
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 49914
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 49915
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 49916
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 49917
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 49918
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49919
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49920
            //MUL
            t29 = t2.x * t29;
            //Instruction 49921
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 49922
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 49923
            //MUL
            t27 = t27 * t28;
            //Instruction 49924
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 49925
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49926
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49927
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 49928
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 49929
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 49930
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 49931
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 49932
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 49933
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 49934
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 49935
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 49936
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 49937
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 49938
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 49939
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 49940
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 49941
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 49942
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 49943
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 49944
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 49945
        //ELSE
        } else {
            //Instruction 49946
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 49947
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 49948
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49949
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 49950
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 49951
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 49952
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 49953
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 49954
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 49955
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 49956
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 49957
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 49958
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 49959
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 49960
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 49961
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 49962
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 49963
            //LT
            tb0 = t2.w<0.0;
            //Instruction 49964
            //MOV
            t2.y = (-t2.w);
            //Instruction 49965
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 49966
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 49967
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 49968
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 49969
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 49970
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 49971
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 49972
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 49973
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 49974
            //MUL
            t27 = t27 * t5.x;
            //Instruction 49975
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 49976
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 49977
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 49978
        //ENDIF
        }
        //Instruction 49979
    //ENDIF
    }
    //Instruction 49980
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 49981
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 49982
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 49983
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 49984
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 49985
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 49986
    //NE
    tb27 = t25!=0.0;
    //Instruction 49987
    //LOG
    t4.x = log2(t25);
    //Instruction 49988
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 49989
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 49990
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 49991
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 49992
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 49993
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 49994
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 49995
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 49996
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 49997
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 49998
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 49999
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50000
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 50001
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50002
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 50003
    //MUL
    t25 = t25 * t27;
    //Instruction 50004
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 50005
    //MOV
    t4.y = t3.y;
    //Instruction 50006
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 50007
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50008
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 50009
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50010
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 50011
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50012
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50013
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50014
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50015
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50016
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50017
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50018
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50019
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 50020
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 50021
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 50022
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50023
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50024
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 50025
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 50026
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 50027
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50028
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50029
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 50030
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 50031
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 50032
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 50033
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 50034
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 50035
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 50036
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 50037
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 50038
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 50039
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 50040
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 50041
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 50042
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50043
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50044
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 50045
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50046
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 49817
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 49818
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 49819
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 49820
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 49821
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 49822
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 49823
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 49824
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 49825
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 49826
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 49827
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 49828
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 49829
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 49830
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 49831
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 49832
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 49833
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 49834
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 49835
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 49836
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 49837
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 49838
    //MOV
    t16_0.w = 1.0;
    //Instruction 49839
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 49840
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 49841
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 49842
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 49843
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 49844
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 49845
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 49846
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_4;
  mediump vec3 tmpvar_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_3.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_13 = tmpvar_1;
  tmpvar_14 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  FinalPosition_17 = tmpvar_1.xyz;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_21;
  tmpvar_21 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_17 = tmpvar_21;
  if ((tmpvar_18 == 5.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_21;
    highp float fOffset_23;
    fOffset_23 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_23 = 0.75;
    };
    highp vec4 tmpvar_24;
    tmpvar_24.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_24.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_23);
    highp vec4 tmpvar_25;
    tmpvar_25 = abs(((
      fract((tmpvar_24 + 0.5))
     * 2.0) - 1.0));
    vPos_22 = (tmpvar_21 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_25 * tmpvar_25)
       * 
        (3.0 - (2.0 * tmpvar_25))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_14 = tmpvar_2;
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_26;
    vPos_26 = FinalPosition_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_27;
      vPos_27 = FinalPosition_17;
      highp float fTime_28;
      highp float fAdherenceScale_29;
      highp vec3 vWindVector_30;
      vWindVector_30 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_28 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_31;
      highp float fOscillation_32;
      fOscillation_32 = 1.0;
      highp float fAmount_33;
      highp float fTarget_34;
      highp vec4 tmpvar_35;
      tmpvar_35.x = (fTime_28 + _glesMultiTexCoord0.w);
      tmpvar_35.y = ((fTime_28 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_35.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_28 + _glesMultiTexCoord0.w));
      tmpvar_35.w = ((fTime_28 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_35 + 0.5))
       * 2.0) - 1.0));
      vOscillations_31 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      highp float tmpvar_37;
      tmpvar_37 = (vOscillations_31.y * vOscillations_31.z);
      fTarget_34 = 1.0;
      fAmount_33 = tmpvar_37;
      if ((tmpvar_37 < 0.0)) {
        fTarget_34 = -1.0;
        fAmount_33 = -(tmpvar_37);
      };
      fOscillation_32 = (((
        mix (mix (tmpvar_37, fTarget_34, fAmount_33), fTarget_34, fAmount_33)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_31.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_32 = (fOscillation_32 * (1.0 + (vOscillations_31.w * _ST_WindBranchWhip.x)));
      vPos_27 = (FinalPosition_17 + ((vWindVector_30 * fOscillation_32) * _ST_WindBranch.y));
      highp vec4 tmpvar_38;
      tmpvar_38.zw = vec2(0.0, 0.0);
      tmpvar_38.x = ((fTime_28 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_38.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_39;
      highp vec4 tmpvar_40;
      tmpvar_40 = abs(((
        fract((tmpvar_38 + 0.5))
       * 2.0) - 1.0));
      tmpvar_39 = (((
        (tmpvar_40 * tmpvar_40)
       * 
        (3.0 - (2.0 * tmpvar_40))
      ) - 0.5) * 2.0);
      fAdherenceScale_29 = (1.0 - ((tmpvar_39.x * tmpvar_39.y) * (
        (tmpvar_39.x * tmpvar_39.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_29 = (fAdherenceScale_29 + ((vOscillations_31.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_27 = (vPos_27 + ((
        ((vRotatedBranchAnchor_15 - vPos_27) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_29) * _glesMultiTexCoord0.z));
      vPos_26 = vPos_27;
    } else {
      highp vec3 vPos_41;
      vPos_41 = vPos_26;
      highp float fTime_42;
      highp vec3 vWindVector_43;
      vWindVector_43 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_42 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_44;
      highp float fOscillation_45;
      fOscillation_45 = 1.0;
      highp float fAmount_46;
      highp float fTarget_47;
      highp vec4 tmpvar_48;
      tmpvar_48.w = 0.0;
      tmpvar_48.x = (fTime_42 + _glesMultiTexCoord0.w);
      tmpvar_48.y = ((fTime_42 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_48.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_42 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_49;
      tmpvar_49 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      vOscillations_44 = (((
        (tmpvar_49 * tmpvar_49)
       * 
        (3.0 - (2.0 * tmpvar_49))
      ) - 0.5) * 2.0);
      highp float tmpvar_50;
      tmpvar_50 = (vOscillations_44.y * vOscillations_44.z);
      fTarget_47 = 1.0;
      fAmount_46 = tmpvar_50;
      if ((tmpvar_50 < 0.0)) {
        fTarget_47 = -1.0;
        fAmount_46 = -(tmpvar_50);
      };
      fOscillation_45 = (((
        mix (mix (tmpvar_50, fTarget_47, fAmount_46), fTarget_47, fAmount_46)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_44.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_41 = (vPos_26 + ((vWindVector_43 * fOscillation_45) * _ST_WindBranch.y));
      vPos_26 = vPos_41;
    };
    FinalPosition_17 = vPos_26;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_51;
    vPos_51 = FinalPosition_17;
    highp float fMoveAmount_52;
    highp float fAdjust_53;
    highp float fLength_54;
    fLength_54 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_55;
    tmpvar_55 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_53 = tmpvar_55;
    if ((tmpvar_55 != 0.0)) {
      fAdjust_53 = pow (tmpvar_55, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_56;
    tmpvar_56.zw = vec2(0.0, 0.0);
    tmpvar_56.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_56.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_57;
    highp vec4 tmpvar_58;
    tmpvar_58 = abs(((
      fract((tmpvar_56 + 0.5))
     * 2.0) - 1.0));
    tmpvar_57 = (((
      (tmpvar_58 * tmpvar_58)
     * 
      (3.0 - (2.0 * tmpvar_58))
    ) - 0.5) * 2.0);
    fMoveAmount_52 = ((_ST_WindGlobal.y * (tmpvar_57.x + 
      (tmpvar_57.y * tmpvar_57.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_52 = (fMoveAmount_52 * fAdjust_53);
    vPos_51.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_52));
    vPos_51 = (normalize(vPos_51) * fLength_54);
    FinalPosition_17 = vPos_51;
  };
  tmpvar_13.xyz = FinalPosition_17;
  tmpvar_6 = tmpvar_8;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * tmpvar_14.x)
   + 
    (v_60.xyz * tmpvar_14.y)
  ) + (v_61.xyz * tmpvar_14.z)));
  worldNormal_4 = tmpvar_62;
  tmpvar_5 = worldNormal_4;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_4;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_5;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_13).xyz;
  xlv_TEXCOORD2 = tmpvar_6;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD5 = tmpvar_7;
  xlv_TEXCOORD6 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec3 t4;
highp vec3 t5;
highp vec4 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t22;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
highp float t29;
mediump float t16_31;
void main()
{
    //Instruction 50948
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50949
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50950
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 50951
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50952
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 50953
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 50954
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 50955
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 50956
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50957
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 50958
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 50959
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50960
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50961
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50962
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 50963
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 50964
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 50965
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 50966
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50967
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50968
    //EQ
    tb25 = t16_2.x==5.000000;
    //Instruction 50969
    //LT
    tb27 = in_TEXCOORD0.x<0.500000;
    //Instruction 50970
    //AND
    t27 = tb27 ? 0.750000 : float(0.0);
    //Instruction 50971
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 50972
    //MAD
    t27 = t4.x * _ST_WindFrondRipple.z + t27;
    //Instruction 50973
    //ADD
    t27 = t27 + 0.500000;
    //Instruction 50974
    //FRC
    t27 = fract(t27);
    //Instruction 50975
    //MAD
    t27 = t27 * 2.000000 + -1.0;
    //Instruction 50976
    //MUL
    t4.x = abs(t27) * abs(t27);
    //Instruction 50977
    //MAD
    t27 = -abs(t27) * 2.000000 + 3.000000;
    //Instruction 50978
    //MAD
    t27 = t4.x * t27 + -0.500000;
    //Instruction 50979
    //MUL
    t27 = t27 * in_TEXCOORD2.y;
    //Instruction 50980
    //DP2
    t27 = dot(_ST_WindFrondRipple.yy, vec2(t27));
    //Instruction 50981
    //MAD
    t4.xyz = vec3(t27) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 50982
    //MOVC
    t3.xyz = (bool(tb25)) ? t4.xyz : t3.xyz;
    //Instruction 50983
    //GE
    tb27 = t16_2.x>=3.000000;
    //Instruction 50984
    //IF
    if(tb27){
        //Instruction 50985
        //IF
        if(tb25){
            //Instruction 50986
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50987
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50988
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50989
            //DP3
            t25 = dot(t4.xyz, t4.xyz);
            //Instruction 50990
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 50991
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 50992
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50993
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50994
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50995
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50996
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 50997
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 50998
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50999
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51000
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 51001
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51002
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51003
            //FRC
            t2 = fract(t2);
            //Instruction 51004
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51005
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 51006
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51007
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51008
            //ADD
            t2 = t2 + t2;
            //Instruction 51009
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 51010
            //LT
            tb27 = t6.w<0.0;
            //Instruction 51011
            //MOV
            t6.y = (-t6.w);
            //Instruction 51012
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 51013
            //MOVC
            t6.xy = (bool(tb27)) ? t6.xy : t6.zw;
            //Instruction 51014
            //MAD
            t27 = (-t2.y) * t2.z + t6.x;
            //Instruction 51015
            //MAD
            t27 = t6.y * t27 + t6.w;
            //Instruction 51016
            //ADD
            t28 = (-t27) + t6.x;
            //Instruction 51017
            //MAD
            t27 = t6.y * t28 + t27;
            //Instruction 51018
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 51019
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51020
            //ADD
            t29 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51021
            //MUL
            t29 = t2.x * t29;
            //Instruction 51022
            //MAD
            t27 = t27 * t28 + t29;
            //Instruction 51023
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51024
            //MUL
            t27 = t27 * t28;
            //Instruction 51025
            //MUL
            t5.xyz = vec3(t27) * t5.xyz;
            //Instruction 51026
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51027
            //MAD
            t6.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51028
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51029
            //MAD
            t6.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51030
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 51031
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 51032
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51033
            //MUL
            t22.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 51034
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51035
            //MAD
            t6.xy = t22.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 51036
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 51037
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 51038
            //MUL
            t25 = t6.x * t6.y;
            //Instruction 51039
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51040
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 51041
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 51042
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 51043
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51044
            //MUL
            t4.xyz = vec3(t25) * t4.xyz;
            //Instruction 51045
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 51046
        //ELSE
        } else {
            //Instruction 51047
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51048
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51049
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51050
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51051
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51052
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51053
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51054
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51055
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 51056
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51057
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51058
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51059
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51060
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51061
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51062
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51063
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 51064
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51065
            //MOV
            t2.y = (-t2.w);
            //Instruction 51066
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51067
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51068
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 51069
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 51070
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 51071
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 51072
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51073
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51074
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51075
            //MUL
            t27 = t27 * t5.x;
            //Instruction 51076
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 51077
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 51078
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51079
        //ENDIF
        }
        //Instruction 51080
    //ENDIF
    }
    //Instruction 51081
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 51082
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51083
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51084
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 51085
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 51086
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 51087
    //NE
    tb27 = t25!=0.0;
    //Instruction 51088
    //LOG
    t4.x = log2(t25);
    //Instruction 51089
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51090
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51091
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 51092
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51093
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51094
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51095
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51096
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51097
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51098
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51099
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51100
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51101
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 51102
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51103
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 51104
    //MUL
    t25 = t25 * t27;
    //Instruction 51105
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 51106
    //MOV
    t4.y = t3.y;
    //Instruction 51107
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 51108
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 51109
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 51110
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 51111
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 51112
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 51113
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 51114
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 51115
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51116
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 51117
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 51118
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 51119
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 51120
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 51121
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 51122
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 51123
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51124
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51125
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51126
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 51127
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 51128
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 51129
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 51130
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 51131
    //MAD
    t0.xyz = t3.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 51132
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 51133
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 51134
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 51135
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 51136
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 51137
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 51138
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 51139
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 51140
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 51141
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 51142
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 51143
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51144
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51145
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 51146
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51147
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 50919
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 50920
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50921
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 50922
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 50923
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50924
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50925
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50926
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 50927
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 50928
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 50929
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 50930
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 50931
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 50932
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50933
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50934
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50935
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50936
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50937
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50938
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50939
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50940
    //MOV
    t16_0.w = 1.0;
    //Instruction 50941
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 50942
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 50943
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 50944
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50945
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50946
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50947
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 50637
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50638
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50639
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 50640
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50641
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 50642
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 50643
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 50644
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 50645
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50646
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 50647
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 50648
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50649
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50650
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50651
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 50652
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50653
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 50654
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 50655
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50656
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50657
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 50658
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 50659
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 50660
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 50661
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 50662
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 50663
    //FRC
    t30 = fract(t30);
    //Instruction 50664
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 50665
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 50666
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 50667
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 50668
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 50669
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 50670
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 50671
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 50672
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 50673
    //IF
    if(tb30){
        //Instruction 50674
        //IF
        if(tb28){
            //Instruction 50675
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50676
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50677
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50678
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 50679
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 50680
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50681
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50682
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50683
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50684
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50685
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 50686
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 50687
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50688
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50689
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 50690
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50691
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50692
            //FRC
            t2 = fract(t2);
            //Instruction 50693
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50694
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 50695
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50696
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50697
            //ADD
            t2 = t2 + t2;
            //Instruction 50698
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 50699
            //LT
            tb30 = t6.w<0.0;
            //Instruction 50700
            //MOV
            t6.y = (-t6.w);
            //Instruction 50701
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 50702
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 50703
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 50704
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 50705
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 50706
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 50707
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 50708
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50709
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50710
            //MUL
            t32 = t2.x * t32;
            //Instruction 50711
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 50712
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50713
            //MUL
            t30 = t30 * t31;
            //Instruction 50714
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 50715
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50716
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50717
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50718
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50719
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50720
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50721
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50722
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50723
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50724
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50725
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50726
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 50727
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 50728
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50729
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 50730
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 50731
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 50732
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50733
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50734
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 50735
        //ELSE
        } else {
            //Instruction 50736
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50737
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50738
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50739
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50740
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50741
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50742
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50743
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 50744
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 50745
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50746
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50747
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50748
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 50749
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50750
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50751
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 50752
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 50753
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50754
            //MOV
            t2.y = (-t2.w);
            //Instruction 50755
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50756
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50757
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 50758
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 50759
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 50760
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 50761
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50762
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50763
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50764
            //MUL
            t30 = t30 * t5.x;
            //Instruction 50765
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 50766
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 50767
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50768
        //ENDIF
        }
        //Instruction 50769
    //ENDIF
    }
    //Instruction 50770
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 50771
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50772
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50773
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 50774
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 50775
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 50776
    //NE
    tb30 = t28!=0.0;
    //Instruction 50777
    //LOG
    t4.x = log2(t28);
    //Instruction 50778
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 50779
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 50780
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 50781
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50782
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50783
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 50784
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 50785
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50786
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 50787
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50788
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 50789
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50790
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 50791
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50792
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 50793
    //MUL
    t28 = t28 * t30;
    //Instruction 50794
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 50795
    //MOV
    t4.y = t3.y;
    //Instruction 50796
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 50797
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50798
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 50799
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50800
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 50801
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50802
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50803
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50804
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50805
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50806
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50807
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50808
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50809
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 50810
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 50811
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 50812
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50813
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50814
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 50815
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 50816
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 50817
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50818
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50819
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 50820
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 50821
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 50822
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50823
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 50824
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 50825
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 50826
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 50827
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 50828
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50829
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 50830
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 50831
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 50832
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 50833
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 50834
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 50835
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 50836
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 50837
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 50838
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 50839
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 50840
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 50841
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 50842
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 50843
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 50844
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 50845
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 50846
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 50847
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 50848
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 50849
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 50850
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 50851
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 50852
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 50853
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50854
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 50855
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50856
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 50603
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 50604
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50605
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 50606
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 50607
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50608
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50609
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50610
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 50611
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 50612
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 50613
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 50614
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 50615
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 50616
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 50617
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50618
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50619
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50620
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50621
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 50622
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 50623
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 50624
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 50625
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 50626
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50627
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50628
    //MOV
    t0.w = 1.0;
    //Instruction 50629
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 50630
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 50631
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 50632
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 50633
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50634
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 50635
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50636
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindFrondRipple;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_4;
  lowp vec3 worldTangent_5;
  lowp vec3 worldNormal_6;
  mediump vec4 tmpvar_7;
  highp vec4 tmpvar_8;
  lowp vec4 tmpvar_9;
  mediump vec3 tmpvar_10;
  tmpvar_10.xy = tmpvar_3.xy;
  tmpvar_9.w = _Color.w;
  tmpvar_9.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_11;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].x;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].y;
  tmpvar_11 = clamp (((
    fract(((tmpvar_12 + tmpvar_13) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_10.z = tmpvar_11;
  highp vec4 tmpvar_14;
  highp vec3 tmpvar_15;
  tmpvar_14 = tmpvar_1;
  tmpvar_15 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_16;
  highp vec3 vRotatedWindVector_17;
  highp vec3 FinalPosition_18;
  FinalPosition_18 = tmpvar_1.xyz;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_17 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_16 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_17 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_16 = vec3(0.0, 0.0, 0.0);
  };
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (_glesVertex.xyz, _glesMultiTexCoord1.xyz, unity_LODFade.xxx);
  FinalPosition_18 = tmpvar_22;
  if ((tmpvar_19 == 5.0)) {
    highp vec3 vPos_23;
    vPos_23 = tmpvar_22;
    highp float fOffset_24;
    fOffset_24 = 0.0;
    if ((_glesMultiTexCoord0.x < 0.5)) {
      fOffset_24 = 0.75;
    };
    highp vec4 tmpvar_25;
    tmpvar_25.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_25.x = (((_ST_WindFrondRipple.x + _glesMultiTexCoord0.y) * _ST_WindFrondRipple.z) + fOffset_24);
    highp vec4 tmpvar_26;
    tmpvar_26 = abs(((
      fract((tmpvar_25 + 0.5))
     * 2.0) - 1.0));
    vPos_23 = (tmpvar_22 + ((
      (_glesMultiTexCoord2.y * (((
        (tmpvar_26 * tmpvar_26)
       * 
        (3.0 - (2.0 * tmpvar_26))
      ) - 0.5) * 2.0).x)
     * _ST_WindFrondRipple.y) * _glesNormal));
    tmpvar_15 = tmpvar_2;
    FinalPosition_18 = vPos_23;
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_27;
    vPos_27 = FinalPosition_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_28;
      vPos_28 = FinalPosition_18;
      highp float fTime_29;
      highp float fAdherenceScale_30;
      highp vec3 vWindVector_31;
      vWindVector_31 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_29 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_32;
      highp float fOscillation_33;
      fOscillation_33 = 1.0;
      highp float fAmount_34;
      highp float fTarget_35;
      highp vec4 tmpvar_36;
      tmpvar_36.x = (fTime_29 + _glesMultiTexCoord0.w);
      tmpvar_36.y = ((fTime_29 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_36.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_29 + _glesMultiTexCoord0.w));
      tmpvar_36.w = ((fTime_29 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_37;
      tmpvar_37 = abs(((
        fract((tmpvar_36 + 0.5))
       * 2.0) - 1.0));
      vOscillations_32 = (((
        (tmpvar_37 * tmpvar_37)
       * 
        (3.0 - (2.0 * tmpvar_37))
      ) - 0.5) * 2.0);
      highp float tmpvar_38;
      tmpvar_38 = (vOscillations_32.y * vOscillations_32.z);
      fTarget_35 = 1.0;
      fAmount_34 = tmpvar_38;
      if ((tmpvar_38 < 0.0)) {
        fTarget_35 = -1.0;
        fAmount_34 = -(tmpvar_38);
      };
      fOscillation_33 = (((
        mix (mix (tmpvar_38, fTarget_35, fAmount_34), fTarget_35, fAmount_34)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_32.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_33 = (fOscillation_33 * (1.0 + (vOscillations_32.w * _ST_WindBranchWhip.x)));
      vPos_28 = (FinalPosition_18 + ((vWindVector_31 * fOscillation_33) * _ST_WindBranch.y));
      highp vec4 tmpvar_39;
      tmpvar_39.zw = vec2(0.0, 0.0);
      tmpvar_39.x = ((fTime_29 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_39.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_40;
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_39 + 0.5))
       * 2.0) - 1.0));
      tmpvar_40 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      fAdherenceScale_30 = (1.0 - ((tmpvar_40.x * tmpvar_40.y) * (
        (tmpvar_40.x * tmpvar_40.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_30 = (fAdherenceScale_30 + ((vOscillations_32.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_28 = (vPos_28 + ((
        ((vRotatedBranchAnchor_16 - vPos_28) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_30) * _glesMultiTexCoord0.z));
      vPos_27 = vPos_28;
    } else {
      highp vec3 vPos_42;
      vPos_42 = vPos_27;
      highp float fTime_43;
      highp vec3 vWindVector_44;
      vWindVector_44 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_43 = (_ST_WindBranch.x + (tmpvar_12 + tmpvar_13));
      highp vec4 vOscillations_45;
      highp float fOscillation_46;
      fOscillation_46 = 1.0;
      highp float fAmount_47;
      highp float fTarget_48;
      highp vec4 tmpvar_49;
      tmpvar_49.w = 0.0;
      tmpvar_49.x = (fTime_43 + _glesMultiTexCoord0.w);
      tmpvar_49.y = ((fTime_43 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_49.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_43 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      vOscillations_45 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      highp float tmpvar_51;
      tmpvar_51 = (vOscillations_45.y * vOscillations_45.z);
      fTarget_48 = 1.0;
      fAmount_47 = tmpvar_51;
      if ((tmpvar_51 < 0.0)) {
        fTarget_48 = -1.0;
        fAmount_47 = -(tmpvar_51);
      };
      fOscillation_46 = (((
        mix (mix (tmpvar_51, fTarget_48, fAmount_47), fTarget_48, fAmount_47)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_45.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_42 = (vPos_27 + ((vWindVector_44 * fOscillation_46) * _ST_WindBranch.y));
      vPos_27 = vPos_42;
    };
    FinalPosition_18 = vPos_27;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_52;
    vPos_52 = FinalPosition_18;
    highp float fMoveAmount_53;
    highp float fAdjust_54;
    highp float fLength_55;
    fLength_55 = sqrt(dot (FinalPosition_18, FinalPosition_18));
    highp float tmpvar_56;
    tmpvar_56 = (max ((FinalPosition_18.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_54 = tmpvar_56;
    if ((tmpvar_56 != 0.0)) {
      fAdjust_54 = pow (tmpvar_56, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_57;
    tmpvar_57.zw = vec2(0.0, 0.0);
    tmpvar_57.x = (tmpvar_12 + _ST_WindGlobal.x);
    tmpvar_57.y = (tmpvar_13 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_58;
    highp vec4 tmpvar_59;
    tmpvar_59 = abs(((
      fract((tmpvar_57 + 0.5))
     * 2.0) - 1.0));
    tmpvar_58 = (((
      (tmpvar_59 * tmpvar_59)
     * 
      (3.0 - (2.0 * tmpvar_59))
    ) - 0.5) * 2.0);
    fMoveAmount_53 = ((_ST_WindGlobal.y * (tmpvar_58.x + 
      (tmpvar_58.y * tmpvar_58.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_53 = (fMoveAmount_53 * fAdjust_54);
    vPos_52.xz = (FinalPosition_18.xz + (vRotatedWindVector_17.xz * fMoveAmount_53));
    vPos_52 = (normalize(vPos_52) * fLength_55);
    FinalPosition_18 = vPos_52;
  };
  tmpvar_14.xyz = FinalPosition_18;
  tmpvar_7 = tmpvar_9;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_14).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * tmpvar_15.x)
   + 
    (v_62.xyz * tmpvar_15.y)
  ) + (v_63.xyz * tmpvar_15.z)));
  worldNormal_6 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_5 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_6.yzx * worldTangent_5.zxy) - (worldNormal_6.zxy * worldTangent_5.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_4 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_5.x;
  tmpvar_69.y = worldBinormal_4.x;
  tmpvar_69.z = worldNormal_6.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_5.y;
  tmpvar_70.y = worldBinormal_4.y;
  tmpvar_70.z = worldNormal_6.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_5.z;
  tmpvar_71.y = worldBinormal_4.z;
  tmpvar_71.z = worldNormal_6.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_8.zw = vec2(0.0, 0.0);
  tmpvar_8.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_6;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_7;
  xlv_TEXCOORD4 = tmpvar_10;
  xlv_TEXCOORD6 = tmpvar_8;
  xlv_TEXCOORD7 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_FROND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec3 t5;
mediump vec4 t16_5;
highp vec4 t6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t24;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
highp float t32;
mediump float t16_35;
void main()
{
    //Instruction 50080
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50081
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50082
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 50083
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50084
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 50085
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 50086
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 50087
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 50088
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50089
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 50090
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 50091
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50092
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50093
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50094
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 50095
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50096
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 50097
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 50098
    //ADD
    t3.xyz = (-in_POSITION0.xyz) + in_TEXCOORD1.xyz;
    //Instruction 50099
    //MAD
    t3.xyz = unity_LODFade.xxx * t3.xyz + in_POSITION0.xyz;
    //Instruction 50100
    //EQ
    tb28 = t16_2==5.000000;
    //Instruction 50101
    //LT
    tb30 = in_TEXCOORD0.x<0.500000;
    //Instruction 50102
    //AND
    t30 = tb30 ? 0.750000 : float(0.0);
    //Instruction 50103
    //ADD
    t4.x = in_TEXCOORD0.y + _ST_WindFrondRipple.x;
    //Instruction 50104
    //MAD
    t30 = t4.x * _ST_WindFrondRipple.z + t30;
    //Instruction 50105
    //ADD
    t30 = t30 + 0.500000;
    //Instruction 50106
    //FRC
    t30 = fract(t30);
    //Instruction 50107
    //MAD
    t30 = t30 * 2.000000 + -1.0;
    //Instruction 50108
    //MUL
    t4.x = abs(t30) * abs(t30);
    //Instruction 50109
    //MAD
    t30 = -abs(t30) * 2.000000 + 3.000000;
    //Instruction 50110
    //MAD
    t30 = t4.x * t30 + -0.500000;
    //Instruction 50111
    //MUL
    t30 = t30 * in_TEXCOORD2.y;
    //Instruction 50112
    //DP2
    t30 = dot(_ST_WindFrondRipple.yy, vec2(t30));
    //Instruction 50113
    //MAD
    t4.xyz = vec3(t30) * in_NORMAL0.xyz + t3.xyz;
    //Instruction 50114
    //MOVC
    t3.xyz = (bool(tb28)) ? t4.xyz : t3.xyz;
    //Instruction 50115
    //GE
    tb30 = t16_2>=3.000000;
    //Instruction 50116
    //IF
    if(tb30){
        //Instruction 50117
        //IF
        if(tb28){
            //Instruction 50118
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50119
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 50120
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 50121
            //DP3
            t28 = dot(t4.xyz, t4.xyz);
            //Instruction 50122
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 50123
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50124
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50125
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50126
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50127
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50128
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 50129
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 50130
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50131
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50132
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 50133
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50134
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50135
            //FRC
            t2 = fract(t2);
            //Instruction 50136
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50137
            //MUL
            t6 = abs(t2) * abs(t2);
            //Instruction 50138
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50139
            //MAD
            t2 = t6 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50140
            //ADD
            t2 = t2 + t2;
            //Instruction 50141
            //MUL
            t6.w = t2.z * t2.y;
            //Instruction 50142
            //LT
            tb30 = t6.w<0.0;
            //Instruction 50143
            //MOV
            t6.y = (-t6.w);
            //Instruction 50144
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 50145
            //MOVC
            t6.xy = (bool(tb30)) ? t6.xy : t6.zw;
            //Instruction 50146
            //MAD
            t30 = (-t2.y) * t2.z + t6.x;
            //Instruction 50147
            //MAD
            t30 = t6.y * t30 + t6.w;
            //Instruction 50148
            //ADD
            t31 = (-t30) + t6.x;
            //Instruction 50149
            //MAD
            t30 = t6.y * t31 + t30;
            //Instruction 50150
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 50151
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50152
            //ADD
            t32 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50153
            //MUL
            t32 = t2.x * t32;
            //Instruction 50154
            //MAD
            t30 = t30 * t31 + t32;
            //Instruction 50155
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50156
            //MUL
            t30 = t30 * t31;
            //Instruction 50157
            //MUL
            t5.xyz = vec3(t30) * t5.xyz;
            //Instruction 50158
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50159
            //MAD
            t6.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50160
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50161
            //MAD
            t6.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50162
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50163
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50164
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50165
            //MUL
            t24.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50166
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50167
            //MAD
            t6.xy = t24.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50168
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50169
            //MUL
            t6.xy = t6.xy * t6.xy;
            //Instruction 50170
            //MUL
            t28 = t6.x * t6.y;
            //Instruction 50171
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50172
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 50173
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 50174
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 50175
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50176
            //MUL
            t4.xyz = vec3(t28) * t4.xyz;
            //Instruction 50177
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 50178
        //ELSE
        } else {
            //Instruction 50179
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50180
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 50181
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50182
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 50183
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50184
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50185
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50186
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 50187
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 50188
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50189
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50190
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50191
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 50192
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50193
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50194
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 50195
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 50196
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50197
            //MOV
            t2.y = (-t2.w);
            //Instruction 50198
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50199
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50200
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 50201
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 50202
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 50203
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 50204
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50205
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50206
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50207
            //MUL
            t30 = t30 * t5.x;
            //Instruction 50208
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 50209
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 50210
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 50211
        //ENDIF
        }
        //Instruction 50212
    //ENDIF
    }
    //Instruction 50213
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 50214
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50215
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50216
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 50217
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 50218
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 50219
    //NE
    tb30 = t28!=0.0;
    //Instruction 50220
    //LOG
    t4.x = log2(t28);
    //Instruction 50221
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 50222
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 50223
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 50224
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50225
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50226
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 50227
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 50228
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50229
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 50230
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50231
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 50232
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 50233
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 50234
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50235
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 50236
    //MUL
    t28 = t28 * t30;
    //Instruction 50237
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 50238
    //MOV
    t4.y = t3.y;
    //Instruction 50239
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 50240
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 50241
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 50242
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 50243
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 50244
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 50245
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 50246
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 50247
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50248
    //MUL
    t3.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 50249
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t3.xyz;
    //Instruction 50250
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 50251
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 50252
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 50253
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 50254
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 50255
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 50256
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 50257
    //MOV
    t3.zw = _World2Object[2].yy;
    //Instruction 50258
    //MUL
    t3 = t3 * in_NORMAL0.yyyy;
    //Instruction 50259
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t3;
    //Instruction 50260
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 50261
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 50262
    //MOV
    t3.zw = _World2Object[2].zz;
    //Instruction 50263
    //MAD
    t2 = t3 * in_NORMAL0.zzzz + t2;
    //Instruction 50264
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 50265
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50266
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 50267
    //MUL
    t3.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 50268
    //MAD
    t3.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t3.xyz;
    //Instruction 50269
    //MAD
    t3.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t3.xyz;
    //Instruction 50270
    //DP3
    t27 = dot(t3.xyz, t3.xyz);
    //Instruction 50271
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 50272
    //MUL
    t3.xyz = vec3(t27) * t3.xyz;
    //Instruction 50273
    //MUL
    t10_7.xyz = t2.wxy * t3.xyz;
    //Instruction 50274
    //MAD
    t10_7.xyz = t2.ywx * t3.yzx + (-t10_7.xyz);
    //Instruction 50275
    //MUL
    t4.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 50276
    //MUL
    t16_5 = t2.ywzx * t2;
    //Instruction 50277
    //DP4
    t16_8.x = dot(unity_SHBr, t16_5);
    //Instruction 50278
    //DP4
    t16_8.y = dot(unity_SHBg, t16_5);
    //Instruction 50279
    //DP4
    t16_8.z = dot(unity_SHBb, t16_5);
    //Instruction 50280
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 50281
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 50282
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 50283
    //MOV
    vs_TEXCOORD0.x = t3.z;
    //Instruction 50284
    //MOV
    vs_TEXCOORD0.y = t4.x;
    //Instruction 50285
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 50286
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 50287
    //MOV
    vs_TEXCOORD1.x = t3.x;
    //Instruction 50288
    //MOV
    vs_TEXCOORD1.y = t4.y;
    //Instruction 50289
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 50290
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 50291
    //MOV
    vs_TEXCOORD2.x = t3.y;
    //Instruction 50292
    //MOV
    vs_TEXCOORD2.y = t4.z;
    //Instruction 50293
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 50294
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 50295
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 50296
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50297
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 50298
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50299
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 50047
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 50048
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50049
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 50050
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 50051
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50052
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50053
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50054
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 50055
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 50056
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 50057
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 50058
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 50059
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 50060
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 50061
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50062
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50063
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50064
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50065
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 50066
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 50067
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 50068
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 50069
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 50070
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50071
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50072
    //MOV
    t0.w = 1.0;
    //Instruction 50073
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 50074
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 50075
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 50076
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 50077
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50078
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50079
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_103;
  tmpvar_7 = worldNormal_6;
  tmpvar_9.zw = vec2(0.0, 0.0);
  tmpvar_9.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_6;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_6 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_6 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_3;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_5;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outEmission_2.w = emission_15.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_15.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 51169
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51170
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 51171
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 51172
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51173
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 51174
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 51175
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 51176
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 51177
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 51178
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 51179
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 51180
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 51181
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 51182
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 51183
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 51184
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 51185
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 51186
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 51187
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 51188
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 51189
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 51190
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 51191
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 51192
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 51193
        //FRC
        t16.x = fract(t16.x);
        //Instruction 51194
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 51195
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 51196
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 51197
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 51198
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 51199
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 51200
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 51201
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 51202
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 51203
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 51204
        //IF
        if(tb31){
            //Instruction 51205
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 51206
            //FRC
            t4 = fract(t4);
            //Instruction 51207
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51208
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 51209
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 51210
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 51211
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 51212
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 51213
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 51214
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 51215
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51216
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 51217
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51218
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 51219
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 51220
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 51221
            //SQRT
            t47 = sqrt(t47);
            //Instruction 51222
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 51223
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 51224
            //MUL
            t48 = t48 * t5.x;
            //Instruction 51225
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 51226
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 51227
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 51228
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 51229
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 51230
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 51231
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 51232
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 51233
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 51234
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 51235
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 51236
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 51237
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 51238
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 51239
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 51240
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 51241
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 51242
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 51243
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 51244
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 51245
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 51246
            //SQRT
            t48 = sqrt(t48);
            //Instruction 51247
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 51248
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 51249
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 51250
            //MUL
            t35 = t48 * t5.x;
            //Instruction 51251
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 51252
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 51253
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 51254
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 51255
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 51256
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 51257
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 51258
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 51259
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 51260
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51261
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 51262
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51263
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 51264
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 51265
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 51266
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 51267
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 51268
            //LOG
            t46 = log2(t46);
            //Instruction 51269
            //MUL
            t31 = t46 * t16.y;
            //Instruction 51270
            //EXP
            t31 = exp2(t31);
            //Instruction 51271
            //MUL
            t46 = t5.y * t48;
            //Instruction 51272
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 51273
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 51274
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 51275
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 51276
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 51277
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 51278
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 51279
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 51280
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 51281
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 51282
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 51283
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 51284
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 51285
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 51286
            //MOV
            t10.z = t11.x;
            //Instruction 51287
            //MOV
            t10.w = t9.x;
            //Instruction 51288
            //MOV
            t12.z = t8.y;
            //Instruction 51289
            //MOV
            t12.w = t13.y;
            //Instruction 51290
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 51291
            //MOV
            t13.w = t12.y;
            //Instruction 51292
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 51293
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 51294
            //MOV
            t9.w = t10.y;
            //Instruction 51295
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 51296
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 51297
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 51298
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 51299
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 51300
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 51301
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 51302
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 51303
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 51304
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 51305
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 51306
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 51307
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 51308
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 51309
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51310
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 51311
        //ELSE
        } else {
            //Instruction 51312
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 51313
        //ENDIF
        }
        //Instruction 51314
    //ELSE
    } else {
        //Instruction 51315
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 51316
    //ENDIF
    }
    //Instruction 51317
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 51318
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 51319
    //IF
    if(tb17){
        //Instruction 51320
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 51321
        //IF
        if(tb17){
            //Instruction 51322
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51323
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 51324
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 51325
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 51326
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 51327
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51328
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51329
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51330
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51331
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 51332
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51333
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 51334
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 51335
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51336
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51337
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 51338
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51339
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51340
            //FRC
            t0 = fract(t0);
            //Instruction 51341
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51342
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 51343
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51344
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51345
            //ADD
            t0 = t0 + t0;
            //Instruction 51346
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 51347
            //LT
            tb47 = t6.w<0.0;
            //Instruction 51348
            //MOV
            t6.y = (-t6.w);
            //Instruction 51349
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 51350
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 51351
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 51352
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 51353
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 51354
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 51355
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 51356
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51357
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51358
            //MUL
            t49 = t0.x * t49;
            //Instruction 51359
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 51360
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51361
            //MUL
            t47 = t47 * t48;
            //Instruction 51362
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 51363
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51364
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51365
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51366
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51367
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 51368
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 51369
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51370
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 51371
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51372
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 51373
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 51374
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 51375
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 51376
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51377
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 51378
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 51379
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 51380
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51381
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51382
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 51383
        //ELSE
        } else {
            //Instruction 51384
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51385
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51386
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51387
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51388
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51389
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 51390
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 51391
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51392
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51393
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 51394
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51395
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51396
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51397
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51398
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51399
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51400
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51401
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 51402
            //LT
            tb17 = t0.w<0.0;
            //Instruction 51403
            //MOV
            t0.y = (-t0.w);
            //Instruction 51404
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51405
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 51406
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 51407
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 51408
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 51409
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 51410
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 51411
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51412
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51413
            //MUL
            t48 = t48 * t5.x;
            //Instruction 51414
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 51415
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51416
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51417
        //ENDIF
        }
        //Instruction 51418
    //ENDIF
    }
    //Instruction 51419
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 51420
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 51421
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51422
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 51423
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 51424
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 51425
    //NE
    tb48 = t47!=0.0;
    //Instruction 51426
    //LOG
    t4.x = log2(t47);
    //Instruction 51427
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51428
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51429
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 51430
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51431
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51432
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51433
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51434
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51435
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51436
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51437
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51438
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51439
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 51440
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51441
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 51442
    //MUL
    t47 = t47 * t48;
    //Instruction 51443
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 51444
    //MOV
    t4.y = t3.y;
    //Instruction 51445
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 51446
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 51447
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 51448
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 51449
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 51450
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 51451
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 51452
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 51453
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 51454
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 51455
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 51456
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 51457
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 51458
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 51459
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 51460
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 51461
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51462
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51463
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51464
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 51465
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 51466
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 51467
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 51468
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 51469
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 51470
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 51471
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 51472
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 51473
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 51474
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 51475
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 51476
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 51477
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 51478
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 51479
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 51480
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 51481
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51482
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 51483
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 51484
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51485
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 51148
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 51149
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 51150
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51151
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 51152
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 51153
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 51154
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51155
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51156
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51157
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 51158
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51159
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51160
    //MOV
    t16_0.w = 1.0;
    //Instruction 51161
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 51162
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 51163
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 51164
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 51165
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 51166
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 51167
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51168
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_12;
  highp vec3 tmpvar_13;
  tmpvar_12 = tmpvar_1;
  tmpvar_13 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  FinalPosition_16 = tmpvar_1.xyz;
  highp vec3 tmpvar_17;
  tmpvar_17.x = _Object2World[3].x;
  tmpvar_17.y = _Object2World[3].y;
  tmpvar_17.z = _Object2World[3].z;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_16 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_21;
  tmpvar_21.x = tmpvar_4.w;
  tmpvar_21.y = tmpvar_5.x;
  tmpvar_21.z = tmpvar_5.y;
  highp vec3 tmpvar_22;
  tmpvar_22 = mix (FinalPosition_16, tmpvar_21, unity_LODFade.xxx);
  FinalPosition_16 = tmpvar_22;
  if (((tmpvar_18 > 1.0) && (tmpvar_18 < 5.0))) {
    highp float tmpvar_23;
    tmpvar_23 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_24;
    isBestWind_24 = (tmpvar_18 == 4.0);
    bool bLeaf2_25;
    bLeaf2_25 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_26;
    vPos_26 = tmpvar_22;
    highp vec3 vDirection_27;
    vDirection_27 = tmpvar_2;
    highp float tmpvar_28;
    if (bLeaf2_25) {
      tmpvar_28 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_28 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_29;
    if (bLeaf2_25) {
      tmpvar_29 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_29 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_30;
    highp vec4 tmpvar_31;
    tmpvar_31.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_31.x = (tmpvar_28 + tmpvar_23);
    highp vec4 tmpvar_32;
    tmpvar_32 = abs(((
      fract((tmpvar_31 + 0.5))
     * 2.0) - 1.0));
    vPos_30 = (tmpvar_22 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_29 * (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_27 = tmpvar_2;
    vPos_26 = vPos_30;
    if (isBestWind_24) {
      highp vec3 tmpvar_33;
      tmpvar_33 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_34;
      if (bLeaf2_25) {
        tmpvar_34 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_34 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_35;
      if (bLeaf2_25) {
        tmpvar_35 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_35 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_36;
      if (bLeaf2_25) {
        tmpvar_36 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_37;
      if (bLeaf2_25) {
        tmpvar_37 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_38;
      if (bLeaf2_25) {
        tmpvar_38 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_38 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_39;
      if (bLeaf2_25) {
        tmpvar_39 = bool(1);
      } else {
        tmpvar_39 = bool(1);
      };
      highp float fTwitch_40;
      highp vec3 vAxis_41;
      highp float fOsc_42;
      highp vec3 vOriginPos_43;
      highp vec3 tmpvar_44;
      tmpvar_44 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_45;
      tmpvar_45 = ((tmpvar_44.x + tmpvar_44.y) + tmpvar_44.z);
      highp vec4 tmpvar_46;
      tmpvar_46.x = (tmpvar_34 + tmpvar_45);
      tmpvar_46.y = ((tmpvar_34 * 0.75) - tmpvar_45);
      tmpvar_46.z = ((tmpvar_34 * 0.01) + tmpvar_45);
      tmpvar_46.w = (tmpvar_34 + tmpvar_45);
      highp vec4 tmpvar_47;
      highp vec4 tmpvar_48;
      tmpvar_48 = abs(((
        fract((tmpvar_46 + 0.5))
       * 2.0) - 1.0));
      tmpvar_47 = (((
        (tmpvar_48 * tmpvar_48)
       * 
        (3.0 - (2.0 * tmpvar_48))
      ) - 0.5) * 2.0);
      vOriginPos_43 = vPos_30;
      highp float tmpvar_49;
      tmpvar_49 = sqrt(dot (vPos_30, vPos_30));
      highp float fAngle_50;
      fAngle_50 = ((_glesMultiTexCoord2.x * tmpvar_36) * (tmpvar_47.x + (tmpvar_47.y * tmpvar_47.y)));
      highp vec2 vSinCos_51;
      vSinCos_51.x = sin(fAngle_50);
      vSinCos_51.y = cos(fAngle_50);
      highp float tmpvar_52;
      tmpvar_52 = (1.0 - vSinCos_51.y);
      highp mat3 tmpvar_53;
      tmpvar_53[0].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.x) + vSinCos_51.y);
      tmpvar_53[0].y = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) + (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[0].z = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[1].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.y) - (vSinCos_51.x * tmpvar_33.z));
      tmpvar_53[1].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.y) + vSinCos_51.y);
      tmpvar_53[1].z = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].x = (((tmpvar_52 * tmpvar_33.x) * tmpvar_33.z) + (vSinCos_51.x * tmpvar_33.y));
      tmpvar_53[2].y = (((tmpvar_52 * tmpvar_33.y) * tmpvar_33.z) - (vSinCos_51.x * tmpvar_33.x));
      tmpvar_53[2].z = (((tmpvar_52 * tmpvar_33.z) * tmpvar_33.z) + vSinCos_51.y);
      highp vec3 tmpvar_54;
      tmpvar_54 = ((tmpvar_33.yzx * vRotatedWindVector_15.zxy) - (tmpvar_33.zxy * vRotatedWindVector_15.yzx));
      vAxis_41.xz = tmpvar_54.xz;
      highp float tmpvar_55;
      tmpvar_55 = clamp (dot (vRotatedWindVector_15, tmpvar_33), -1.0, 1.0);
      vAxis_41.y = (tmpvar_54.y + tmpvar_55);
      highp vec3 tmpvar_56;
      tmpvar_56 = normalize(vAxis_41);
      vAxis_41 = tmpvar_56;
      highp float tmpvar_57;
      tmpvar_57 = (1.570796 - (sign(tmpvar_55) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_55))) * (1.570796 + (abs(tmpvar_55) * (-0.2146018 + 
          (abs(tmpvar_55) * (0.08656672 + (abs(tmpvar_55) * -0.03102955)))
        ))))
      )));
      fOsc_42 = (tmpvar_47.y - (tmpvar_47.x * tmpvar_47.x));
      fTwitch_40 = 0.0;
      if (tmpvar_39) {
        highp float fTime_58;
        fTime_58 = (tmpvar_38.z + tmpvar_45);
        highp vec4 tmpvar_59;
        tmpvar_59.zw = vec2(0.0, 0.0);
        tmpvar_59.x = fTime_58;
        tmpvar_59.y = (0.87 * fTime_58);
        highp vec4 tmpvar_60;
        highp vec4 tmpvar_61;
        tmpvar_61 = abs(((
          fract((tmpvar_59 + 0.5))
         * 2.0) - 1.0));
        tmpvar_60 = (((
          (tmpvar_61 * tmpvar_61)
         * 
          (3.0 - (2.0 * tmpvar_61))
        ) - 0.5) * 2.0);
        fTwitch_40 = (tmpvar_38.x * pow (clamp (
          ((((tmpvar_60.x * tmpvar_60.y) * tmpvar_60.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_38.y));
      };
      highp float fAngle_62;
      fAngle_62 = (_glesMultiTexCoord2.x * ((
        (tmpvar_57 * tmpvar_37)
       + 
        (fOsc_42 * tmpvar_35)
      ) + fTwitch_40));
      highp vec2 vSinCos_63;
      vSinCos_63.x = sin(fAngle_62);
      vSinCos_63.y = cos(fAngle_62);
      highp float tmpvar_64;
      tmpvar_64 = (1.0 - vSinCos_63.y);
      highp mat3 tmpvar_65;
      tmpvar_65[0].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.x) + vSinCos_63.y);
      tmpvar_65[0].y = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) + (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[0].z = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[1].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.y) - (vSinCos_63.x * tmpvar_56.z));
      tmpvar_65[1].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.y) + vSinCos_63.y);
      tmpvar_65[1].z = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].x = (((tmpvar_64 * tmpvar_56.x) * tmpvar_56.z) + (vSinCos_63.x * tmpvar_56.y));
      tmpvar_65[2].y = (((tmpvar_64 * tmpvar_56.y) * tmpvar_56.z) - (vSinCos_63.x * tmpvar_56.x));
      tmpvar_65[2].z = (((tmpvar_64 * tmpvar_56.z) * tmpvar_56.z) + vSinCos_63.y);
      highp mat3 tmpvar_66;
      tmpvar_66 = (tmpvar_53 * tmpvar_65);
      vOriginPos_43 = (normalize((tmpvar_66 * vPos_30)) * tmpvar_49);
      vDirection_27 = (tmpvar_66 * _glesNormal);
      vPos_26 = vOriginPos_43;
    };
    tmpvar_13 = vDirection_27;
    FinalPosition_16 = vPos_26;
  };
  FinalPosition_16 = (FinalPosition_16 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_67;
    vPos_67 = FinalPosition_16;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_68;
      vPos_68 = FinalPosition_16;
      highp float fTime_69;
      highp float fAdherenceScale_70;
      highp vec3 vWindVector_71;
      vWindVector_71 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_69 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_72;
      highp float fOscillation_73;
      fOscillation_73 = 1.0;
      highp float fAmount_74;
      highp float fTarget_75;
      highp vec4 tmpvar_76;
      tmpvar_76.x = (fTime_69 + _glesMultiTexCoord0.w);
      tmpvar_76.y = ((fTime_69 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_76.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_69 + _glesMultiTexCoord0.w));
      tmpvar_76.w = ((fTime_69 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_77;
      tmpvar_77 = abs(((
        fract((tmpvar_76 + 0.5))
       * 2.0) - 1.0));
      vOscillations_72 = (((
        (tmpvar_77 * tmpvar_77)
       * 
        (3.0 - (2.0 * tmpvar_77))
      ) - 0.5) * 2.0);
      highp float tmpvar_78;
      tmpvar_78 = (vOscillations_72.y * vOscillations_72.z);
      fTarget_75 = 1.0;
      fAmount_74 = tmpvar_78;
      if ((tmpvar_78 < 0.0)) {
        fTarget_75 = -1.0;
        fAmount_74 = -(tmpvar_78);
      };
      fOscillation_73 = (((
        mix (mix (tmpvar_78, fTarget_75, fAmount_74), fTarget_75, fAmount_74)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_72.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_73 = (fOscillation_73 * (1.0 + (vOscillations_72.w * _ST_WindBranchWhip.x)));
      vPos_68 = (FinalPosition_16 + ((vWindVector_71 * fOscillation_73) * _ST_WindBranch.y));
      highp vec4 tmpvar_79;
      tmpvar_79.zw = vec2(0.0, 0.0);
      tmpvar_79.x = ((fTime_69 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_79.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_80;
      highp vec4 tmpvar_81;
      tmpvar_81 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      tmpvar_80 = (((
        (tmpvar_81 * tmpvar_81)
       * 
        (3.0 - (2.0 * tmpvar_81))
      ) - 0.5) * 2.0);
      fAdherenceScale_70 = (1.0 - ((tmpvar_80.x * tmpvar_80.y) * (
        (tmpvar_80.x * tmpvar_80.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_70 = (fAdherenceScale_70 + ((vOscillations_72.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_68 = (vPos_68 + ((
        ((vRotatedBranchAnchor_14 - vPos_68) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_70) * _glesMultiTexCoord0.z));
      vPos_67 = vPos_68;
    } else {
      highp vec3 vPos_82;
      vPos_82 = vPos_67;
      highp float fTime_83;
      highp vec3 vWindVector_84;
      vWindVector_84 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_83 = (_ST_WindBranch.x + (tmpvar_17.x + tmpvar_17.y));
      highp vec4 vOscillations_85;
      highp float fOscillation_86;
      fOscillation_86 = 1.0;
      highp float fAmount_87;
      highp float fTarget_88;
      highp vec4 tmpvar_89;
      tmpvar_89.w = 0.0;
      tmpvar_89.x = (fTime_83 + _glesMultiTexCoord0.w);
      tmpvar_89.y = ((fTime_83 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_89.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_83 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_90;
      tmpvar_90 = abs(((
        fract((tmpvar_89 + 0.5))
       * 2.0) - 1.0));
      vOscillations_85 = (((
        (tmpvar_90 * tmpvar_90)
       * 
        (3.0 - (2.0 * tmpvar_90))
      ) - 0.5) * 2.0);
      highp float tmpvar_91;
      tmpvar_91 = (vOscillations_85.y * vOscillations_85.z);
      fTarget_88 = 1.0;
      fAmount_87 = tmpvar_91;
      if ((tmpvar_91 < 0.0)) {
        fTarget_88 = -1.0;
        fAmount_87 = -(tmpvar_91);
      };
      fOscillation_86 = (((
        mix (mix (tmpvar_91, fTarget_88, fAmount_87), fTarget_88, fAmount_87)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_85.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_82 = (vPos_67 + ((vWindVector_84 * fOscillation_86) * _ST_WindBranch.y));
      vPos_67 = vPos_82;
    };
    FinalPosition_16 = vPos_67;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_92;
    vPos_92 = FinalPosition_16;
    highp float fMoveAmount_93;
    highp float fAdjust_94;
    highp float fLength_95;
    fLength_95 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_96;
    tmpvar_96 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_94 = tmpvar_96;
    if ((tmpvar_96 != 0.0)) {
      fAdjust_94 = pow (tmpvar_96, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_97;
    tmpvar_97.zw = vec2(0.0, 0.0);
    tmpvar_97.x = (tmpvar_17.x + _ST_WindGlobal.x);
    tmpvar_97.y = (tmpvar_17.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_98;
    highp vec4 tmpvar_99;
    tmpvar_99 = abs(((
      fract((tmpvar_97 + 0.5))
     * 2.0) - 1.0));
    tmpvar_98 = (((
      (tmpvar_99 * tmpvar_99)
     * 
      (3.0 - (2.0 * tmpvar_99))
    ) - 0.5) * 2.0);
    fMoveAmount_93 = ((_ST_WindGlobal.y * (tmpvar_98.x + 
      (tmpvar_98.y * tmpvar_98.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_93 = (fMoveAmount_93 * fAdjust_94);
    vPos_92.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_93));
    vPos_92 = (normalize(vPos_92) * fLength_95);
    FinalPosition_16 = vPos_92;
  };
  tmpvar_12.xyz = FinalPosition_16;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_100;
  v_100.x = _World2Object[0].x;
  v_100.y = _World2Object[1].x;
  v_100.z = _World2Object[2].x;
  v_100.w = _World2Object[3].x;
  highp vec4 v_101;
  v_101.x = _World2Object[0].y;
  v_101.y = _World2Object[1].y;
  v_101.z = _World2Object[2].y;
  v_101.w = _World2Object[3].y;
  highp vec4 v_102;
  v_102.x = _World2Object[0].z;
  v_102.y = _World2Object[1].z;
  v_102.z = _World2Object[2].z;
  v_102.w = _World2Object[3].z;
  highp vec3 tmpvar_103;
  tmpvar_103 = normalize(((
    (v_100.xyz * tmpvar_13.x)
   + 
    (v_101.xyz * tmpvar_13.y)
  ) + (v_102.xyz * tmpvar_13.z)));
  worldNormal_6 = tmpvar_103;
  tmpvar_7 = worldNormal_6;
  tmpvar_9.zw = vec2(0.0, 0.0);
  tmpvar_9.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_104;
  tmpvar_104.w = 1.0;
  tmpvar_104.xyz = worldNormal_6;
  mediump vec4 normal_105;
  normal_105 = tmpvar_104;
  mediump vec3 x2_106;
  mediump vec4 tmpvar_107;
  tmpvar_107 = (normal_105.xyzz * normal_105.yzzx);
  x2_106.x = dot (unity_SHBr, tmpvar_107);
  x2_106.y = dot (unity_SHBg, tmpvar_107);
  x2_106.z = dot (unity_SHBb, tmpvar_107);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_106 + (unity_SHC.xyz * (
    (normal_105.x * normal_105.x)
   - 
    (normal_105.y * normal_105.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump vec4 diffuseColor_6;
  lowp vec4 tmpvar_7;
  tmpvar_7 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_7;
  tmpvar_5 = (diffuseColor_6.w * _Color.w);
  lowp float x_8;
  x_8 = (tmpvar_5 - _Cutoff);
  if ((x_8 < 0.0)) {
    discard;
  };
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_9;
  normalWorld_9 = tmpvar_2;
  mediump vec4 tmpvar_10;
  tmpvar_10.w = 1.0;
  tmpvar_10.xyz = normalWorld_9;
  mediump vec3 x1_11;
  x1_11.x = dot (unity_SHAr, tmpvar_10);
  x1_11.y = dot (unity_SHAg, tmpvar_10);
  x1_11.z = dot (unity_SHAb, tmpvar_10);
  mediump vec4 outDiffuseOcclusion_12;
  mediump vec4 outNormal_13;
  mediump vec4 emission_14;
  lowp vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = tmpvar_4;
  outDiffuseOcclusion_12 = tmpvar_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = vec3(0.0, 0.0, 0.0);
  emission_14 = tmpvar_17;
  emission_14.xyz = (emission_14.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_11)));
  outDiffuse_1.xyz = outDiffuseOcclusion_12.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_13;
  gl_FragData[3] = emission_14;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
mediump vec4 t16_0;
highp vec3 t1;
bvec2 tb1;
highp vec4 t2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
mediump vec3 t16_14;
highp vec3 t16;
highp int ti16;
highp vec3 t17;
bool tb17;
highp vec3 t22;
highp float t31;
bool tb31;
highp vec2 t34;
highp float t35;
highp vec2 t36;
highp float t46;
bool tb46;
highp float t47;
bool tb47;
highp float t48;
bool tb48;
highp float t49;
mediump float t16_59;
void main()
{
    //Instruction 50877
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50878
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 50879
    //LT
    tb1.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_0.xxxx).xy;
    //Instruction 50880
    //MUL
    t2.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50881
    //MAD
    t2.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t2.xyz;
    //Instruction 50882
    //MAD
    t2.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t2.xyz;
    //Instruction 50883
    //DP3
    t31 = dot(t2.xyz, t2.xyz);
    //Instruction 50884
    //RSQ
    t31 = inversesqrt(t31);
    //Instruction 50885
    //MUL
    t2.xyz = vec3(t31) * t2.xyz;
    //Instruction 50886
    //AND
    t2.xyz = mix(vec3(0.0, 0.0, 0.0), t2.xyz, tb1.xxx);
    //Instruction 50887
    //ADD
    t3.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 50888
    //MOV
    t4.x = in_TEXCOORD1.w;
    //Instruction 50889
    //MOV
    t4.yz = in_TEXCOORD3.xy;
    //Instruction 50890
    //ADD
    t4.xyz = (-t3.xyz) + t4.xyz;
    //Instruction 50891
    //MAD
    t3.xyz = unity_LODFade.xxx * t4.xyz + t3.xyz;
    //Instruction 50892
    //LT
    tb31 = t16_0.x<5.000000;
    //Instruction 50893
    //AND
    ti16 = int(uint(tb31) & uint(tb1.y));
    //Instruction 50894
    //IF
    if((uint(ti16))!=uint(0u)){
        //Instruction 50895
        //ADD
        t16.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 50896
        //EQ
        tb31 = t16_0.x==4.000000;
        //Instruction 50897
        //LT
        tb46 = 0.0<in_TEXCOORD2.w;
        //Instruction 50898
        //MOVC
        t4.xy = (bool(tb46)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 50899
        //ADD
        t16.x = t16.x + t4.x;
        //Instruction 50900
        //ADD
        t16.x = t16.x + 0.500000;
        //Instruction 50901
        //FRC
        t16.x = fract(t16.x);
        //Instruction 50902
        //MAD
        t16.x = t16.x * 2.000000 + -1.0;
        //Instruction 50903
        //MUL
        t47 = abs(t16.x) * abs(t16.x);
        //Instruction 50904
        //MAD
        t16.x = -abs(t16.x) * 2.000000 + 3.000000;
        //Instruction 50905
        //MAD
        t16.x = t47 * t16.x + -0.500000;
        //Instruction 50906
        //DP2
        t16.x = dot(t16.xx, t4.yy);
        //Instruction 50907
        //MUL
        t4.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 50908
        //FRC
        t4.xyz = fract(t4.xyz);
        //Instruction 50909
        //MAD
        t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 50910
        //MUL
        t4.xyz = t16.xxx * t4.xyz;
        //Instruction 50911
        //MAD
        t3.xyz = t4.xyz * in_TEXCOORD2.xxx + t3.xyz;
        //Instruction 50912
        //IF
        if(tb31){
            //Instruction 50913
            //MUL
            t4 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 50914
            //FRC
            t4 = fract(t4);
            //Instruction 50915
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50916
            //MOVC
            t5 = (bool(tb46)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 50917
            //MOVC
            t16.xyz = (bool(tb46)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 50918
            //MUL
            t47 = t4.w * 3.000000;
            //Instruction 50919
            //MAD
            t6.y = t4.w * 3.000000 + t5.x;
            //Instruction 50920
            //MAD
            t6.x = t5.x * 0.750000 + (-t47);
            //Instruction 50921
            //ADD
            t6.xy = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50922
            //FRC
            t6.xy = fract(t6.xy);
            //Instruction 50923
            //MAD
            t6.xy = t6.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50924
            //MUL
            t36.xy = abs(t6.xy) * abs(t6.xy);
            //Instruction 50925
            //MAD
            t6.xy = -abs(t6.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50926
            //MAD
            t6.xy = t36.xy * t6.xy + vec2(-0.500000, -0.500000);
            //Instruction 50927
            //ADD
            t6.xy = t6.xy + t6.xy;
            //Instruction 50928
            //DP3
            t47 = dot(t3.xyz, t3.xyz);
            //Instruction 50929
            //SQRT
            t47 = sqrt(t47);
            //Instruction 50930
            //MAD
            t48 = t6.x * t6.x + t6.y;
            //Instruction 50931
            //MUL
            t5.x = t5.z * in_TEXCOORD2.x;
            //Instruction 50932
            //MUL
            t48 = t48 * t5.x;
            //Instruction 50933
            //SINCOS
            t5.x = sin(t48);
            t7.x = cos(t48);
            //Instruction 50934
            //ADD
            t48 = (-t7.x) + 1.0;
            //Instruction 50935
            //MUL
            t8 = t4.xxxy * vec4(t48);
            //Instruction 50936
            //MUL
            t22.xyz = t4.zxy * t5.xxx;
            //Instruction 50937
            //MAD
            t9.xy = t8.zy * t4.zy + t22.zx;
            //Instruction 50938
            //MAD
            t10.xy = t8.xw * t4.xy + t7.xx;
            //Instruction 50939
            //MAD
            t9.z = t8.w * t4.z + (-t22.y);
            //Instruction 50940
            //MAD
            t11.xy = t8.yz * t4.yz + (-t22.xz);
            //Instruction 50941
            //MAD
            t11.z = t8.w * t4.z + t22.y;
            //Instruction 50942
            //MUL
            t5.x = t4.z * t4.z;
            //Instruction 50943
            //MAD
            t11.w = t5.x * t48 + t7.x;
            //Instruction 50944
            //MUL
            t7.xyz = t2.yzx * t4.zxy;
            //Instruction 50945
            //MAD
            t7.xyz = t4.yzx * t2.zxy + (-t7.xyz);
            //Instruction 50946
            //DP3
            t17.x = dot(t2.xyz, t4.xyz);
            //Instruction 50947
            //MAX
            t17.x = max(t17.x, -1.0);
            //Instruction 50948
            //MIN
            t17.x = min(t17.x, 1.0);
            //Instruction 50949
            //ADD
            t7.w = t17.x + t7.y;
            //Instruction 50950
            //DP3
            t48 = dot(t7.xzw, t7.xzw);
            //Instruction 50951
            //RSQ
            t48 = inversesqrt(t48);
            //Instruction 50952
            //MUL
            t4.xyz = vec3(t48) * t7.zxw;
            //Instruction 50953
            //ADD
            t48 = -abs(t17.x) + 1.0;
            //Instruction 50954
            //SQRT
            t48 = sqrt(t48);
            //Instruction 50955
            //MAD
            t5.x = abs(t17.x) * -0.018729 + 0.074261;
            //Instruction 50956
            //MAD
            t5.x = t5.x * abs(t17.x) + -0.212114;
            //Instruction 50957
            //MAD
            t5.x = t5.x * abs(t17.x) + 1.570729;
            //Instruction 50958
            //MUL
            t35 = t48 * t5.x;
            //Instruction 50959
            //MAD
            t35 = t35 * -2.000000 + 3.141593;
            //Instruction 50960
            //LT
            tb17 = t17.x<(-t17.x);
            //Instruction 50961
            //AND
            t17.x = tb17 ? t35 : float(0.0);
            //Instruction 50962
            //MAD
            t17.x = t5.x * t48 + t17.x;
            //Instruction 50963
            //MAD
            t48 = (-t6.y) * t6.y + t6.x;
            //Instruction 50964
            //MAD
            t6.x = t4.w * 3.000000 + t16.z;
            //Instruction 50965
            //MUL
            t6.y = t6.x * 0.870000;
            //Instruction 50966
            //ADD
            t5.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 50967
            //FRC
            t5.xz = fract(t5.xz);
            //Instruction 50968
            //MAD
            t5.xz = t5.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50969
            //MUL
            t6.xy = abs(t5.xz) * abs(t5.xz);
            //Instruction 50970
            //MAD
            t5.xz = -abs(t5.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50971
            //MAD
            t5.xz = t6.xy * t5.xz + vec2(-0.500000, -0.500000);
            //Instruction 50972
            //ADD
            t5.xz = t5.xz + t5.xz;
            //Instruction 50973
            //MUL
            t46 = t5.z * t5.z;
            //Instruction 50974
            //MAD
            t46 = t46 * t5.x + 1.0;
            //Instruction 50975
            //MUL
            t46 = t46 * 0.500000;
            t46 = clamp(t46, 0.0, 1.0);
            //Instruction 50976
            //LOG
            t46 = log2(t46);
            //Instruction 50977
            //MUL
            t31 = t46 * t16.y;
            //Instruction 50978
            //EXP
            t31 = exp2(t31);
            //Instruction 50979
            //MUL
            t46 = t5.y * t48;
            //Instruction 50980
            //MAD
            t46 = t17.x * t5.w + t46;
            //Instruction 50981
            //MAD
            t16.x = t16.x * t31 + t46;
            //Instruction 50982
            //MUL
            t16.x = t16.x * in_TEXCOORD2.x;
            //Instruction 50983
            //SINCOS
            t5.x = sin(t16.x);
            t6.x = cos(t16.x);
            //Instruction 50984
            //ADD
            t16.x = (-t6.x) + 1.0;
            //Instruction 50985
            //MUL
            t7 = vec4(t4.y * t16.x, t4.y * t16.x, t4.y * t16.x, t4.z * t16.x);
            //Instruction 50986
            //MUL
            t5.xyz = t4.xyz * t5.xxx;
            //Instruction 50987
            //MAD
            t8.xy = t7.zy * t4.xz + t5.zx;
            //Instruction 50988
            //MAD
            t12.xy = t7.xw * t4.yz + t6.xx;
            //Instruction 50989
            //MAD
            t8.z = t7.w * t4.x + (-t5.y);
            //Instruction 50990
            //MAD
            t13.xy = t7.yz * t4.zx + (-t5.xz);
            //Instruction 50991
            //MAD
            t13.z = t7.w * t4.x + t5.y;
            //Instruction 50992
            //MUL
            t31 = t4.x * t4.x;
            //Instruction 50993
            //MAD
            t8.w = t31 * t16.x + t6.x;
            //Instruction 50994
            //MOV
            t10.z = t11.x;
            //Instruction 50995
            //MOV
            t10.w = t9.x;
            //Instruction 50996
            //MOV
            t12.z = t8.y;
            //Instruction 50997
            //MOV
            t12.w = t13.y;
            //Instruction 50998
            //DP3
            t4.x = dot(t10.xzw, t12.xzw);
            //Instruction 50999
            //MOV
            t13.w = t12.y;
            //Instruction 51000
            //DP3
            t4.y = dot(t10.xwz, t13.xzw);
            //Instruction 51001
            //DP3
            t4.z = dot(t10.xzw, t8.xzw);
            //Instruction 51002
            //MOV
            t9.w = t10.y;
            //Instruction 51003
            //DP3
            t5.x = dot(t9.ywz, t12.xzw);
            //Instruction 51004
            //DP3
            t5.y = dot(t9.yzw, t13.xzw);
            //Instruction 51005
            //DP3
            t5.z = dot(t9.ywz, t8.xzw);
            //Instruction 51006
            //DP3
            t6.x = dot(t11.yzw, t12.xzw);
            //Instruction 51007
            //DP3
            t6.y = dot(t11.ywz, t13.xzw);
            //Instruction 51008
            //DP3
            t6.z = dot(t11.yzw, t8.xzw);
            //Instruction 51009
            //DP3
            t16.x = dot(t4.xyz, in_NORMAL0.xyz);
            //Instruction 51010
            //DP3
            t16.y = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 51011
            //DP3
            t16.z = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 51012
            //DP3
            t4.x = dot(t4.xyz, t3.xyz);
            //Instruction 51013
            //DP3
            t4.y = dot(t5.xyz, t3.xyz);
            //Instruction 51014
            //DP3
            t4.z = dot(t6.xyz, t3.xyz);
            //Instruction 51015
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 51016
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 51017
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51018
            //MUL
            t3.xyz = vec3(t47) * t4.xyz;
            //Instruction 51019
        //ELSE
        } else {
            //Instruction 51020
            //MOV
            t16.xyz = in_NORMAL0.xyz;
            //Instruction 51021
        //ENDIF
        }
        //Instruction 51022
    //ELSE
    } else {
        //Instruction 51023
        //MOV
        t16.xyz = in_NORMAL0.xyz;
        //Instruction 51024
    //ENDIF
    }
    //Instruction 51025
    //ADD
    t3.xyz = t3.xyz + in_TEXCOORD1.xyz;
    //Instruction 51026
    //GE
    tb17 = t16_0.x>=3.000000;
    //Instruction 51027
    //IF
    if(tb17){
        //Instruction 51028
        //EQ
        tb17 = t16_0.x==5.000000;
        //Instruction 51029
        //IF
        if(tb17){
            //Instruction 51030
            //MUL
            t4.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51031
            //MAD
            t4.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t4.xyz;
            //Instruction 51032
            //MAD
            t4.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t4.xyz;
            //Instruction 51033
            //DP3
            t17.x = dot(t4.xyz, t4.xyz);
            //Instruction 51034
            //RSQ
            t17.x = inversesqrt(t17.x);
            //Instruction 51035
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51036
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51037
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51038
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51039
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 51040
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51041
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 51042
            //ADD
            t0.x = t17.x + in_TEXCOORD0.w;
            //Instruction 51043
            //MAD
            t0.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51044
            //MUL
            t47 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51045
            //MUL
            t0.z = t47 * 0.500000;
            //Instruction 51046
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51047
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51048
            //FRC
            t0 = fract(t0);
            //Instruction 51049
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51050
            //MUL
            t6 = abs(t0) * abs(t0);
            //Instruction 51051
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51052
            //MAD
            t0 = t6 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51053
            //ADD
            t0 = t0 + t0;
            //Instruction 51054
            //MUL
            t6.w = t0.z * t0.y;
            //Instruction 51055
            //LT
            tb47 = t6.w<0.0;
            //Instruction 51056
            //MOV
            t6.y = (-t6.w);
            //Instruction 51057
            //MOV
            t6.xz = vec2(-1.0, 1.0);
            //Instruction 51058
            //MOVC
            t6.xy = (bool(tb47)) ? t6.xy : t6.zw;
            //Instruction 51059
            //MAD
            t47 = (-t0.y) * t0.z + t6.x;
            //Instruction 51060
            //MAD
            t47 = t6.y * t47 + t6.w;
            //Instruction 51061
            //ADD
            t48 = (-t47) + t6.x;
            //Instruction 51062
            //MAD
            t47 = t6.y * t48 + t47;
            //Instruction 51063
            //MUL
            t47 = t47 * _ST_WindBranchTwitch.x;
            //Instruction 51064
            //ADD
            t48 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51065
            //ADD
            t49 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51066
            //MUL
            t49 = t0.x * t49;
            //Instruction 51067
            //MAD
            t47 = t47 * t48 + t49;
            //Instruction 51068
            //MAD
            t48 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51069
            //MUL
            t47 = t47 * t48;
            //Instruction 51070
            //MUL
            t5.xyz = vec3(t47) * t5.xyz;
            //Instruction 51071
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51072
            //MAD
            t6.x = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51073
            //MUL
            t17.x = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51074
            //MAD
            t6.y = t17.x * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51075
            //ADD
            t17.xz = t6.xy + vec2(0.500000, 0.500000);
            //Instruction 51076
            //FRC
            t17.xz = fract(t17.xz);
            //Instruction 51077
            //MAD
            t17.xz = t17.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51078
            //MUL
            t6.xy = abs(t17.xz) * abs(t17.xz);
            //Instruction 51079
            //MAD
            t17.xz = -abs(t17.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51080
            //MAD
            t17.xz = t6.xy * t17.xz + vec2(-0.500000, -0.500000);
            //Instruction 51081
            //ADD
            t17.xz = t17.xz + t17.xz;
            //Instruction 51082
            //MUL
            t17.xz = t17.xz * t17.xz;
            //Instruction 51083
            //MUL
            t17.x = t17.x * t17.z;
            //Instruction 51084
            //MAD
            t17.x = (-t17.x) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51085
            //MUL
            t47 = t0.w * _ST_WindVector.w;
            //Instruction 51086
            //MAD
            t17.x = t47 * _ST_WindBranchWhip.x + t17.x;
            //Instruction 51087
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranchAnchor.www + (-t5.xyz);
            //Instruction 51088
            //MUL
            t4.xyz = t4.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51089
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51090
            //MAD
            t3.xyz = t4.xyz * in_TEXCOORD0.zzz + t5.xyz;
            //Instruction 51091
        //ELSE
        } else {
            //Instruction 51092
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51093
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51094
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51095
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51096
            //ADD
            t17.x = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51097
            //ADD
            t17.x = t17.x + _ST_WindBranch.x;
            //Instruction 51098
            //ADD
            t5.x = t17.x + in_TEXCOORD0.w;
            //Instruction 51099
            //MAD
            t5.y = t17.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51100
            //MUL
            t17.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51101
            //MUL
            t5.z = t17.x * 0.500000;
            //Instruction 51102
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51103
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51104
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51105
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51106
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51107
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51108
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51109
            //MUL
            t0.w = t5.z * t5.y;
            //Instruction 51110
            //LT
            tb17 = t0.w<0.0;
            //Instruction 51111
            //MOV
            t0.y = (-t0.w);
            //Instruction 51112
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51113
            //MOVC
            t17.xz = (bool(tb17)) ? t0.xy : t0.zw;
            //Instruction 51114
            //MAD
            t48 = (-t5.y) * t5.z + t17.x;
            //Instruction 51115
            //MAD
            t48 = t17.z * t48 + t0.w;
            //Instruction 51116
            //ADD
            t17.x = t17.x + (-t48);
            //Instruction 51117
            //MAD
            t17.x = t17.z * t17.x + t48;
            //Instruction 51118
            //MUL
            t17.x = t17.x * _ST_WindBranchTwitch.x;
            //Instruction 51119
            //ADD
            t47 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51120
            //ADD
            t48 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51121
            //MUL
            t48 = t48 * t5.x;
            //Instruction 51122
            //MAD
            t17.x = t17.x * t47 + t48;
            //Instruction 51123
            //MUL
            t4.xyz = t17.xxx * t4.xyz;
            //Instruction 51124
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + t3.xyz;
            //Instruction 51125
        //ENDIF
        }
        //Instruction 51126
    //ENDIF
    }
    //Instruction 51127
    //DP3
    t17.x = dot(t3.xyz, t3.xyz);
    //Instruction 51128
    //SQRT
    t17.x = sqrt(t17.x);
    //Instruction 51129
    //DIV
    t47 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51130
    //MAD
    t47 = (-t47) * 0.250000 + t3.y;
    //Instruction 51131
    //MAX
    t47 = max(t47, 0.0);
    //Instruction 51132
    //MUL
    t47 = t47 * _ST_WindGlobal.z;
    //Instruction 51133
    //NE
    tb48 = t47!=0.0;
    //Instruction 51134
    //LOG
    t4.x = log2(t47);
    //Instruction 51135
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51136
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51137
    //MOVC
    t47 = (tb48) ? t4.x : t47;
    //Instruction 51138
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51139
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51140
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51141
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51142
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51143
    //MUL
    t34.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51144
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51145
    //MAD
    t4.xy = t34.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51146
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51147
    //MAD
    t48 = t4.y * t4.y + t4.x;
    //Instruction 51148
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51149
    //MAD
    t48 = _ST_WindGlobal.y * t48 + t4.x;
    //Instruction 51150
    //MUL
    t47 = t47 * t48;
    //Instruction 51151
    //MAD
    t4.xz = t2.xz * vec2(t47) + t3.xz;
    //Instruction 51152
    //MOV
    t4.y = t3.y;
    //Instruction 51153
    //DP3
    t2.x = dot(t4.xyz, t4.xyz);
    //Instruction 51154
    //RSQ
    t2.x = inversesqrt(t2.x);
    //Instruction 51155
    //MUL
    t2.xzw = t2.xxx * t4.xyz;
    //Instruction 51156
    //MUL
    t2.xyz = t17.xxx * t2.xzw;
    //Instruction 51157
    //MOVC
    t2.xyz = (tb1.x) ? t2.xyz : t3.xyz;
    //Instruction 51158
    //MUL
    t0 = t2.yyyy * glstate_matrix_mvp[1];
    //Instruction 51159
    //MAD
    t0 = glstate_matrix_mvp[0] * t2.xxxx + t0;
    //Instruction 51160
    //MAD
    t0 = glstate_matrix_mvp[2] * t2.zzzz + t0;
    //Instruction 51161
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 51162
    //MUL
    t3.xyz = t2.yyy * _Object2World[1].xyz;
    //Instruction 51163
    //MAD
    t2.xyw = _Object2World[0].xyz * t2.xxx + t3.xyz;
    //Instruction 51164
    //MAD
    t2.xyz = _Object2World[2].xyz * t2.zzz + t2.xyw;
    //Instruction 51165
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t2.xyz;
    //Instruction 51166
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 51167
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 51168
    //MOV
    t2.z = _World2Object[2].x;
    //Instruction 51169
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51170
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51171
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51172
    //MUL
    t3.xyz = t16.yyy * t3.xyz;
    //Instruction 51173
    //MAD
    t1.xyz = t2.xyz * t16.xxx + t3.xyz;
    //Instruction 51174
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 51175
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 51176
    //MOV
    t2.z = _World2Object[2].z;
    //Instruction 51177
    //MAD
    t1.xyz = t2.xyz * t16.zzz + t1.xyz;
    //Instruction 51178
    //DP3
    t46 = dot(t1.xyz, t1.xyz);
    //Instruction 51179
    //RSQ
    t46 = inversesqrt(t46);
    //Instruction 51180
    //MUL
    t1.xyz = vec3(t46) * t1.xyz;
    //Instruction 51181
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 51182
    //DP4
    t16_14.x = dot(unity_SHBr, t16_0);
    //Instruction 51183
    //DP4
    t16_14.y = dot(unity_SHBg, t16_0);
    //Instruction 51184
    //DP4
    t16_14.z = dot(unity_SHBb, t16_0);
    //Instruction 51185
    //MUL
    t16_59 = t1.y * t1.y;
    //Instruction 51186
    //MAD
    t16_59 = t1.x * t1.x + (-t16_59);
    //Instruction 51187
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_59) + t16_14.xyz;
    //Instruction 51188
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 51189
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51190
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 51191
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 51192
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51193
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
bool tb0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
void main()
{
    //Instruction 50857
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 50858
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50859
    //MUL
    t16_2.xyz = t10_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50860
    //LT
    tb0 = t10_1.x<0.0;
    //Instruction 50861
    //DISCARD
    if((int(tb0))!=0){discard;}
    //Instruction 50862
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50863
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50864
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50865
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50866
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50867
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50868
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50869
    //MOV
    t16_0.w = 1.0;
    //Instruction 50870
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 50871
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 50872
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 50873
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50874
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50875
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50876
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  tmpvar_9.zw = vec2(0.0, 0.0);
  tmpvar_9.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_3;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_5;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_5 * (xlv_TEXCOORD6 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outEmission_2.w = emission_17.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_17.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 50330
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50331
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50332
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 50333
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50334
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 50335
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 50336
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 50337
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 50338
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50339
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 50340
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 50341
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50342
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50343
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50344
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 50345
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 50346
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 50347
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 50348
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 50349
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 50350
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 50351
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 50352
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 50353
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 50354
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 50355
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 50356
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 50357
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 50358
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 50359
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 50360
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 50361
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 50362
        //FRC
        t32.x = fract(t32.x);
        //Instruction 50363
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 50364
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 50365
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 50366
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 50367
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 50368
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 50369
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 50370
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 50371
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 50372
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 50373
        //IF
        if(tb48){
            //Instruction 50374
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 50375
            //FRC
            t5 = fract(t5);
            //Instruction 50376
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50377
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 50378
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 50379
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 50380
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 50381
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 50382
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 50383
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 50384
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50385
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 50386
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50387
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 50388
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 50389
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 50390
            //SQRT
            t49 = sqrt(t49);
            //Instruction 50391
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 50392
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 50393
            //MUL
            t51 = t51 * t52;
            //Instruction 50394
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 50395
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 50396
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 50397
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 50398
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 50399
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 50400
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 50401
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 50402
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 50403
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 50404
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 50405
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 50406
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 50407
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 50408
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 50409
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 50410
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 50411
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 50412
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 50413
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 50414
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 50415
            //SQRT
            t51 = sqrt(t51);
            //Instruction 50416
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 50417
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 50418
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 50419
            //MUL
            t6.x = t51 * t52;
            //Instruction 50420
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 50421
            //LT
            tb19 = t19<(-t19);
            //Instruction 50422
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 50423
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 50424
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 50425
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 50426
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 50427
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 50428
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 50429
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50430
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 50431
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50432
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 50433
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 50434
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 50435
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 50436
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 50437
            //LOG
            t48 = log2(t48);
            //Instruction 50438
            //MUL
            t48 = t48 * t7.y;
            //Instruction 50439
            //EXP
            t48 = exp2(t48);
            //Instruction 50440
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 50441
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 50442
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 50443
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 50444
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 50445
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 50446
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 50447
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 50448
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 50449
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 50450
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 50451
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 50452
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 50453
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 50454
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 50455
            //MOV
            t11.z = t12.x;
            //Instruction 50456
            //MOV
            t11.w = t10.x;
            //Instruction 50457
            //MOV
            t13.z = t9.y;
            //Instruction 50458
            //MOV
            t13.w = t14.y;
            //Instruction 50459
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 50460
            //MOV
            t14.w = t13.y;
            //Instruction 50461
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 50462
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 50463
            //MOV
            t10.w = t11.y;
            //Instruction 50464
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 50465
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 50466
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 50467
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 50468
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 50469
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 50470
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 50471
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 50472
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 50473
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 50474
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 50475
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 50476
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 50477
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 50478
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 50479
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 50480
        //ELSE
        } else {
            //Instruction 50481
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 50482
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 50483
        //ENDIF
        }
        //Instruction 50484
    //ELSE
    } else {
        //Instruction 50485
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 50486
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 50487
    //ENDIF
    }
    //Instruction 50488
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 50489
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 50490
    //IF
    if(tb49){
        //Instruction 50491
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 50492
        //IF
        if(tb49){
            //Instruction 50493
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50494
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 50495
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 50496
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 50497
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 50498
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 50499
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50500
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 50501
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50502
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 50503
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 50504
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 50505
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50506
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50507
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 50508
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50509
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50510
            //FRC
            t2 = fract(t2);
            //Instruction 50511
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50512
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 50513
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50514
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50515
            //ADD
            t2 = t2 + t2;
            //Instruction 50516
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 50517
            //LT
            tb51 = t7.w<0.0;
            //Instruction 50518
            //MOV
            t7.y = (-t7.w);
            //Instruction 50519
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 50520
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 50521
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 50522
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 50523
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 50524
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 50525
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 50526
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50527
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50528
            //MUL
            t53 = t2.x * t53;
            //Instruction 50529
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 50530
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50531
            //MUL
            t51 = t51 * t52;
            //Instruction 50532
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 50533
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 50534
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50535
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50536
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50537
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 50538
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 50539
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50540
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 50541
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50542
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 50543
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 50544
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 50545
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 50546
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50547
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 50548
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 50549
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 50550
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50551
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 50552
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 50553
        //ELSE
        } else {
            //Instruction 50554
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50555
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50556
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50557
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50558
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50559
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50560
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50561
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 50562
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 50563
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50564
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 50565
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50566
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 50567
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50568
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50569
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 50570
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 50571
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50572
            //MOV
            t2.y = (-t2.w);
            //Instruction 50573
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50574
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50575
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 50576
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 50577
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 50578
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 50579
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50580
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50581
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50582
            //MUL
            t51 = t51 * t6.x;
            //Instruction 50583
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 50584
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 50585
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 50586
        //ENDIF
        }
        //Instruction 50587
    //ENDIF
    }
    //Instruction 50588
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 50589
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50590
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50591
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 50592
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 50593
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 50594
    //NE
    tb51 = t49!=0.0;
    //Instruction 50595
    //LOG
    t52 = log2(t49);
    //Instruction 50596
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 50597
    //EXP
    t52 = exp2(t52);
    //Instruction 50598
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 50599
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50600
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50601
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 50602
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 50603
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50604
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 50605
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50606
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 50607
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 50608
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 50609
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50610
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 50611
    //MUL
    t49 = t49 * t51;
    //Instruction 50612
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 50613
    //MOV
    t5.y = t4.y;
    //Instruction 50614
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 50615
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 50616
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 50617
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 50618
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 50619
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 50620
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 50621
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 50622
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50623
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 50624
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 50625
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 50626
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 50627
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 50628
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 50629
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 50630
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 50631
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 50632
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 50633
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 50634
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 50635
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 50636
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 50637
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 50638
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 50639
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 50640
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 50641
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 50642
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 50643
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 50644
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 50645
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 50646
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 50647
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 50648
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 50649
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 50650
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 50651
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 50652
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 50653
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50654
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 50300
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 50301
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50302
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 50303
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 50304
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50305
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50306
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50307
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 50308
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 50309
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 50310
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 50311
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 50312
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 50313
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 50314
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50315
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50316
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50317
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50318
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50319
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50320
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 50321
    //MOV
    t16_0.w = 1.0;
    //Instruction 50322
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 50323
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 50324
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 50325
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 50326
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50327
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 50328
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50329
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying highp vec4 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldNormal_6;
  mediump vec3 tmpvar_7;
  mediump vec4 tmpvar_8;
  highp vec4 tmpvar_9;
  lowp vec4 tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11.xy = tmpvar_3.xy;
  tmpvar_10.w = _Color.w;
  tmpvar_10.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = _Object2World[3].x;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].y;
  tmpvar_12 = clamp (((
    fract(((tmpvar_13 + tmpvar_14) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_11.z = tmpvar_12;
  highp vec4 tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_15 = tmpvar_1;
  tmpvar_16 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_17;
  highp vec3 vRotatedWindVector_18;
  highp vec3 FinalPosition_19;
  FinalPosition_19 = tmpvar_1.xyz;
  mediump float tmpvar_20;
  tmpvar_20 = (_WindQuality * _WindEnabled);
  if ((tmpvar_20 > 0.0)) {
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedWindVector_18 = normalize((tmpvar_21 * _ST_WindVector.xyz));
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_17 = (normalize((tmpvar_22 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_18 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_17 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_19 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_23;
  tmpvar_23.x = tmpvar_4.w;
  tmpvar_23.y = tmpvar_5.x;
  tmpvar_23.z = tmpvar_5.y;
  highp vec3 tmpvar_24;
  tmpvar_24 = mix (FinalPosition_19, tmpvar_23, unity_LODFade.xxx);
  FinalPosition_19 = tmpvar_24;
  if (((tmpvar_20 > 1.0) && (tmpvar_20 < 5.0))) {
    highp float tmpvar_25;
    tmpvar_25 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_26;
    isBestWind_26 = (tmpvar_20 == 4.0);
    bool bLeaf2_27;
    bLeaf2_27 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_28;
    vPos_28 = tmpvar_24;
    highp vec3 vDirection_29;
    vDirection_29 = tmpvar_2;
    highp float tmpvar_30;
    if (bLeaf2_27) {
      tmpvar_30 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_30 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_31;
    if (bLeaf2_27) {
      tmpvar_31 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_32;
    highp vec4 tmpvar_33;
    tmpvar_33.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_33.x = (tmpvar_30 + tmpvar_25);
    highp vec4 tmpvar_34;
    tmpvar_34 = abs(((
      fract((tmpvar_33 + 0.5))
     * 2.0) - 1.0));
    vPos_32 = (tmpvar_24 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_31 * (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_29 = tmpvar_2;
    vPos_28 = vPos_32;
    if (isBestWind_26) {
      highp vec3 tmpvar_35;
      tmpvar_35 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_36;
      if (bLeaf2_27) {
        tmpvar_36 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_36 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_37;
      if (bLeaf2_27) {
        tmpvar_37 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_38;
      if (bLeaf2_27) {
        tmpvar_38 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_39;
      if (bLeaf2_27) {
        tmpvar_39 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_40;
      if (bLeaf2_27) {
        tmpvar_40 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_40 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_41;
      if (bLeaf2_27) {
        tmpvar_41 = bool(1);
      } else {
        tmpvar_41 = bool(1);
      };
      highp float fTwitch_42;
      highp vec3 vAxis_43;
      highp float fOsc_44;
      highp vec3 vOriginPos_45;
      highp vec3 tmpvar_46;
      tmpvar_46 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_47;
      tmpvar_47 = ((tmpvar_46.x + tmpvar_46.y) + tmpvar_46.z);
      highp vec4 tmpvar_48;
      tmpvar_48.x = (tmpvar_36 + tmpvar_47);
      tmpvar_48.y = ((tmpvar_36 * 0.75) - tmpvar_47);
      tmpvar_48.z = ((tmpvar_36 * 0.01) + tmpvar_47);
      tmpvar_48.w = (tmpvar_36 + tmpvar_47);
      highp vec4 tmpvar_49;
      highp vec4 tmpvar_50;
      tmpvar_50 = abs(((
        fract((tmpvar_48 + 0.5))
       * 2.0) - 1.0));
      tmpvar_49 = (((
        (tmpvar_50 * tmpvar_50)
       * 
        (3.0 - (2.0 * tmpvar_50))
      ) - 0.5) * 2.0);
      vOriginPos_45 = vPos_32;
      highp float tmpvar_51;
      tmpvar_51 = sqrt(dot (vPos_32, vPos_32));
      highp float fAngle_52;
      fAngle_52 = ((_glesMultiTexCoord2.x * tmpvar_38) * (tmpvar_49.x + (tmpvar_49.y * tmpvar_49.y)));
      highp vec2 vSinCos_53;
      vSinCos_53.x = sin(fAngle_52);
      vSinCos_53.y = cos(fAngle_52);
      highp float tmpvar_54;
      tmpvar_54 = (1.0 - vSinCos_53.y);
      highp mat3 tmpvar_55;
      tmpvar_55[0].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.x) + vSinCos_53.y);
      tmpvar_55[0].y = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) + (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[0].z = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[1].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.y) - (vSinCos_53.x * tmpvar_35.z));
      tmpvar_55[1].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.y) + vSinCos_53.y);
      tmpvar_55[1].z = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].x = (((tmpvar_54 * tmpvar_35.x) * tmpvar_35.z) + (vSinCos_53.x * tmpvar_35.y));
      tmpvar_55[2].y = (((tmpvar_54 * tmpvar_35.y) * tmpvar_35.z) - (vSinCos_53.x * tmpvar_35.x));
      tmpvar_55[2].z = (((tmpvar_54 * tmpvar_35.z) * tmpvar_35.z) + vSinCos_53.y);
      highp vec3 tmpvar_56;
      tmpvar_56 = ((tmpvar_35.yzx * vRotatedWindVector_18.zxy) - (tmpvar_35.zxy * vRotatedWindVector_18.yzx));
      vAxis_43.xz = tmpvar_56.xz;
      highp float tmpvar_57;
      tmpvar_57 = clamp (dot (vRotatedWindVector_18, tmpvar_35), -1.0, 1.0);
      vAxis_43.y = (tmpvar_56.y + tmpvar_57);
      highp vec3 tmpvar_58;
      tmpvar_58 = normalize(vAxis_43);
      vAxis_43 = tmpvar_58;
      highp float tmpvar_59;
      tmpvar_59 = (1.570796 - (sign(tmpvar_57) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_57))) * (1.570796 + (abs(tmpvar_57) * (-0.2146018 + 
          (abs(tmpvar_57) * (0.08656672 + (abs(tmpvar_57) * -0.03102955)))
        ))))
      )));
      fOsc_44 = (tmpvar_49.y - (tmpvar_49.x * tmpvar_49.x));
      fTwitch_42 = 0.0;
      if (tmpvar_41) {
        highp float fTime_60;
        fTime_60 = (tmpvar_40.z + tmpvar_47);
        highp vec4 tmpvar_61;
        tmpvar_61.zw = vec2(0.0, 0.0);
        tmpvar_61.x = fTime_60;
        tmpvar_61.y = (0.87 * fTime_60);
        highp vec4 tmpvar_62;
        highp vec4 tmpvar_63;
        tmpvar_63 = abs(((
          fract((tmpvar_61 + 0.5))
         * 2.0) - 1.0));
        tmpvar_62 = (((
          (tmpvar_63 * tmpvar_63)
         * 
          (3.0 - (2.0 * tmpvar_63))
        ) - 0.5) * 2.0);
        fTwitch_42 = (tmpvar_40.x * pow (clamp (
          ((((tmpvar_62.x * tmpvar_62.y) * tmpvar_62.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_40.y));
      };
      highp float fAngle_64;
      fAngle_64 = (_glesMultiTexCoord2.x * ((
        (tmpvar_59 * tmpvar_39)
       + 
        (fOsc_44 * tmpvar_37)
      ) + fTwitch_42));
      highp vec2 vSinCos_65;
      vSinCos_65.x = sin(fAngle_64);
      vSinCos_65.y = cos(fAngle_64);
      highp float tmpvar_66;
      tmpvar_66 = (1.0 - vSinCos_65.y);
      highp mat3 tmpvar_67;
      tmpvar_67[0].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.x) + vSinCos_65.y);
      tmpvar_67[0].y = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) + (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[0].z = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[1].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.y) - (vSinCos_65.x * tmpvar_58.z));
      tmpvar_67[1].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.y) + vSinCos_65.y);
      tmpvar_67[1].z = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].x = (((tmpvar_66 * tmpvar_58.x) * tmpvar_58.z) + (vSinCos_65.x * tmpvar_58.y));
      tmpvar_67[2].y = (((tmpvar_66 * tmpvar_58.y) * tmpvar_58.z) - (vSinCos_65.x * tmpvar_58.x));
      tmpvar_67[2].z = (((tmpvar_66 * tmpvar_58.z) * tmpvar_58.z) + vSinCos_65.y);
      highp mat3 tmpvar_68;
      tmpvar_68 = (tmpvar_55 * tmpvar_67);
      vOriginPos_45 = (normalize((tmpvar_68 * vPos_32)) * tmpvar_51);
      vDirection_29 = (tmpvar_68 * _glesNormal);
      vPos_28 = vOriginPos_45;
    };
    tmpvar_16 = vDirection_29;
    FinalPosition_19 = vPos_28;
  };
  FinalPosition_19 = (FinalPosition_19 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_20 >= 3.0)) {
    highp vec3 vPos_69;
    vPos_69 = FinalPosition_19;
    if ((tmpvar_20 == 5.0)) {
      highp vec3 vPos_70;
      vPos_70 = FinalPosition_19;
      highp float fTime_71;
      highp float fAdherenceScale_72;
      highp vec3 vWindVector_73;
      vWindVector_73 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_71 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_74;
      highp float fOscillation_75;
      fOscillation_75 = 1.0;
      highp float fAmount_76;
      highp float fTarget_77;
      highp vec4 tmpvar_78;
      tmpvar_78.x = (fTime_71 + _glesMultiTexCoord0.w);
      tmpvar_78.y = ((fTime_71 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_78.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_71 + _glesMultiTexCoord0.w));
      tmpvar_78.w = ((fTime_71 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_79;
      tmpvar_79 = abs(((
        fract((tmpvar_78 + 0.5))
       * 2.0) - 1.0));
      vOscillations_74 = (((
        (tmpvar_79 * tmpvar_79)
       * 
        (3.0 - (2.0 * tmpvar_79))
      ) - 0.5) * 2.0);
      highp float tmpvar_80;
      tmpvar_80 = (vOscillations_74.y * vOscillations_74.z);
      fTarget_77 = 1.0;
      fAmount_76 = tmpvar_80;
      if ((tmpvar_80 < 0.0)) {
        fTarget_77 = -1.0;
        fAmount_76 = -(tmpvar_80);
      };
      fOscillation_75 = (((
        mix (mix (tmpvar_80, fTarget_77, fAmount_76), fTarget_77, fAmount_76)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_74.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_75 = (fOscillation_75 * (1.0 + (vOscillations_74.w * _ST_WindBranchWhip.x)));
      vPos_70 = (FinalPosition_19 + ((vWindVector_73 * fOscillation_75) * _ST_WindBranch.y));
      highp vec4 tmpvar_81;
      tmpvar_81.zw = vec2(0.0, 0.0);
      tmpvar_81.x = ((fTime_71 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_81.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_82;
      highp vec4 tmpvar_83;
      tmpvar_83 = abs(((
        fract((tmpvar_81 + 0.5))
       * 2.0) - 1.0));
      tmpvar_82 = (((
        (tmpvar_83 * tmpvar_83)
       * 
        (3.0 - (2.0 * tmpvar_83))
      ) - 0.5) * 2.0);
      fAdherenceScale_72 = (1.0 - ((tmpvar_82.x * tmpvar_82.y) * (
        (tmpvar_82.x * tmpvar_82.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_72 = (fAdherenceScale_72 + ((vOscillations_74.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_70 = (vPos_70 + ((
        ((vRotatedBranchAnchor_17 - vPos_70) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_72) * _glesMultiTexCoord0.z));
      vPos_69 = vPos_70;
    } else {
      highp vec3 vPos_84;
      vPos_84 = vPos_69;
      highp float fTime_85;
      highp vec3 vWindVector_86;
      vWindVector_86 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_85 = (_ST_WindBranch.x + (tmpvar_13 + tmpvar_14));
      highp vec4 vOscillations_87;
      highp float fOscillation_88;
      fOscillation_88 = 1.0;
      highp float fAmount_89;
      highp float fTarget_90;
      highp vec4 tmpvar_91;
      tmpvar_91.w = 0.0;
      tmpvar_91.x = (fTime_85 + _glesMultiTexCoord0.w);
      tmpvar_91.y = ((fTime_85 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_91.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_85 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_92;
      tmpvar_92 = abs(((
        fract((tmpvar_91 + 0.5))
       * 2.0) - 1.0));
      vOscillations_87 = (((
        (tmpvar_92 * tmpvar_92)
       * 
        (3.0 - (2.0 * tmpvar_92))
      ) - 0.5) * 2.0);
      highp float tmpvar_93;
      tmpvar_93 = (vOscillations_87.y * vOscillations_87.z);
      fTarget_90 = 1.0;
      fAmount_89 = tmpvar_93;
      if ((tmpvar_93 < 0.0)) {
        fTarget_90 = -1.0;
        fAmount_89 = -(tmpvar_93);
      };
      fOscillation_88 = (((
        mix (mix (tmpvar_93, fTarget_90, fAmount_89), fTarget_90, fAmount_89)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_87.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_84 = (vPos_69 + ((vWindVector_86 * fOscillation_88) * _ST_WindBranch.y));
      vPos_69 = vPos_84;
    };
    FinalPosition_19 = vPos_69;
  };
  if ((tmpvar_20 > 0.0)) {
    highp vec3 vPos_94;
    vPos_94 = FinalPosition_19;
    highp float fMoveAmount_95;
    highp float fAdjust_96;
    highp float fLength_97;
    fLength_97 = sqrt(dot (FinalPosition_19, FinalPosition_19));
    highp float tmpvar_98;
    tmpvar_98 = (max ((FinalPosition_19.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_96 = tmpvar_98;
    if ((tmpvar_98 != 0.0)) {
      fAdjust_96 = pow (tmpvar_98, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_99;
    tmpvar_99.zw = vec2(0.0, 0.0);
    tmpvar_99.x = (tmpvar_13 + _ST_WindGlobal.x);
    tmpvar_99.y = (tmpvar_14 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_100;
    highp vec4 tmpvar_101;
    tmpvar_101 = abs(((
      fract((tmpvar_99 + 0.5))
     * 2.0) - 1.0));
    tmpvar_100 = (((
      (tmpvar_101 * tmpvar_101)
     * 
      (3.0 - (2.0 * tmpvar_101))
    ) - 0.5) * 2.0);
    fMoveAmount_95 = ((_ST_WindGlobal.y * (tmpvar_100.x + 
      (tmpvar_100.y * tmpvar_100.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_95 = (fMoveAmount_95 * fAdjust_96);
    vPos_94.xz = (FinalPosition_19.xz + (vRotatedWindVector_18.xz * fMoveAmount_95));
    vPos_94 = (normalize(vPos_94) * fLength_97);
    FinalPosition_19 = vPos_94;
  };
  tmpvar_15.xyz = FinalPosition_19;
  tmpvar_8 = tmpvar_10;
  highp vec4 v_102;
  v_102.x = _World2Object[0].x;
  v_102.y = _World2Object[1].x;
  v_102.z = _World2Object[2].x;
  v_102.w = _World2Object[3].x;
  highp vec4 v_103;
  v_103.x = _World2Object[0].y;
  v_103.y = _World2Object[1].y;
  v_103.z = _World2Object[2].y;
  v_103.w = _World2Object[3].y;
  highp vec4 v_104;
  v_104.x = _World2Object[0].z;
  v_104.y = _World2Object[1].z;
  v_104.z = _World2Object[2].z;
  v_104.w = _World2Object[3].z;
  highp vec3 tmpvar_105;
  tmpvar_105 = normalize(((
    (v_102.xyz * tmpvar_16.x)
   + 
    (v_103.xyz * tmpvar_16.y)
  ) + (v_104.xyz * tmpvar_16.z)));
  worldNormal_6 = tmpvar_105;
  tmpvar_7 = worldNormal_6;
  tmpvar_9.zw = vec2(0.0, 0.0);
  tmpvar_9.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_106;
  tmpvar_106.w = 1.0;
  tmpvar_106.xyz = worldNormal_6;
  mediump vec4 normal_107;
  normal_107 = tmpvar_106;
  mediump vec3 x2_108;
  mediump vec4 tmpvar_109;
  tmpvar_109 = (normal_107.xyzz * normal_107.yzzx);
  x2_108.x = dot (unity_SHBr, tmpvar_109);
  x2_108.y = dot (unity_SHBg, tmpvar_109);
  x2_108.z = dot (unity_SHBb, tmpvar_109);
  gl_Position = (glstate_matrix_mvp * tmpvar_15);
  xlv_TEXCOORD0 = tmpvar_7;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_15).xyz;
  xlv_TEXCOORD2 = tmpvar_8;
  xlv_TEXCOORD3 = tmpvar_11;
  xlv_TEXCOORD5 = tmpvar_9;
  xlv_TEXCOORD6 = (x2_108 + (unity_SHC.xyz * (
    (normal_107.x * normal_107.x)
   - 
    (normal_107.y * normal_107.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD6;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_2;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_4;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_4 * (xlv_TEXCOORD6 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = emission_16;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD5;
out mediump vec3 vs_TEXCOORD6;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec3 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
mediump vec3 t16_15;
highp vec2 t16;
bvec2 tb16;
highp float t19;
bool tb19;
highp vec3 t24;
highp vec2 t32;
highp int ti32;
highp vec2 t37;
highp vec2 t39;
highp float t48;
bool tb48;
highp float t49;
bool tb49;
highp float t51;
bool tb51;
highp float t52;
highp float t53;
mediump float t16_63;
void main()
{
    //Instruction 51515
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51516
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 51517
    //ADD
    t16.x = t0.x + _Object2World[3].z;
    //Instruction 51518
    //ADD
    t32.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 51519
    //ADD
    t16.y = t32.x + in_NORMAL0.x;
    //Instruction 51520
    //FRC
    t16.xy = fract(t16.xy);
    //Instruction 51521
    //MAD
    t16.x = t16.y * 0.500000 + t16.x;
    //Instruction 51522
    //ADD
    t16.x = t16.x + -0.300000;
    //Instruction 51523
    //MUL
    t1.z = t16.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 51524
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 51525
    //LT
    tb16.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 51526
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51527
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 51528
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 51529
    //DP3
    t48 = dot(t3.xyz, t3.xyz);
    //Instruction 51530
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 51531
    //MUL
    t3.xyz = vec3(t48) * t3.xyz;
    //Instruction 51532
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb16.xxx);
    //Instruction 51533
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 51534
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 51535
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 51536
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 51537
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 51538
    //LT
    tb48 = t16_2.x<5.000000;
    //Instruction 51539
    //AND
    ti32 = int(uint(tb48) & uint(tb16.y));
    //Instruction 51540
    //IF
    if((uint(ti32))!=uint(0u)){
        //Instruction 51541
        //ADD
        t32.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 51542
        //EQ
        tb48 = t16_2.x==4.000000;
        //Instruction 51543
        //LT
        tb49 = 0.0<in_TEXCOORD2.w;
        //Instruction 51544
        //MOVC
        t5.xy = (bool(tb49)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 51545
        //ADD
        t32.x = t32.x + t5.x;
        //Instruction 51546
        //ADD
        t32.x = t32.x + 0.500000;
        //Instruction 51547
        //FRC
        t32.x = fract(t32.x);
        //Instruction 51548
        //MAD
        t32.x = t32.x * 2.000000 + -1.0;
        //Instruction 51549
        //MUL
        t51 = abs(t32.x) * abs(t32.x);
        //Instruction 51550
        //MAD
        t32.x = -abs(t32.x) * 2.000000 + 3.000000;
        //Instruction 51551
        //MAD
        t32.x = t51 * t32.x + -0.500000;
        //Instruction 51552
        //DP2
        t32.x = dot(t32.xx, t5.yy);
        //Instruction 51553
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 51554
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 51555
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 51556
        //MUL
        t5.xyz = t32.xxx * t5.xyz;
        //Instruction 51557
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 51558
        //IF
        if(tb48){
            //Instruction 51559
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 51560
            //FRC
            t5 = fract(t5);
            //Instruction 51561
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51562
            //MOVC
            t6 = (bool(tb49)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 51563
            //MOVC
            t7.xyz = (bool(tb49)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 51564
            //MUL
            t32.x = t5.w * 3.000000;
            //Instruction 51565
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 51566
            //MAD
            t8.x = t6.x * 0.750000 + (-t32.x);
            //Instruction 51567
            //ADD
            t32.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 51568
            //FRC
            t32.xy = fract(t32.xy);
            //Instruction 51569
            //MAD
            t32.xy = t32.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51570
            //MUL
            t8.xy = abs(t32.xy) * abs(t32.xy);
            //Instruction 51571
            //MAD
            t32.xy = -abs(t32.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51572
            //MAD
            t32.xy = t8.xy * t32.xy + vec2(-0.500000, -0.500000);
            //Instruction 51573
            //ADD
            t32.xy = t32.xy + t32.xy;
            //Instruction 51574
            //DP3
            t49 = dot(t4.xyz, t4.xyz);
            //Instruction 51575
            //SQRT
            t49 = sqrt(t49);
            //Instruction 51576
            //MAD
            t51 = t32.x * t32.x + t32.y;
            //Instruction 51577
            //MUL
            t52 = t6.z * in_TEXCOORD2.x;
            //Instruction 51578
            //MUL
            t51 = t51 * t52;
            //Instruction 51579
            //SINCOS
            t6.x = sin(t51);
            t8.x = cos(t51);
            //Instruction 51580
            //ADD
            t51 = (-t8.x) + 1.0;
            //Instruction 51581
            //MUL
            t9 = t5.xxxy * vec4(t51);
            //Instruction 51582
            //MUL
            t24.xyz = t5.zxy * t6.xxx;
            //Instruction 51583
            //MAD
            t10.xy = t9.zy * t5.zy + t24.zx;
            //Instruction 51584
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 51585
            //MAD
            t10.z = t9.w * t5.z + (-t24.y);
            //Instruction 51586
            //MAD
            t12.xy = t9.yz * t5.yz + (-t24.xz);
            //Instruction 51587
            //MAD
            t12.z = t9.w * t5.z + t24.y;
            //Instruction 51588
            //MUL
            t52 = t5.z * t5.z;
            //Instruction 51589
            //MAD
            t12.w = t52 * t51 + t8.x;
            //Instruction 51590
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 51591
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 51592
            //DP3
            t19 = dot(t3.xyz, t5.xyz);
            //Instruction 51593
            //MAX
            t19 = max(t19, -1.0);
            //Instruction 51594
            //MIN
            t19 = min(t19, 1.0);
            //Instruction 51595
            //ADD
            t8.w = t19 + t8.y;
            //Instruction 51596
            //DP3
            t51 = dot(t8.xzw, t8.xzw);
            //Instruction 51597
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 51598
            //MUL
            t5.xyz = vec3(t51) * t8.zxw;
            //Instruction 51599
            //ADD
            t51 = -abs(t19) + 1.0;
            //Instruction 51600
            //SQRT
            t51 = sqrt(t51);
            //Instruction 51601
            //MAD
            t52 = abs(t19) * -0.018729 + 0.074261;
            //Instruction 51602
            //MAD
            t52 = t52 * abs(t19) + -0.212114;
            //Instruction 51603
            //MAD
            t52 = t52 * abs(t19) + 1.570729;
            //Instruction 51604
            //MUL
            t6.x = t51 * t52;
            //Instruction 51605
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 51606
            //LT
            tb19 = t19<(-t19);
            //Instruction 51607
            //AND
            t19 = tb19 ? t6.x : float(0.0);
            //Instruction 51608
            //MAD
            t19 = t52 * t51 + t19;
            //Instruction 51609
            //MAD
            t32.x = (-t32.y) * t32.y + t32.x;
            //Instruction 51610
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 51611
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 51612
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 51613
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 51614
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51615
            //MUL
            t39.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 51616
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51617
            //MAD
            t6.xz = t39.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 51618
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 51619
            //MUL
            t48 = t6.z * t6.z;
            //Instruction 51620
            //MAD
            t48 = t48 * t6.x + 1.0;
            //Instruction 51621
            //MUL
            t48 = t48 * 0.500000;
            t48 = clamp(t48, 0.0, 1.0);
            //Instruction 51622
            //LOG
            t48 = log2(t48);
            //Instruction 51623
            //MUL
            t48 = t48 * t7.y;
            //Instruction 51624
            //EXP
            t48 = exp2(t48);
            //Instruction 51625
            //MUL
            t32.x = t6.y * t32.x;
            //Instruction 51626
            //MAD
            t32.x = t19 * t6.w + t32.x;
            //Instruction 51627
            //MAD
            t32.x = t7.x * t48 + t32.x;
            //Instruction 51628
            //MUL
            t32.x = t32.x * in_TEXCOORD2.x;
            //Instruction 51629
            //SINCOS
            t6.x = sin(t32.x);
            t7.x = cos(t32.x);
            //Instruction 51630
            //ADD
            t32.x = (-t7.x) + 1.0;
            //Instruction 51631
            //MUL
            t8 = vec4(t5.y * t32.x, t5.y * t32.x, t5.y * t32.x, t5.z * t32.x);
            //Instruction 51632
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 51633
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 51634
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 51635
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 51636
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 51637
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 51638
            //MUL
            t48 = t5.x * t5.x;
            //Instruction 51639
            //MAD
            t9.w = t48 * t32.x + t7.x;
            //Instruction 51640
            //MOV
            t11.z = t12.x;
            //Instruction 51641
            //MOV
            t11.w = t10.x;
            //Instruction 51642
            //MOV
            t13.z = t9.y;
            //Instruction 51643
            //MOV
            t13.w = t14.y;
            //Instruction 51644
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 51645
            //MOV
            t14.w = t13.y;
            //Instruction 51646
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 51647
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 51648
            //MOV
            t10.w = t11.y;
            //Instruction 51649
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 51650
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 51651
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 51652
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 51653
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 51654
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 51655
            //DP3
            t32.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 51656
            //DP3
            t32.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 51657
            //DP3
            t19 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 51658
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 51659
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 51660
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 51661
            //DP3
            t51 = dot(t5.xyz, t5.xyz);
            //Instruction 51662
            //RSQ
            t51 = inversesqrt(t51);
            //Instruction 51663
            //MUL
            t5.xyz = vec3(t51) * t5.xyz;
            //Instruction 51664
            //MUL
            t4.xyz = vec3(t49) * t5.xyz;
            //Instruction 51665
        //ELSE
        } else {
            //Instruction 51666
            //MOV
            t32.xy = in_NORMAL0.xy;
            //Instruction 51667
            //MOV
            t19 = in_NORMAL0.z;
            //Instruction 51668
        //ENDIF
        }
        //Instruction 51669
    //ELSE
    } else {
        //Instruction 51670
        //MOV
        t32.xy = in_NORMAL0.xy;
        //Instruction 51671
        //MOV
        t19 = in_NORMAL0.z;
        //Instruction 51672
    //ENDIF
    }
    //Instruction 51673
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 51674
    //GE
    tb49 = t16_2.x>=3.000000;
    //Instruction 51675
    //IF
    if(tb49){
        //Instruction 51676
        //EQ
        tb49 = t16_2.x==5.000000;
        //Instruction 51677
        //IF
        if(tb49){
            //Instruction 51678
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51679
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 51680
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 51681
            //DP3
            t49 = dot(t5.xyz, t5.xyz);
            //Instruction 51682
            //RSQ
            t49 = inversesqrt(t49);
            //Instruction 51683
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 51684
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51685
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 51686
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51687
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 51688
            //ADD
            t49 = t0.x + _ST_WindBranch.x;
            //Instruction 51689
            //ADD
            t2.x = t49 + in_TEXCOORD0.w;
            //Instruction 51690
            //MAD
            t2.y = t49 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51691
            //MUL
            t51 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51692
            //MUL
            t2.z = t51 * 0.500000;
            //Instruction 51693
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51694
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51695
            //FRC
            t2 = fract(t2);
            //Instruction 51696
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51697
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 51698
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51699
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51700
            //ADD
            t2 = t2 + t2;
            //Instruction 51701
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 51702
            //LT
            tb51 = t7.w<0.0;
            //Instruction 51703
            //MOV
            t7.y = (-t7.w);
            //Instruction 51704
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 51705
            //MOVC
            t7.xy = (bool(tb51)) ? t7.xy : t7.zw;
            //Instruction 51706
            //MAD
            t51 = (-t2.y) * t2.z + t7.x;
            //Instruction 51707
            //MAD
            t51 = t7.y * t51 + t7.w;
            //Instruction 51708
            //ADD
            t52 = (-t51) + t7.x;
            //Instruction 51709
            //MAD
            t51 = t7.y * t52 + t51;
            //Instruction 51710
            //MUL
            t51 = t51 * _ST_WindBranchTwitch.x;
            //Instruction 51711
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51712
            //ADD
            t53 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51713
            //MUL
            t53 = t2.x * t53;
            //Instruction 51714
            //MAD
            t51 = t51 * t52 + t53;
            //Instruction 51715
            //MAD
            t52 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51716
            //MUL
            t51 = t51 * t52;
            //Instruction 51717
            //MUL
            t6.xyz = vec3(t51) * t6.xyz;
            //Instruction 51718
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 51719
            //MAD
            t7.x = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51720
            //MUL
            t49 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51721
            //MAD
            t7.y = t49 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51722
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 51723
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 51724
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51725
            //MUL
            t39.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 51726
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51727
            //MAD
            t7.xy = t39.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 51728
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 51729
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 51730
            //MUL
            t49 = t7.x * t7.y;
            //Instruction 51731
            //MAD
            t49 = (-t49) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51732
            //MUL
            t51 = t2.w * _ST_WindVector.w;
            //Instruction 51733
            //MAD
            t49 = t51 * _ST_WindBranchWhip.x + t49;
            //Instruction 51734
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 51735
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51736
            //MUL
            t5.xyz = vec3(t49) * t5.xyz;
            //Instruction 51737
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 51738
        //ELSE
        } else {
            //Instruction 51739
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51740
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51741
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51742
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 51743
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51744
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51745
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51746
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 51747
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 51748
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51749
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 51750
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51751
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 51752
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51753
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51754
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 51755
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 51756
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51757
            //MOV
            t2.y = (-t2.w);
            //Instruction 51758
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51759
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51760
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 51761
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 51762
            //ADD
            t49 = (-t0.x) + t7.x;
            //Instruction 51763
            //MAD
            t0.x = t7.y * t49 + t0.x;
            //Instruction 51764
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51765
            //ADD
            t49 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51766
            //ADD
            t51 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51767
            //MUL
            t51 = t51 * t6.x;
            //Instruction 51768
            //MAD
            t0.x = t0.x * t49 + t51;
            //Instruction 51769
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 51770
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 51771
        //ENDIF
        }
        //Instruction 51772
    //ENDIF
    }
    //Instruction 51773
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 51774
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51775
    //DIV
    t49 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51776
    //MAD
    t49 = (-t49) * 0.250000 + t4.y;
    //Instruction 51777
    //MAX
    t49 = max(t49, 0.0);
    //Instruction 51778
    //MUL
    t49 = t49 * _ST_WindGlobal.z;
    //Instruction 51779
    //NE
    tb51 = t49!=0.0;
    //Instruction 51780
    //LOG
    t52 = log2(t49);
    //Instruction 51781
    //MUL
    t52 = t52 * _ST_WindGlobal.w;
    //Instruction 51782
    //EXP
    t52 = exp2(t52);
    //Instruction 51783
    //MOVC
    t49 = (tb51) ? t52 : t49;
    //Instruction 51784
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51785
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51786
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 51787
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 51788
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51789
    //MUL
    t37.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 51790
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51791
    //MAD
    t5.xy = t37.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 51792
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 51793
    //MAD
    t51 = t5.y * t5.y + t5.x;
    //Instruction 51794
    //DIV
    t52 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51795
    //MAD
    t51 = _ST_WindGlobal.y * t51 + t52;
    //Instruction 51796
    //MUL
    t49 = t49 * t51;
    //Instruction 51797
    //MAD
    t5.xz = t3.xz * vec2(t49) + t4.xz;
    //Instruction 51798
    //MOV
    t5.y = t4.y;
    //Instruction 51799
    //DP3
    t49 = dot(t5.xyz, t5.xyz);
    //Instruction 51800
    //RSQ
    t49 = inversesqrt(t49);
    //Instruction 51801
    //MUL
    t3.xzw = vec3(t49) * t5.xyz;
    //Instruction 51802
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 51803
    //MOVC
    t3.xzw = (tb16.x) ? t3.xzw : t4.xyz;
    //Instruction 51804
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 51805
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 51806
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 51807
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51808
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 51809
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 51810
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 51811
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 51812
    //MOV
    t4.x = _World2Object[0].x;
    //Instruction 51813
    //MOV
    t4.y = _World2Object[1].x;
    //Instruction 51814
    //MOV
    t4.z = _World2Object[2].x;
    //Instruction 51815
    //MOV
    t5.x = _World2Object[0].y;
    //Instruction 51816
    //MOV
    t5.y = _World2Object[1].y;
    //Instruction 51817
    //MOV
    t5.z = _World2Object[2].y;
    //Instruction 51818
    //MUL
    t0.xyw = t32.yyy * t5.xyz;
    //Instruction 51819
    //MAD
    t0.xyz = t4.xyz * t32.xxx + t0.xyw;
    //Instruction 51820
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 51821
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 51822
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 51823
    //MAD
    t0.xyz = t4.xyz * vec3(t19) + t0.xyz;
    //Instruction 51824
    //DP3
    t48 = dot(t0.xyz, t0.xyz);
    //Instruction 51825
    //RSQ
    t48 = inversesqrt(t48);
    //Instruction 51826
    //MUL
    t0.xyz = vec3(t48) * t0.xyz;
    //Instruction 51827
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 51828
    //DP4
    t16_15.x = dot(unity_SHBr, t16_2);
    //Instruction 51829
    //DP4
    t16_15.y = dot(unity_SHBg, t16_2);
    //Instruction 51830
    //DP4
    t16_15.z = dot(unity_SHBb, t16_2);
    //Instruction 51831
    //MUL
    t16_63 = t0.y * t0.y;
    //Instruction 51832
    //MAD
    t16_63 = t0.x * t0.x + (-t16_63);
    //Instruction 51833
    //MAD
    vs_TEXCOORD6.xyz = unity_SHC.xyz * vec3(t16_63) + t16_15.xyz;
    //Instruction 51834
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 51835
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51836
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51837
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 51838
    //MOV
    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51839
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec4 t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 51486
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD3.xy);
    //Instruction 51487
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 51488
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 51489
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 51490
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 51491
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 51492
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 51493
    //MAD
    t16_6.xyz = vs_TEXCOORD3.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 51494
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 51495
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 51496
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 51497
    //MAD
    t16_0.x = t16_2.x * 0.500000 + 0.500000;
    //Instruction 51498
    //MUL
    t16_2.xyz = t16_0.xxx * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 51499
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51500
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 51501
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51502
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51503
    //MAD
    t10_1.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51504
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 51505
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51506
    //MOV
    t16_0.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51507
    //MOV
    t16_0.w = 1.0;
    //Instruction 51508
    //DP4
    t16_3.x = dot(unity_SHAr, t16_0);
    //Instruction 51509
    //DP4
    t16_3.y = dot(unity_SHAg, t16_0);
    //Instruction 51510
    //DP4
    t16_3.z = dot(unity_SHAb, t16_0);
    //Instruction 51511
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD6.xyz;
    //Instruction 51512
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 51513
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51514
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_111;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = worldBinormal_6.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = worldBinormal_6.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = worldBinormal_6.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  lowp float tmpvar_6;
  mediump float maxBase_7;
  mediump vec4 diffuseColor_8;
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_8 = tmpvar_9;
  tmpvar_6 = (diffuseColor_8.w * _Color.w);
  lowp float x_10;
  x_10 = (tmpvar_6 - _Cutoff);
  if ((x_10 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_7 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_7 = ((maxBase_7 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_11 * maxBase_7), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_3.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_3.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_3.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_3;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_5;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outEmission_2.w = emission_21.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_21.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 51228
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51229
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 51230
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 51231
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 51232
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 51233
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 51234
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 51235
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 51236
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 51237
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 51238
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 51239
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51240
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 51241
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 51242
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 51243
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 51244
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 51245
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 51246
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 51247
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 51248
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 51249
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 51250
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 51251
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 51252
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 51253
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 51254
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 51255
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 51256
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 51257
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 51258
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 51259
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 51260
        //FRC
        t34.x = fract(t34.x);
        //Instruction 51261
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 51262
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 51263
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 51264
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 51265
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 51266
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 51267
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 51268
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 51269
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 51270
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 51271
        //IF
        if(tb51){
            //Instruction 51272
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 51273
            //FRC
            t5 = fract(t5);
            //Instruction 51274
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51275
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 51276
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 51277
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 51278
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 51279
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 51280
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 51281
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 51282
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51283
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 51284
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51285
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 51286
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 51287
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 51288
            //SQRT
            t52 = sqrt(t52);
            //Instruction 51289
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 51290
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 51291
            //MUL
            t54 = t54 * t55;
            //Instruction 51292
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 51293
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 51294
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 51295
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 51296
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 51297
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 51298
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 51299
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 51300
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 51301
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 51302
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 51303
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 51304
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 51305
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 51306
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 51307
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 51308
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 51309
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 51310
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 51311
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 51312
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 51313
            //SQRT
            t54 = sqrt(t54);
            //Instruction 51314
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 51315
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 51316
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 51317
            //MUL
            t6.x = t54 * t55;
            //Instruction 51318
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 51319
            //LT
            tb20 = t20<(-t20);
            //Instruction 51320
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 51321
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 51322
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 51323
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 51324
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 51325
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 51326
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 51327
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51328
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 51329
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51330
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 51331
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 51332
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 51333
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 51334
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 51335
            //LOG
            t51 = log2(t51);
            //Instruction 51336
            //MUL
            t51 = t51 * t7.y;
            //Instruction 51337
            //EXP
            t51 = exp2(t51);
            //Instruction 51338
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 51339
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 51340
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 51341
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 51342
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 51343
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 51344
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 51345
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 51346
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 51347
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 51348
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 51349
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 51350
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 51351
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 51352
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 51353
            //MOV
            t11.z = t12.x;
            //Instruction 51354
            //MOV
            t11.w = t10.x;
            //Instruction 51355
            //MOV
            t13.z = t9.y;
            //Instruction 51356
            //MOV
            t13.w = t14.y;
            //Instruction 51357
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 51358
            //MOV
            t14.w = t13.y;
            //Instruction 51359
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 51360
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 51361
            //MOV
            t10.w = t11.y;
            //Instruction 51362
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 51363
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 51364
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 51365
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 51366
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 51367
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 51368
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 51369
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 51370
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 51371
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 51372
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 51373
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 51374
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 51375
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 51376
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 51377
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 51378
        //ELSE
        } else {
            //Instruction 51379
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 51380
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 51381
        //ENDIF
        }
        //Instruction 51382
    //ELSE
    } else {
        //Instruction 51383
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 51384
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 51385
    //ENDIF
    }
    //Instruction 51386
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 51387
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 51388
    //IF
    if(tb52){
        //Instruction 51389
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 51390
        //IF
        if(tb52){
            //Instruction 51391
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51392
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 51393
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 51394
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 51395
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 51396
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 51397
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51398
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 51399
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51400
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 51401
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 51402
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 51403
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51404
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51405
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 51406
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51407
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51408
            //FRC
            t2 = fract(t2);
            //Instruction 51409
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51410
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 51411
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51412
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51413
            //ADD
            t2 = t2 + t2;
            //Instruction 51414
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 51415
            //LT
            tb54 = t7.w<0.0;
            //Instruction 51416
            //MOV
            t7.y = (-t7.w);
            //Instruction 51417
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 51418
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 51419
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 51420
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 51421
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 51422
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 51423
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 51424
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51425
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51426
            //MUL
            t56 = t2.x * t56;
            //Instruction 51427
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 51428
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51429
            //MUL
            t54 = t54 * t55;
            //Instruction 51430
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 51431
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 51432
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51433
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51434
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51435
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 51436
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 51437
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51438
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 51439
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51440
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 51441
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 51442
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 51443
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 51444
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51445
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 51446
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 51447
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 51448
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51449
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 51450
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 51451
        //ELSE
        } else {
            //Instruction 51452
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51453
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51454
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51455
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 51456
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51457
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51458
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51459
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 51460
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 51461
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51462
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 51463
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51464
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 51465
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51466
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51467
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 51468
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 51469
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51470
            //MOV
            t2.y = (-t2.w);
            //Instruction 51471
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51472
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51473
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 51474
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 51475
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 51476
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 51477
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51478
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51479
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51480
            //MUL
            t54 = t54 * t6.x;
            //Instruction 51481
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 51482
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 51483
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 51484
        //ENDIF
        }
        //Instruction 51485
    //ENDIF
    }
    //Instruction 51486
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 51487
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51488
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51489
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 51490
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 51491
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 51492
    //NE
    tb54 = t52!=0.0;
    //Instruction 51493
    //LOG
    t55 = log2(t52);
    //Instruction 51494
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 51495
    //EXP
    t55 = exp2(t55);
    //Instruction 51496
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 51497
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51498
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51499
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 51500
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 51501
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51502
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 51503
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51504
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 51505
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 51506
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 51507
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51508
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 51509
    //MUL
    t52 = t52 * t54;
    //Instruction 51510
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 51511
    //MOV
    t5.y = t4.y;
    //Instruction 51512
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 51513
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 51514
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 51515
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 51516
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 51517
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 51518
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 51519
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 51520
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51521
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 51522
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 51523
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 51524
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 51525
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 51526
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 51527
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 51528
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 51529
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 51530
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 51531
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 51532
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 51533
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 51534
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 51535
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 51536
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 51537
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 51538
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 51539
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 51540
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 51541
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 51542
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 51543
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 51544
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 51545
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 51546
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 51547
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 51548
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 51549
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 51550
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 51551
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 51552
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 51553
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 51554
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 51555
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 51556
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 51557
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 51558
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 51559
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 51560
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 51561
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 51562
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 51563
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 51564
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 51565
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 51566
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 51567
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 51568
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 51569
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51570
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 51571
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51572
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 51194
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 51195
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 51196
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 51197
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 51198
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 51199
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 51200
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 51201
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 51202
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 51203
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 51204
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 51205
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 51206
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 51207
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 51208
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 51209
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51210
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51211
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51212
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 51213
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 51214
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 51215
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 51216
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 51217
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51218
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 51219
    //MOV
    t0.w = 1.0;
    //Instruction 51220
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 51221
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 51222
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 51223
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 51224
    //MUL
    t16_2.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 51225
    //EXP
    SV_Target3.xyz = exp2((-t16_2.xyz));
    //Instruction 51226
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51227
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
attribute vec4 _glesMultiTexCoord3;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform highp vec4 unity_LODFade;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindLeaf1Ripple;
uniform highp vec4 _ST_WindLeaf1Tumble;
uniform highp vec4 _ST_WindLeaf1Twitch;
uniform highp vec4 _ST_WindLeaf2Ripple;
uniform highp vec4 _ST_WindLeaf2Tumble;
uniform highp vec4 _ST_WindLeaf2Twitch;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec3 tmpvar_2;
  tmpvar_2 = _glesNormal;
  highp vec4 tmpvar_3;
  tmpvar_3 = _glesMultiTexCoord0;
  highp vec4 tmpvar_4;
  tmpvar_4 = _glesMultiTexCoord1;
  highp vec2 tmpvar_5;
  tmpvar_5 = _glesMultiTexCoord3.xy;
  lowp vec3 worldBinormal_6;
  lowp vec3 worldTangent_7;
  lowp vec3 worldNormal_8;
  mediump vec4 tmpvar_9;
  highp vec4 tmpvar_10;
  lowp vec4 tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12.xy = tmpvar_3.xy;
  tmpvar_11.w = _Color.w;
  tmpvar_11.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = _Object2World[3].x;
  highp float tmpvar_15;
  tmpvar_15 = _Object2World[3].y;
  tmpvar_13 = clamp (((
    fract(((tmpvar_14 + tmpvar_15) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_12.z = tmpvar_13;
  highp vec4 tmpvar_16;
  highp vec3 tmpvar_17;
  tmpvar_16 = tmpvar_1;
  tmpvar_17 = tmpvar_2;
  highp vec3 vRotatedBranchAnchor_18;
  highp vec3 vRotatedWindVector_19;
  highp vec3 FinalPosition_20;
  FinalPosition_20 = tmpvar_1.xyz;
  mediump float tmpvar_21;
  tmpvar_21 = (_WindQuality * _WindEnabled);
  if ((tmpvar_21 > 0.0)) {
    highp mat3 tmpvar_22;
    tmpvar_22[0] = _World2Object[0].xyz;
    tmpvar_22[1] = _World2Object[1].xyz;
    tmpvar_22[2] = _World2Object[2].xyz;
    vRotatedWindVector_19 = normalize((tmpvar_22 * _ST_WindVector.xyz));
    highp mat3 tmpvar_23;
    tmpvar_23[0] = _World2Object[0].xyz;
    tmpvar_23[1] = _World2Object[1].xyz;
    tmpvar_23[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_18 = (normalize((tmpvar_23 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_19 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_18 = vec3(0.0, 0.0, 0.0);
  };
  FinalPosition_20 = (_glesVertex.xyz - _glesMultiTexCoord1.xyz);
  highp vec3 tmpvar_24;
  tmpvar_24.x = tmpvar_4.w;
  tmpvar_24.y = tmpvar_5.x;
  tmpvar_24.z = tmpvar_5.y;
  highp vec3 tmpvar_25;
  tmpvar_25 = mix (FinalPosition_20, tmpvar_24, unity_LODFade.xxx);
  FinalPosition_20 = tmpvar_25;
  if (((tmpvar_21 > 1.0) && (tmpvar_21 < 5.0))) {
    highp float tmpvar_26;
    tmpvar_26 = (_glesMultiTexCoord1.x + _glesMultiTexCoord1.y);
    bool isBestWind_27;
    isBestWind_27 = (tmpvar_21 == 4.0);
    bool bLeaf2_28;
    bLeaf2_28 = (_glesMultiTexCoord2.w > 0.0);
    highp vec3 vPos_29;
    vPos_29 = tmpvar_25;
    highp vec3 vDirection_30;
    vDirection_30 = tmpvar_2;
    highp float tmpvar_31;
    if (bLeaf2_28) {
      tmpvar_31 = _ST_WindLeaf2Ripple.x;
    } else {
      tmpvar_31 = _ST_WindLeaf1Ripple.x;
    };
    highp float tmpvar_32;
    if (bLeaf2_28) {
      tmpvar_32 = _ST_WindLeaf2Ripple.y;
    } else {
      tmpvar_32 = _ST_WindLeaf1Ripple.y;
    };
    highp vec3 vPos_33;
    highp vec4 tmpvar_34;
    tmpvar_34.yzw = vec3(0.0, 0.0, 0.0);
    tmpvar_34.x = (tmpvar_31 + tmpvar_26);
    highp vec4 tmpvar_35;
    tmpvar_35 = abs(((
      fract((tmpvar_34 + 0.5))
     * 2.0) - 1.0));
    vPos_33 = (tmpvar_25 + ((
      ((fract((_glesMultiTexCoord2.z / vec3(16.0, 1.0, 0.0625))) * 2.0) - 1.0)
     * 
      (tmpvar_32 * (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0).x)
    ) * _glesMultiTexCoord2.x));
    vDirection_30 = tmpvar_2;
    vPos_29 = vPos_33;
    if (isBestWind_27) {
      highp vec3 tmpvar_36;
      tmpvar_36 = ((fract(
        (_glesMultiTexCoord2.y / vec3(16.0, 1.0, 0.0625))
      ) * 2.0) - 1.0);
      highp float tmpvar_37;
      if (bLeaf2_28) {
        tmpvar_37 = _ST_WindLeaf2Tumble.x;
      } else {
        tmpvar_37 = _ST_WindLeaf1Tumble.x;
      };
      highp float tmpvar_38;
      if (bLeaf2_28) {
        tmpvar_38 = _ST_WindLeaf2Tumble.y;
      } else {
        tmpvar_38 = _ST_WindLeaf1Tumble.y;
      };
      highp float tmpvar_39;
      if (bLeaf2_28) {
        tmpvar_39 = _ST_WindLeaf2Tumble.z;
      } else {
        tmpvar_39 = _ST_WindLeaf1Tumble.z;
      };
      highp float tmpvar_40;
      if (bLeaf2_28) {
        tmpvar_40 = _ST_WindLeaf2Tumble.w;
      } else {
        tmpvar_40 = _ST_WindLeaf1Tumble.w;
      };
      highp vec3 tmpvar_41;
      if (bLeaf2_28) {
        tmpvar_41 = _ST_WindLeaf2Twitch.xyz;
      } else {
        tmpvar_41 = _ST_WindLeaf1Twitch.xyz;
      };
      bool tmpvar_42;
      if (bLeaf2_28) {
        tmpvar_42 = bool(1);
      } else {
        tmpvar_42 = bool(1);
      };
      highp float fTwitch_43;
      highp vec3 vAxis_44;
      highp float fOsc_45;
      highp vec3 vOriginPos_46;
      highp vec3 tmpvar_47;
      tmpvar_47 = fract((_glesMultiTexCoord2.yyy * 30.3));
      highp float tmpvar_48;
      tmpvar_48 = ((tmpvar_47.x + tmpvar_47.y) + tmpvar_47.z);
      highp vec4 tmpvar_49;
      tmpvar_49.x = (tmpvar_37 + tmpvar_48);
      tmpvar_49.y = ((tmpvar_37 * 0.75) - tmpvar_48);
      tmpvar_49.z = ((tmpvar_37 * 0.01) + tmpvar_48);
      tmpvar_49.w = (tmpvar_37 + tmpvar_48);
      highp vec4 tmpvar_50;
      highp vec4 tmpvar_51;
      tmpvar_51 = abs(((
        fract((tmpvar_49 + 0.5))
       * 2.0) - 1.0));
      tmpvar_50 = (((
        (tmpvar_51 * tmpvar_51)
       * 
        (3.0 - (2.0 * tmpvar_51))
      ) - 0.5) * 2.0);
      vOriginPos_46 = vPos_33;
      highp float tmpvar_52;
      tmpvar_52 = sqrt(dot (vPos_33, vPos_33));
      highp float fAngle_53;
      fAngle_53 = ((_glesMultiTexCoord2.x * tmpvar_39) * (tmpvar_50.x + (tmpvar_50.y * tmpvar_50.y)));
      highp vec2 vSinCos_54;
      vSinCos_54.x = sin(fAngle_53);
      vSinCos_54.y = cos(fAngle_53);
      highp float tmpvar_55;
      tmpvar_55 = (1.0 - vSinCos_54.y);
      highp mat3 tmpvar_56;
      tmpvar_56[0].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.x) + vSinCos_54.y);
      tmpvar_56[0].y = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) + (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[0].z = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[1].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.y) - (vSinCos_54.x * tmpvar_36.z));
      tmpvar_56[1].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.y) + vSinCos_54.y);
      tmpvar_56[1].z = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].x = (((tmpvar_55 * tmpvar_36.x) * tmpvar_36.z) + (vSinCos_54.x * tmpvar_36.y));
      tmpvar_56[2].y = (((tmpvar_55 * tmpvar_36.y) * tmpvar_36.z) - (vSinCos_54.x * tmpvar_36.x));
      tmpvar_56[2].z = (((tmpvar_55 * tmpvar_36.z) * tmpvar_36.z) + vSinCos_54.y);
      highp vec3 tmpvar_57;
      tmpvar_57 = ((tmpvar_36.yzx * vRotatedWindVector_19.zxy) - (tmpvar_36.zxy * vRotatedWindVector_19.yzx));
      vAxis_44.xz = tmpvar_57.xz;
      highp float tmpvar_58;
      tmpvar_58 = clamp (dot (vRotatedWindVector_19, tmpvar_36), -1.0, 1.0);
      vAxis_44.y = (tmpvar_57.y + tmpvar_58);
      highp vec3 tmpvar_59;
      tmpvar_59 = normalize(vAxis_44);
      vAxis_44 = tmpvar_59;
      highp float tmpvar_60;
      tmpvar_60 = (1.570796 - (sign(tmpvar_58) * (1.570796 - 
        (sqrt((1.0 - abs(tmpvar_58))) * (1.570796 + (abs(tmpvar_58) * (-0.2146018 + 
          (abs(tmpvar_58) * (0.08656672 + (abs(tmpvar_58) * -0.03102955)))
        ))))
      )));
      fOsc_45 = (tmpvar_50.y - (tmpvar_50.x * tmpvar_50.x));
      fTwitch_43 = 0.0;
      if (tmpvar_42) {
        highp float fTime_61;
        fTime_61 = (tmpvar_41.z + tmpvar_48);
        highp vec4 tmpvar_62;
        tmpvar_62.zw = vec2(0.0, 0.0);
        tmpvar_62.x = fTime_61;
        tmpvar_62.y = (0.87 * fTime_61);
        highp vec4 tmpvar_63;
        highp vec4 tmpvar_64;
        tmpvar_64 = abs(((
          fract((tmpvar_62 + 0.5))
         * 2.0) - 1.0));
        tmpvar_63 = (((
          (tmpvar_64 * tmpvar_64)
         * 
          (3.0 - (2.0 * tmpvar_64))
        ) - 0.5) * 2.0);
        fTwitch_43 = (tmpvar_41.x * pow (clamp (
          ((((tmpvar_63.x * tmpvar_63.y) * tmpvar_63.y) + 1.0) * 0.5)
        , 0.0, 1.0), tmpvar_41.y));
      };
      highp float fAngle_65;
      fAngle_65 = (_glesMultiTexCoord2.x * ((
        (tmpvar_60 * tmpvar_40)
       + 
        (fOsc_45 * tmpvar_38)
      ) + fTwitch_43));
      highp vec2 vSinCos_66;
      vSinCos_66.x = sin(fAngle_65);
      vSinCos_66.y = cos(fAngle_65);
      highp float tmpvar_67;
      tmpvar_67 = (1.0 - vSinCos_66.y);
      highp mat3 tmpvar_68;
      tmpvar_68[0].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.x) + vSinCos_66.y);
      tmpvar_68[0].y = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) + (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[0].z = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[1].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.y) - (vSinCos_66.x * tmpvar_59.z));
      tmpvar_68[1].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.y) + vSinCos_66.y);
      tmpvar_68[1].z = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].x = (((tmpvar_67 * tmpvar_59.x) * tmpvar_59.z) + (vSinCos_66.x * tmpvar_59.y));
      tmpvar_68[2].y = (((tmpvar_67 * tmpvar_59.y) * tmpvar_59.z) - (vSinCos_66.x * tmpvar_59.x));
      tmpvar_68[2].z = (((tmpvar_67 * tmpvar_59.z) * tmpvar_59.z) + vSinCos_66.y);
      highp mat3 tmpvar_69;
      tmpvar_69 = (tmpvar_56 * tmpvar_68);
      vOriginPos_46 = (normalize((tmpvar_69 * vPos_33)) * tmpvar_52);
      vDirection_30 = (tmpvar_69 * _glesNormal);
      vPos_29 = vOriginPos_46;
    };
    tmpvar_17 = vDirection_30;
    FinalPosition_20 = vPos_29;
  };
  FinalPosition_20 = (FinalPosition_20 + _glesMultiTexCoord1.xyz);
  if ((tmpvar_21 >= 3.0)) {
    highp vec3 vPos_70;
    vPos_70 = FinalPosition_20;
    if ((tmpvar_21 == 5.0)) {
      highp vec3 vPos_71;
      vPos_71 = FinalPosition_20;
      highp float fTime_72;
      highp float fAdherenceScale_73;
      highp vec3 vWindVector_74;
      vWindVector_74 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_72 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_75;
      highp float fOscillation_76;
      fOscillation_76 = 1.0;
      highp float fAmount_77;
      highp float fTarget_78;
      highp vec4 tmpvar_79;
      tmpvar_79.x = (fTime_72 + _glesMultiTexCoord0.w);
      tmpvar_79.y = ((fTime_72 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_79.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_72 + _glesMultiTexCoord0.w));
      tmpvar_79.w = ((fTime_72 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_80;
      tmpvar_80 = abs(((
        fract((tmpvar_79 + 0.5))
       * 2.0) - 1.0));
      vOscillations_75 = (((
        (tmpvar_80 * tmpvar_80)
       * 
        (3.0 - (2.0 * tmpvar_80))
      ) - 0.5) * 2.0);
      highp float tmpvar_81;
      tmpvar_81 = (vOscillations_75.y * vOscillations_75.z);
      fTarget_78 = 1.0;
      fAmount_77 = tmpvar_81;
      if ((tmpvar_81 < 0.0)) {
        fTarget_78 = -1.0;
        fAmount_77 = -(tmpvar_81);
      };
      fOscillation_76 = (((
        mix (mix (tmpvar_81, fTarget_78, fAmount_77), fTarget_78, fAmount_77)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_75.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_76 = (fOscillation_76 * (1.0 + (vOscillations_75.w * _ST_WindBranchWhip.x)));
      vPos_71 = (FinalPosition_20 + ((vWindVector_74 * fOscillation_76) * _ST_WindBranch.y));
      highp vec4 tmpvar_82;
      tmpvar_82.zw = vec2(0.0, 0.0);
      tmpvar_82.x = ((fTime_72 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_82.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_83;
      highp vec4 tmpvar_84;
      tmpvar_84 = abs(((
        fract((tmpvar_82 + 0.5))
       * 2.0) - 1.0));
      tmpvar_83 = (((
        (tmpvar_84 * tmpvar_84)
       * 
        (3.0 - (2.0 * tmpvar_84))
      ) - 0.5) * 2.0);
      fAdherenceScale_73 = (1.0 - ((tmpvar_83.x * tmpvar_83.y) * (
        (tmpvar_83.x * tmpvar_83.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_73 = (fAdherenceScale_73 + ((vOscillations_75.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_71 = (vPos_71 + ((
        ((vRotatedBranchAnchor_18 - vPos_71) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_73) * _glesMultiTexCoord0.z));
      vPos_70 = vPos_71;
    } else {
      highp vec3 vPos_85;
      vPos_85 = vPos_70;
      highp float fTime_86;
      highp vec3 vWindVector_87;
      vWindVector_87 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_86 = (_ST_WindBranch.x + (tmpvar_14 + tmpvar_15));
      highp vec4 vOscillations_88;
      highp float fOscillation_89;
      fOscillation_89 = 1.0;
      highp float fAmount_90;
      highp float fTarget_91;
      highp vec4 tmpvar_92;
      tmpvar_92.w = 0.0;
      tmpvar_92.x = (fTime_86 + _glesMultiTexCoord0.w);
      tmpvar_92.y = ((fTime_86 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_92.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_86 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_93;
      tmpvar_93 = abs(((
        fract((tmpvar_92 + 0.5))
       * 2.0) - 1.0));
      vOscillations_88 = (((
        (tmpvar_93 * tmpvar_93)
       * 
        (3.0 - (2.0 * tmpvar_93))
      ) - 0.5) * 2.0);
      highp float tmpvar_94;
      tmpvar_94 = (vOscillations_88.y * vOscillations_88.z);
      fTarget_91 = 1.0;
      fAmount_90 = tmpvar_94;
      if ((tmpvar_94 < 0.0)) {
        fTarget_91 = -1.0;
        fAmount_90 = -(tmpvar_94);
      };
      fOscillation_89 = (((
        mix (mix (tmpvar_94, fTarget_91, fAmount_90), fTarget_91, fAmount_90)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_88.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_85 = (vPos_70 + ((vWindVector_87 * fOscillation_89) * _ST_WindBranch.y));
      vPos_70 = vPos_85;
    };
    FinalPosition_20 = vPos_70;
  };
  if ((tmpvar_21 > 0.0)) {
    highp vec3 vPos_95;
    vPos_95 = FinalPosition_20;
    highp float fMoveAmount_96;
    highp float fAdjust_97;
    highp float fLength_98;
    fLength_98 = sqrt(dot (FinalPosition_20, FinalPosition_20));
    highp float tmpvar_99;
    tmpvar_99 = (max ((FinalPosition_20.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_97 = tmpvar_99;
    if ((tmpvar_99 != 0.0)) {
      fAdjust_97 = pow (tmpvar_99, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_100;
    tmpvar_100.zw = vec2(0.0, 0.0);
    tmpvar_100.x = (tmpvar_14 + _ST_WindGlobal.x);
    tmpvar_100.y = (tmpvar_15 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_101;
    highp vec4 tmpvar_102;
    tmpvar_102 = abs(((
      fract((tmpvar_100 + 0.5))
     * 2.0) - 1.0));
    tmpvar_101 = (((
      (tmpvar_102 * tmpvar_102)
     * 
      (3.0 - (2.0 * tmpvar_102))
    ) - 0.5) * 2.0);
    fMoveAmount_96 = ((_ST_WindGlobal.y * (tmpvar_101.x + 
      (tmpvar_101.y * tmpvar_101.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_96 = (fMoveAmount_96 * fAdjust_97);
    vPos_95.xz = (FinalPosition_20.xz + (vRotatedWindVector_19.xz * fMoveAmount_96));
    vPos_95 = (normalize(vPos_95) * fLength_98);
    FinalPosition_20 = vPos_95;
  };
  tmpvar_16.xyz = FinalPosition_20;
  tmpvar_9 = tmpvar_11;
  highp vec3 tmpvar_103;
  tmpvar_103 = (_Object2World * tmpvar_16).xyz;
  highp vec4 v_104;
  v_104.x = _World2Object[0].x;
  v_104.y = _World2Object[1].x;
  v_104.z = _World2Object[2].x;
  v_104.w = _World2Object[3].x;
  highp vec4 v_105;
  v_105.x = _World2Object[0].y;
  v_105.y = _World2Object[1].y;
  v_105.z = _World2Object[2].y;
  v_105.w = _World2Object[3].y;
  highp vec4 v_106;
  v_106.x = _World2Object[0].z;
  v_106.y = _World2Object[1].z;
  v_106.z = _World2Object[2].z;
  v_106.w = _World2Object[3].z;
  highp vec3 tmpvar_107;
  tmpvar_107 = normalize(((
    (v_104.xyz * tmpvar_17.x)
   + 
    (v_105.xyz * tmpvar_17.y)
  ) + (v_106.xyz * tmpvar_17.z)));
  worldNormal_8 = tmpvar_107;
  highp mat3 tmpvar_108;
  tmpvar_108[0] = _Object2World[0].xyz;
  tmpvar_108[1] = _Object2World[1].xyz;
  tmpvar_108[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_109;
  tmpvar_109 = normalize((tmpvar_108 * _glesTANGENT.xyz));
  worldTangent_7 = tmpvar_109;
  lowp vec3 tmpvar_110;
  tmpvar_110 = ((worldNormal_8.yzx * worldTangent_7.zxy) - (worldNormal_8.zxy * worldTangent_7.yzx));
  highp vec3 tmpvar_111;
  tmpvar_111 = (tmpvar_110 * _glesTANGENT.w);
  worldBinormal_6 = tmpvar_111;
  highp vec4 tmpvar_112;
  tmpvar_112.x = worldTangent_7.x;
  tmpvar_112.y = worldBinormal_6.x;
  tmpvar_112.z = worldNormal_8.x;
  tmpvar_112.w = tmpvar_103.x;
  highp vec4 tmpvar_113;
  tmpvar_113.x = worldTangent_7.y;
  tmpvar_113.y = worldBinormal_6.y;
  tmpvar_113.z = worldNormal_8.y;
  tmpvar_113.w = tmpvar_103.y;
  highp vec4 tmpvar_114;
  tmpvar_114.x = worldTangent_7.z;
  tmpvar_114.y = worldBinormal_6.z;
  tmpvar_114.z = worldNormal_8.z;
  tmpvar_114.w = tmpvar_103.z;
  tmpvar_10.zw = vec2(0.0, 0.0);
  tmpvar_10.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_115;
  tmpvar_115.w = 1.0;
  tmpvar_115.xyz = worldNormal_8;
  mediump vec4 normal_116;
  normal_116 = tmpvar_115;
  mediump vec3 x2_117;
  mediump vec4 tmpvar_118;
  tmpvar_118 = (normal_116.xyzz * normal_116.yzzx);
  x2_117.x = dot (unity_SHBr, tmpvar_118);
  x2_117.y = dot (unity_SHBg, tmpvar_118);
  x2_117.z = dot (unity_SHBb, tmpvar_118);
  gl_Position = (glstate_matrix_mvp * tmpvar_16);
  xlv_TEXCOORD0 = tmpvar_112;
  xlv_TEXCOORD1 = tmpvar_113;
  xlv_TEXCOORD2 = tmpvar_114;
  xlv_TEXCOORD3 = tmpvar_9;
  xlv_TEXCOORD4 = tmpvar_12;
  xlv_TEXCOORD6 = tmpvar_10;
  xlv_TEXCOORD7 = (x2_117 + (unity_SHC.xyz * (
    (normal_116.x * normal_116.x)
   - 
    (normal_116.y * normal_116.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform sampler2D _MainTex;
uniform lowp float _Cutoff;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  lowp float tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  lowp vec4 tmpvar_8;
  tmpvar_8 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_8;
  tmpvar_5 = (diffuseColor_7.w * _Color.w);
  lowp float x_9;
  x_9 = (tmpvar_5 - _Cutoff);
  if ((x_9 < 0.0)) {
    discard;
  };
  mediump vec3 tmpvar_10;
  tmpvar_10 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_10.x, max (tmpvar_10.y, tmpvar_10.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_10 * maxBase_6), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_11;
  tmpvar_11 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_12;
  tmpvar_12 = dot (xlv_TEXCOORD0.xyz, tmpvar_11);
  worldN_2.x = tmpvar_12;
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD1.xyz, tmpvar_11);
  worldN_2.y = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD2.xyz, tmpvar_11);
  worldN_2.z = tmpvar_14;
  mediump vec3 normalWorld_15;
  normalWorld_15 = worldN_2;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_4;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = emission_20;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_PERCENTAGE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_LEAF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec2 in_TEXCOORD3;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec4 t3;
highp vec4 t4;
highp vec4 t5;
highp vec4 t6;
highp vec4 t7;
highp vec4 t8;
highp vec4 t9;
highp vec4 t10;
highp vec4 t11;
highp vec4 t12;
highp vec4 t13;
highp vec4 t14;
lowp vec3 t10_15;
mediump vec3 t16_16;
highp vec2 t17;
bvec2 tb17;
highp float t20;
bool tb20;
highp vec3 t25;
highp vec2 t34;
highp int ti34;
highp vec2 t39;
highp vec2 t41;
highp float t51;
bool tb51;
highp float t52;
bool tb52;
highp float t54;
bool tb54;
highp float t55;
highp float t56;
mediump float t16_67;
void main()
{
    //Instruction 50688
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 50689
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 50690
    //ADD
    t17.x = t0.x + _Object2World[3].z;
    //Instruction 50691
    //ADD
    t34.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 50692
    //ADD
    t17.y = t34.x + in_NORMAL0.x;
    //Instruction 50693
    //FRC
    t17.xy = fract(t17.xy);
    //Instruction 50694
    //MAD
    t17.x = t17.y * 0.500000 + t17.x;
    //Instruction 50695
    //ADD
    t17.x = t17.x + -0.300000;
    //Instruction 50696
    //MUL
    t1.z = t17.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 50697
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 50698
    //LT
    tb17.xy = lessThan(vec4(0.0, 1.0, 0.0, 0.0), t16_2.xxxx).xy;
    //Instruction 50699
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 50700
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 50701
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 50702
    //DP3
    t51 = dot(t3.xyz, t3.xyz);
    //Instruction 50703
    //RSQ
    t51 = inversesqrt(t51);
    //Instruction 50704
    //MUL
    t3.xyz = vec3(t51) * t3.xyz;
    //Instruction 50705
    //AND
    t3.xyz = mix(vec3(0.0, 0.0, 0.0), t3.xyz, tb17.xxx);
    //Instruction 50706
    //ADD
    t4.xyz = in_POSITION0.xyz + (-in_TEXCOORD1.xyz);
    //Instruction 50707
    //MOV
    t5.x = in_TEXCOORD1.w;
    //Instruction 50708
    //MOV
    t5.yz = in_TEXCOORD3.xy;
    //Instruction 50709
    //ADD
    t5.xyz = (-t4.xyz) + t5.xyz;
    //Instruction 50710
    //MAD
    t4.xyz = unity_LODFade.xxx * t5.xyz + t4.xyz;
    //Instruction 50711
    //LT
    tb51 = t16_2.x<5.000000;
    //Instruction 50712
    //AND
    ti34 = int(uint(tb51) & uint(tb17.y));
    //Instruction 50713
    //IF
    if((uint(ti34))!=uint(0u)){
        //Instruction 50714
        //ADD
        t34.x = in_TEXCOORD1.y + in_TEXCOORD1.x;
        //Instruction 50715
        //EQ
        tb51 = t16_2.x==4.000000;
        //Instruction 50716
        //LT
        tb52 = 0.0<in_TEXCOORD2.w;
        //Instruction 50717
        //MOVC
        t5.xy = (bool(tb52)) ? _ST_WindLeaf2Ripple.xy : _ST_WindLeaf1Ripple.xy;
        //Instruction 50718
        //ADD
        t34.x = t34.x + t5.x;
        //Instruction 50719
        //ADD
        t34.x = t34.x + 0.500000;
        //Instruction 50720
        //FRC
        t34.x = fract(t34.x);
        //Instruction 50721
        //MAD
        t34.x = t34.x * 2.000000 + -1.0;
        //Instruction 50722
        //MUL
        t54 = abs(t34.x) * abs(t34.x);
        //Instruction 50723
        //MAD
        t34.x = -abs(t34.x) * 2.000000 + 3.000000;
        //Instruction 50724
        //MAD
        t34.x = t54 * t34.x + -0.500000;
        //Instruction 50725
        //DP2
        t34.x = dot(t34.xx, t5.yy);
        //Instruction 50726
        //MUL
        t5.xyz = in_TEXCOORD2.zzz * vec3(0.062500, 1.0, 16.000000);
        //Instruction 50727
        //FRC
        t5.xyz = fract(t5.xyz);
        //Instruction 50728
        //MAD
        t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
        //Instruction 50729
        //MUL
        t5.xyz = t34.xxx * t5.xyz;
        //Instruction 50730
        //MAD
        t4.xyz = t5.xyz * in_TEXCOORD2.xxx + t4.xyz;
        //Instruction 50731
        //IF
        if(tb51){
            //Instruction 50732
            //MUL
            t5 = in_TEXCOORD2.yyyy * vec4(0.062500, 1.0, 16.000000, 30.299999);
            //Instruction 50733
            //FRC
            t5 = fract(t5);
            //Instruction 50734
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50735
            //MOVC
            t6 = (bool(tb52)) ? _ST_WindLeaf2Tumble : _ST_WindLeaf1Tumble;
            //Instruction 50736
            //MOVC
            t7.xyz = (bool(tb52)) ? _ST_WindLeaf2Twitch.xyz : _ST_WindLeaf1Twitch.xyz;
            //Instruction 50737
            //MUL
            t34.x = t5.w * 3.000000;
            //Instruction 50738
            //MAD
            t8.y = t5.w * 3.000000 + t6.x;
            //Instruction 50739
            //MAD
            t8.x = t6.x * 0.750000 + (-t34.x);
            //Instruction 50740
            //ADD
            t34.xy = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 50741
            //FRC
            t34.xy = fract(t34.xy);
            //Instruction 50742
            //MAD
            t34.xy = t34.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50743
            //MUL
            t8.xy = abs(t34.xy) * abs(t34.xy);
            //Instruction 50744
            //MAD
            t34.xy = -abs(t34.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50745
            //MAD
            t34.xy = t8.xy * t34.xy + vec2(-0.500000, -0.500000);
            //Instruction 50746
            //ADD
            t34.xy = t34.xy + t34.xy;
            //Instruction 50747
            //DP3
            t52 = dot(t4.xyz, t4.xyz);
            //Instruction 50748
            //SQRT
            t52 = sqrt(t52);
            //Instruction 50749
            //MAD
            t54 = t34.x * t34.x + t34.y;
            //Instruction 50750
            //MUL
            t55 = t6.z * in_TEXCOORD2.x;
            //Instruction 50751
            //MUL
            t54 = t54 * t55;
            //Instruction 50752
            //SINCOS
            t6.x = sin(t54);
            t8.x = cos(t54);
            //Instruction 50753
            //ADD
            t54 = (-t8.x) + 1.0;
            //Instruction 50754
            //MUL
            t9 = t5.xxxy * vec4(t54);
            //Instruction 50755
            //MUL
            t25.xyz = t5.zxy * t6.xxx;
            //Instruction 50756
            //MAD
            t10.xy = t9.zy * t5.zy + t25.zx;
            //Instruction 50757
            //MAD
            t11.xy = t9.xw * t5.xy + t8.xx;
            //Instruction 50758
            //MAD
            t10.z = t9.w * t5.z + (-t25.y);
            //Instruction 50759
            //MAD
            t12.xy = t9.yz * t5.yz + (-t25.xz);
            //Instruction 50760
            //MAD
            t12.z = t9.w * t5.z + t25.y;
            //Instruction 50761
            //MUL
            t55 = t5.z * t5.z;
            //Instruction 50762
            //MAD
            t12.w = t55 * t54 + t8.x;
            //Instruction 50763
            //MUL
            t8.xyz = t3.yzx * t5.zxy;
            //Instruction 50764
            //MAD
            t8.xyz = t5.yzx * t3.zxy + (-t8.xyz);
            //Instruction 50765
            //DP3
            t20 = dot(t3.xyz, t5.xyz);
            //Instruction 50766
            //MAX
            t20 = max(t20, -1.0);
            //Instruction 50767
            //MIN
            t20 = min(t20, 1.0);
            //Instruction 50768
            //ADD
            t8.w = t20 + t8.y;
            //Instruction 50769
            //DP3
            t54 = dot(t8.xzw, t8.xzw);
            //Instruction 50770
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 50771
            //MUL
            t5.xyz = vec3(t54) * t8.zxw;
            //Instruction 50772
            //ADD
            t54 = -abs(t20) + 1.0;
            //Instruction 50773
            //SQRT
            t54 = sqrt(t54);
            //Instruction 50774
            //MAD
            t55 = abs(t20) * -0.018729 + 0.074261;
            //Instruction 50775
            //MAD
            t55 = t55 * abs(t20) + -0.212114;
            //Instruction 50776
            //MAD
            t55 = t55 * abs(t20) + 1.570729;
            //Instruction 50777
            //MUL
            t6.x = t54 * t55;
            //Instruction 50778
            //MAD
            t6.x = t6.x * -2.000000 + 3.141593;
            //Instruction 50779
            //LT
            tb20 = t20<(-t20);
            //Instruction 50780
            //AND
            t20 = tb20 ? t6.x : float(0.0);
            //Instruction 50781
            //MAD
            t20 = t55 * t54 + t20;
            //Instruction 50782
            //MAD
            t34.x = (-t34.y) * t34.y + t34.x;
            //Instruction 50783
            //MAD
            t8.x = t5.w * 3.000000 + t7.z;
            //Instruction 50784
            //MUL
            t8.y = t8.x * 0.870000;
            //Instruction 50785
            //ADD
            t6.xz = t8.xy + vec2(0.500000, 0.500000);
            //Instruction 50786
            //FRC
            t6.xz = fract(t6.xz);
            //Instruction 50787
            //MAD
            t6.xz = t6.xz * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50788
            //MUL
            t41.xy = abs(t6.xz) * abs(t6.xz);
            //Instruction 50789
            //MAD
            t6.xz = -abs(t6.xz) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50790
            //MAD
            t6.xz = t41.xy * t6.xz + vec2(-0.500000, -0.500000);
            //Instruction 50791
            //ADD
            t6.xz = t6.xz + t6.xz;
            //Instruction 50792
            //MUL
            t51 = t6.z * t6.z;
            //Instruction 50793
            //MAD
            t51 = t51 * t6.x + 1.0;
            //Instruction 50794
            //MUL
            t51 = t51 * 0.500000;
            t51 = clamp(t51, 0.0, 1.0);
            //Instruction 50795
            //LOG
            t51 = log2(t51);
            //Instruction 50796
            //MUL
            t51 = t51 * t7.y;
            //Instruction 50797
            //EXP
            t51 = exp2(t51);
            //Instruction 50798
            //MUL
            t34.x = t6.y * t34.x;
            //Instruction 50799
            //MAD
            t34.x = t20 * t6.w + t34.x;
            //Instruction 50800
            //MAD
            t34.x = t7.x * t51 + t34.x;
            //Instruction 50801
            //MUL
            t34.x = t34.x * in_TEXCOORD2.x;
            //Instruction 50802
            //SINCOS
            t6.x = sin(t34.x);
            t7.x = cos(t34.x);
            //Instruction 50803
            //ADD
            t34.x = (-t7.x) + 1.0;
            //Instruction 50804
            //MUL
            t8 = vec4(t5.y * t34.x, t5.y * t34.x, t5.y * t34.x, t5.z * t34.x);
            //Instruction 50805
            //MUL
            t6.xyz = t5.xyz * t6.xxx;
            //Instruction 50806
            //MAD
            t9.xy = t8.zy * t5.xz + t6.zx;
            //Instruction 50807
            //MAD
            t13.xy = t8.xw * t5.yz + t7.xx;
            //Instruction 50808
            //MAD
            t9.z = t8.w * t5.x + (-t6.y);
            //Instruction 50809
            //MAD
            t14.xy = t8.yz * t5.zx + (-t6.xz);
            //Instruction 50810
            //MAD
            t14.z = t8.w * t5.x + t6.y;
            //Instruction 50811
            //MUL
            t51 = t5.x * t5.x;
            //Instruction 50812
            //MAD
            t9.w = t51 * t34.x + t7.x;
            //Instruction 50813
            //MOV
            t11.z = t12.x;
            //Instruction 50814
            //MOV
            t11.w = t10.x;
            //Instruction 50815
            //MOV
            t13.z = t9.y;
            //Instruction 50816
            //MOV
            t13.w = t14.y;
            //Instruction 50817
            //DP3
            t5.x = dot(t11.xzw, t13.xzw);
            //Instruction 50818
            //MOV
            t14.w = t13.y;
            //Instruction 50819
            //DP3
            t5.y = dot(t11.xwz, t14.xzw);
            //Instruction 50820
            //DP3
            t5.z = dot(t11.xzw, t9.xzw);
            //Instruction 50821
            //MOV
            t10.w = t11.y;
            //Instruction 50822
            //DP3
            t6.x = dot(t10.ywz, t13.xzw);
            //Instruction 50823
            //DP3
            t6.y = dot(t10.yzw, t14.xzw);
            //Instruction 50824
            //DP3
            t6.z = dot(t10.ywz, t9.xzw);
            //Instruction 50825
            //DP3
            t7.x = dot(t12.yzw, t13.xzw);
            //Instruction 50826
            //DP3
            t7.y = dot(t12.ywz, t14.xzw);
            //Instruction 50827
            //DP3
            t7.z = dot(t12.yzw, t9.xzw);
            //Instruction 50828
            //DP3
            t34.x = dot(t5.xyz, in_NORMAL0.xyz);
            //Instruction 50829
            //DP3
            t34.y = dot(t6.xyz, in_NORMAL0.xyz);
            //Instruction 50830
            //DP3
            t20 = dot(t7.xyz, in_NORMAL0.xyz);
            //Instruction 50831
            //DP3
            t5.x = dot(t5.xyz, t4.xyz);
            //Instruction 50832
            //DP3
            t5.y = dot(t6.xyz, t4.xyz);
            //Instruction 50833
            //DP3
            t5.z = dot(t7.xyz, t4.xyz);
            //Instruction 50834
            //DP3
            t54 = dot(t5.xyz, t5.xyz);
            //Instruction 50835
            //RSQ
            t54 = inversesqrt(t54);
            //Instruction 50836
            //MUL
            t5.xyz = vec3(t54) * t5.xyz;
            //Instruction 50837
            //MUL
            t4.xyz = vec3(t52) * t5.xyz;
            //Instruction 50838
        //ELSE
        } else {
            //Instruction 50839
            //MOV
            t34.xy = in_NORMAL0.xy;
            //Instruction 50840
            //MOV
            t20 = in_NORMAL0.z;
            //Instruction 50841
        //ENDIF
        }
        //Instruction 50842
    //ELSE
    } else {
        //Instruction 50843
        //MOV
        t34.xy = in_NORMAL0.xy;
        //Instruction 50844
        //MOV
        t20 = in_NORMAL0.z;
        //Instruction 50845
    //ENDIF
    }
    //Instruction 50846
    //ADD
    t4.xyz = t4.xyz + in_TEXCOORD1.xyz;
    //Instruction 50847
    //GE
    tb52 = t16_2.x>=3.000000;
    //Instruction 50848
    //IF
    if(tb52){
        //Instruction 50849
        //EQ
        tb52 = t16_2.x==5.000000;
        //Instruction 50850
        //IF
        if(tb52){
            //Instruction 50851
            //MUL
            t5.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 50852
            //MAD
            t5.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t5.xyz;
            //Instruction 50853
            //MAD
            t5.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t5.xyz;
            //Instruction 50854
            //DP3
            t52 = dot(t5.xyz, t5.xyz);
            //Instruction 50855
            //RSQ
            t52 = inversesqrt(t52);
            //Instruction 50856
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 50857
            //MUL
            t6.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50858
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 50859
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50860
            //MUL
            t6.xyz = t6.xyz * in_TEXCOORD0.zzz;
            //Instruction 50861
            //ADD
            t52 = t0.x + _ST_WindBranch.x;
            //Instruction 50862
            //ADD
            t2.x = t52 + in_TEXCOORD0.w;
            //Instruction 50863
            //MAD
            t2.y = t52 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50864
            //MUL
            t54 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 50865
            //MUL
            t2.z = t54 * 0.500000;
            //Instruction 50866
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 50867
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 50868
            //FRC
            t2 = fract(t2);
            //Instruction 50869
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 50870
            //MUL
            t7 = abs(t2) * abs(t2);
            //Instruction 50871
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 50872
            //MAD
            t2 = t7 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 50873
            //ADD
            t2 = t2 + t2;
            //Instruction 50874
            //MUL
            t7.w = t2.z * t2.y;
            //Instruction 50875
            //LT
            tb54 = t7.w<0.0;
            //Instruction 50876
            //MOV
            t7.y = (-t7.w);
            //Instruction 50877
            //MOV
            t7.xz = vec2(-1.0, 1.0);
            //Instruction 50878
            //MOVC
            t7.xy = (bool(tb54)) ? t7.xy : t7.zw;
            //Instruction 50879
            //MAD
            t54 = (-t2.y) * t2.z + t7.x;
            //Instruction 50880
            //MAD
            t54 = t7.y * t54 + t7.w;
            //Instruction 50881
            //ADD
            t55 = (-t54) + t7.x;
            //Instruction 50882
            //MAD
            t54 = t7.y * t55 + t54;
            //Instruction 50883
            //MUL
            t54 = t54 * _ST_WindBranchTwitch.x;
            //Instruction 50884
            //ADD
            t55 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50885
            //ADD
            t56 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50886
            //MUL
            t56 = t2.x * t56;
            //Instruction 50887
            //MAD
            t54 = t54 * t55 + t56;
            //Instruction 50888
            //MAD
            t55 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 50889
            //MUL
            t54 = t54 * t55;
            //Instruction 50890
            //MUL
            t6.xyz = vec3(t54) * t6.xyz;
            //Instruction 50891
            //MAD
            t6.xyz = t6.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 50892
            //MAD
            t7.x = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50893
            //MUL
            t52 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 50894
            //MAD
            t7.y = t52 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 50895
            //ADD
            t7.xy = t7.xy + vec2(0.500000, 0.500000);
            //Instruction 50896
            //FRC
            t7.xy = fract(t7.xy);
            //Instruction 50897
            //MAD
            t7.xy = t7.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 50898
            //MUL
            t41.xy = abs(t7.xy) * abs(t7.xy);
            //Instruction 50899
            //MAD
            t7.xy = -abs(t7.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 50900
            //MAD
            t7.xy = t41.xy * t7.xy + vec2(-0.500000, -0.500000);
            //Instruction 50901
            //ADD
            t7.xy = t7.xy + t7.xy;
            //Instruction 50902
            //MUL
            t7.xy = t7.xy * t7.xy;
            //Instruction 50903
            //MUL
            t52 = t7.x * t7.y;
            //Instruction 50904
            //MAD
            t52 = (-t52) * _ST_WindTurbulences.x + 1.0;
            //Instruction 50905
            //MUL
            t54 = t2.w * _ST_WindVector.w;
            //Instruction 50906
            //MAD
            t52 = t54 * _ST_WindBranchWhip.x + t52;
            //Instruction 50907
            //MAD
            t5.xyz = t5.xyz * _ST_WindBranchAnchor.www + (-t6.xyz);
            //Instruction 50908
            //MUL
            t5.xyz = t5.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 50909
            //MUL
            t5.xyz = vec3(t52) * t5.xyz;
            //Instruction 50910
            //MAD
            t4.xyz = t5.xyz * in_TEXCOORD0.zzz + t6.xyz;
            //Instruction 50911
        //ELSE
        } else {
            //Instruction 50912
            //MUL
            t5.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 50913
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 50914
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50915
            //MUL
            t5.xyz = t5.xyz * in_TEXCOORD0.zzz;
            //Instruction 50916
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 50917
            //ADD
            t6.x = t0.x + in_TEXCOORD0.w;
            //Instruction 50918
            //MAD
            t6.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 50919
            //MUL
            t0.x = t6.x * _ST_WindBranchTwitch.y;
            //Instruction 50920
            //MUL
            t6.z = t0.x * 0.500000;
            //Instruction 50921
            //ADD
            t6.xyz = t6.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 50922
            //FRC
            t6.xyz = fract(t6.xyz);
            //Instruction 50923
            //MAD
            t6.xyz = t6.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 50924
            //MUL
            t7.xyz = abs(t6.xyz) * abs(t6.xyz);
            //Instruction 50925
            //MAD
            t6.xyz = -abs(t6.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 50926
            //MAD
            t6.xyz = t7.xyz * t6.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 50927
            //ADD
            t6.xyz = t6.xyz + t6.xyz;
            //Instruction 50928
            //MUL
            t2.w = t6.z * t6.y;
            //Instruction 50929
            //LT
            tb0 = t2.w<0.0;
            //Instruction 50930
            //MOV
            t2.y = (-t2.w);
            //Instruction 50931
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 50932
            //MOVC
            t7.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 50933
            //MAD
            t0.x = (-t6.y) * t6.z + t7.x;
            //Instruction 50934
            //MAD
            t0.x = t7.y * t0.x + t2.w;
            //Instruction 50935
            //ADD
            t52 = (-t0.x) + t7.x;
            //Instruction 50936
            //MAD
            t0.x = t7.y * t52 + t0.x;
            //Instruction 50937
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 50938
            //ADD
            t52 = (-_ST_WindVector.w) + 1.0;
            //Instruction 50939
            //ADD
            t54 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 50940
            //MUL
            t54 = t54 * t6.x;
            //Instruction 50941
            //MAD
            t0.x = t0.x * t52 + t54;
            //Instruction 50942
            //MUL
            t5.xyz = t0.xxx * t5.xyz;
            //Instruction 50943
            //MAD
            t4.xyz = t5.xyz * _ST_WindBranch.yyy + t4.xyz;
            //Instruction 50944
        //ENDIF
        }
        //Instruction 50945
    //ENDIF
    }
    //Instruction 50946
    //DP3
    t0.x = dot(t4.xyz, t4.xyz);
    //Instruction 50947
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 50948
    //DIV
    t52 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 50949
    //MAD
    t52 = (-t52) * 0.250000 + t4.y;
    //Instruction 50950
    //MAX
    t52 = max(t52, 0.0);
    //Instruction 50951
    //MUL
    t52 = t52 * _ST_WindGlobal.z;
    //Instruction 50952
    //NE
    tb54 = t52!=0.0;
    //Instruction 50953
    //LOG
    t55 = log2(t52);
    //Instruction 50954
    //MUL
    t55 = t55 * _ST_WindGlobal.w;
    //Instruction 50955
    //EXP
    t55 = exp2(t55);
    //Instruction 50956
    //MOVC
    t52 = (tb54) ? t55 : t52;
    //Instruction 50957
    //ADD
    t5.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 50958
    //MAD
    t5.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 50959
    //ADD
    t5.xy = t5.xy + vec2(0.500000, 0.500000);
    //Instruction 50960
    //FRC
    t5.xy = fract(t5.xy);
    //Instruction 50961
    //MAD
    t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 50962
    //MUL
    t39.xy = abs(t5.xy) * abs(t5.xy);
    //Instruction 50963
    //MAD
    t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 50964
    //MAD
    t5.xy = t39.xy * t5.xy + vec2(-0.500000, -0.500000);
    //Instruction 50965
    //ADD
    t5.xy = t5.xy + t5.xy;
    //Instruction 50966
    //MAD
    t54 = t5.y * t5.y + t5.x;
    //Instruction 50967
    //DIV
    t55 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 50968
    //MAD
    t54 = _ST_WindGlobal.y * t54 + t55;
    //Instruction 50969
    //MUL
    t52 = t52 * t54;
    //Instruction 50970
    //MAD
    t5.xz = t3.xz * vec2(t52) + t4.xz;
    //Instruction 50971
    //MOV
    t5.y = t4.y;
    //Instruction 50972
    //DP3
    t52 = dot(t5.xyz, t5.xyz);
    //Instruction 50973
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 50974
    //MUL
    t3.xzw = vec3(t52) * t5.xyz;
    //Instruction 50975
    //MUL
    t3.xzw = t0.xxx * t3.xzw;
    //Instruction 50976
    //MOVC
    t3.xzw = (tb17.x) ? t3.xzw : t4.xyz;
    //Instruction 50977
    //MUL
    t2 = t3.zzzz * glstate_matrix_mvp[1];
    //Instruction 50978
    //MAD
    t2 = glstate_matrix_mvp[0] * t3.xxxx + t2;
    //Instruction 50979
    //MAD
    t2 = glstate_matrix_mvp[2] * t3.wwww + t2;
    //Instruction 50980
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 50981
    //MUL
    t4.xyz = t3.zzz * _Object2World[1].xyz;
    //Instruction 50982
    //MAD
    t4.xyz = _Object2World[0].xyz * t3.xxx + t4.xyz;
    //Instruction 50983
    //MAD
    t3.xzw = _Object2World[2].xyz * t3.www + t4.xyz;
    //Instruction 50984
    //MAD
    t3.xzw = _Object2World[3].xyz * in_POSITION0.www + t3.xzw;
    //Instruction 50985
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 50986
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 50987
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 50988
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 50989
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 50990
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 50991
    //MUL
    t4 = t34.yyyy * t4;
    //Instruction 50992
    //MAD
    t0 = t2 * t34.xxxx + t4;
    //Instruction 50993
    //MOV
    t2.x = _World2Object[0].z;
    //Instruction 50994
    //MOV
    t2.y = _World2Object[1].z;
    //Instruction 50995
    //MOV
    t2.zw = _World2Object[2].zz;
    //Instruction 50996
    //MAD
    t0 = t2 * vec4(t20) + t0;
    //Instruction 50997
    //DP3
    t52 = dot(t0.xyw, t0.xyw);
    //Instruction 50998
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 50999
    //MUL
    t0 = t0 * vec4(t52);
    //Instruction 51000
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 51001
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 51002
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 51003
    //DP3
    t52 = dot(t4.xyz, t4.xyz);
    //Instruction 51004
    //RSQ
    t52 = inversesqrt(t52);
    //Instruction 51005
    //MUL
    t4.xyz = vec3(t52) * t4.xyz;
    //Instruction 51006
    //MUL
    t10_15.xyz = t0.wxy * t4.xyz;
    //Instruction 51007
    //MAD
    t10_15.xyz = t0.ywx * t4.yzx + (-t10_15.xyz);
    //Instruction 51008
    //MUL
    t5.xyz = t10_15.xyz * in_TANGENT0.www;
    //Instruction 51009
    //MUL
    t16_2 = t0.ywzx * t0;
    //Instruction 51010
    //DP4
    t16_16.x = dot(unity_SHBr, t16_2);
    //Instruction 51011
    //DP4
    t16_16.y = dot(unity_SHBg, t16_2);
    //Instruction 51012
    //DP4
    t16_16.z = dot(unity_SHBb, t16_2);
    //Instruction 51013
    //MUL
    t16_67 = t0.y * t0.y;
    //Instruction 51014
    //MAD
    t16_67 = t0.x * t0.x + (-t16_67);
    //Instruction 51015
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_67) + t16_16.xyz;
    //Instruction 51016
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 51017
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 51018
    //MOV
    vs_TEXCOORD0.z = t0.x;
    //Instruction 51019
    //MOV
    vs_TEXCOORD0.w = t3.x;
    //Instruction 51020
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 51021
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 51022
    //MOV
    vs_TEXCOORD1.z = t0.y;
    //Instruction 51023
    //MOV
    vs_TEXCOORD1.w = t3.z;
    //Instruction 51024
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 51025
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 51026
    //MOV
    vs_TEXCOORD2.z = t0.w;
    //Instruction 51027
    //MOV
    vs_TEXCOORD2.w = t3.w;
    //Instruction 51028
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 51029
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51030
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 51031
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51032
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp float _Cutoff;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
highp vec4 t0;
mediump float t16_0;
lowp vec4 t10_0;
lowp vec3 t10_1;
mediump vec3 t16_2;
mediump vec3 t16_3;
mediump vec3 t16_6;
bool tb12;
void main()
{
    //Instruction 50655
    //SAMPLE
    t10_0 = texture(_MainTex, vs_TEXCOORD4.xy);
    //Instruction 50656
    //MAD
    t10_1.x = t10_0.w * _Color.w + (-_Cutoff);
    //Instruction 50657
    //LT
    tb12 = t10_1.x<0.0;
    //Instruction 50658
    //DISCARD
    if((int(tb12))!=0){discard;}
    //Instruction 50659
    //MAX
    t16_2.x = max(t10_0.z, t10_0.y);
    //Instruction 50660
    //MAX
    t16_2.x = max(t10_0.x, t16_2.x);
    //Instruction 50661
    //ADD
    t16_6.xyz = (-t10_0.xyz) + _HueVariation.xyz;
    //Instruction 50662
    //MAD
    t16_6.xyz = vs_TEXCOORD4.zzz * t16_6.xyz + t10_0.xyz;
    //Instruction 50663
    //MAX
    t16_3.x = max(t16_6.z, t16_6.y);
    //Instruction 50664
    //MAX
    t16_3.x = max(t16_6.x, t16_3.x);
    //Instruction 50665
    //DIV
    t16_2.x = t16_2.x / t16_3.x;
    //Instruction 50666
    //MAD
    t16_0 = t16_2.x * 0.500000 + 0.500000;
    //Instruction 50667
    //MUL
    t16_2.xyz = vec3(t16_0) * t16_6.xyz;
    t16_2.xyz = clamp(t16_2.xyz, 0.0, 1.0);
    //Instruction 50668
    //MUL
    t16_2.xyz = t16_2.xyz * vs_TEXCOORD3.xyz;
    //Instruction 50669
    //MOV
    SV_Target0.xyz = t16_2.xyz;
    //Instruction 50670
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 50671
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 50672
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 50673
    //SAMPLE
    t10_0.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 50674
    //MAD
    t10_1.xyz = t10_0.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 50675
    //DP3
    t0.x = dot(vs_TEXCOORD0.xyz, t10_1.xyz);
    //Instruction 50676
    //DP3
    t0.y = dot(vs_TEXCOORD1.xyz, t10_1.xyz);
    //Instruction 50677
    //DP3
    t0.z = dot(vs_TEXCOORD2.xyz, t10_1.xyz);
    //Instruction 50678
    //MAD
    t10_1.xyz = t0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 50679
    //MOV
    SV_Target2.xyz = t10_1.xyz;
    //Instruction 50680
    //MOV
    t0.w = 1.0;
    //Instruction 50681
    //DP4
    t16_3.x = dot(unity_SHAr, t0);
    //Instruction 50682
    //DP4
    t16_3.y = dot(unity_SHAg, t0);
    //Instruction 50683
    //DP4
    t16_3.z = dot(unity_SHAb, t0);
    //Instruction 50684
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 50685
    //MUL
    SV_Target3.xyz = t16_2.xyz * t16_3.xyz;
    //Instruction 50686
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 50687
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  tmpvar_5 = (diffuseColor_6.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_11;
  normalWorld_11 = tmpvar_3;
  mediump vec4 tmpvar_12;
  tmpvar_12.w = 1.0;
  tmpvar_12.xyz = normalWorld_11;
  mediump vec3 x1_13;
  x1_13.x = dot (unity_SHAr, tmpvar_12);
  x1_13.y = dot (unity_SHAg, tmpvar_12);
  x1_13.z = dot (unity_SHAb, tmpvar_12);
  mediump vec4 outDiffuseOcclusion_14;
  mediump vec4 outNormal_15;
  mediump vec4 emission_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = tmpvar_5;
  outDiffuseOcclusion_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = vec3(0.0, 0.0, 0.0);
  emission_16 = tmpvar_19;
  emission_16.xyz = (emission_16.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_13)));
  outDiffuse_1.xyz = outDiffuseOcclusion_14.xyz;
  outEmission_2.w = emission_16.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_16.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_15;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 51866
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51867
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 51868
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 51869
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51870
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 51871
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 51872
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 51873
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 51874
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 51875
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 51876
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 51877
    //IF
    if(tb22){
        //Instruction 51878
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 51879
        //IF
        if(tb22){
            //Instruction 51880
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51881
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 51882
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 51883
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 51884
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 51885
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51886
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51887
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51888
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51889
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51890
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51891
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51892
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 51893
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51894
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51895
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 51896
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51897
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51898
            //FRC
            t0 = fract(t0);
            //Instruction 51899
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51900
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 51901
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51902
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51903
            //ADD
            t0 = t0 + t0;
            //Instruction 51904
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 51905
            //LT
            tb23 = t4.w<0.0;
            //Instruction 51906
            //MOV
            t4.y = (-t4.w);
            //Instruction 51907
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 51908
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 51909
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 51910
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 51911
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 51912
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 51913
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 51914
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51915
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51916
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 51917
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 51918
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51919
            //MUL
            t23 = t23 * t24;
            //Instruction 51920
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 51921
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51922
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51923
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51924
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51925
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 51926
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 51927
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51928
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 51929
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51930
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 51931
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 51932
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 51933
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 51934
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51935
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 51936
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 51937
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 51938
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51939
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51940
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 51941
        //ELSE
        } else {
            //Instruction 51942
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51943
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51944
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51945
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51946
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51947
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51948
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 51949
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51950
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 51951
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 51952
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51953
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51954
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51955
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 51956
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51957
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51958
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 51959
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 51960
            //LT
            tb22 = t0.w<0.0;
            //Instruction 51961
            //MOV
            t0.y = (-t0.w);
            //Instruction 51962
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51963
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 51964
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 51965
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 51966
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 51967
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 51968
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 51969
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51970
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51971
            //MUL
            t24 = t24 * t4.x;
            //Instruction 51972
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 51973
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51974
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51975
        //ENDIF
        }
        //Instruction 51976
    //ELSE
    } else {
        //Instruction 51977
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 51978
    //ENDIF
    }
    //Instruction 51979
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 51980
    //SQRT
    t22 = sqrt(t22);
    //Instruction 51981
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51982
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 51983
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 51984
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 51985
    //NE
    tb3 = t23!=0.0;
    //Instruction 51986
    //LOG
    t10 = log2(t23);
    //Instruction 51987
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 51988
    //EXP
    t10 = exp2(t10);
    //Instruction 51989
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 51990
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51991
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51992
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 51993
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 51994
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51995
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 51996
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51997
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 51998
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 51999
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 52000
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52001
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 52002
    //MUL
    t23 = t23 * t3.x;
    //Instruction 52003
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 52004
    //MOV
    t3.y = t2.y;
    //Instruction 52005
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 52006
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 52007
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 52008
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 52009
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 52010
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52011
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 52012
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 52013
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 52014
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 52015
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 52016
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 52017
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 52018
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 52019
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 52020
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 52021
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 52022
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 52023
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 52024
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 52025
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 52026
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 52027
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 52028
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 52029
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 52030
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 52031
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 52032
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 52033
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 52034
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 52035
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 52036
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 52037
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 52038
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 52039
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 52040
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 52041
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 52042
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 52043
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 52044
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 52045
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 52046
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 52047
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 52048
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 52049
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 52050
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 52051
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52052
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 52053
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 52054
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 52055
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52056
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
void main()
{
    //Instruction 51840
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 51841
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 51842
    //MOV
    t1.x = t16_0.x;
    //Instruction 51843
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 51844
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51845
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 51846
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 51847
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51848
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 51849
    //MUL
    t16_0.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51850
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51851
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51852
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51853
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51854
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 51855
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51856
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51857
    //MOV
    t16_1.w = 1.0;
    //Instruction 51858
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 51859
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 51860
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 51861
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 51862
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 51863
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 51864
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51865
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec4 tmpvar_9;
  tmpvar_9 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_10;
  highp vec3 vRotatedWindVector_11;
  highp vec3 FinalPosition_12;
  highp vec3 tmpvar_13;
  tmpvar_13 = tmpvar_1.xyz;
  FinalPosition_12 = tmpvar_13;
  highp vec3 tmpvar_14;
  tmpvar_14.x = _Object2World[3].x;
  tmpvar_14.y = _Object2World[3].y;
  tmpvar_14.z = _Object2World[3].z;
  mediump float tmpvar_15;
  tmpvar_15 = (_WindQuality * _WindEnabled);
  if ((tmpvar_15 > 0.0)) {
    highp mat3 tmpvar_16;
    tmpvar_16[0] = _World2Object[0].xyz;
    tmpvar_16[1] = _World2Object[1].xyz;
    tmpvar_16[2] = _World2Object[2].xyz;
    vRotatedWindVector_11 = normalize((tmpvar_16 * _ST_WindVector.xyz));
    highp mat3 tmpvar_17;
    tmpvar_17[0] = _World2Object[0].xyz;
    tmpvar_17[1] = _World2Object[1].xyz;
    tmpvar_17[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_10 = (normalize((tmpvar_17 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_11 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_10 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_15 >= 3.0)) {
    highp vec3 vPos_18;
    vPos_18 = tmpvar_13;
    if ((tmpvar_15 == 5.0)) {
      highp vec3 vPos_19;
      vPos_19 = tmpvar_13;
      highp float fTime_20;
      highp float fAdherenceScale_21;
      highp vec3 vWindVector_22;
      vWindVector_22 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_20 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_23;
      highp float fOscillation_24;
      fOscillation_24 = 1.0;
      highp float fAmount_25;
      highp float fTarget_26;
      highp vec4 tmpvar_27;
      tmpvar_27.x = (fTime_20 + _glesMultiTexCoord0.w);
      tmpvar_27.y = ((fTime_20 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_27.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_20 + _glesMultiTexCoord0.w));
      tmpvar_27.w = ((fTime_20 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_28;
      tmpvar_28 = abs(((
        fract((tmpvar_27 + 0.5))
       * 2.0) - 1.0));
      vOscillations_23 = (((
        (tmpvar_28 * tmpvar_28)
       * 
        (3.0 - (2.0 * tmpvar_28))
      ) - 0.5) * 2.0);
      highp float tmpvar_29;
      tmpvar_29 = (vOscillations_23.y * vOscillations_23.z);
      fTarget_26 = 1.0;
      fAmount_25 = tmpvar_29;
      if ((tmpvar_29 < 0.0)) {
        fTarget_26 = -1.0;
        fAmount_25 = -(tmpvar_29);
      };
      fOscillation_24 = (((
        mix (mix (tmpvar_29, fTarget_26, fAmount_25), fTarget_26, fAmount_25)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_23.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_24 = (fOscillation_24 * (1.0 + (vOscillations_23.w * _ST_WindBranchWhip.x)));
      vPos_19 = (_glesVertex.xyz + ((vWindVector_22 * fOscillation_24) * _ST_WindBranch.y));
      highp vec4 tmpvar_30;
      tmpvar_30.zw = vec2(0.0, 0.0);
      tmpvar_30.x = ((fTime_20 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_30.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_31;
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      tmpvar_31 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      fAdherenceScale_21 = (1.0 - ((tmpvar_31.x * tmpvar_31.y) * (
        (tmpvar_31.x * tmpvar_31.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_21 = (fAdherenceScale_21 + ((vOscillations_23.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_19 = (vPos_19 + ((
        ((vRotatedBranchAnchor_10 - vPos_19) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_21) * _glesMultiTexCoord0.z));
      vPos_18 = vPos_19;
    } else {
      highp vec3 vPos_33;
      vPos_33 = vPos_18;
      highp float fTime_34;
      highp vec3 vWindVector_35;
      vWindVector_35 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_34 = (_ST_WindBranch.x + (tmpvar_14.x + tmpvar_14.y));
      highp vec4 vOscillations_36;
      highp float fOscillation_37;
      fOscillation_37 = 1.0;
      highp float fAmount_38;
      highp float fTarget_39;
      highp vec4 tmpvar_40;
      tmpvar_40.w = 0.0;
      tmpvar_40.x = (fTime_34 + _glesMultiTexCoord0.w);
      tmpvar_40.y = ((fTime_34 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_40.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_34 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_41;
      tmpvar_41 = abs(((
        fract((tmpvar_40 + 0.5))
       * 2.0) - 1.0));
      vOscillations_36 = (((
        (tmpvar_41 * tmpvar_41)
       * 
        (3.0 - (2.0 * tmpvar_41))
      ) - 0.5) * 2.0);
      highp float tmpvar_42;
      tmpvar_42 = (vOscillations_36.y * vOscillations_36.z);
      fTarget_39 = 1.0;
      fAmount_38 = tmpvar_42;
      if ((tmpvar_42 < 0.0)) {
        fTarget_39 = -1.0;
        fAmount_38 = -(tmpvar_42);
      };
      fOscillation_37 = (((
        mix (mix (tmpvar_42, fTarget_39, fAmount_38), fTarget_39, fAmount_38)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_36.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_33 = (vPos_18 + ((vWindVector_35 * fOscillation_37) * _ST_WindBranch.y));
      vPos_18 = vPos_33;
    };
    FinalPosition_12 = vPos_18;
  };
  if ((tmpvar_15 > 0.0)) {
    highp vec3 vPos_43;
    vPos_43 = FinalPosition_12;
    highp float fMoveAmount_44;
    highp float fAdjust_45;
    highp float fLength_46;
    fLength_46 = sqrt(dot (FinalPosition_12, FinalPosition_12));
    highp float tmpvar_47;
    tmpvar_47 = (max ((FinalPosition_12.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_45 = tmpvar_47;
    if ((tmpvar_47 != 0.0)) {
      fAdjust_45 = pow (tmpvar_47, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_48;
    tmpvar_48.zw = vec2(0.0, 0.0);
    tmpvar_48.x = (tmpvar_14.x + _ST_WindGlobal.x);
    tmpvar_48.y = (tmpvar_14.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_49;
    highp vec4 tmpvar_50;
    tmpvar_50 = abs(((
      fract((tmpvar_48 + 0.5))
     * 2.0) - 1.0));
    tmpvar_49 = (((
      (tmpvar_50 * tmpvar_50)
     * 
      (3.0 - (2.0 * tmpvar_50))
    ) - 0.5) * 2.0);
    fMoveAmount_44 = ((_ST_WindGlobal.y * (tmpvar_49.x + 
      (tmpvar_49.y * tmpvar_49.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_44 = (fMoveAmount_44 * fAdjust_45);
    vPos_43.xz = (FinalPosition_12.xz + (vRotatedWindVector_11.xz * fMoveAmount_44));
    vPos_43 = (normalize(vPos_43) * fLength_46);
    FinalPosition_12 = vPos_43;
  };
  tmpvar_9.xyz = FinalPosition_12;
  highp vec4 hPos_51;
  hPos_51 = (glstate_matrix_mvp * tmpvar_9);
  mediump vec3 screenPos_52;
  highp vec4 o_53;
  highp vec4 tmpvar_54;
  tmpvar_54 = (hPos_51 * 0.5);
  highp vec2 tmpvar_55;
  tmpvar_55.x = tmpvar_54.x;
  tmpvar_55.y = (tmpvar_54.y * _ProjectionParams.x);
  o_53.xy = (tmpvar_55 + tmpvar_54.w);
  o_53.zw = hPos_51.zw;
  highp vec3 tmpvar_56;
  tmpvar_56 = o_53.xyw;
  screenPos_52 = tmpvar_56;
  screenPos_52.xy = (screenPos_52.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_57;
  v_57.x = _World2Object[0].x;
  v_57.y = _World2Object[1].x;
  v_57.z = _World2Object[2].x;
  v_57.w = _World2Object[3].x;
  highp vec4 v_58;
  v_58.x = _World2Object[0].y;
  v_58.y = _World2Object[1].y;
  v_58.z = _World2Object[2].y;
  v_58.w = _World2Object[3].y;
  highp vec4 v_59;
  v_59.x = _World2Object[0].z;
  v_59.y = _World2Object[1].z;
  v_59.z = _World2Object[2].z;
  v_59.w = _World2Object[3].z;
  highp vec3 tmpvar_60;
  tmpvar_60 = normalize(((
    (v_57.xyz * _glesNormal.x)
   + 
    (v_58.xyz * _glesNormal.y)
  ) + (v_59.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_60;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_61;
  tmpvar_61.w = 1.0;
  tmpvar_61.xyz = worldNormal_3;
  mediump vec4 normal_62;
  normal_62 = tmpvar_61;
  mediump vec3 x2_63;
  mediump vec4 tmpvar_64;
  tmpvar_64 = (normal_62.xyzz * normal_62.yzzx);
  x2_63.x = dot (unity_SHBr, tmpvar_64);
  x2_63.y = dot (unity_SHBg, tmpvar_64);
  x2_63.z = dot (unity_SHBb, tmpvar_64);
  gl_Position = (glstate_matrix_mvp * tmpvar_9);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_9).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_52;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_63 + (unity_SHC.xyz * (
    (normal_62.x * normal_62.x)
   - 
    (normal_62.y * normal_62.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 diffuseColor_5;
  mediump vec2 projUV_6;
  mediump vec2 tmpvar_7;
  tmpvar_7 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_6.x = tmpvar_7.x;
  projUV_6.y = ((fract(tmpvar_7.y) * 0.0625) + unity_LODFade.y);
  lowp float x_8;
  x_8 = (texture2D (_DitherMaskLOD2D, projUV_6).w - 0.5);
  if ((x_8 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_9;
  tmpvar_9 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_5 = tmpvar_9;
  tmpvar_4 = (diffuseColor_5.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_10;
  normalWorld_10 = tmpvar_2;
  mediump vec4 tmpvar_11;
  tmpvar_11.w = 1.0;
  tmpvar_11.xyz = normalWorld_10;
  mediump vec3 x1_12;
  x1_12.x = dot (unity_SHAr, tmpvar_11);
  x1_12.y = dot (unity_SHAg, tmpvar_11);
  x1_12.z = dot (unity_SHAb, tmpvar_11);
  mediump vec4 outDiffuseOcclusion_13;
  mediump vec4 outNormal_14;
  mediump vec4 emission_15;
  lowp vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = tmpvar_4;
  outDiffuseOcclusion_13 = tmpvar_16;
  lowp vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_14 = tmpvar_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = vec3(0.0, 0.0, 0.0);
  emission_15 = tmpvar_18;
  emission_15.xyz = (emission_15.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_12)));
  outDiffuse_1.xyz = outDiffuseOcclusion_13.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_14;
  gl_FragData[3] = emission_15;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 51598
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51599
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 51600
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 51601
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51602
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 51603
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 51604
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 51605
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 51606
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 51607
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 51608
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 51609
    //IF
    if(tb22){
        //Instruction 51610
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 51611
        //IF
        if(tb22){
            //Instruction 51612
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51613
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 51614
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 51615
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 51616
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 51617
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51618
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51619
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51620
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51621
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51622
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51623
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51624
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 51625
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51626
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51627
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 51628
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51629
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51630
            //FRC
            t0 = fract(t0);
            //Instruction 51631
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51632
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 51633
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51634
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51635
            //ADD
            t0 = t0 + t0;
            //Instruction 51636
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 51637
            //LT
            tb23 = t4.w<0.0;
            //Instruction 51638
            //MOV
            t4.y = (-t4.w);
            //Instruction 51639
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 51640
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 51641
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 51642
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 51643
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 51644
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 51645
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 51646
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51647
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51648
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 51649
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 51650
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51651
            //MUL
            t23 = t23 * t24;
            //Instruction 51652
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 51653
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51654
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51655
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51656
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51657
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 51658
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 51659
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51660
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 51661
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51662
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 51663
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 51664
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 51665
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 51666
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51667
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 51668
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 51669
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 51670
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51671
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51672
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 51673
        //ELSE
        } else {
            //Instruction 51674
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51675
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51676
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51677
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51678
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51679
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51680
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 51681
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51682
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 51683
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 51684
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51685
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51686
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51687
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 51688
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51689
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51690
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 51691
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 51692
            //LT
            tb22 = t0.w<0.0;
            //Instruction 51693
            //MOV
            t0.y = (-t0.w);
            //Instruction 51694
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51695
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 51696
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 51697
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 51698
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 51699
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 51700
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 51701
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51702
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51703
            //MUL
            t24 = t24 * t4.x;
            //Instruction 51704
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 51705
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51706
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51707
        //ENDIF
        }
        //Instruction 51708
    //ELSE
    } else {
        //Instruction 51709
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 51710
    //ENDIF
    }
    //Instruction 51711
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 51712
    //SQRT
    t22 = sqrt(t22);
    //Instruction 51713
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51714
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 51715
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 51716
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 51717
    //NE
    tb3 = t23!=0.0;
    //Instruction 51718
    //LOG
    t10 = log2(t23);
    //Instruction 51719
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 51720
    //EXP
    t10 = exp2(t10);
    //Instruction 51721
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 51722
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51723
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51724
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 51725
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 51726
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51727
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 51728
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51729
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 51730
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 51731
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 51732
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51733
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 51734
    //MUL
    t23 = t23 * t3.x;
    //Instruction 51735
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 51736
    //MOV
    t3.y = t2.y;
    //Instruction 51737
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 51738
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 51739
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 51740
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 51741
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 51742
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51743
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 51744
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 51745
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 51746
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 51747
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 51748
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 51749
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 51750
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 51751
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 51752
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 51753
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 51754
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 51755
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 51756
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 51757
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 51758
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 51759
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 51760
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 51761
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 51762
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 51763
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51764
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51765
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51766
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 51767
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 51768
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 51769
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 51770
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 51771
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 51772
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 51773
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 51774
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 51775
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 51776
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 51777
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 51778
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 51779
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 51780
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 51781
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 51782
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 51783
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51784
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 51785
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 51786
    //MOV
    vs_TEXCOORD4.xyz = t2.xyz;
    //Instruction 51787
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51788
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
mediump float t16_4;
void main()
{
    //Instruction 51573
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 51574
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 51575
    //MOV
    t1.x = t16_0.x;
    //Instruction 51576
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 51577
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51578
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 51579
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 51580
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51581
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 51582
    //MUL
    t16_0.xyz = t10_1.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51583
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51584
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51585
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51586
    //MAD
    t10_2.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51587
    //MOV
    SV_Target2.xyz = t10_2.xyz;
    //Instruction 51588
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51589
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51590
    //MOV
    t16_1.w = 1.0;
    //Instruction 51591
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 51592
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 51593
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 51594
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD7.xyz;
    //Instruction 51595
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 51596
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51597
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_12 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD7 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 51824
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51825
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 51826
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 51827
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 51828
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 51829
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 51830
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 51831
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 51832
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 51833
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 51834
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 51835
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51836
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 51837
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 51838
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 51839
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 51840
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 51841
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 51842
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 51843
    //IF
    if(tb25){
        //Instruction 51844
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 51845
        //IF
        if(tb25){
            //Instruction 51846
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51847
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 51848
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 51849
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 51850
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 51851
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 51852
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51853
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51854
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51855
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51856
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 51857
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 51858
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51859
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51860
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 51861
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51862
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51863
            //FRC
            t2 = fract(t2);
            //Instruction 51864
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51865
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 51866
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51867
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51868
            //ADD
            t2 = t2 + t2;
            //Instruction 51869
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 51870
            //LT
            tb27 = t5.w<0.0;
            //Instruction 51871
            //MOV
            t5.y = (-t5.w);
            //Instruction 51872
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 51873
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 51874
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 51875
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 51876
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 51877
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 51878
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 51879
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51880
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51881
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 51882
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 51883
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51884
            //MUL
            t27 = t27 * t28;
            //Instruction 51885
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 51886
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51887
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51888
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51889
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51890
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 51891
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 51892
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51893
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 51894
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51895
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 51896
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 51897
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 51898
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 51899
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51900
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 51901
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 51902
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 51903
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51904
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 51905
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 51906
        //ELSE
        } else {
            //Instruction 51907
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51908
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51909
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51910
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51911
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51912
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51913
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51914
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51915
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 51916
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51917
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51918
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51919
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51920
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51921
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51922
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51923
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 51924
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51925
            //MOV
            t2.y = (-t2.w);
            //Instruction 51926
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51927
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51928
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 51929
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 51930
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 51931
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 51932
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51933
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51934
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51935
            //MUL
            t27 = t27 * t5.x;
            //Instruction 51936
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 51937
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 51938
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51939
        //ENDIF
        }
        //Instruction 51940
    //ELSE
    } else {
        //Instruction 51941
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 51942
    //ENDIF
    }
    //Instruction 51943
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 51944
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51945
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51946
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 51947
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 51948
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 51949
    //NE
    tb27 = t25!=0.0;
    //Instruction 51950
    //LOG
    t4.x = log2(t25);
    //Instruction 51951
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51952
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51953
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 51954
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51955
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51956
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51957
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51958
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51959
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51960
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51961
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51962
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51963
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 51964
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51965
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 51966
    //MUL
    t25 = t25 * t27;
    //Instruction 51967
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 51968
    //MOV
    t4.y = t3.y;
    //Instruction 51969
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 51970
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 51971
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 51972
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 51973
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 51974
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51975
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 51976
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 51977
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 51978
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 51979
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 51980
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 51981
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 51982
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 51983
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 51984
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 51985
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 51986
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 51987
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51988
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 51989
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 51990
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 51991
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 51992
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 51993
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 51994
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 51995
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 51996
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 51997
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 51998
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 51999
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 52000
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52001
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52002
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 52003
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 52004
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 52005
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 52006
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 52007
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 52008
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 52009
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 52010
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 52011
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 52012
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 52013
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 52014
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 52015
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52016
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52017
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 52018
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 52019
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52020
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 51789
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 51790
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 51791
    //MOV
    t1.x = t16_0.x;
    //Instruction 51792
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 51793
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51794
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 51795
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 51796
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51797
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 51798
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 51799
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 51800
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 51801
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 51802
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 51803
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 51804
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 51805
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 51806
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 51807
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51808
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51809
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51810
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51811
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51812
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 51813
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51814
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51815
    //MOV
    t16_1.w = 1.0;
    //Instruction 51816
    //DP4
    t16_2.x = dot(unity_SHAr, t16_1);
    //Instruction 51817
    //DP4
    t16_2.y = dot(unity_SHAg, t16_1);
    //Instruction 51818
    //DP4
    t16_2.z = dot(unity_SHAb, t16_1);
    //Instruction 51819
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 51820
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 51821
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 51822
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51823
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying highp vec4 xlv_TEXCOORD6;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_9;
  highp float tmpvar_10;
  tmpvar_10 = _Object2World[3].x;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].y;
  tmpvar_9 = clamp (((
    fract(((tmpvar_10 + tmpvar_11) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_9;
  highp vec4 tmpvar_12;
  tmpvar_12 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_13;
  highp vec3 vRotatedWindVector_14;
  highp vec3 FinalPosition_15;
  highp vec3 tmpvar_16;
  tmpvar_16 = tmpvar_1.xyz;
  FinalPosition_15 = tmpvar_16;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_14 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_13 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_14 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_13 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_16;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_16;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_13 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_10 + tmpvar_11));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_15 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_15;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_15, FinalPosition_15));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_15.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_10 + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_11 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_15.xz + (vRotatedWindVector_14.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_15 = vPos_45;
  };
  tmpvar_12.xyz = FinalPosition_15;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_12);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_12);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_12).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = screenPos_54;
  xlv_TEXCOORD6 = tmpvar_6;
  xlv_TEXCOORD7 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD7;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD4.xy / xlv_TEXCOORD4.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_11 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD7 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD6;
out mediump vec3 vs_TEXCOORD7;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 52091
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52092
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52093
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 52094
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52095
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 52096
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 52097
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 52098
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 52099
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52100
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52101
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 52102
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52103
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52104
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52105
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 52106
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52107
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 52108
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 52109
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 52110
    //IF
    if(tb25){
        //Instruction 52111
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 52112
        //IF
        if(tb25){
            //Instruction 52113
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52114
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52115
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52116
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 52117
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 52118
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52119
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52120
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52121
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52122
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52123
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 52124
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 52125
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52126
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52127
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 52128
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52129
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52130
            //FRC
            t2 = fract(t2);
            //Instruction 52131
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52132
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 52133
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52134
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52135
            //ADD
            t2 = t2 + t2;
            //Instruction 52136
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 52137
            //LT
            tb27 = t5.w<0.0;
            //Instruction 52138
            //MOV
            t5.y = (-t5.w);
            //Instruction 52139
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52140
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 52141
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 52142
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 52143
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 52144
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 52145
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 52146
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52147
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52148
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 52149
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 52150
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52151
            //MUL
            t27 = t27 * t28;
            //Instruction 52152
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 52153
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52154
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52155
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52156
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52157
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52158
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52159
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52160
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52161
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52162
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52163
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52164
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52165
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 52166
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52167
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 52168
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 52169
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52170
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52171
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52172
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52173
        //ELSE
        } else {
            //Instruction 52174
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52175
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52176
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52177
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52178
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52179
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52180
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52181
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52182
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52183
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52184
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52185
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52186
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52187
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52188
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52189
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52190
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52191
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52192
            //MOV
            t2.y = (-t2.w);
            //Instruction 52193
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52194
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52195
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52196
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52197
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 52198
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 52199
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52200
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52201
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52202
            //MUL
            t27 = t27 * t5.x;
            //Instruction 52203
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 52204
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52205
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52206
        //ENDIF
        }
        //Instruction 52207
    //ELSE
    } else {
        //Instruction 52208
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 52209
    //ENDIF
    }
    //Instruction 52210
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52211
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52212
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52213
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 52214
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 52215
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 52216
    //NE
    tb27 = t25!=0.0;
    //Instruction 52217
    //LOG
    t4.x = log2(t25);
    //Instruction 52218
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52219
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52220
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 52221
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52222
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52223
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52224
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52225
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52226
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52227
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52228
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52229
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52230
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 52231
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52232
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 52233
    //MUL
    t25 = t25 * t27;
    //Instruction 52234
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 52235
    //MOV
    t4.y = t3.y;
    //Instruction 52236
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 52237
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52238
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 52239
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52240
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 52241
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52242
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52243
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52244
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52245
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52246
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 52247
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 52248
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52249
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52250
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52251
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52252
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52253
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52254
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52255
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52256
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52257
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52258
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52259
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 52260
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 52261
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 52262
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52263
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52264
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 52265
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 52266
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 52267
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52268
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52269
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 52270
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 52271
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 52272
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 52273
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 52274
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 52275
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 52276
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 52277
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 52278
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 52279
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 52280
    //MAD
    vs_TEXCOORD7.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 52281
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 52282
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52283
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52284
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 52285
    //MOV
    vs_TEXCOORD4.xyz = t3.xyz;
    //Instruction 52286
    //MOV
    vs_TEXCOORD6 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52287
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 52057
    //DIV
    t16_0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.zz;
    //Instruction 52058
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 52059
    //MOV
    t1.x = t16_0.x;
    //Instruction 52060
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 52061
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52062
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 52063
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 52064
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52065
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 52066
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 52067
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 52068
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 52069
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 52070
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 52071
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 52072
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 52073
    //MAD
    t16_1.x = t16_12 * 0.500000 + 0.500000;
    //Instruction 52074
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 52075
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52076
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52077
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52078
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52079
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52080
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 52081
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52082
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52083
    //MOV
    t16_1.w = 1.0;
    //Instruction 52084
    //DP4
    t16_2.x = dot(unity_SHAr, t16_1);
    //Instruction 52085
    //DP4
    t16_2.y = dot(unity_SHAg, t16_1);
    //Instruction 52086
    //DP4
    t16_2.z = dot(unity_SHAb, t16_1);
    //Instruction 52087
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD7.xyz;
    //Instruction 52088
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 52089
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52090
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 worldN_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_7 = tmpvar_11;
  mediump vec3 tmpvar_12;
  tmpvar_12 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_6 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_12.x, max (tmpvar_12.y, tmpvar_12.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_12 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  lowp vec3 tmpvar_13;
  tmpvar_13 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD0.xyz, tmpvar_13);
  worldN_3.x = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD1.xyz, tmpvar_13);
  worldN_3.y = tmpvar_15;
  highp float tmpvar_16;
  tmpvar_16 = dot (xlv_TEXCOORD2.xyz, tmpvar_13);
  worldN_3.z = tmpvar_16;
  mediump vec3 normalWorld_17;
  normalWorld_17 = worldN_3;
  mediump vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = normalWorld_17;
  mediump vec3 x1_19;
  x1_19.x = dot (unity_SHAr, tmpvar_18);
  x1_19.y = dot (unity_SHAg, tmpvar_18);
  x1_19.z = dot (unity_SHAb, tmpvar_18);
  mediump vec4 outDiffuseOcclusion_20;
  mediump vec4 outNormal_21;
  mediump vec4 emission_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = tmpvar_5;
  outDiffuseOcclusion_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = ((worldN_3 * 0.5) + 0.5);
  outNormal_21 = tmpvar_24;
  lowp vec4 tmpvar_25;
  tmpvar_25.w = 1.0;
  tmpvar_25.xyz = vec3(0.0, 0.0, 0.0);
  emission_22 = tmpvar_25;
  emission_22.xyz = (emission_22.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_19)));
  outDiffuse_1.xyz = outDiffuseOcclusion_20.xyz;
  outEmission_2.w = emission_22.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_22.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_21;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 51072
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51073
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 51074
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 51075
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 51076
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 51077
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 51078
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 51079
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 51080
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 51081
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 51082
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 51083
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51084
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 51085
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 51086
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 51087
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 51088
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 51089
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 51090
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 51091
    //IF
    if(tb28){
        //Instruction 51092
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 51093
        //IF
        if(tb28){
            //Instruction 51094
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51095
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 51096
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 51097
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 51098
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 51099
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 51100
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51101
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51102
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51103
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51104
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 51105
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 51106
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51107
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 51108
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 51109
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 51110
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51111
            //FRC
            t2 = fract(t2);
            //Instruction 51112
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51113
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 51114
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51115
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51116
            //ADD
            t2 = t2 + t2;
            //Instruction 51117
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 51118
            //LT
            tb30 = t5.w<0.0;
            //Instruction 51119
            //MOV
            t5.y = (-t5.w);
            //Instruction 51120
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 51121
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 51122
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 51123
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 51124
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 51125
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 51126
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 51127
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51128
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51129
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 51130
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 51131
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51132
            //MUL
            t30 = t30 * t31;
            //Instruction 51133
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 51134
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51135
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51136
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51137
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51138
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 51139
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 51140
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51141
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 51142
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51143
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 51144
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 51145
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 51146
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 51147
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51148
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 51149
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 51150
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 51151
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51152
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 51153
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 51154
        //ELSE
        } else {
            //Instruction 51155
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51156
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51157
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51158
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 51159
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 51160
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 51161
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51162
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 51163
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 51164
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51165
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 51166
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51167
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 51168
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51169
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51170
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 51171
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 51172
            //LT
            tb0 = t2.w<0.0;
            //Instruction 51173
            //MOV
            t2.y = (-t2.w);
            //Instruction 51174
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 51175
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 51176
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 51177
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 51178
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 51179
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 51180
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 51181
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51182
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51183
            //MUL
            t30 = t30 * t5.x;
            //Instruction 51184
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 51185
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 51186
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51187
        //ENDIF
        }
        //Instruction 51188
    //ELSE
    } else {
        //Instruction 51189
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 51190
    //ENDIF
    }
    //Instruction 51191
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 51192
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 51193
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51194
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 51195
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 51196
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 51197
    //NE
    tb30 = t28!=0.0;
    //Instruction 51198
    //LOG
    t4.x = log2(t28);
    //Instruction 51199
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 51200
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 51201
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 51202
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51203
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51204
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 51205
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 51206
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51207
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 51208
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51209
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 51210
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 51211
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 51212
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51213
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 51214
    //MUL
    t28 = t28 * t30;
    //Instruction 51215
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 51216
    //MOV
    t4.y = t3.y;
    //Instruction 51217
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 51218
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 51219
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 51220
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 51221
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 51222
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51223
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 51224
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 51225
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 51226
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 51227
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 51228
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 51229
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 51230
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 51231
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 51232
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 51233
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 51234
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 51235
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 51236
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 51237
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 51238
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 51239
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 51240
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 51241
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 51242
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 51243
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 51244
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 51245
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 51246
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 51247
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 51248
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 51249
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 51250
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 51251
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 51252
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 51253
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 51254
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 51255
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 51256
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 51257
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 51258
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 51259
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 51260
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 51261
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 51262
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 51263
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 51264
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 51265
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 51266
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 51267
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 51268
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 51269
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 51270
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 51271
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 51272
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 51273
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 51274
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 51275
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 51276
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 51277
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 51278
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 51279
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 51280
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 51281
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 51282
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 51283
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 51284
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 51285
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 51286
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 51287
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51288
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 51033
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 51034
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 51035
    //MOV
    t1.x = t16_0.x;
    //Instruction 51036
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 51037
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51038
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 51039
    //LT
    tb1 = t16_1<0.0;
    //Instruction 51040
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51041
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 51042
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 51043
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 51044
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 51045
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 51046
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 51047
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 51048
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 51049
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 51050
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 51051
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 51052
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51053
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51054
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51055
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51056
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 51057
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 51058
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 51059
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 51060
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 51061
    //MAD
    t10_3.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51062
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 51063
    //MOV
    t1.w = 1.0;
    //Instruction 51064
    //DP4
    t16_2.x = dot(unity_SHAr, t1);
    //Instruction 51065
    //DP4
    t16_2.y = dot(unity_SHAg, t1);
    //Instruction 51066
    //DP4
    t16_2.z = dot(unity_SHAb, t1);
    //Instruction 51067
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD8.xyz;
    //Instruction 51068
    //MUL
    t16_0.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 51069
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 51070
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51071
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesTANGENT;
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldBinormal_3;
  lowp vec3 worldTangent_4;
  lowp vec3 worldNormal_5;
  mediump vec4 tmpvar_6;
  highp vec4 tmpvar_7;
  lowp vec4 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_9.xy = tmpvar_2.xy;
  tmpvar_8.w = _Color.w;
  tmpvar_8.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_9.z = tmpvar_10;
  highp vec4 tmpvar_13;
  tmpvar_13 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_14;
  highp vec3 vRotatedWindVector_15;
  highp vec3 FinalPosition_16;
  highp vec3 tmpvar_17;
  tmpvar_17 = tmpvar_1.xyz;
  FinalPosition_16 = tmpvar_17;
  mediump float tmpvar_18;
  tmpvar_18 = (_WindQuality * _WindEnabled);
  if ((tmpvar_18 > 0.0)) {
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedWindVector_15 = normalize((tmpvar_19 * _ST_WindVector.xyz));
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_14 = (normalize((tmpvar_20 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_15 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_14 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_18 >= 3.0)) {
    highp vec3 vPos_21;
    vPos_21 = tmpvar_17;
    if ((tmpvar_18 == 5.0)) {
      highp vec3 vPos_22;
      vPos_22 = tmpvar_17;
      highp float fTime_23;
      highp float fAdherenceScale_24;
      highp vec3 vWindVector_25;
      vWindVector_25 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_23 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_26;
      highp float fOscillation_27;
      fOscillation_27 = 1.0;
      highp float fAmount_28;
      highp float fTarget_29;
      highp vec4 tmpvar_30;
      tmpvar_30.x = (fTime_23 + _glesMultiTexCoord0.w);
      tmpvar_30.y = ((fTime_23 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_30.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_23 + _glesMultiTexCoord0.w));
      tmpvar_30.w = ((fTime_23 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_31;
      tmpvar_31 = abs(((
        fract((tmpvar_30 + 0.5))
       * 2.0) - 1.0));
      vOscillations_26 = (((
        (tmpvar_31 * tmpvar_31)
       * 
        (3.0 - (2.0 * tmpvar_31))
      ) - 0.5) * 2.0);
      highp float tmpvar_32;
      tmpvar_32 = (vOscillations_26.y * vOscillations_26.z);
      fTarget_29 = 1.0;
      fAmount_28 = tmpvar_32;
      if ((tmpvar_32 < 0.0)) {
        fTarget_29 = -1.0;
        fAmount_28 = -(tmpvar_32);
      };
      fOscillation_27 = (((
        mix (mix (tmpvar_32, fTarget_29, fAmount_28), fTarget_29, fAmount_28)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_26.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_27 = (fOscillation_27 * (1.0 + (vOscillations_26.w * _ST_WindBranchWhip.x)));
      vPos_22 = (_glesVertex.xyz + ((vWindVector_25 * fOscillation_27) * _ST_WindBranch.y));
      highp vec4 tmpvar_33;
      tmpvar_33.zw = vec2(0.0, 0.0);
      tmpvar_33.x = ((fTime_23 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_33.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_34;
      highp vec4 tmpvar_35;
      tmpvar_35 = abs(((
        fract((tmpvar_33 + 0.5))
       * 2.0) - 1.0));
      tmpvar_34 = (((
        (tmpvar_35 * tmpvar_35)
       * 
        (3.0 - (2.0 * tmpvar_35))
      ) - 0.5) * 2.0);
      fAdherenceScale_24 = (1.0 - ((tmpvar_34.x * tmpvar_34.y) * (
        (tmpvar_34.x * tmpvar_34.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_24 = (fAdherenceScale_24 + ((vOscillations_26.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_22 = (vPos_22 + ((
        ((vRotatedBranchAnchor_14 - vPos_22) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_24) * _glesMultiTexCoord0.z));
      vPos_21 = vPos_22;
    } else {
      highp vec3 vPos_36;
      vPos_36 = vPos_21;
      highp float fTime_37;
      highp vec3 vWindVector_38;
      vWindVector_38 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_37 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_39;
      highp float fOscillation_40;
      fOscillation_40 = 1.0;
      highp float fAmount_41;
      highp float fTarget_42;
      highp vec4 tmpvar_43;
      tmpvar_43.w = 0.0;
      tmpvar_43.x = (fTime_37 + _glesMultiTexCoord0.w);
      tmpvar_43.y = ((fTime_37 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_43.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_37 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_44;
      tmpvar_44 = abs(((
        fract((tmpvar_43 + 0.5))
       * 2.0) - 1.0));
      vOscillations_39 = (((
        (tmpvar_44 * tmpvar_44)
       * 
        (3.0 - (2.0 * tmpvar_44))
      ) - 0.5) * 2.0);
      highp float tmpvar_45;
      tmpvar_45 = (vOscillations_39.y * vOscillations_39.z);
      fTarget_42 = 1.0;
      fAmount_41 = tmpvar_45;
      if ((tmpvar_45 < 0.0)) {
        fTarget_42 = -1.0;
        fAmount_41 = -(tmpvar_45);
      };
      fOscillation_40 = (((
        mix (mix (tmpvar_45, fTarget_42, fAmount_41), fTarget_42, fAmount_41)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_39.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_36 = (vPos_21 + ((vWindVector_38 * fOscillation_40) * _ST_WindBranch.y));
      vPos_21 = vPos_36;
    };
    FinalPosition_16 = vPos_21;
  };
  if ((tmpvar_18 > 0.0)) {
    highp vec3 vPos_46;
    vPos_46 = FinalPosition_16;
    highp float fMoveAmount_47;
    highp float fAdjust_48;
    highp float fLength_49;
    fLength_49 = sqrt(dot (FinalPosition_16, FinalPosition_16));
    highp float tmpvar_50;
    tmpvar_50 = (max ((FinalPosition_16.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_48 = tmpvar_50;
    if ((tmpvar_50 != 0.0)) {
      fAdjust_48 = pow (tmpvar_50, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_51;
    tmpvar_51.zw = vec2(0.0, 0.0);
    tmpvar_51.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_51.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_52;
    highp vec4 tmpvar_53;
    tmpvar_53 = abs(((
      fract((tmpvar_51 + 0.5))
     * 2.0) - 1.0));
    tmpvar_52 = (((
      (tmpvar_53 * tmpvar_53)
     * 
      (3.0 - (2.0 * tmpvar_53))
    ) - 0.5) * 2.0);
    fMoveAmount_47 = ((_ST_WindGlobal.y * (tmpvar_52.x + 
      (tmpvar_52.y * tmpvar_52.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_47 = (fMoveAmount_47 * fAdjust_48);
    vPos_46.xz = (FinalPosition_16.xz + (vRotatedWindVector_15.xz * fMoveAmount_47));
    vPos_46 = (normalize(vPos_46) * fLength_49);
    FinalPosition_16 = vPos_46;
  };
  tmpvar_13.xyz = FinalPosition_16;
  highp vec4 hPos_54;
  hPos_54 = (glstate_matrix_mvp * tmpvar_13);
  mediump vec3 screenPos_55;
  highp vec4 o_56;
  highp vec4 tmpvar_57;
  tmpvar_57 = (hPos_54 * 0.5);
  highp vec2 tmpvar_58;
  tmpvar_58.x = tmpvar_57.x;
  tmpvar_58.y = (tmpvar_57.y * _ProjectionParams.x);
  o_56.xy = (tmpvar_58 + tmpvar_57.w);
  o_56.zw = hPos_54.zw;
  highp vec3 tmpvar_59;
  tmpvar_59 = o_56.xyw;
  screenPos_55 = tmpvar_59;
  screenPos_55.xy = (screenPos_55.xy * (_ScreenParams.xy * 0.25));
  tmpvar_6 = tmpvar_8;
  highp vec3 tmpvar_60;
  tmpvar_60 = (_Object2World * tmpvar_13).xyz;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_5 = tmpvar_64;
  highp mat3 tmpvar_65;
  tmpvar_65[0] = _Object2World[0].xyz;
  tmpvar_65[1] = _Object2World[1].xyz;
  tmpvar_65[2] = _Object2World[2].xyz;
  highp vec3 tmpvar_66;
  tmpvar_66 = normalize((tmpvar_65 * _glesTANGENT.xyz));
  worldTangent_4 = tmpvar_66;
  lowp vec3 tmpvar_67;
  tmpvar_67 = ((worldNormal_5.yzx * worldTangent_4.zxy) - (worldNormal_5.zxy * worldTangent_4.yzx));
  highp vec3 tmpvar_68;
  tmpvar_68 = (tmpvar_67 * _glesTANGENT.w);
  worldBinormal_3 = tmpvar_68;
  highp vec4 tmpvar_69;
  tmpvar_69.x = worldTangent_4.x;
  tmpvar_69.y = worldBinormal_3.x;
  tmpvar_69.z = worldNormal_5.x;
  tmpvar_69.w = tmpvar_60.x;
  highp vec4 tmpvar_70;
  tmpvar_70.x = worldTangent_4.y;
  tmpvar_70.y = worldBinormal_3.y;
  tmpvar_70.z = worldNormal_5.y;
  tmpvar_70.w = tmpvar_60.y;
  highp vec4 tmpvar_71;
  tmpvar_71.x = worldTangent_4.z;
  tmpvar_71.y = worldBinormal_3.z;
  tmpvar_71.z = worldNormal_5.z;
  tmpvar_71.w = tmpvar_60.z;
  tmpvar_7.zw = vec2(0.0, 0.0);
  tmpvar_7.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_72;
  tmpvar_72.w = 1.0;
  tmpvar_72.xyz = worldNormal_5;
  mediump vec4 normal_73;
  normal_73 = tmpvar_72;
  mediump vec3 x2_74;
  mediump vec4 tmpvar_75;
  tmpvar_75 = (normal_73.xyzz * normal_73.yzzx);
  x2_74.x = dot (unity_SHBr, tmpvar_75);
  x2_74.y = dot (unity_SHBg, tmpvar_75);
  x2_74.z = dot (unity_SHBb, tmpvar_75);
  gl_Position = (glstate_matrix_mvp * tmpvar_13);
  xlv_TEXCOORD0 = tmpvar_69;
  xlv_TEXCOORD1 = tmpvar_70;
  xlv_TEXCOORD2 = tmpvar_71;
  xlv_TEXCOORD3 = tmpvar_6;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_55;
  xlv_TEXCOORD7 = tmpvar_7;
  xlv_TEXCOORD8 = (x2_74 + (unity_SHC.xyz * (
    (normal_73.x * normal_73.x)
   - 
    (normal_73.y * normal_73.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
uniform sampler2D _BumpMap;
varying highp vec4 xlv_TEXCOORD0;
varying highp vec4 xlv_TEXCOORD1;
varying highp vec4 xlv_TEXCOORD2;
varying mediump vec4 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 worldN_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD3;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  diffuseColor_6 = tmpvar_10;
  mediump vec3 tmpvar_11;
  tmpvar_11 = mix (diffuseColor_6.xyz, _HueVariation.xyz, xlv_TEXCOORD4.zzz);
  maxBase_5 = (max (diffuseColor_6.x, max (diffuseColor_6.y, diffuseColor_6.z)) / max (tmpvar_11.x, max (tmpvar_11.y, tmpvar_11.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_6.xyz = clamp ((tmpvar_11 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  lowp vec3 tmpvar_12;
  tmpvar_12 = ((texture2D (_BumpMap, xlv_TEXCOORD4.xy).xyz * 2.0) - 1.0);
  highp float tmpvar_13;
  tmpvar_13 = dot (xlv_TEXCOORD0.xyz, tmpvar_12);
  worldN_2.x = tmpvar_13;
  highp float tmpvar_14;
  tmpvar_14 = dot (xlv_TEXCOORD1.xyz, tmpvar_12);
  worldN_2.y = tmpvar_14;
  highp float tmpvar_15;
  tmpvar_15 = dot (xlv_TEXCOORD2.xyz, tmpvar_12);
  worldN_2.z = tmpvar_15;
  mediump vec3 normalWorld_16;
  normalWorld_16 = worldN_2;
  mediump vec4 tmpvar_17;
  tmpvar_17.w = 1.0;
  tmpvar_17.xyz = normalWorld_16;
  mediump vec3 x1_18;
  x1_18.x = dot (unity_SHAr, tmpvar_17);
  x1_18.y = dot (unity_SHAg, tmpvar_17);
  x1_18.z = dot (unity_SHAb, tmpvar_17);
  mediump vec4 outDiffuseOcclusion_19;
  mediump vec4 outNormal_20;
  mediump vec4 emission_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = tmpvar_4;
  outDiffuseOcclusion_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = ((worldN_2 * 0.5) + 0.5);
  outNormal_20 = tmpvar_23;
  lowp vec4 tmpvar_24;
  tmpvar_24.w = 1.0;
  tmpvar_24.xyz = vec3(0.0, 0.0, 0.0);
  emission_21 = tmpvar_24;
  emission_21.xyz = (emission_21.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_18)));
  outDiffuse_1.xyz = outDiffuseOcclusion_19.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_20;
  gl_FragData[3] = emission_21;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_BUMP" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in mediump vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out mediump vec4 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump float t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec4 t16_6;
lowp vec3 t10_7;
mediump vec3 t16_8;
highp vec2 t9;
bool tb9;
highp vec2 t18;
highp vec2 t22;
highp vec2 t23;
highp float t27;
highp float t28;
bool tb28;
highp float t30;
bool tb30;
highp float t31;
mediump float t16_35;
void main()
{
    //Instruction 52059
    //MUL
    vs_TEXCOORD3.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52060
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52061
    //ADD
    t9.x = t0.x + _Object2World[3].z;
    //Instruction 52062
    //ADD
    t18.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52063
    //ADD
    t9.y = t18.x + in_NORMAL0.x;
    //Instruction 52064
    //FRC
    t9.xy = fract(t9.xy);
    //Instruction 52065
    //MAD
    t9.x = t9.y * 0.500000 + t9.x;
    //Instruction 52066
    //ADD
    t9.x = t9.x + -0.300000;
    //Instruction 52067
    //MUL
    t1.z = t9.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52068
    //MUL
    t16_2 = _WindEnabled * _WindQuality;
    //Instruction 52069
    //LT
    tb9 = 0.0<t16_2;
    //Instruction 52070
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52071
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52072
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52073
    //DP3
    t18.x = dot(t3.xyz, t3.xyz);
    //Instruction 52074
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52075
    //MUL
    t18.xy = t18.xx * t3.xz;
    //Instruction 52076
    //AND
    t18.xy = mix(vec2(0.0, 0.0), t18.xy, bvec2(tb9));
    //Instruction 52077
    //GE
    tb28 = t16_2>=3.000000;
    //Instruction 52078
    //IF
    if(tb28){
        //Instruction 52079
        //EQ
        tb28 = t16_2==5.000000;
        //Instruction 52080
        //IF
        if(tb28){
            //Instruction 52081
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52082
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52083
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52084
            //DP3
            t28 = dot(t3.xyz, t3.xyz);
            //Instruction 52085
            //RSQ
            t28 = inversesqrt(t28);
            //Instruction 52086
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 52087
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52088
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52089
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52090
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52091
            //ADD
            t28 = t0.x + _ST_WindBranch.x;
            //Instruction 52092
            //ADD
            t2.x = t28 + in_TEXCOORD0.w;
            //Instruction 52093
            //MAD
            t2.y = t28 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52094
            //MUL
            t30 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52095
            //MUL
            t2.z = t30 * 0.500000;
            //Instruction 52096
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52097
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52098
            //FRC
            t2 = fract(t2);
            //Instruction 52099
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52100
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 52101
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52102
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52103
            //ADD
            t2 = t2 + t2;
            //Instruction 52104
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 52105
            //LT
            tb30 = t5.w<0.0;
            //Instruction 52106
            //MOV
            t5.y = (-t5.w);
            //Instruction 52107
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52108
            //MOVC
            t5.xy = (bool(tb30)) ? t5.xy : t5.zw;
            //Instruction 52109
            //MAD
            t30 = (-t2.y) * t2.z + t5.x;
            //Instruction 52110
            //MAD
            t30 = t5.y * t30 + t5.w;
            //Instruction 52111
            //ADD
            t31 = (-t30) + t5.x;
            //Instruction 52112
            //MAD
            t30 = t5.y * t31 + t30;
            //Instruction 52113
            //MUL
            t30 = t30 * _ST_WindBranchTwitch.x;
            //Instruction 52114
            //ADD
            t31 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52115
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52116
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 52117
            //MAD
            t30 = t30 * t31 + t5.x;
            //Instruction 52118
            //MAD
            t31 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52119
            //MUL
            t30 = t30 * t31;
            //Instruction 52120
            //MUL
            t4.xyz = vec3(t30) * t4.xyz;
            //Instruction 52121
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52122
            //MAD
            t5.x = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52123
            //MUL
            t28 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52124
            //MAD
            t5.y = t28 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52125
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52126
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52127
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52128
            //MUL
            t23.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52129
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52130
            //MAD
            t5.xy = t23.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52131
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52132
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52133
            //MUL
            t28 = t5.x * t5.y;
            //Instruction 52134
            //MAD
            t28 = (-t28) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52135
            //MUL
            t30 = t2.w * _ST_WindVector.w;
            //Instruction 52136
            //MAD
            t28 = t30 * _ST_WindBranchWhip.x + t28;
            //Instruction 52137
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52138
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52139
            //MUL
            t3.xyz = vec3(t28) * t3.xyz;
            //Instruction 52140
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52141
        //ELSE
        } else {
            //Instruction 52142
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52143
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52144
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52145
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52146
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52147
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52148
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52149
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52150
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52151
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52152
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52153
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52154
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52155
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52156
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52157
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52158
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52159
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52160
            //MOV
            t2.y = (-t2.w);
            //Instruction 52161
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52162
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52163
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52164
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52165
            //ADD
            t28 = (-t0.x) + t6.x;
            //Instruction 52166
            //MAD
            t0.x = t6.y * t28 + t0.x;
            //Instruction 52167
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52168
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52169
            //ADD
            t30 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52170
            //MUL
            t30 = t30 * t5.x;
            //Instruction 52171
            //MAD
            t0.x = t0.x * t28 + t30;
            //Instruction 52172
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52173
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52174
        //ENDIF
        }
        //Instruction 52175
    //ELSE
    } else {
        //Instruction 52176
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 52177
    //ENDIF
    }
    //Instruction 52178
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52179
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52180
    //DIV
    t28 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52181
    //MAD
    t28 = (-t28) * 0.250000 + t3.y;
    //Instruction 52182
    //MAX
    t28 = max(t28, 0.0);
    //Instruction 52183
    //MUL
    t28 = t28 * _ST_WindGlobal.z;
    //Instruction 52184
    //NE
    tb30 = t28!=0.0;
    //Instruction 52185
    //LOG
    t4.x = log2(t28);
    //Instruction 52186
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52187
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52188
    //MOVC
    t28 = (tb30) ? t4.x : t28;
    //Instruction 52189
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52190
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52191
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52192
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52193
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52194
    //MUL
    t22.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52195
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52196
    //MAD
    t4.xy = t22.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52197
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52198
    //MAD
    t30 = t4.y * t4.y + t4.x;
    //Instruction 52199
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52200
    //MAD
    t30 = _ST_WindGlobal.y * t30 + t4.x;
    //Instruction 52201
    //MUL
    t28 = t28 * t30;
    //Instruction 52202
    //MAD
    t4.xz = t18.xy * vec2(t28) + t3.xz;
    //Instruction 52203
    //MOV
    t4.y = t3.y;
    //Instruction 52204
    //DP3
    t18.x = dot(t4.xyz, t4.xyz);
    //Instruction 52205
    //RSQ
    t18.x = inversesqrt(t18.x);
    //Instruction 52206
    //MUL
    t4.xyz = t18.xxx * t4.xyz;
    //Instruction 52207
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52208
    //MOVC
    t0.xyz = (bool(tb9)) ? t0.xzw : t3.xyz;
    //Instruction 52209
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52210
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52211
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52212
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52213
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52214
    //MUL
    t27 = t3.y * _ProjectionParams.x;
    //Instruction 52215
    //MUL
    t4.w = t27 * 0.500000;
    //Instruction 52216
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52217
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52218
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52219
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52220
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52221
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52222
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52223
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52224
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52225
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52226
    //MAD
    t0.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52227
    //MOV
    t2.x = _World2Object[0].x;
    //Instruction 52228
    //MOV
    t2.y = _World2Object[1].x;
    //Instruction 52229
    //MOV
    t2.zw = _World2Object[2].xx;
    //Instruction 52230
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52231
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52232
    //MOV
    t4.zw = _World2Object[2].yy;
    //Instruction 52233
    //MUL
    t4 = t4 * in_NORMAL0.yyyy;
    //Instruction 52234
    //MAD
    t2 = t2 * in_NORMAL0.xxxx + t4;
    //Instruction 52235
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52236
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52237
    //MOV
    t4.zw = _World2Object[2].zz;
    //Instruction 52238
    //MAD
    t2 = t4 * in_NORMAL0.zzzz + t2;
    //Instruction 52239
    //DP3
    t27 = dot(t2.xyw, t2.xyw);
    //Instruction 52240
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52241
    //MUL
    t2 = vec4(t27) * t2;
    //Instruction 52242
    //MUL
    t4.xyz = in_TANGENT0.yyy * _Object2World[1].yzx;
    //Instruction 52243
    //MAD
    t4.xyz = _Object2World[0].yzx * in_TANGENT0.xxx + t4.xyz;
    //Instruction 52244
    //MAD
    t4.xyz = _Object2World[2].yzx * in_TANGENT0.zzz + t4.xyz;
    //Instruction 52245
    //DP3
    t27 = dot(t4.xyz, t4.xyz);
    //Instruction 52246
    //RSQ
    t27 = inversesqrt(t27);
    //Instruction 52247
    //MUL
    t4.xyz = vec3(t27) * t4.xyz;
    //Instruction 52248
    //MUL
    t10_7.xyz = t2.wxy * t4.xyz;
    //Instruction 52249
    //MAD
    t10_7.xyz = t2.ywx * t4.yzx + (-t10_7.xyz);
    //Instruction 52250
    //MUL
    t5.xyz = t10_7.xyz * in_TANGENT0.www;
    //Instruction 52251
    //MUL
    t16_6 = t2.ywzx * t2;
    //Instruction 52252
    //DP4
    t16_8.x = dot(unity_SHBr, t16_6);
    //Instruction 52253
    //DP4
    t16_8.y = dot(unity_SHBg, t16_6);
    //Instruction 52254
    //DP4
    t16_8.z = dot(unity_SHBb, t16_6);
    //Instruction 52255
    //MUL
    t16_35 = t2.y * t2.y;
    //Instruction 52256
    //MAD
    t16_35 = t2.x * t2.x + (-t16_35);
    //Instruction 52257
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_35) + t16_8.xyz;
    //Instruction 52258
    //MOV
    vs_TEXCOORD0.x = t4.z;
    //Instruction 52259
    //MOV
    vs_TEXCOORD0.y = t5.x;
    //Instruction 52260
    //MOV
    vs_TEXCOORD0.z = t2.x;
    //Instruction 52261
    //MOV
    vs_TEXCOORD0.w = t0.x;
    //Instruction 52262
    //MOV
    vs_TEXCOORD1.x = t4.x;
    //Instruction 52263
    //MOV
    vs_TEXCOORD1.y = t5.y;
    //Instruction 52264
    //MOV
    vs_TEXCOORD1.z = t2.y;
    //Instruction 52265
    //MOV
    vs_TEXCOORD1.w = t0.y;
    //Instruction 52266
    //MOV
    vs_TEXCOORD2.x = t4.y;
    //Instruction 52267
    //MOV
    vs_TEXCOORD2.y = t5.z;
    //Instruction 52268
    //MOV
    vs_TEXCOORD2.z = t2.w;
    //Instruction 52269
    //MOV
    vs_TEXCOORD2.w = t0.z;
    //Instruction 52270
    //MOV
    vs_TEXCOORD3.w = _Color.w;
    //Instruction 52271
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52272
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 52273
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 52274
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52275
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _BumpMap;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in mediump vec4 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec4 t1;
mediump float t16_1;
lowp vec3 t10_1;
bool tb1;
mediump vec3 t16_2;
lowp vec3 t10_3;
mediump float t16_4;
mediump float t16_12;
void main()
{
    //Instruction 52021
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52022
    //FRC
    t16_4 = fract(t16_0.y);
    //Instruction 52023
    //MOV
    t1.x = t16_0.x;
    //Instruction 52024
    //MAD
    t1.y = t16_4 * 0.062500 + unity_LODFade.y;
    //Instruction 52025
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52026
    //ADD
    t16_1 = t10_1.x + -0.500000;
    //Instruction 52027
    //LT
    tb1 = t16_1<0.0;
    //Instruction 52028
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52029
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 52030
    //ADD
    t16_0.xyz = (-t10_1.xyz) + _HueVariation.xyz;
    //Instruction 52031
    //MAD
    t16_0.xyz = vs_TEXCOORD4.zzz * t16_0.xyz + t10_1.xyz;
    //Instruction 52032
    //MAX
    t16_12 = max(t16_0.z, t16_0.y);
    //Instruction 52033
    //MAX
    t16_12 = max(t16_12, t16_0.x);
    //Instruction 52034
    //MAX
    t16_2.x = max(t10_1.z, t10_1.y);
    //Instruction 52035
    //MAX
    t16_2.x = max(t10_1.x, t16_2.x);
    //Instruction 52036
    //DIV
    t16_12 = t16_2.x / t16_12;
    //Instruction 52037
    //MAD
    t16_1 = t16_12 * 0.500000 + 0.500000;
    //Instruction 52038
    //MUL
    t16_0.xyz = t16_0.xyz * vec3(t16_1);
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 52039
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD3.xyz;
    //Instruction 52040
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52041
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52042
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52043
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52044
    //SAMPLE
    t10_1.xyz = texture(_BumpMap, vs_TEXCOORD4.xy).xyz;
    //Instruction 52045
    //MAD
    t10_3.xyz = t10_1.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
    //Instruction 52046
    //DP3
    t1.x = dot(vs_TEXCOORD0.xyz, t10_3.xyz);
    //Instruction 52047
    //DP3
    t1.y = dot(vs_TEXCOORD1.xyz, t10_3.xyz);
    //Instruction 52048
    //DP3
    t1.z = dot(vs_TEXCOORD2.xyz, t10_3.xyz);
    //Instruction 52049
    //MAD
    t10_3.xyz = t1.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52050
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 52051
    //MOV
    t1.w = 1.0;
    //Instruction 52052
    //DP4
    t16_2.x = dot(unity_SHAr, t1);
    //Instruction 52053
    //DP4
    t16_2.y = dot(unity_SHAg, t1);
    //Instruction 52054
    //DP4
    t16_2.z = dot(unity_SHAb, t1);
    //Instruction 52055
    //ADD
    t16_2.xyz = t16_2.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52056
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_2.xyz;
    //Instruction 52057
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52058
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_12;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_5 = (diffuseColor_7.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_13;
  normalWorld_13 = tmpvar_3;
  mediump vec4 tmpvar_14;
  tmpvar_14.w = 1.0;
  tmpvar_14.xyz = normalWorld_13;
  mediump vec3 x1_15;
  x1_15.x = dot (unity_SHAr, tmpvar_14);
  x1_15.y = dot (unity_SHAg, tmpvar_14);
  x1_15.z = dot (unity_SHAb, tmpvar_14);
  mediump vec4 outDiffuseOcclusion_16;
  mediump vec4 outNormal_17;
  mediump vec4 emission_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = tmpvar_5;
  outDiffuseOcclusion_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = vec3(0.0, 0.0, 0.0);
  emission_18 = tmpvar_21;
  emission_18.xyz = (emission_18.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_15)));
  outDiffuse_1.xyz = outDiffuseOcclusion_16.xyz;
  outEmission_2.w = emission_18.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_18.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_17;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 52318
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52319
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 52320
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 52321
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52322
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 52323
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 52324
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 52325
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 52326
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 52327
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 52328
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 52329
    //IF
    if(tb22){
        //Instruction 52330
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 52331
        //IF
        if(tb22){
            //Instruction 52332
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52333
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 52334
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 52335
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 52336
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 52337
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 52338
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52339
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 52340
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52341
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 52342
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 52343
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 52344
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 52345
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52346
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 52347
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 52348
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 52349
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52350
            //FRC
            t0 = fract(t0);
            //Instruction 52351
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52352
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 52353
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52354
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52355
            //ADD
            t0 = t0 + t0;
            //Instruction 52356
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 52357
            //LT
            tb23 = t4.w<0.0;
            //Instruction 52358
            //MOV
            t4.y = (-t4.w);
            //Instruction 52359
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 52360
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 52361
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 52362
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 52363
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 52364
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 52365
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 52366
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52367
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52368
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 52369
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 52370
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52371
            //MUL
            t23 = t23 * t24;
            //Instruction 52372
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 52373
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52374
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52375
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52376
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52377
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 52378
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 52379
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52380
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 52381
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52382
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 52383
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 52384
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 52385
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 52386
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52387
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 52388
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 52389
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 52390
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52391
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 52392
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 52393
        //ELSE
        } else {
            //Instruction 52394
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52395
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 52396
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52397
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 52398
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 52399
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 52400
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 52401
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52402
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 52403
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 52404
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52405
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52406
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52407
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 52408
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52409
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52410
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 52411
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 52412
            //LT
            tb22 = t0.w<0.0;
            //Instruction 52413
            //MOV
            t0.y = (-t0.w);
            //Instruction 52414
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 52415
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 52416
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 52417
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 52418
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 52419
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 52420
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 52421
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52422
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52423
            //MUL
            t24 = t24 * t4.x;
            //Instruction 52424
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 52425
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 52426
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52427
        //ENDIF
        }
        //Instruction 52428
    //ELSE
    } else {
        //Instruction 52429
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 52430
    //ENDIF
    }
    //Instruction 52431
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 52432
    //SQRT
    t22 = sqrt(t22);
    //Instruction 52433
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52434
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 52435
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 52436
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 52437
    //NE
    tb3 = t23!=0.0;
    //Instruction 52438
    //LOG
    t10 = log2(t23);
    //Instruction 52439
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 52440
    //EXP
    t10 = exp2(t10);
    //Instruction 52441
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 52442
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52443
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52444
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 52445
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 52446
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52447
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 52448
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52449
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 52450
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 52451
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 52452
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52453
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 52454
    //MUL
    t23 = t23 * t3.x;
    //Instruction 52455
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 52456
    //MOV
    t3.y = t2.y;
    //Instruction 52457
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 52458
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 52459
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 52460
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 52461
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 52462
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52463
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 52464
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 52465
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 52466
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 52467
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 52468
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 52469
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 52470
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 52471
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 52472
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 52473
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 52474
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 52475
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 52476
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 52477
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 52478
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 52479
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 52480
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 52481
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 52482
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 52483
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 52484
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 52485
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 52486
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 52487
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 52488
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 52489
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 52490
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 52491
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 52492
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 52493
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 52494
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 52495
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 52496
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 52497
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 52498
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 52499
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 52500
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 52501
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 52502
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 52503
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52504
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 52505
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 52506
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 52507
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 52508
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 52509
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 52510
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52511
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 52288
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52289
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 52290
    //MOV
    t1.x = t16_0.x;
    //Instruction 52291
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 52292
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52293
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 52294
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 52295
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52296
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 52297
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 52298
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 52299
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 52300
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 52301
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52302
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52303
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52304
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52305
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52306
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 52307
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52308
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52309
    //MOV
    t16_1.w = 1.0;
    //Instruction 52310
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 52311
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 52312
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 52313
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52314
    //MUL
    t16_0.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 52315
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 52316
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52317
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp vec3 tmpvar_10;
  tmpvar_10.xy = _glesMultiTexCoord2.zw;
  tmpvar_10.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_10;
  highp vec4 tmpvar_11;
  tmpvar_11 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_12;
  highp vec3 vRotatedWindVector_13;
  highp vec3 FinalPosition_14;
  highp vec3 tmpvar_15;
  tmpvar_15 = tmpvar_1.xyz;
  FinalPosition_14 = tmpvar_15;
  highp vec3 tmpvar_16;
  tmpvar_16.x = _Object2World[3].x;
  tmpvar_16.y = _Object2World[3].y;
  tmpvar_16.z = _Object2World[3].z;
  mediump float tmpvar_17;
  tmpvar_17 = (_WindQuality * _WindEnabled);
  if ((tmpvar_17 > 0.0)) {
    highp mat3 tmpvar_18;
    tmpvar_18[0] = _World2Object[0].xyz;
    tmpvar_18[1] = _World2Object[1].xyz;
    tmpvar_18[2] = _World2Object[2].xyz;
    vRotatedWindVector_13 = normalize((tmpvar_18 * _ST_WindVector.xyz));
    highp mat3 tmpvar_19;
    tmpvar_19[0] = _World2Object[0].xyz;
    tmpvar_19[1] = _World2Object[1].xyz;
    tmpvar_19[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_12 = (normalize((tmpvar_19 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_13 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_12 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_17 >= 3.0)) {
    highp vec3 vPos_20;
    vPos_20 = tmpvar_15;
    if ((tmpvar_17 == 5.0)) {
      highp vec3 vPos_21;
      vPos_21 = tmpvar_15;
      highp float fTime_22;
      highp float fAdherenceScale_23;
      highp vec3 vWindVector_24;
      vWindVector_24 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_22 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_25;
      highp float fOscillation_26;
      fOscillation_26 = 1.0;
      highp float fAmount_27;
      highp float fTarget_28;
      highp vec4 tmpvar_29;
      tmpvar_29.x = (fTime_22 + _glesMultiTexCoord0.w);
      tmpvar_29.y = ((fTime_22 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_29.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_22 + _glesMultiTexCoord0.w));
      tmpvar_29.w = ((fTime_22 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_30;
      tmpvar_30 = abs(((
        fract((tmpvar_29 + 0.5))
       * 2.0) - 1.0));
      vOscillations_25 = (((
        (tmpvar_30 * tmpvar_30)
       * 
        (3.0 - (2.0 * tmpvar_30))
      ) - 0.5) * 2.0);
      highp float tmpvar_31;
      tmpvar_31 = (vOscillations_25.y * vOscillations_25.z);
      fTarget_28 = 1.0;
      fAmount_27 = tmpvar_31;
      if ((tmpvar_31 < 0.0)) {
        fTarget_28 = -1.0;
        fAmount_27 = -(tmpvar_31);
      };
      fOscillation_26 = (((
        mix (mix (tmpvar_31, fTarget_28, fAmount_27), fTarget_28, fAmount_27)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_25.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_26 = (fOscillation_26 * (1.0 + (vOscillations_25.w * _ST_WindBranchWhip.x)));
      vPos_21 = (_glesVertex.xyz + ((vWindVector_24 * fOscillation_26) * _ST_WindBranch.y));
      highp vec4 tmpvar_32;
      tmpvar_32.zw = vec2(0.0, 0.0);
      tmpvar_32.x = ((fTime_22 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_32.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_33;
      highp vec4 tmpvar_34;
      tmpvar_34 = abs(((
        fract((tmpvar_32 + 0.5))
       * 2.0) - 1.0));
      tmpvar_33 = (((
        (tmpvar_34 * tmpvar_34)
       * 
        (3.0 - (2.0 * tmpvar_34))
      ) - 0.5) * 2.0);
      fAdherenceScale_23 = (1.0 - ((tmpvar_33.x * tmpvar_33.y) * (
        (tmpvar_33.x * tmpvar_33.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_23 = (fAdherenceScale_23 + ((vOscillations_25.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_21 = (vPos_21 + ((
        ((vRotatedBranchAnchor_12 - vPos_21) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_23) * _glesMultiTexCoord0.z));
      vPos_20 = vPos_21;
    } else {
      highp vec3 vPos_35;
      vPos_35 = vPos_20;
      highp float fTime_36;
      highp vec3 vWindVector_37;
      vWindVector_37 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_36 = (_ST_WindBranch.x + (tmpvar_16.x + tmpvar_16.y));
      highp vec4 vOscillations_38;
      highp float fOscillation_39;
      fOscillation_39 = 1.0;
      highp float fAmount_40;
      highp float fTarget_41;
      highp vec4 tmpvar_42;
      tmpvar_42.w = 0.0;
      tmpvar_42.x = (fTime_36 + _glesMultiTexCoord0.w);
      tmpvar_42.y = ((fTime_36 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_42.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_36 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_43;
      tmpvar_43 = abs(((
        fract((tmpvar_42 + 0.5))
       * 2.0) - 1.0));
      vOscillations_38 = (((
        (tmpvar_43 * tmpvar_43)
       * 
        (3.0 - (2.0 * tmpvar_43))
      ) - 0.5) * 2.0);
      highp float tmpvar_44;
      tmpvar_44 = (vOscillations_38.y * vOscillations_38.z);
      fTarget_41 = 1.0;
      fAmount_40 = tmpvar_44;
      if ((tmpvar_44 < 0.0)) {
        fTarget_41 = -1.0;
        fAmount_40 = -(tmpvar_44);
      };
      fOscillation_39 = (((
        mix (mix (tmpvar_44, fTarget_41, fAmount_40), fTarget_41, fAmount_40)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_38.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_35 = (vPos_20 + ((vWindVector_37 * fOscillation_39) * _ST_WindBranch.y));
      vPos_20 = vPos_35;
    };
    FinalPosition_14 = vPos_20;
  };
  if ((tmpvar_17 > 0.0)) {
    highp vec3 vPos_45;
    vPos_45 = FinalPosition_14;
    highp float fMoveAmount_46;
    highp float fAdjust_47;
    highp float fLength_48;
    fLength_48 = sqrt(dot (FinalPosition_14, FinalPosition_14));
    highp float tmpvar_49;
    tmpvar_49 = (max ((FinalPosition_14.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_47 = tmpvar_49;
    if ((tmpvar_49 != 0.0)) {
      fAdjust_47 = pow (tmpvar_49, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_50;
    tmpvar_50.zw = vec2(0.0, 0.0);
    tmpvar_50.x = (tmpvar_16.x + _ST_WindGlobal.x);
    tmpvar_50.y = (tmpvar_16.y + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_51;
    highp vec4 tmpvar_52;
    tmpvar_52 = abs(((
      fract((tmpvar_50 + 0.5))
     * 2.0) - 1.0));
    tmpvar_51 = (((
      (tmpvar_52 * tmpvar_52)
     * 
      (3.0 - (2.0 * tmpvar_52))
    ) - 0.5) * 2.0);
    fMoveAmount_46 = ((_ST_WindGlobal.y * (tmpvar_51.x + 
      (tmpvar_51.y * tmpvar_51.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_46 = (fMoveAmount_46 * fAdjust_47);
    vPos_45.xz = (FinalPosition_14.xz + (vRotatedWindVector_13.xz * fMoveAmount_46));
    vPos_45 = (normalize(vPos_45) * fLength_48);
    FinalPosition_14 = vPos_45;
  };
  tmpvar_11.xyz = FinalPosition_14;
  highp vec4 hPos_53;
  hPos_53 = (glstate_matrix_mvp * tmpvar_11);
  mediump vec3 screenPos_54;
  highp vec4 o_55;
  highp vec4 tmpvar_56;
  tmpvar_56 = (hPos_53 * 0.5);
  highp vec2 tmpvar_57;
  tmpvar_57.x = tmpvar_56.x;
  tmpvar_57.y = (tmpvar_56.y * _ProjectionParams.x);
  o_55.xy = (tmpvar_57 + tmpvar_56.w);
  o_55.zw = hPos_53.zw;
  highp vec3 tmpvar_58;
  tmpvar_58 = o_55.xyw;
  screenPos_54 = tmpvar_58;
  screenPos_54.xy = (screenPos_54.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_59;
  v_59.x = _World2Object[0].x;
  v_59.y = _World2Object[1].x;
  v_59.z = _World2Object[2].x;
  v_59.w = _World2Object[3].x;
  highp vec4 v_60;
  v_60.x = _World2Object[0].y;
  v_60.y = _World2Object[1].y;
  v_60.z = _World2Object[2].y;
  v_60.w = _World2Object[3].y;
  highp vec4 v_61;
  v_61.x = _World2Object[0].z;
  v_61.y = _World2Object[1].z;
  v_61.z = _World2Object[2].z;
  v_61.w = _World2Object[3].z;
  highp vec3 tmpvar_62;
  tmpvar_62 = normalize(((
    (v_59.xyz * _glesNormal.x)
   + 
    (v_60.xyz * _glesNormal.y)
  ) + (v_61.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_62;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_63;
  tmpvar_63.w = 1.0;
  tmpvar_63.xyz = worldNormal_3;
  mediump vec4 normal_64;
  normal_64 = tmpvar_63;
  mediump vec3 x2_65;
  mediump vec4 tmpvar_66;
  tmpvar_66 = (normal_64.xyzz * normal_64.yzzx);
  x2_65.x = dot (unity_SHBr, tmpvar_66);
  x2_65.y = dot (unity_SHBg, tmpvar_66);
  x2_65.z = dot (unity_SHBb, tmpvar_66);
  gl_Position = (glstate_matrix_mvp * tmpvar_11);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_11).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_54;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_65 + (unity_SHC.xyz * (
    (normal_64.x * normal_64.x)
   - 
    (normal_64.y * normal_64.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump vec4 blendColor_5;
  mediump vec4 diffuseColor_6;
  mediump vec2 projUV_7;
  mediump vec2 tmpvar_8;
  tmpvar_8 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_7.x = tmpvar_8.x;
  projUV_7.y = ((fract(tmpvar_8.y) * 0.0625) + unity_LODFade.y);
  lowp float x_9;
  x_9 = (texture2D (_DitherMaskLOD2D, projUV_7).w - 0.5);
  if ((x_9 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_10;
  tmpvar_10 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_6 = tmpvar_10;
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_5 = tmpvar_11;
  diffuseColor_6.xyz = mix (blendColor_5.xyz, diffuseColor_6.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  tmpvar_4 = (diffuseColor_6.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_12;
  normalWorld_12 = tmpvar_2;
  mediump vec4 tmpvar_13;
  tmpvar_13.w = 1.0;
  tmpvar_13.xyz = normalWorld_12;
  mediump vec3 x1_14;
  x1_14.x = dot (unity_SHAr, tmpvar_13);
  x1_14.y = dot (unity_SHAg, tmpvar_13);
  x1_14.z = dot (unity_SHAb, tmpvar_13);
  mediump vec4 outDiffuseOcclusion_15;
  mediump vec4 outNormal_16;
  mediump vec4 emission_17;
  lowp vec4 tmpvar_18;
  tmpvar_18.w = 1.0;
  tmpvar_18.xyz = tmpvar_4;
  outDiffuseOcclusion_15 = tmpvar_18;
  lowp vec4 tmpvar_19;
  tmpvar_19.w = 1.0;
  tmpvar_19.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_16 = tmpvar_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = vec3(0.0, 0.0, 0.0);
  emission_17 = tmpvar_20;
  emission_17.xyz = (emission_17.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_14)));
  outDiffuse_1.xyz = outDiffuseOcclusion_15.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_16;
  gl_FragData[3] = emission_17;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
mediump vec4 t16_0;
highp vec4 t1;
bool tb1;
highp vec3 t2;
highp vec4 t3;
bool tb3;
highp vec4 t4;
highp vec3 t5;
mediump vec3 t16_6;
highp vec3 t8;
highp float t10;
highp float t15;
highp vec2 t17;
highp vec2 t18;
highp float t22;
bool tb22;
highp float t23;
bool tb23;
highp float t24;
mediump float t16_27;
void main()
{
    //Instruction 51318
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 51319
    //MUL
    t16_0.x = _WindEnabled * _WindQuality;
    //Instruction 51320
    //LT
    tb1 = 0.0<t16_0.x;
    //Instruction 51321
    //MUL
    t8.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 51322
    //MAD
    t8.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t8.xyz;
    //Instruction 51323
    //MAD
    t8.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t8.xyz;
    //Instruction 51324
    //DP3
    t15 = dot(t8.xyz, t8.xyz);
    //Instruction 51325
    //RSQ
    t15 = inversesqrt(t15);
    //Instruction 51326
    //MUL
    t8.xy = vec2(t15) * t8.xz;
    //Instruction 51327
    //AND
    t8.xy = mix(vec2(0.0, 0.0), t8.xy, bvec2(tb1));
    //Instruction 51328
    //GE
    tb22 = t16_0.x>=3.000000;
    //Instruction 51329
    //IF
    if(tb22){
        //Instruction 51330
        //EQ
        tb22 = t16_0.x==5.000000;
        //Instruction 51331
        //IF
        if(tb22){
            //Instruction 51332
            //MUL
            t2.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 51333
            //MAD
            t2.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t2.xyz;
            //Instruction 51334
            //MAD
            t2.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t2.xyz;
            //Instruction 51335
            //DP3
            t22 = dot(t2.xyz, t2.xyz);
            //Instruction 51336
            //RSQ
            t22 = inversesqrt(t22);
            //Instruction 51337
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51338
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51339
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51340
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51341
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51342
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51343
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51344
            //ADD
            t0.x = t22 + in_TEXCOORD0.w;
            //Instruction 51345
            //MAD
            t0.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51346
            //MUL
            t23 = t0.x * _ST_WindBranchTwitch.y;
            //Instruction 51347
            //MUL
            t0.z = t23 * 0.500000;
            //Instruction 51348
            //ADD
            t0.w = t0.x + (-in_TEXCOORD0.z);
            //Instruction 51349
            //ADD
            t0 = t0 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 51350
            //FRC
            t0 = fract(t0);
            //Instruction 51351
            //MAD
            t0 = t0 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 51352
            //MUL
            t4 = abs(t0) * abs(t0);
            //Instruction 51353
            //MAD
            t0 = -abs(t0) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 51354
            //MAD
            t0 = t4 * t0 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 51355
            //ADD
            t0 = t0 + t0;
            //Instruction 51356
            //MUL
            t4.w = t0.z * t0.y;
            //Instruction 51357
            //LT
            tb23 = t4.w<0.0;
            //Instruction 51358
            //MOV
            t4.y = (-t4.w);
            //Instruction 51359
            //MOV
            t4.xz = vec2(-1.0, 1.0);
            //Instruction 51360
            //MOVC
            t4.xy = (bool(tb23)) ? t4.xy : t4.zw;
            //Instruction 51361
            //MAD
            t23 = (-t0.y) * t0.z + t4.x;
            //Instruction 51362
            //MAD
            t23 = t4.y * t23 + t4.w;
            //Instruction 51363
            //ADD
            t24 = (-t23) + t4.x;
            //Instruction 51364
            //MAD
            t23 = t4.y * t24 + t23;
            //Instruction 51365
            //MUL
            t23 = t23 * _ST_WindBranchTwitch.x;
            //Instruction 51366
            //ADD
            t24 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51367
            //ADD
            t4.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51368
            //MUL
            t4.x = t0.x * t4.x;
            //Instruction 51369
            //MAD
            t23 = t23 * t24 + t4.x;
            //Instruction 51370
            //MAD
            t24 = t0.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 51371
            //MUL
            t23 = t23 * t24;
            //Instruction 51372
            //MUL
            t3.xyz = vec3(t23) * t3.xyz;
            //Instruction 51373
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51374
            //MAD
            t4.x = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51375
            //MUL
            t22 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 51376
            //MAD
            t4.y = t22 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 51377
            //ADD
            t4.xy = t4.xy + vec2(0.500000, 0.500000);
            //Instruction 51378
            //FRC
            t4.xy = fract(t4.xy);
            //Instruction 51379
            //MAD
            t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 51380
            //MUL
            t18.xy = abs(t4.xy) * abs(t4.xy);
            //Instruction 51381
            //MAD
            t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 51382
            //MAD
            t4.xy = t18.xy * t4.xy + vec2(-0.500000, -0.500000);
            //Instruction 51383
            //ADD
            t4.xy = t4.xy + t4.xy;
            //Instruction 51384
            //MUL
            t4.xy = t4.xy * t4.xy;
            //Instruction 51385
            //MUL
            t22 = t4.x * t4.y;
            //Instruction 51386
            //MAD
            t22 = (-t22) * _ST_WindTurbulences.x + 1.0;
            //Instruction 51387
            //MUL
            t23 = t0.w * _ST_WindVector.w;
            //Instruction 51388
            //MAD
            t22 = t23 * _ST_WindBranchWhip.x + t22;
            //Instruction 51389
            //MAD
            t2.xyz = t2.xyz * _ST_WindBranchAnchor.www + (-t3.xyz);
            //Instruction 51390
            //MUL
            t2.xyz = t2.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 51391
            //MUL
            t2.xyz = vec3(t22) * t2.xyz;
            //Instruction 51392
            //MAD
            t2.xyz = t2.xyz * in_TEXCOORD0.zzz + t3.xyz;
            //Instruction 51393
        //ELSE
        } else {
            //Instruction 51394
            //MUL
            t3.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 51395
            //FRC
            t3.xyz = fract(t3.xyz);
            //Instruction 51396
            //MAD
            t3.xyz = t3.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51397
            //MUL
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz;
            //Instruction 51398
            //ADD
            t22 = _Object2World[3].y + _Object2World[3].x;
            //Instruction 51399
            //ADD
            t22 = t22 + _ST_WindBranch.x;
            //Instruction 51400
            //ADD
            t4.x = t22 + in_TEXCOORD0.w;
            //Instruction 51401
            //MAD
            t4.y = t22 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 51402
            //MUL
            t22 = t4.x * _ST_WindBranchTwitch.y;
            //Instruction 51403
            //MUL
            t4.z = t22 * 0.500000;
            //Instruction 51404
            //ADD
            t4.xyz = t4.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 51405
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 51406
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 51407
            //MUL
            t5.xyz = abs(t4.xyz) * abs(t4.xyz);
            //Instruction 51408
            //MAD
            t4.xyz = -abs(t4.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 51409
            //MAD
            t4.xyz = t5.xyz * t4.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 51410
            //ADD
            t4.xyz = t4.xyz + t4.xyz;
            //Instruction 51411
            //MUL
            t0.w = t4.z * t4.y;
            //Instruction 51412
            //LT
            tb22 = t0.w<0.0;
            //Instruction 51413
            //MOV
            t0.y = (-t0.w);
            //Instruction 51414
            //MOV
            t0.xz = vec2(-1.0, 1.0);
            //Instruction 51415
            //MOVC
            t5.xy = (bool(tb22)) ? t0.xy : t0.zw;
            //Instruction 51416
            //MAD
            t22 = (-t4.y) * t4.z + t5.x;
            //Instruction 51417
            //MAD
            t22 = t5.y * t22 + t0.w;
            //Instruction 51418
            //ADD
            t23 = (-t22) + t5.x;
            //Instruction 51419
            //MAD
            t22 = t5.y * t23 + t22;
            //Instruction 51420
            //MUL
            t22 = t22 * _ST_WindBranchTwitch.x;
            //Instruction 51421
            //ADD
            t23 = (-_ST_WindVector.w) + 1.0;
            //Instruction 51422
            //ADD
            t24 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 51423
            //MUL
            t24 = t24 * t4.x;
            //Instruction 51424
            //MAD
            t22 = t22 * t23 + t24;
            //Instruction 51425
            //MUL
            t3.xyz = vec3(t22) * t3.xyz;
            //Instruction 51426
            //MAD
            t2.xyz = t3.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 51427
        //ENDIF
        }
        //Instruction 51428
    //ELSE
    } else {
        //Instruction 51429
        //MOV
        t2.xyz = in_POSITION0.xyz;
        //Instruction 51430
    //ENDIF
    }
    //Instruction 51431
    //DP3
    t22 = dot(t2.xyz, t2.xyz);
    //Instruction 51432
    //SQRT
    t22 = sqrt(t22);
    //Instruction 51433
    //DIV
    t23 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 51434
    //MAD
    t23 = (-t23) * 0.250000 + t2.y;
    //Instruction 51435
    //MAX
    t23 = max(t23, 0.0);
    //Instruction 51436
    //MUL
    t23 = t23 * _ST_WindGlobal.z;
    //Instruction 51437
    //NE
    tb3 = t23!=0.0;
    //Instruction 51438
    //LOG
    t10 = log2(t23);
    //Instruction 51439
    //MUL
    t10 = t10 * _ST_WindGlobal.w;
    //Instruction 51440
    //EXP
    t10 = exp2(t10);
    //Instruction 51441
    //MOVC
    t23 = (tb3) ? t10 : t23;
    //Instruction 51442
    //ADD
    t3.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 51443
    //MAD
    t3.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 51444
    //ADD
    t3.xy = t3.xy + vec2(0.500000, 0.500000);
    //Instruction 51445
    //FRC
    t3.xy = fract(t3.xy);
    //Instruction 51446
    //MAD
    t3.xy = t3.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 51447
    //MUL
    t17.xy = abs(t3.xy) * abs(t3.xy);
    //Instruction 51448
    //MAD
    t3.xy = -abs(t3.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 51449
    //MAD
    t3.xy = t17.xy * t3.xy + vec2(-0.500000, -0.500000);
    //Instruction 51450
    //ADD
    t3.xy = t3.xy + t3.xy;
    //Instruction 51451
    //MAD
    t3.x = t3.y * t3.y + t3.x;
    //Instruction 51452
    //DIV
    t10 = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 51453
    //MAD
    t3.x = _ST_WindGlobal.y * t3.x + t10;
    //Instruction 51454
    //MUL
    t23 = t23 * t3.x;
    //Instruction 51455
    //MAD
    t3.xz = t8.xy * vec2(t23) + t2.xz;
    //Instruction 51456
    //MOV
    t3.y = t2.y;
    //Instruction 51457
    //DP3
    t8.x = dot(t3.xyz, t3.xyz);
    //Instruction 51458
    //RSQ
    t8.x = inversesqrt(t8.x);
    //Instruction 51459
    //MUL
    t3.xyz = t8.xxx * t3.xyz;
    //Instruction 51460
    //MUL
    t8.xyz = vec3(t22) * t3.xyz;
    //Instruction 51461
    //MOVC
    t1.xyz = (bool(tb1)) ? t8.xyz : t2.xyz;
    //Instruction 51462
    //MUL
    t2.xyz = t1.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 51463
    //MAD
    t2.xyz = glstate_matrix_mvp[0].xyw * t1.xxx + t2.xyz;
    //Instruction 51464
    //MAD
    t2.xyz = glstate_matrix_mvp[2].xyw * t1.zzz + t2.xyz;
    //Instruction 51465
    //MAD
    t2.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t2.xyz;
    //Instruction 51466
    //MUL
    t3.xz = t2.xz * vec2(0.500000, 0.500000);
    //Instruction 51467
    //MUL
    t22 = t2.y * _ProjectionParams.x;
    //Instruction 51468
    //MUL
    t3.w = t22 * 0.500000;
    //Instruction 51469
    //ADD
    t3.xy = t3.zz + t3.xw;
    //Instruction 51470
    //MUL
    t3.xy = t3.xy * _ScreenParams.xy;
    //Instruction 51471
    //MUL
    t2.xy = t3.xy * vec2(0.250000, 0.250000);
    //Instruction 51472
    //MUL
    t0 = t1.yyyy * glstate_matrix_mvp[1];
    //Instruction 51473
    //MAD
    t0 = glstate_matrix_mvp[0] * t1.xxxx + t0;
    //Instruction 51474
    //MAD
    t0 = glstate_matrix_mvp[2] * t1.zzzz + t0;
    //Instruction 51475
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t0;
    //Instruction 51476
    //MUL
    t3.xyz = t1.yyy * _Object2World[1].xyz;
    //Instruction 51477
    //MAD
    t1.xyw = _Object2World[0].xyz * t1.xxx + t3.xyz;
    //Instruction 51478
    //MAD
    t1.xyz = _Object2World[2].xyz * t1.zzz + t1.xyw;
    //Instruction 51479
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t1.xyz;
    //Instruction 51480
    //MOV
    t1.x = _World2Object[0].x;
    //Instruction 51481
    //MOV
    t1.y = _World2Object[1].x;
    //Instruction 51482
    //MOV
    t1.z = _World2Object[2].x;
    //Instruction 51483
    //MOV
    t3.x = _World2Object[0].y;
    //Instruction 51484
    //MOV
    t3.y = _World2Object[1].y;
    //Instruction 51485
    //MOV
    t3.z = _World2Object[2].y;
    //Instruction 51486
    //MUL
    t3.xyz = t3.xyz * in_NORMAL0.yyy;
    //Instruction 51487
    //MAD
    t1.xyz = t1.xyz * in_NORMAL0.xxx + t3.xyz;
    //Instruction 51488
    //MOV
    t3.x = _World2Object[0].z;
    //Instruction 51489
    //MOV
    t3.y = _World2Object[1].z;
    //Instruction 51490
    //MOV
    t3.z = _World2Object[2].z;
    //Instruction 51491
    //MAD
    t1.xyz = t3.xyz * in_NORMAL0.zzz + t1.xyz;
    //Instruction 51492
    //DP3
    t22 = dot(t1.xyz, t1.xyz);
    //Instruction 51493
    //RSQ
    t22 = inversesqrt(t22);
    //Instruction 51494
    //MUL
    t1.xyz = vec3(t22) * t1.xyz;
    //Instruction 51495
    //MUL
    t16_0 = t1.yzzx * t1.xyzz;
    //Instruction 51496
    //DP4
    t16_6.x = dot(unity_SHBr, t16_0);
    //Instruction 51497
    //DP4
    t16_6.y = dot(unity_SHBg, t16_0);
    //Instruction 51498
    //DP4
    t16_6.z = dot(unity_SHBb, t16_0);
    //Instruction 51499
    //MUL
    t16_27 = t1.y * t1.y;
    //Instruction 51500
    //MAD
    t16_27 = t1.x * t1.x + (-t16_27);
    //Instruction 51501
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_27) + t16_6.xyz;
    //Instruction 51502
    //MOV
    vs_TEXCOORD0.xyz = t1.xyz;
    //Instruction 51503
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 51504
    //MOV
    vs_TEXCOORD3.xy = in_TEXCOORD0.xy;
    //Instruction 51505
    //MOV
    vs_TEXCOORD3.z = 0.0;
    //Instruction 51506
    //MOV
    t1.xy = in_TEXCOORD2.zw;
    //Instruction 51507
    //MOV
    t1.z = in_TEXCOORD1.w;
    //Instruction 51508
    //MOV
    vs_TEXCOORD4.xyz = t1.xyz;
    //Instruction 51509
    //MOV
    vs_TEXCOORD5.xyz = t2.xyz;
    //Instruction 51510
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51511
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
lowp vec3 t10_3;
mediump vec3 t16_4;
mediump vec3 t16_5;
void main()
{
    //Instruction 51289
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 51290
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 51291
    //MOV
    t1.x = t16_0.x;
    //Instruction 51292
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 51293
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 51294
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 51295
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 51296
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 51297
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 51298
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 51299
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 51300
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 51301
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 51302
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 51303
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 51304
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 51305
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 51306
    //MAD
    t10_3.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 51307
    //MOV
    SV_Target2.xyz = t10_3.xyz;
    //Instruction 51308
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 51309
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 51310
    //MOV
    t16_1.w = 1.0;
    //Instruction 51311
    //DP4
    t16_4.x = dot(unity_SHAr, t16_1);
    //Instruction 51312
    //DP4
    t16_4.y = dot(unity_SHAg, t16_1);
    //Instruction 51313
    //DP4
    t16_4.z = dot(unity_SHAb, t16_1);
    //Instruction 51314
    //ADD
    t16_4.xyz = t16_4.xyz + vs_TEXCOORD8.xyz;
    //Instruction 51315
    //MUL
    SV_Target3.xyz = t16_0.xyz * t16_4.xyz;
    //Instruction 51316
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 51317
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  mediump vec4 outEmission_2;
  lowp vec3 tmpvar_3;
  lowp vec4 tmpvar_4;
  tmpvar_4 = xlv_TEXCOORD2;
  tmpvar_3 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_5;
  mediump float maxBase_6;
  mediump vec4 blendColor_7;
  mediump vec4 diffuseColor_8;
  mediump vec2 projUV_9;
  mediump vec2 tmpvar_10;
  tmpvar_10 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_9.x = tmpvar_10.x;
  projUV_9.y = ((fract(tmpvar_10.y) * 0.0625) + unity_LODFade.y);
  lowp float x_11;
  x_11 = (texture2D (_DitherMaskLOD2D, projUV_9).w - 0.5);
  if ((x_11 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_8 = tmpvar_12;
  lowp vec4 tmpvar_13;
  tmpvar_13 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_7 = tmpvar_13;
  diffuseColor_8.xyz = mix (blendColor_7.xyz, diffuseColor_8.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_14;
  tmpvar_14 = mix (diffuseColor_8.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_6 = (max (diffuseColor_8.x, max (diffuseColor_8.y, diffuseColor_8.z)) / max (tmpvar_14.x, max (tmpvar_14.y, tmpvar_14.z)));
  maxBase_6 = ((maxBase_6 * 0.5) + 0.5);
  diffuseColor_8.xyz = clamp ((tmpvar_14 * maxBase_6), 0.0, 1.0);
  tmpvar_5 = (diffuseColor_8.xyz * tmpvar_4.xyz);
  mediump vec3 normalWorld_15;
  normalWorld_15 = tmpvar_3;
  mediump vec4 tmpvar_16;
  tmpvar_16.w = 1.0;
  tmpvar_16.xyz = normalWorld_15;
  mediump vec3 x1_17;
  x1_17.x = dot (unity_SHAr, tmpvar_16);
  x1_17.y = dot (unity_SHAg, tmpvar_16);
  x1_17.z = dot (unity_SHAb, tmpvar_16);
  mediump vec4 outDiffuseOcclusion_18;
  mediump vec4 outNormal_19;
  mediump vec4 emission_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = tmpvar_5;
  outDiffuseOcclusion_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = ((tmpvar_3 * 0.5) + 0.5);
  outNormal_19 = tmpvar_22;
  lowp vec4 tmpvar_23;
  tmpvar_23.w = 1.0;
  tmpvar_23.xyz = vec3(0.0, 0.0, 0.0);
  emission_20 = tmpvar_23;
  emission_20.xyz = (emission_20.xyz + (tmpvar_5 * (xlv_TEXCOORD8 + x1_17)));
  outDiffuse_1.xyz = outDiffuseOcclusion_18.xyz;
  outEmission_2.w = emission_20.w;
  outDiffuse_1.w = 1.0;
  outEmission_2.xyz = exp2(-(emission_20.xyz));
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_19;
  gl_FragData[3] = outEmission_2;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" "HDR_LIGHT_PREPASS_OFF" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 52315
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52316
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52317
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 52318
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52319
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 52320
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 52321
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 52322
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 52323
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52324
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52325
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 52326
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52327
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52328
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52329
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 52330
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52331
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 52332
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 52333
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 52334
    //IF
    if(tb25){
        //Instruction 52335
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 52336
        //IF
        if(tb25){
            //Instruction 52337
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52338
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52339
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52340
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 52341
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 52342
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52343
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52344
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52345
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52346
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52347
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 52348
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 52349
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52350
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52351
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 52352
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52353
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52354
            //FRC
            t2 = fract(t2);
            //Instruction 52355
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52356
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 52357
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52358
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52359
            //ADD
            t2 = t2 + t2;
            //Instruction 52360
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 52361
            //LT
            tb27 = t5.w<0.0;
            //Instruction 52362
            //MOV
            t5.y = (-t5.w);
            //Instruction 52363
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52364
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 52365
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 52366
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 52367
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 52368
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 52369
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 52370
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52371
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52372
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 52373
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 52374
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52375
            //MUL
            t27 = t27 * t28;
            //Instruction 52376
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 52377
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52378
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52379
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52380
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52381
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52382
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52383
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52384
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52385
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52386
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52387
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52388
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52389
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 52390
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52391
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 52392
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 52393
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52394
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52395
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52396
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52397
        //ELSE
        } else {
            //Instruction 52398
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52399
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52400
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52401
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52402
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52403
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52404
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52405
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52406
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52407
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52408
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52409
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52410
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52411
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52412
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52413
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52414
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52415
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52416
            //MOV
            t2.y = (-t2.w);
            //Instruction 52417
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52418
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52419
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52420
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52421
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 52422
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 52423
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52424
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52425
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52426
            //MUL
            t27 = t27 * t5.x;
            //Instruction 52427
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 52428
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52429
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52430
        //ENDIF
        }
        //Instruction 52431
    //ELSE
    } else {
        //Instruction 52432
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 52433
    //ENDIF
    }
    //Instruction 52434
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52435
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52436
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52437
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 52438
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 52439
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 52440
    //NE
    tb27 = t25!=0.0;
    //Instruction 52441
    //LOG
    t4.x = log2(t25);
    //Instruction 52442
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52443
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52444
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 52445
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52446
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52447
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52448
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52449
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52450
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52451
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52452
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52453
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52454
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 52455
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52456
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 52457
    //MUL
    t25 = t25 * t27;
    //Instruction 52458
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 52459
    //MOV
    t4.y = t3.y;
    //Instruction 52460
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 52461
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52462
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 52463
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52464
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 52465
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52466
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52467
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52468
    //MAD
    t3.xyz = glstate_matrix_mvp[3].xyw * in_POSITION0.www + t3.xyz;
    //Instruction 52469
    //MUL
    t4.xz = t3.xz * vec2(0.500000, 0.500000);
    //Instruction 52470
    //MUL
    t24 = t3.y * _ProjectionParams.x;
    //Instruction 52471
    //MUL
    t4.w = t24 * 0.500000;
    //Instruction 52472
    //ADD
    t4.xy = t4.zz + t4.xw;
    //Instruction 52473
    //MUL
    t4.xy = t4.xy * _ScreenParams.xy;
    //Instruction 52474
    //MUL
    t3.xy = t4.xy * vec2(0.250000, 0.250000);
    //Instruction 52475
    //MUL
    t2 = t0.yyyy * glstate_matrix_mvp[1];
    //Instruction 52476
    //MAD
    t2 = glstate_matrix_mvp[0] * t0.xxxx + t2;
    //Instruction 52477
    //MAD
    t2 = glstate_matrix_mvp[2] * t0.zzzz + t2;
    //Instruction 52478
    //MAD
    gl_Position = glstate_matrix_mvp[3] * in_POSITION0.wwww + t2;
    //Instruction 52479
    //MUL
    t4.xyz = t0.yyy * _Object2World[1].xyz;
    //Instruction 52480
    //MAD
    t0.xyw = _Object2World[0].xyz * t0.xxx + t4.xyz;
    //Instruction 52481
    //MAD
    t0.xyz = _Object2World[2].xyz * t0.zzz + t0.xyw;
    //Instruction 52482
    //MAD
    vs_TEXCOORD1.xyz = _Object2World[3].xyz * in_POSITION0.www + t0.xyz;
    //Instruction 52483
    //MOV
    t0.x = _World2Object[0].x;
    //Instruction 52484
    //MOV
    t0.y = _World2Object[1].x;
    //Instruction 52485
    //MOV
    t0.z = _World2Object[2].x;
    //Instruction 52486
    //MOV
    t4.x = _World2Object[0].y;
    //Instruction 52487
    //MOV
    t4.y = _World2Object[1].y;
    //Instruction 52488
    //MOV
    t4.z = _World2Object[2].y;
    //Instruction 52489
    //MUL
    t4.xyz = t4.xyz * in_NORMAL0.yyy;
    //Instruction 52490
    //MAD
    t0.xyz = t0.xyz * in_NORMAL0.xxx + t4.xyz;
    //Instruction 52491
    //MOV
    t4.x = _World2Object[0].z;
    //Instruction 52492
    //MOV
    t4.y = _World2Object[1].z;
    //Instruction 52493
    //MOV
    t4.z = _World2Object[2].z;
    //Instruction 52494
    //MAD
    t0.xyz = t4.xyz * in_NORMAL0.zzz + t0.xyz;
    //Instruction 52495
    //DP3
    t24 = dot(t0.xyz, t0.xyz);
    //Instruction 52496
    //RSQ
    t24 = inversesqrt(t24);
    //Instruction 52497
    //MUL
    t0.xyz = vec3(t24) * t0.xyz;
    //Instruction 52498
    //MUL
    t16_2 = t0.yzzx * t0.xyzz;
    //Instruction 52499
    //DP4
    t16_7.x = dot(unity_SHBr, t16_2);
    //Instruction 52500
    //DP4
    t16_7.y = dot(unity_SHBg, t16_2);
    //Instruction 52501
    //DP4
    t16_7.z = dot(unity_SHBb, t16_2);
    //Instruction 52502
    //MUL
    t16_31 = t0.y * t0.y;
    //Instruction 52503
    //MAD
    t16_31 = t0.x * t0.x + (-t16_31);
    //Instruction 52504
    //MAD
    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(t16_31) + t16_7.xyz;
    //Instruction 52505
    //MOV
    vs_TEXCOORD0.xyz = t0.xyz;
    //Instruction 52506
    //MOV
    vs_TEXCOORD2.w = _Color.w;
    //Instruction 52507
    //MOV
    t1.xy = in_TEXCOORD0.xy;
    //Instruction 52508
    //MOV
    vs_TEXCOORD3.xyz = t1.xyz;
    //Instruction 52509
    //MOV
    t0.xy = in_TEXCOORD2.zw;
    //Instruction 52510
    //MOV
    t0.z = in_TEXCOORD1.w;
    //Instruction 52511
    //MOV
    vs_TEXCOORD4.xyz = t0.xyz;
    //Instruction 52512
    //MOV
    vs_TEXCOORD5.xyz = t3.xyz;
    //Instruction 52513
    //MOV
    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52514
    //RET
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
uniform lowp sampler2D _DitherMaskLOD2D;
uniform lowp sampler2D _MainTex;
in mediump vec3 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
in mediump vec3 vs_TEXCOORD5;
in mediump vec3 vs_TEXCOORD8;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
layout(location = 3) out mediump vec4 SV_Target3;
mediump vec3 t16_0;
highp vec2 t1;
mediump vec4 t16_1;
lowp vec3 t10_1;
bool tb1;
lowp vec3 t10_2;
mediump vec3 t16_3;
lowp vec3 t10_4;
mediump vec3 t16_5;
mediump float t16_15;
void main()
{
    //Instruction 52276
    //DIV
    t16_0.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.zz;
    //Instruction 52277
    //FRC
    t16_5.x = fract(t16_0.y);
    //Instruction 52278
    //MOV
    t1.x = t16_0.x;
    //Instruction 52279
    //MAD
    t1.y = t16_5.x * 0.062500 + unity_LODFade.y;
    //Instruction 52280
    //SAMPLE
    t10_1.x = texture(_DitherMaskLOD2D, t1.xy).w;
    //Instruction 52281
    //ADD
    t16_1.x = t10_1.x + -0.500000;
    //Instruction 52282
    //LT
    tb1 = t16_1.x<0.0;
    //Instruction 52283
    //DISCARD
    if((int(tb1))!=0){discard;}
    //Instruction 52284
    //MOV
    t16_0.x = vs_TEXCOORD4.z;
    t16_0.x = clamp(t16_0.x, 0.0, 1.0);
    //Instruction 52285
    //SAMPLE
    t10_1.xyz = texture(_MainTex, vs_TEXCOORD3.xy).xyz;
    //Instruction 52286
    //SAMPLE
    t10_2.xyz = texture(_MainTex, vs_TEXCOORD4.xy).xyz;
    //Instruction 52287
    //ADD
    t16_5.xyz = t10_1.xyz + (-t10_2.xyz);
    //Instruction 52288
    //MAD
    t16_0.xyz = t16_0.xxx * t16_5.xyz + t10_2.xyz;
    //Instruction 52289
    //MAX
    t16_15 = max(t16_0.z, t16_0.y);
    //Instruction 52290
    //MAX
    t16_15 = max(t16_15, t16_0.x);
    //Instruction 52291
    //ADD
    t16_3.xyz = (-t16_0.xyz) + _HueVariation.xyz;
    //Instruction 52292
    //MAD
    t16_0.xyz = vs_TEXCOORD3.zzz * t16_3.xyz + t16_0.xyz;
    //Instruction 52293
    //MAX
    t16_3.x = max(t16_0.z, t16_0.y);
    //Instruction 52294
    //MAX
    t16_3.x = max(t16_0.x, t16_3.x);
    //Instruction 52295
    //DIV
    t16_15 = t16_15 / t16_3.x;
    //Instruction 52296
    //MAD
    t16_1.x = t16_15 * 0.500000 + 0.500000;
    //Instruction 52297
    //MUL
    t16_0.xyz = t16_0.xyz * t16_1.xxx;
    t16_0.xyz = clamp(t16_0.xyz, 0.0, 1.0);
    //Instruction 52298
    //MUL
    t16_0.xyz = t16_0.xyz * vs_TEXCOORD2.xyz;
    //Instruction 52299
    //MOV
    SV_Target0.xyz = t16_0.xyz;
    //Instruction 52300
    //MOV
    SV_Target0.w = 1.0;
    //Instruction 52301
    //MOV
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    //Instruction 52302
    //MAD
    t10_4.xyz = vs_TEXCOORD0.xyz * vec3(0.500000, 0.500000, 0.500000) + vec3(0.500000, 0.500000, 0.500000);
    //Instruction 52303
    //MOV
    SV_Target2.xyz = t10_4.xyz;
    //Instruction 52304
    //MOV
    SV_Target2.w = 1.0;
    //Instruction 52305
    //MOV
    t16_1.xyz = vs_TEXCOORD0.xyz;
    //Instruction 52306
    //MOV
    t16_1.w = 1.0;
    //Instruction 52307
    //DP4
    t16_3.x = dot(unity_SHAr, t16_1);
    //Instruction 52308
    //DP4
    t16_3.y = dot(unity_SHAg, t16_1);
    //Instruction 52309
    //DP4
    t16_3.z = dot(unity_SHAb, t16_1);
    //Instruction 52310
    //ADD
    t16_3.xyz = t16_3.xyz + vs_TEXCOORD8.xyz;
    //Instruction 52311
    //MUL
    t16_0.xyz = t16_0.xyz * t16_3.xyz;
    //Instruction 52312
    //EXP
    SV_Target3.xyz = exp2((-t16_0.xyz));
    //Instruction 52313
    //MOV
    SV_Target3.w = 1.0;
    //Instruction 52314
    //RET
    return;
}

#endif
"
}
SubProgram "gles " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES
#version 100

#ifdef VERTEX
attribute vec4 _glesVertex;
attribute vec4 _glesColor;
attribute vec3 _glesNormal;
attribute vec4 _glesMultiTexCoord0;
attribute vec4 _glesMultiTexCoord1;
attribute vec4 _glesMultiTexCoord2;
uniform highp vec4 _ProjectionParams;
uniform highp vec4 _ScreenParams;
uniform mediump vec4 unity_SHBr;
uniform mediump vec4 unity_SHBg;
uniform mediump vec4 unity_SHBb;
uniform mediump vec4 unity_SHC;
uniform highp mat4 glstate_matrix_mvp;
uniform highp mat4 _Object2World;
uniform highp mat4 _World2Object;
uniform mediump float _WindQuality;
uniform mediump float _WindEnabled;
uniform highp vec4 _ST_WindVector;
uniform highp vec4 _ST_WindGlobal;
uniform highp vec4 _ST_WindBranch;
uniform highp vec4 _ST_WindBranchTwitch;
uniform highp vec4 _ST_WindBranchWhip;
uniform highp vec4 _ST_WindBranchAnchor;
uniform highp vec4 _ST_WindBranchAdherences;
uniform highp vec4 _ST_WindTurbulences;
uniform highp vec4 _ST_WindAnimation;
uniform mediump vec4 _HueVariation;
uniform lowp vec4 _Color;
varying mediump vec3 xlv_TEXCOORD0;
varying highp vec3 xlv_TEXCOORD1;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying highp vec4 xlv_TEXCOORD7;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  highp vec4 tmpvar_1;
  tmpvar_1 = _glesVertex;
  highp vec4 tmpvar_2;
  tmpvar_2 = _glesMultiTexCoord0;
  lowp vec3 worldNormal_3;
  mediump vec3 tmpvar_4;
  mediump vec4 tmpvar_5;
  highp vec4 tmpvar_6;
  lowp vec4 tmpvar_7;
  mediump vec3 tmpvar_8;
  mediump vec3 tmpvar_9;
  tmpvar_8.xy = tmpvar_2.xy;
  tmpvar_7.w = _Color.w;
  tmpvar_7.xyz = (_Color.xyz * _glesColor.x);
  highp float tmpvar_10;
  highp float tmpvar_11;
  tmpvar_11 = _Object2World[3].x;
  highp float tmpvar_12;
  tmpvar_12 = _Object2World[3].y;
  tmpvar_10 = clamp (((
    fract(((tmpvar_11 + tmpvar_12) + _Object2World[3].z))
   + 
    ((fract((
      (_glesVertex.x + _glesNormal.y)
     + _glesNormal.x)) * 0.5) - 0.3)
  ) * _HueVariation.w), 0.0, 1.0);
  tmpvar_8.z = tmpvar_10;
  highp vec3 tmpvar_13;
  tmpvar_13.xy = _glesMultiTexCoord2.zw;
  tmpvar_13.z = _glesMultiTexCoord1.w;
  tmpvar_9 = tmpvar_13;
  highp vec4 tmpvar_14;
  tmpvar_14 = tmpvar_1;
  highp vec3 vRotatedBranchAnchor_15;
  highp vec3 vRotatedWindVector_16;
  highp vec3 FinalPosition_17;
  highp vec3 tmpvar_18;
  tmpvar_18 = tmpvar_1.xyz;
  FinalPosition_17 = tmpvar_18;
  mediump float tmpvar_19;
  tmpvar_19 = (_WindQuality * _WindEnabled);
  if ((tmpvar_19 > 0.0)) {
    highp mat3 tmpvar_20;
    tmpvar_20[0] = _World2Object[0].xyz;
    tmpvar_20[1] = _World2Object[1].xyz;
    tmpvar_20[2] = _World2Object[2].xyz;
    vRotatedWindVector_16 = normalize((tmpvar_20 * _ST_WindVector.xyz));
    highp mat3 tmpvar_21;
    tmpvar_21[0] = _World2Object[0].xyz;
    tmpvar_21[1] = _World2Object[1].xyz;
    tmpvar_21[2] = _World2Object[2].xyz;
    vRotatedBranchAnchor_15 = (normalize((tmpvar_21 * _ST_WindBranchAnchor.xyz)) * _ST_WindBranchAnchor.w);
  } else {
    vRotatedWindVector_16 = vec3(0.0, 0.0, 0.0);
    vRotatedBranchAnchor_15 = vec3(0.0, 0.0, 0.0);
  };
  if ((tmpvar_19 >= 3.0)) {
    highp vec3 vPos_22;
    vPos_22 = tmpvar_18;
    if ((tmpvar_19 == 5.0)) {
      highp vec3 vPos_23;
      vPos_23 = tmpvar_18;
      highp float fTime_24;
      highp float fAdherenceScale_25;
      highp vec3 vWindVector_26;
      vWindVector_26 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_24 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_27;
      highp float fOscillation_28;
      fOscillation_28 = 1.0;
      highp float fAmount_29;
      highp float fTarget_30;
      highp vec4 tmpvar_31;
      tmpvar_31.x = (fTime_24 + _glesMultiTexCoord0.w);
      tmpvar_31.y = ((fTime_24 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_31.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_24 + _glesMultiTexCoord0.w));
      tmpvar_31.w = ((fTime_24 + _glesMultiTexCoord0.w) + (1.0 - _glesMultiTexCoord0.z));
      highp vec4 tmpvar_32;
      tmpvar_32 = abs(((
        fract((tmpvar_31 + 0.5))
       * 2.0) - 1.0));
      vOscillations_27 = (((
        (tmpvar_32 * tmpvar_32)
       * 
        (3.0 - (2.0 * tmpvar_32))
      ) - 0.5) * 2.0);
      highp float tmpvar_33;
      tmpvar_33 = (vOscillations_27.y * vOscillations_27.z);
      fTarget_30 = 1.0;
      fAmount_29 = tmpvar_33;
      if ((tmpvar_33 < 0.0)) {
        fTarget_30 = -1.0;
        fAmount_29 = -(tmpvar_33);
      };
      fOscillation_28 = (((
        mix (mix (tmpvar_33, fTarget_30, fAmount_29), fTarget_30, fAmount_29)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_27.x * (1.0 - _ST_WindBranchTwitch.x)));
      fOscillation_28 = (fOscillation_28 * (1.0 + (vOscillations_27.w * _ST_WindBranchWhip.x)));
      vPos_23 = (_glesVertex.xyz + ((vWindVector_26 * fOscillation_28) * _ST_WindBranch.y));
      highp vec4 tmpvar_34;
      tmpvar_34.zw = vec2(0.0, 0.0);
      tmpvar_34.x = ((fTime_24 * 0.1) + _glesMultiTexCoord0.w);
      tmpvar_34.y = (((_ST_WindAnimation.x * _ST_WindTurbulences.x) * 0.1) + _glesMultiTexCoord0.w);
      highp vec4 tmpvar_35;
      highp vec4 tmpvar_36;
      tmpvar_36 = abs(((
        fract((tmpvar_34 + 0.5))
       * 2.0) - 1.0));
      tmpvar_35 = (((
        (tmpvar_36 * tmpvar_36)
       * 
        (3.0 - (2.0 * tmpvar_36))
      ) - 0.5) * 2.0);
      fAdherenceScale_25 = (1.0 - ((tmpvar_35.x * tmpvar_35.y) * (
        (tmpvar_35.x * tmpvar_35.y)
       * _ST_WindTurbulences.x)));
      fAdherenceScale_25 = (fAdherenceScale_25 + ((vOscillations_27.w * _ST_WindVector.w) * _ST_WindBranchWhip.x));
      vPos_23 = (vPos_23 + ((
        ((vRotatedBranchAnchor_15 - vPos_23) * _ST_WindBranchAdherences.y)
       * fAdherenceScale_25) * _glesMultiTexCoord0.z));
      vPos_22 = vPos_23;
    } else {
      highp vec3 vPos_37;
      vPos_37 = vPos_22;
      highp float fTime_38;
      highp vec3 vWindVector_39;
      vWindVector_39 = (((
        fract((_glesMultiTexCoord0.w / vec3(16.0, 1.0, 0.0625)))
       * 2.0) - 1.0) * _glesMultiTexCoord0.z);
      fTime_38 = (_ST_WindBranch.x + (tmpvar_11 + tmpvar_12));
      highp vec4 vOscillations_40;
      highp float fOscillation_41;
      fOscillation_41 = 1.0;
      highp float fAmount_42;
      highp float fTarget_43;
      highp vec4 tmpvar_44;
      tmpvar_44.w = 0.0;
      tmpvar_44.x = (fTime_38 + _glesMultiTexCoord0.w);
      tmpvar_44.y = ((fTime_38 * _ST_WindBranchTwitch.y) + _glesMultiTexCoord0.w);
      tmpvar_44.z = ((_ST_WindBranchTwitch.y * 0.5) * (fTime_38 + _glesMultiTexCoord0.w));
      highp vec4 tmpvar_45;
      tmpvar_45 = abs(((
        fract((tmpvar_44 + 0.5))
       * 2.0) - 1.0));
      vOscillations_40 = (((
        (tmpvar_45 * tmpvar_45)
       * 
        (3.0 - (2.0 * tmpvar_45))
      ) - 0.5) * 2.0);
      highp float tmpvar_46;
      tmpvar_46 = (vOscillations_40.y * vOscillations_40.z);
      fTarget_43 = 1.0;
      fAmount_42 = tmpvar_46;
      if ((tmpvar_46 < 0.0)) {
        fTarget_43 = -1.0;
        fAmount_42 = -(tmpvar_46);
      };
      fOscillation_41 = (((
        mix (mix (tmpvar_46, fTarget_43, fAmount_42), fTarget_43, fAmount_42)
       * _ST_WindBranchTwitch.x) * (1.0 - _ST_WindVector.w)) + (vOscillations_40.x * (1.0 - _ST_WindBranchTwitch.x)));
      vPos_37 = (vPos_22 + ((vWindVector_39 * fOscillation_41) * _ST_WindBranch.y));
      vPos_22 = vPos_37;
    };
    FinalPosition_17 = vPos_22;
  };
  if ((tmpvar_19 > 0.0)) {
    highp vec3 vPos_47;
    vPos_47 = FinalPosition_17;
    highp float fMoveAmount_48;
    highp float fAdjust_49;
    highp float fLength_50;
    fLength_50 = sqrt(dot (FinalPosition_17, FinalPosition_17));
    highp float tmpvar_51;
    tmpvar_51 = (max ((FinalPosition_17.y - 
      ((1.0/(_ST_WindGlobal.z)) * 0.25)
    ), 0.0) * _ST_WindGlobal.z);
    fAdjust_49 = tmpvar_51;
    if ((tmpvar_51 != 0.0)) {
      fAdjust_49 = pow (tmpvar_51, _ST_WindGlobal.w);
    };
    highp vec4 tmpvar_52;
    tmpvar_52.zw = vec2(0.0, 0.0);
    tmpvar_52.x = (tmpvar_11 + _ST_WindGlobal.x);
    tmpvar_52.y = (tmpvar_12 + (_ST_WindGlobal.x * 0.8));
    highp vec4 tmpvar_53;
    highp vec4 tmpvar_54;
    tmpvar_54 = abs(((
      fract((tmpvar_52 + 0.5))
     * 2.0) - 1.0));
    tmpvar_53 = (((
      (tmpvar_54 * tmpvar_54)
     * 
      (3.0 - (2.0 * tmpvar_54))
    ) - 0.5) * 2.0);
    fMoveAmount_48 = ((_ST_WindGlobal.y * (tmpvar_53.x + 
      (tmpvar_53.y * tmpvar_53.y)
    )) + (_ST_WindBranchAdherences.x / _ST_WindGlobal.z));
    fMoveAmount_48 = (fMoveAmount_48 * fAdjust_49);
    vPos_47.xz = (FinalPosition_17.xz + (vRotatedWindVector_16.xz * fMoveAmount_48));
    vPos_47 = (normalize(vPos_47) * fLength_50);
    FinalPosition_17 = vPos_47;
  };
  tmpvar_14.xyz = FinalPosition_17;
  highp vec4 hPos_55;
  hPos_55 = (glstate_matrix_mvp * tmpvar_14);
  mediump vec3 screenPos_56;
  highp vec4 o_57;
  highp vec4 tmpvar_58;
  tmpvar_58 = (hPos_55 * 0.5);
  highp vec2 tmpvar_59;
  tmpvar_59.x = tmpvar_58.x;
  tmpvar_59.y = (tmpvar_58.y * _ProjectionParams.x);
  o_57.xy = (tmpvar_59 + tmpvar_58.w);
  o_57.zw = hPos_55.zw;
  highp vec3 tmpvar_60;
  tmpvar_60 = o_57.xyw;
  screenPos_56 = tmpvar_60;
  screenPos_56.xy = (screenPos_56.xy * (_ScreenParams.xy * 0.25));
  tmpvar_5 = tmpvar_7;
  highp vec4 v_61;
  v_61.x = _World2Object[0].x;
  v_61.y = _World2Object[1].x;
  v_61.z = _World2Object[2].x;
  v_61.w = _World2Object[3].x;
  highp vec4 v_62;
  v_62.x = _World2Object[0].y;
  v_62.y = _World2Object[1].y;
  v_62.z = _World2Object[2].y;
  v_62.w = _World2Object[3].y;
  highp vec4 v_63;
  v_63.x = _World2Object[0].z;
  v_63.y = _World2Object[1].z;
  v_63.z = _World2Object[2].z;
  v_63.w = _World2Object[3].z;
  highp vec3 tmpvar_64;
  tmpvar_64 = normalize(((
    (v_61.xyz * _glesNormal.x)
   + 
    (v_62.xyz * _glesNormal.y)
  ) + (v_63.xyz * _glesNormal.z)));
  worldNormal_3 = tmpvar_64;
  tmpvar_4 = worldNormal_3;
  tmpvar_6.zw = vec2(0.0, 0.0);
  tmpvar_6.xy = vec2(0.0, 0.0);
  lowp vec4 tmpvar_65;
  tmpvar_65.w = 1.0;
  tmpvar_65.xyz = worldNormal_3;
  mediump vec4 normal_66;
  normal_66 = tmpvar_65;
  mediump vec3 x2_67;
  mediump vec4 tmpvar_68;
  tmpvar_68 = (normal_66.xyzz * normal_66.yzzx);
  x2_67.x = dot (unity_SHBr, tmpvar_68);
  x2_67.y = dot (unity_SHBg, tmpvar_68);
  x2_67.z = dot (unity_SHBb, tmpvar_68);
  gl_Position = (glstate_matrix_mvp * tmpvar_14);
  xlv_TEXCOORD0 = tmpvar_4;
  xlv_TEXCOORD1 = (_Object2World * tmpvar_14).xyz;
  xlv_TEXCOORD2 = tmpvar_5;
  xlv_TEXCOORD3 = tmpvar_8;
  xlv_TEXCOORD4 = tmpvar_9;
  xlv_TEXCOORD5 = screenPos_56;
  xlv_TEXCOORD7 = tmpvar_6;
  xlv_TEXCOORD8 = (x2_67 + (unity_SHC.xyz * (
    (normal_66.x * normal_66.x)
   - 
    (normal_66.y * normal_66.y)
  )));
}


#endif
#ifdef FRAGMENT
#extension GL_EXT_shader_texture_lod : enable
#extension GL_EXT_draw_buffers : enable
uniform mediump vec4 unity_SHAr;
uniform mediump vec4 unity_SHAg;
uniform mediump vec4 unity_SHAb;
uniform highp vec4 unity_LODFade;
uniform sampler2D _DitherMaskLOD2D;
uniform sampler2D _MainTex;
uniform mediump vec4 _HueVariation;
varying mediump vec3 xlv_TEXCOORD0;
varying mediump vec4 xlv_TEXCOORD2;
varying mediump vec3 xlv_TEXCOORD3;
varying mediump vec3 xlv_TEXCOORD4;
varying mediump vec3 xlv_TEXCOORD5;
varying mediump vec3 xlv_TEXCOORD8;
void main ()
{
  mediump vec4 outDiffuse_1;
  lowp vec3 tmpvar_2;
  lowp vec4 tmpvar_3;
  tmpvar_3 = xlv_TEXCOORD2;
  tmpvar_2 = xlv_TEXCOORD0;
  lowp vec3 tmpvar_4;
  mediump float maxBase_5;
  mediump vec4 blendColor_6;
  mediump vec4 diffuseColor_7;
  mediump vec2 projUV_8;
  mediump vec2 tmpvar_9;
  tmpvar_9 = (xlv_TEXCOORD5.xy / xlv_TEXCOORD5.z);
  projUV_8.x = tmpvar_9.x;
  projUV_8.y = ((fract(tmpvar_9.y) * 0.0625) + unity_LODFade.y);
  lowp float x_10;
  x_10 = (texture2D (_DitherMaskLOD2D, projUV_8).w - 0.5);
  if ((x_10 < 0.0)) {
    discard;
  };
  lowp vec4 tmpvar_11;
  tmpvar_11 = texture2D (_MainTex, xlv_TEXCOORD3.xy);
  diffuseColor_7 = tmpvar_11;
  lowp vec4 tmpvar_12;
  tmpvar_12 = texture2D (_MainTex, xlv_TEXCOORD4.xy);
  blendColor_6 = tmpvar_12;
  diffuseColor_7.xyz = mix (blendColor_6.xyz, diffuseColor_7.xyz, vec3(clamp (xlv_TEXCOORD4.z, 0.0, 1.0)));
  mediump vec3 tmpvar_13;
  tmpvar_13 = mix (diffuseColor_7.xyz, _HueVariation.xyz, xlv_TEXCOORD3.zzz);
  maxBase_5 = (max (diffuseColor_7.x, max (diffuseColor_7.y, diffuseColor_7.z)) / max (tmpvar_13.x, max (tmpvar_13.y, tmpvar_13.z)));
  maxBase_5 = ((maxBase_5 * 0.5) + 0.5);
  diffuseColor_7.xyz = clamp ((tmpvar_13 * maxBase_5), 0.0, 1.0);
  tmpvar_4 = (diffuseColor_7.xyz * tmpvar_3.xyz);
  mediump vec3 normalWorld_14;
  normalWorld_14 = tmpvar_2;
  mediump vec4 tmpvar_15;
  tmpvar_15.w = 1.0;
  tmpvar_15.xyz = normalWorld_14;
  mediump vec3 x1_16;
  x1_16.x = dot (unity_SHAr, tmpvar_15);
  x1_16.y = dot (unity_SHAg, tmpvar_15);
  x1_16.z = dot (unity_SHAb, tmpvar_15);
  mediump vec4 outDiffuseOcclusion_17;
  mediump vec4 outNormal_18;
  mediump vec4 emission_19;
  lowp vec4 tmpvar_20;
  tmpvar_20.w = 1.0;
  tmpvar_20.xyz = tmpvar_4;
  outDiffuseOcclusion_17 = tmpvar_20;
  lowp vec4 tmpvar_21;
  tmpvar_21.w = 1.0;
  tmpvar_21.xyz = ((tmpvar_2 * 0.5) + 0.5);
  outNormal_18 = tmpvar_21;
  lowp vec4 tmpvar_22;
  tmpvar_22.w = 1.0;
  tmpvar_22.xyz = vec3(0.0, 0.0, 0.0);
  emission_19 = tmpvar_22;
  emission_19.xyz = (emission_19.xyz + (tmpvar_4 * (xlv_TEXCOORD8 + x1_16)));
  outDiffuse_1.xyz = outDiffuseOcclusion_17.xyz;
  outDiffuse_1.w = 1.0;
  gl_FragData[0] = outDiffuse_1;
  gl_FragData[1] = vec4(0.0, 0.0, 0.0, 0.0);
  gl_FragData[2] = outNormal_18;
  gl_FragData[3] = emission_19;
}


#endif
"
}
SubProgram "gles3 " {
Keywords { "LIGHTMAP_OFF" "DIRLIGHTMAP_OFF" "DYNAMICLIGHTMAP_OFF" "UNITY_HDR_ON" "LOD_FADE_CROSSFADE" "EFFECT_HUE_VARIATION" "GEOM_TYPE_BRANCH_BLEND" }
"!!GLES3
#ifdef VERTEX
#version 300 es
precision highp float;
uniform 	vec4 _Time;
uniform 	vec4 _SinTime;
uniform 	vec4 _CosTime;
uniform 	vec4 unity_DeltaTime;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 unity_CameraWorldClipPlanes[6];
uniform 	mat4 unity_CameraProjection;
uniform 	mat4 unity_CameraInvProjection;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 _LightPositionRange;
uniform 	vec4 unity_4LightPosX0;
uniform 	vec4 unity_4LightPosY0;
uniform 	vec4 unity_4LightPosZ0;
uniform 	mediump vec4 unity_4LightAtten0;
uniform 	mediump vec4 unity_LightColor[8];
uniform 	vec4 unity_LightPosition[8];
uniform 	mediump vec4 unity_LightAtten[8];
uniform 	vec4 unity_SpotDirection[8];
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	mediump vec3 unity_LightColor0;
uniform 	mediump vec3 unity_LightColor1;
uniform 	mediump vec3 unity_LightColor2;
uniform 	mediump vec3 unity_LightColor3;
uniform 	vec4 unity_ShadowSplitSpheres[4];
uniform 	vec4 unity_ShadowSplitSqRadii;
uniform 	vec4 unity_LightShadowBias;
uniform 	vec4 _LightSplitsNear;
uniform 	vec4 _LightSplitsFar;
uniform 	mat4 unity_World2Shadow[4];
uniform 	mediump vec4 _LightShadowData;
uniform 	vec4 unity_ShadowFadeCenterAndType;
uniform 	mat4 glstate_matrix_mvp;
uniform 	mat4 glstate_matrix_modelview0;
uniform 	mat4 glstate_matrix_invtrans_modelview0;
uniform 	mat4 _Object2World;
uniform 	mat4 _World2Object;
uniform 	vec4 unity_LODFade;
uniform 	mat4 glstate_matrix_transpose_modelview0;
uniform 	mat4 glstate_matrix_projection;
uniform 	lowp vec4 glstate_lightmodel_ambient;
uniform 	mat4 unity_MatrixV;
uniform 	mat4 unity_MatrixVP;
uniform 	lowp vec4 unity_AmbientSky;
uniform 	lowp vec4 unity_AmbientEquator;
uniform 	lowp vec4 unity_AmbientGround;
uniform 	lowp vec4 unity_FogColor;
uniform 	vec4 unity_FogParams;
uniform 	vec4 unity_LightmapST;
uniform 	vec4 unity_DynamicLightmapST;
uniform 	vec4 unity_SpecCube0_BoxMax;
uniform 	vec4 unity_SpecCube0_BoxMin;
uniform 	vec4 unity_SpecCube0_ProbePosition;
uniform 	mediump vec4 unity_SpecCube0_HDR;
uniform 	vec4 unity_SpecCube1_BoxMax;
uniform 	vec4 unity_SpecCube1_BoxMin;
uniform 	vec4 unity_SpecCube1_ProbePosition;
uniform 	mediump vec4 unity_SpecCube1_HDR;
uniform 	lowp vec4 unity_ColorSpaceGrey;
uniform 	lowp vec4 unity_ColorSpaceDouble;
uniform 	mediump vec4 unity_ColorSpaceDielectricSpec;
uniform 	mediump vec4 unity_ColorSpaceLuminance;
uniform 	mediump vec4 unity_Lightmap_HDR;
uniform 	mediump vec4 unity_DynamicLightmap_HDR;
uniform 	lowp vec4 _LightColor0;
uniform 	lowp vec4 _SpecColor;
uniform 	mediump vec4 unity_LightGammaCorrectionConsts;
uniform 	mediump float _WindQuality;
uniform 	mediump float _WindEnabled;
uniform 	vec4 _ST_WindVector;
uniform 	vec4 _ST_WindGlobal;
uniform 	vec4 _ST_WindBranch;
uniform 	vec4 _ST_WindBranchTwitch;
uniform 	vec4 _ST_WindBranchWhip;
uniform 	vec4 _ST_WindBranchAnchor;
uniform 	vec4 _ST_WindBranchAdherences;
uniform 	vec4 _ST_WindTurbulences;
uniform 	vec4 _ST_WindLeaf1Ripple;
uniform 	vec4 _ST_WindLeaf1Tumble;
uniform 	vec4 _ST_WindLeaf1Twitch;
uniform 	vec4 _ST_WindLeaf2Ripple;
uniform 	vec4 _ST_WindLeaf2Tumble;
uniform 	vec4 _ST_WindLeaf2Twitch;
uniform 	vec4 _ST_WindFrondRipple;
uniform 	vec4 _ST_WindAnimation;
uniform 	mediump vec4 _HueVariation;
uniform 	lowp vec4 _Color;
uniform 	mediump float _Shininess;
uniform 	lowp vec4 unity_Ambient;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in mediump vec4 in_COLOR0;
out mediump vec3 vs_TEXCOORD0;
out highp vec3 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD7;
out mediump vec3 vs_TEXCOORD8;
highp vec4 t0;
bool tb0;
highp vec3 t1;
highp vec4 t2;
mediump vec4 t16_2;
highp vec3 t3;
highp vec4 t4;
highp vec4 t5;
highp vec3 t6;
mediump vec3 t16_7;
highp vec2 t8;
bool tb8;
highp vec2 t16;
highp vec2 t20;
highp vec2 t21;
highp float t24;
highp float t25;
bool tb25;
highp float t27;
bool tb27;
highp float t28;
mediump float t16_31;
void main()
{
    //Instruction 52550
    //MUL
    vs_TEXCOORD2.xyz = in_COLOR0.xxx * _Color.xyz;
    //Instruction 52551
    //ADD
    t0.x = _Object2World[3].y + _Object2World[3].x;
    //Instruction 52552
    //ADD
    t8.x = t0.x + _Object2World[3].z;
    //Instruction 52553
    //ADD
    t16.x = in_POSITION0.x + in_NORMAL0.y;
    //Instruction 52554
    //ADD
    t8.y = t16.x + in_NORMAL0.x;
    //Instruction 52555
    //FRC
    t8.xy = fract(t8.xy);
    //Instruction 52556
    //MAD
    t8.x = t8.y * 0.500000 + t8.x;
    //Instruction 52557
    //ADD
    t8.x = t8.x + -0.300000;
    //Instruction 52558
    //MUL
    t1.z = t8.x * _HueVariation.w;
    t1.z = clamp(t1.z, 0.0, 1.0);
    //Instruction 52559
    //MUL
    t16_2.x = _WindEnabled * _WindQuality;
    //Instruction 52560
    //LT
    tb8 = 0.0<t16_2.x;
    //Instruction 52561
    //MUL
    t3.xyz = _World2Object[1].xyz * _ST_WindVector.yyy;
    //Instruction 52562
    //MAD
    t3.xyz = _World2Object[0].xyz * _ST_WindVector.xxx + t3.xyz;
    //Instruction 52563
    //MAD
    t3.xyz = _World2Object[2].xyz * _ST_WindVector.zzz + t3.xyz;
    //Instruction 52564
    //DP3
    t16.x = dot(t3.xyz, t3.xyz);
    //Instruction 52565
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52566
    //MUL
    t16.xy = t16.xx * t3.xz;
    //Instruction 52567
    //AND
    t16.xy = mix(vec2(0.0, 0.0), t16.xy, bvec2(tb8));
    //Instruction 52568
    //GE
    tb25 = t16_2.x>=3.000000;
    //Instruction 52569
    //IF
    if(tb25){
        //Instruction 52570
        //EQ
        tb25 = t16_2.x==5.000000;
        //Instruction 52571
        //IF
        if(tb25){
            //Instruction 52572
            //MUL
            t3.xyz = _World2Object[1].xyz * _ST_WindBranchAnchor.yyy;
            //Instruction 52573
            //MAD
            t3.xyz = _World2Object[0].xyz * _ST_WindBranchAnchor.xxx + t3.xyz;
            //Instruction 52574
            //MAD
            t3.xyz = _World2Object[2].xyz * _ST_WindBranchAnchor.zzz + t3.xyz;
            //Instruction 52575
            //DP3
            t25 = dot(t3.xyz, t3.xyz);
            //Instruction 52576
            //RSQ
            t25 = inversesqrt(t25);
            //Instruction 52577
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52578
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52579
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52580
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52581
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52582
            //ADD
            t25 = t0.x + _ST_WindBranch.x;
            //Instruction 52583
            //ADD
            t2.x = t25 + in_TEXCOORD0.w;
            //Instruction 52584
            //MAD
            t2.y = t25 * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52585
            //MUL
            t27 = t2.x * _ST_WindBranchTwitch.y;
            //Instruction 52586
            //MUL
            t2.z = t27 * 0.500000;
            //Instruction 52587
            //ADD
            t2.w = t2.x + (-in_TEXCOORD0.z);
            //Instruction 52588
            //ADD
            t2 = t2 + vec4(0.500000, 0.500000, 0.500000, 1.500000);
            //Instruction 52589
            //FRC
            t2 = fract(t2);
            //Instruction 52590
            //MAD
            t2 = t2 * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(-1.0, -1.0, -1.0, -1.0);
            //Instruction 52591
            //MUL
            t5 = abs(t2) * abs(t2);
            //Instruction 52592
            //MAD
            t2 = -abs(t2) * vec4(2.000000, 2.000000, 2.000000, 2.000000) + vec4(3.000000, 3.000000, 3.000000, 3.000000);
            //Instruction 52593
            //MAD
            t2 = t5 * t2 + vec4(-0.500000, -0.500000, -0.500000, -0.500000);
            //Instruction 52594
            //ADD
            t2 = t2 + t2;
            //Instruction 52595
            //MUL
            t5.w = t2.z * t2.y;
            //Instruction 52596
            //LT
            tb27 = t5.w<0.0;
            //Instruction 52597
            //MOV
            t5.y = (-t5.w);
            //Instruction 52598
            //MOV
            t5.xz = vec2(-1.0, 1.0);
            //Instruction 52599
            //MOVC
            t5.xy = (bool(tb27)) ? t5.xy : t5.zw;
            //Instruction 52600
            //MAD
            t27 = (-t2.y) * t2.z + t5.x;
            //Instruction 52601
            //MAD
            t27 = t5.y * t27 + t5.w;
            //Instruction 52602
            //ADD
            t28 = (-t27) + t5.x;
            //Instruction 52603
            //MAD
            t27 = t5.y * t28 + t27;
            //Instruction 52604
            //MUL
            t27 = t27 * _ST_WindBranchTwitch.x;
            //Instruction 52605
            //ADD
            t28 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52606
            //ADD
            t5.x = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52607
            //MUL
            t5.x = t2.x * t5.x;
            //Instruction 52608
            //MAD
            t27 = t27 * t28 + t5.x;
            //Instruction 52609
            //MAD
            t28 = t2.w * _ST_WindBranchWhip.x + 1.0;
            //Instruction 52610
            //MUL
            t27 = t27 * t28;
            //Instruction 52611
            //MUL
            t4.xyz = vec3(t27) * t4.xyz;
            //Instruction 52612
            //MAD
            t4.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52613
            //MAD
            t5.x = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52614
            //MUL
            t25 = _ST_WindTurbulences.x * _ST_WindAnimation.x;
            //Instruction 52615
            //MAD
            t5.y = t25 * 0.100000 + in_TEXCOORD0.w;
            //Instruction 52616
            //ADD
            t5.xy = t5.xy + vec2(0.500000, 0.500000);
            //Instruction 52617
            //FRC
            t5.xy = fract(t5.xy);
            //Instruction 52618
            //MAD
            t5.xy = t5.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
            //Instruction 52619
            //MUL
            t21.xy = abs(t5.xy) * abs(t5.xy);
            //Instruction 52620
            //MAD
            t5.xy = -abs(t5.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
            //Instruction 52621
            //MAD
            t5.xy = t21.xy * t5.xy + vec2(-0.500000, -0.500000);
            //Instruction 52622
            //ADD
            t5.xy = t5.xy + t5.xy;
            //Instruction 52623
            //MUL
            t5.xy = t5.xy * t5.xy;
            //Instruction 52624
            //MUL
            t25 = t5.x * t5.y;
            //Instruction 52625
            //MAD
            t25 = (-t25) * _ST_WindTurbulences.x + 1.0;
            //Instruction 52626
            //MUL
            t27 = t2.w * _ST_WindVector.w;
            //Instruction 52627
            //MAD
            t25 = t27 * _ST_WindBranchWhip.x + t25;
            //Instruction 52628
            //MAD
            t3.xyz = t3.xyz * _ST_WindBranchAnchor.www + (-t4.xyz);
            //Instruction 52629
            //MUL
            t3.xyz = t3.xyz * _ST_WindBranchAdherences.yyy;
            //Instruction 52630
            //MUL
            t3.xyz = vec3(t25) * t3.xyz;
            //Instruction 52631
            //MAD
            t3.xyz = t3.xyz * in_TEXCOORD0.zzz + t4.xyz;
            //Instruction 52632
        //ELSE
        } else {
            //Instruction 52633
            //MUL
            t4.xyz = in_TEXCOORD0.www * vec3(0.062500, 1.0, 16.000000);
            //Instruction 52634
            //FRC
            t4.xyz = fract(t4.xyz);
            //Instruction 52635
            //MAD
            t4.xyz = t4.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52636
            //MUL
            t4.xyz = t4.xyz * in_TEXCOORD0.zzz;
            //Instruction 52637
            //ADD
            t0.x = t0.x + _ST_WindBranch.x;
            //Instruction 52638
            //ADD
            t5.x = t0.x + in_TEXCOORD0.w;
            //Instruction 52639
            //MAD
            t5.y = t0.x * _ST_WindBranchTwitch.y + in_TEXCOORD0.w;
            //Instruction 52640
            //MUL
            t0.x = t5.x * _ST_WindBranchTwitch.y;
            //Instruction 52641
            //MUL
            t5.z = t0.x * 0.500000;
            //Instruction 52642
            //ADD
            t5.xyz = t5.xyz + vec3(0.500000, 0.500000, 0.500000);
            //Instruction 52643
            //FRC
            t5.xyz = fract(t5.xyz);
            //Instruction 52644
            //MAD
            t5.xyz = t5.xyz * vec3(2.000000, 2.000000, 2.000000) + vec3(-1.0, -1.0, -1.0);
            //Instruction 52645
            //MUL
            t6.xyz = abs(t5.xyz) * abs(t5.xyz);
            //Instruction 52646
            //MAD
            t5.xyz = -abs(t5.xyz) * vec3(2.000000, 2.000000, 2.000000) + vec3(3.000000, 3.000000, 3.000000);
            //Instruction 52647
            //MAD
            t5.xyz = t6.xyz * t5.xyz + vec3(-0.500000, -0.500000, -0.500000);
            //Instruction 52648
            //ADD
            t5.xyz = t5.xyz + t5.xyz;
            //Instruction 52649
            //MUL
            t2.w = t5.z * t5.y;
            //Instruction 52650
            //LT
            tb0 = t2.w<0.0;
            //Instruction 52651
            //MOV
            t2.y = (-t2.w);
            //Instruction 52652
            //MOV
            t2.xz = vec2(-1.0, 1.0);
            //Instruction 52653
            //MOVC
            t6.xy = (bool(tb0)) ? t2.xy : t2.zw;
            //Instruction 52654
            //MAD
            t0.x = (-t5.y) * t5.z + t6.x;
            //Instruction 52655
            //MAD
            t0.x = t6.y * t0.x + t2.w;
            //Instruction 52656
            //ADD
            t25 = (-t0.x) + t6.x;
            //Instruction 52657
            //MAD
            t0.x = t6.y * t25 + t0.x;
            //Instruction 52658
            //MUL
            t0.x = t0.x * _ST_WindBranchTwitch.x;
            //Instruction 52659
            //ADD
            t25 = (-_ST_WindVector.w) + 1.0;
            //Instruction 52660
            //ADD
            t27 = (-_ST_WindBranchTwitch.x) + 1.0;
            //Instruction 52661
            //MUL
            t27 = t27 * t5.x;
            //Instruction 52662
            //MAD
            t0.x = t0.x * t25 + t27;
            //Instruction 52663
            //MUL
            t4.xyz = t0.xxx * t4.xyz;
            //Instruction 52664
            //MAD
            t3.xyz = t4.xyz * _ST_WindBranch.yyy + in_POSITION0.xyz;
            //Instruction 52665
        //ENDIF
        }
        //Instruction 52666
    //ELSE
    } else {
        //Instruction 52667
        //MOV
        t3.xyz = in_POSITION0.xyz;
        //Instruction 52668
    //ENDIF
    }
    //Instruction 52669
    //DP3
    t0.x = dot(t3.xyz, t3.xyz);
    //Instruction 52670
    //SQRT
    t0.x = sqrt(t0.x);
    //Instruction 52671
    //DIV
    t25 = float(1.0) / _ST_WindGlobal.z;
    //Instruction 52672
    //MAD
    t25 = (-t25) * 0.250000 + t3.y;
    //Instruction 52673
    //MAX
    t25 = max(t25, 0.0);
    //Instruction 52674
    //MUL
    t25 = t25 * _ST_WindGlobal.z;
    //Instruction 52675
    //NE
    tb27 = t25!=0.0;
    //Instruction 52676
    //LOG
    t4.x = log2(t25);
    //Instruction 52677
    //MUL
    t4.x = t4.x * _ST_WindGlobal.w;
    //Instruction 52678
    //EXP
    t4.x = exp2(t4.x);
    //Instruction 52679
    //MOVC
    t25 = (tb27) ? t4.x : t25;
    //Instruction 52680
    //ADD
    t4.x = _Object2World[3].x + _ST_WindGlobal.x;
    //Instruction 52681
    //MAD
    t4.y = _ST_WindGlobal.x * 0.800000 + _Object2World[3].y;
    //Instruction 52682
    //ADD
    t4.xy = t4.xy + vec2(0.500000, 0.500000);
    //Instruction 52683
    //FRC
    t4.xy = fract(t4.xy);
    //Instruction 52684
    //MAD
    t4.xy = t4.xy * vec2(2.000000, 2.000000) + vec2(-1.0, -1.0);
    //Instruction 52685
    //MUL
    t20.xy = abs(t4.xy) * abs(t4.xy);
    //Instruction 52686
    //MAD
    t4.xy = -abs(t4.xy) * vec2(2.000000, 2.000000) + vec2(3.000000, 3.000000);
    //Instruction 52687
    //MAD
    t4.xy = t20.xy * t4.xy + vec2(-0.500000, -0.500000);
    //Instruction 52688
    //ADD
    t4.xy = t4.xy + t4.xy;
    //Instruction 52689
    //MAD
    t27 = t4.y * t4.y + t4.x;
    //Instruction 52690
    //DIV
    t4.x = _ST_WindBranchAdherences.x / _ST_WindGlobal.z;
    //Instruction 52691
    //MAD
    t27 = _ST_WindGlobal.y * t27 + t4.x;
    //Instruction 52692
    //MUL
    t25 = t25 * t27;
    //Instruction 52693
    //MAD
    t4.xz = t16.xy * vec2(t25) + t3.xz;
    //Instruction 52694
    //MOV
    t4.y = t3.y;
    //Instruction 52695
    //DP3
    t16.x = dot(t4.xyz, t4.xyz);
    //Instruction 52696
    //RSQ
    t16.x = inversesqrt(t16.x);
    //Instruction 52697
    //MUL
    t4.xyz = t16.xxx * t4.xyz;
    //Instruction 52698
    //MUL
    t0.xzw = t0.xxx * t4.xyz;
    //Instruction 52699
    //MOVC
    t0.xyz = (bool(tb8)) ? t0.xzw : t3.xyz;
    //Instruction 52700
    //MUL
    t3.xyz = t0.yyy * glstate_matrix_mvp[1].xyw;
    //Instruction 52701
    //MAD
    t3.xyz = glstate_matrix_mvp[0].xyw * t0.xxx + t3.xyz;
    //Instruction 52702
    //MAD
    t3.xyz = glstate_matrix_mvp[2].xyw * t0.zzz + t3.xyz;
    //Instruction 52703
    //MAD
    t3.xyz = glstate_ma